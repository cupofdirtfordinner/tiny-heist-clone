// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["openfl"] = $hx_exports["openfl"] || {};
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "164", company : "Terry Cavanagh", file : "tinyheist", fps : 30, name : "Tiny Heist", orientation : "landscape", packageName : "com.distractionware.7drl", version : "1.0.0", windows : [{ allowHighDPI : false, antialiasing : 0, background : 0, borderless : false, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 720, hidden : null, maximized : null, minimized : null, parameters : "{}", resizable : true, stencilBuffer : true, title : "Tiny Heist", vsync : true, width : 1152, x : null, y : null}]};
};
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var library = new DefaultAssetLibrary();
	lime_utils_Assets.registerLibrary("default",library);
	ApplicationMain.preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.create(ApplicationMain.config);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.addLibrary(library);
	ApplicationMain.preloader.load();
	app.exec();
};
ApplicationMain.embed = $hx_exports["lime"]["embed"] = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") {
		htmlElement = window.document.getElementById(js_Boot.__cast(element , String));
	} else if(element == null) {
		htmlElement = window.document.createElement("div");
	} else {
		htmlElement = element;
	}
	var color = null;
	if(background != null && background != "") {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) {
			color = Std.parseInt(background);
		} else {
			color = Std.parseInt("0x" + background);
		}
	}
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
ApplicationMain._embed = $hx_exports["openfl"]["embed"] = function(element,width,height,background,assetsPrefix) {
	ApplicationMain.embed(element,width,height,background,assetsPrefix);
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	ApplicationMain.preloader = null;
	if(total == 0) {
		ApplicationMain.start();
	}
};
ApplicationMain.start = function() {
	try {
		new DocumentClass();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		openfl_Lib.current.stage.__handleError(e);
	}
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event("resize",false,false));
	if(openfl_Lib.current.stage.window.__fullscreen) {
		openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) {
		return 0;
	} else if(l1.priority > l2.priority) {
		return -1;
	} else {
		return 1;
	}
};
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null?_this.existsReserved(type):_this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null?_this3.getReserved(type):_this3.h[type];
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) if(list1[_g1++].match(listener,useCapture)) {
				return;
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null?_this4.getReserved(type):_this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null?_this1.getReserved(type):_this1.h[type];
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null?_this1.getReserved(type):_this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		var tmp = iterator;
		while(tmp.hasNext()) {
			var listener = tmp.next();
			if(listener == null) {
				continue;
			}
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		}
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__transform: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__forceCacheAsBitmap: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			var _this = openfl_display_DisplayObject.__broadcastEvents;
			if(!(__map_reserved[type] != null?_this.existsReserved(type):_this.h.hasOwnProperty(type))) {
				var _this1 = openfl_display_DisplayObject.__broadcastEvents;
				var value = [];
				if(__map_reserved[type] != null) {
					_this1.setReserved(type,value);
				} else {
					_this1.h[type] = value;
				}
			}
			var _this2 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[type] != null?_this2.getReserved(type):_this2.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		return openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			pos.x = -_this.tx;
			pos.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - pos.y) + _this.d * (pos.x - _this.tx));
			pos.y = 1.0 / norm * (_this.a * (pos.y - _this.ty) + _this.b * (_this.tx - pos.x));
			pos.x = px;
		}
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			return this.getBounds(this).intersects(obj.getBounds(this));
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,true,this);
		} else {
			return false;
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				var _this = openfl_display_DisplayObject.__broadcastEvents;
				if(__map_reserved[type] != null?_this.existsReserved(type):_this.h.hasOwnProperty(type)) {
					var _this1 = openfl_display_DisplayObject.__broadcastEvents;
					HxOverrides.remove(__map_reserved[type] != null?_this1.getReserved(type):_this1.h[type],this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
		return this.__dispatchEvent(event);
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) {
					this.__update(true,false);
				}
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current != this.stage && current.__transformDirty) {
						transformDirty = true;
					}
				}
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoDisplayObject.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.maskManager.pushObject(this);
					var context = renderSession.context;
					var transform = this.__renderTransform;
					if(renderSession.roundPixels) {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
					} else {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
					}
					var color = this.opaqueBackground;
					context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
					context.fillRect(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.popObject(this);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							var width = graphics.__width;
							var height = graphics.__height;
							if(graphics.__canvas != null) {
								var context1 = renderSession.context;
								var scrollRect = this.__scrollRect;
								if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
									renderSession.maskManager.pushObject(this);
									context1.globalAlpha = this.__worldAlpha;
									var transform1 = graphics.__worldTransform;
									if(renderSession.roundPixels) {
										context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
									} else {
										context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
									}
									context1.drawImage(graphics.__canvas,0,0);
									renderSession.maskManager.popObject(this);
								}
							}
						}
					}
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		var tmp = this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0;
		var graphics = this.__graphics;
		if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
			if(graphics.__dirty || this.__worldAlphaChanged || this.__canvas == null && graphics.__canvas != null) {
				if(graphics.__canvas != null) {
					if(this.__canvas != graphics.__canvas) {
						if(this.__canvas != null) {
							renderSession.element.removeChild(this.__canvas);
						}
						this.__canvas = graphics.__canvas;
						this.__context = graphics.__context;
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
					}
				} else if(this.__canvas != null) {
					renderSession.element.removeChild(this.__canvas);
					this.__canvas = null;
					this.__style = null;
				}
			}
			if(this.__canvas != null) {
				renderSession.maskManager.pushObject(this);
				var cacheTransform = this.__renderTransform;
				this.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					this.__renderTransformChanged = true;
				}
				openfl__$internal_renderer_dom_DOMRenderer.updateClip(this,renderSession);
				openfl__$internal_renderer_dom_DOMRenderer.applyStyle(this,renderSession,true,true,true);
				this.__renderTransform = cacheTransform;
				renderSession.maskManager.popObject(this);
			}
		} else if(this.__canvas != null) {
			renderSession.element.removeChild(this.__canvas);
			this.__canvas = null;
			this.__style = null;
		}
	}
	,__renderGL: function(renderSession) {
		if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.maskManager.pushObject(this);
					var gl = renderSession.gl;
					var rect = openfl_geom_Rectangle.__temp;
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.pushRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					gl.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
					gl.clear(gl.COLOR_BUFFER_BIT);
					renderSession.maskManager.popRect();
					renderSession.maskManager.popObject(this);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							if(graphics.__bitmap != null && graphics.__visible) {
								var renderer = renderSession.renderer;
								var gl1 = renderSession.gl;
								renderSession.blendModeManager.setBlendMode(this.get_blendMode());
								renderSession.maskManager.pushObject(this);
								var shader = renderSession.filterManager.pushObject(this);
								shader.get_data().uImage0.input = graphics.__bitmap;
								shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
								shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
								renderSession.shaderManager.setShader(shader);
								gl1.bindBuffer(gl1.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl1,this.__worldAlpha));
								gl1.vertexAttribPointer(shader.get_data().aPosition.index,3,gl1.FLOAT,false,24,0);
								gl1.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl1.FLOAT,false,24,12);
								gl1.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl1.FLOAT,false,24,20);
								gl1.drawArrays(gl1.TRIANGLE_STRIP,0,4);
								renderSession.filterManager.popObject(this);
								renderSession.maskManager.popObject(this);
							}
						}
					}
				}
			}
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask && (this.parent == null || !this.parent.__isMask);
		this.__updateTransforms();
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			var __parent = this.parent != null?this.parent:this.__renderParent;
			if(__parent != null) {
				this.__worldAlpha = this.get_alpha() * __parent.__worldAlpha;
				this.__worldColorTransform.__combine(__parent.__worldColorTransform);
				if(this.get_blendMode() == null || this.get_blendMode() == 10) {
					this.__blendMode = __parent.__blendMode;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
			}
			if(updateChildren && this.__renderDirty) {
				this.__renderDirty = false;
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask && (this.parent == null || !this.parent.__isMask);
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided?overrideTransform:this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			parentTransform = this.parent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) {
			this.set_scaleY(value / bounds.height);
		} else {
			this.set_scaleY(1);
		}
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			var _this = this.__mask;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			var _this1 = this.__mask;
			if(!_this1.__renderDirty) {
				_this1.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(value != null) {
			value.__isMask = true;
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null?this.stage.__mouseX:openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null?this.stage.__mouseY:openfl_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null?this.stage.__mouseX:openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null?this.stage.__mouseY:openfl_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) {
			return this.__transform.a;
		} else {
			return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
		}
	}
	,set_scaleX: function(value) {
		if(this.__transform.b == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) {
			return this.__transform.d;
		} else {
			return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
		}
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) {
			this.set_scaleX(value / bounds.width);
		} else {
			this.set_scaleX(1);
		}
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabIndex: null
	,__tabEnabled: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented({ fileName : "InteractiveObject.hx", lineNumber : 42, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
			if(addedToStage) {
				child.__dispatchChildren(new openfl_events_Event("addedToStage",false,false));
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			child.__dispatchEvent(new openfl_events_Event("removed",true));
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				child.__dispatchChildren(new openfl_events_Event("removedFromStage",false,false));
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
	}
	,__dispatchChildren: function(event) {
		var success = this.__dispatchEvent(event);
		if(success && this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchChildren(event)) {
					return false;
				}
			}
		}
		return success;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) {
				continue;
			}
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__temp;
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				return false;
			}
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__renderDOM(renderSession);
			}
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		renderSession.filterManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		renderSession.filterManager.popObject(this);
		renderSession.maskManager.popObject(this);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__scrollRect != null) {
				var point = openfl_geom_Point.__temp;
				point.setTo(x,y);
				var _this = this.__getRenderTransform();
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					point.x = -_this.tx;
					point.y = -_this.ty;
				} else {
					var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
					point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
					point.x = px;
				}
				if(!this.__scrollRect.containsPoint(point)) {
					return false;
				}
			}
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				return interactiveOnly;
			} else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(!this.__tabEnabled) {
			return this.buttonMode;
		} else {
			return true;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var haxegon_Load = function() {
	openfl_display_Sprite.call(this);
	if(this.stage != null) {
		this.start();
	} else {
		this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
	}
};
$hxClasses["haxegon.Load"] = haxegon_Load;
haxegon_Load.__name__ = ["haxegon","Load"];
haxegon_Load.__super__ = openfl_display_Sprite;
haxegon_Load.prototype = $extend(openfl_display_Sprite.prototype,{
	starling: null
	,onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.start();
	}
	,start: function() {
		this.starling = new starling_core_Starling(haxegon_Core,this.stage);
		this.starling.start();
	}
	,__class__: haxegon_Load
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	haxegon_Load.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = haxegon_Load;
DocumentClass.prototype = $extend(haxegon_Load.prototype,{
	__class__: DocumentClass
});
var Buildconfig = function() { };
$hxClasses["Buildconfig"] = Buildconfig;
Buildconfig.__name__ = ["Buildconfig"];
var Keygroup = function(_name,_list) {
	this.held = 0;
	this.name = _name;
	this.list = _list;
};
$hxClasses["Keygroup"] = Keygroup;
Keygroup.__name__ = ["Keygroup"];
Keygroup.prototype = {
	name: null
	,list: null
	,held: null
	,__class__: Keygroup
};
var Controls = function() { };
$hxClasses["Controls"] = Controls;
Controls.__name__ = ["Controls"];
Controls.init = function() {
	Controls.keyindex = new haxe_ds_StringMap();
	Controls.keygroups = [];
	Controls.keygroups.push(new Keygroup("up",[haxegon_Key.UP,haxegon_Key.W]));
	Controls.keygroups.push(new Keygroup("down",[haxegon_Key.DOWN,haxegon_Key.S]));
	Controls.keygroups.push(new Keygroup("left",[haxegon_Key.LEFT,haxegon_Key.A]));
	Controls.keygroups.push(new Keygroup("right",[haxegon_Key.RIGHT,haxegon_Key.D]));
	Controls.keygroups.push(new Keygroup("menu",[haxegon_Key.TAB]));
	Controls.keygroups.push(new Keygroup("action",[haxegon_Key.SPACE,haxegon_Key.Z,haxegon_Key.X,haxegon_Key.ENTER]));
	Controls.keygroups.push(new Keygroup("esc",[haxegon_Key.ESCAPE]));
	var _g1 = 0;
	var _g = Controls.keygroups.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _this = Controls.keyindex;
		var key = Controls.keygroups[i].name;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,i);
		} else {
			_this.h[key] = i;
		}
	}
};
Controls.held = function(name) {
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	return Controls.keygroups[Controls.currentkey].held;
};
Controls.setheld = function(name,value) {
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	Controls.keygroups[Controls.currentkey].held = value;
};
Controls.justpressed = function(name) {
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(Controls.pressed(name)) {
		Controls.keygroups[Controls.currentkey].held++;
	} else {
		Controls.keygroups[Controls.currentkey].held = 0;
	}
	Controls.i = 0;
	while(Controls.i < Controls.keygroups[Controls.currentkey].list.length) {
		if(haxegon_Input.justpressed(Controls.keygroups[Controls.currentkey].list[Controls.i])) {
			return true;
		}
		Controls.i++;
	}
	return false;
};
Controls.delaypressed = function(name,repeatframes,instantreps) {
	if(instantreps == null) {
		instantreps = -1;
	}
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(Controls.pressed(name)) {
		Controls.keygroups[Controls.currentkey].held++;
	} else {
		Controls.keygroups[Controls.currentkey].held = 0;
	}
	var returnval = false;
	var shortestkeypress = -1;
	Controls.i = 0;
	while(Controls.i < Controls.keygroups[Controls.currentkey].list.length) {
		var presstime = haxegon_Input.pressheldtime(Controls.keygroups[Controls.currentkey].list[Controls.i]);
		if(presstime >= 0 && (shortestkeypress == -1 || presstime < shortestkeypress)) {
			shortestkeypress = presstime;
			returnval = haxegon_Input.delaypressed(Controls.keygroups[Controls.currentkey].list[Controls.i],repeatframes);
		}
		Controls.i++;
	}
	return returnval;
};
Controls.pressed = function(name) {
	Controls.i = 0;
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	while(Controls.i < Controls.keygroups[Controls.currentkey].list.length) {
		if(haxegon_Input.pressed(Controls.keygroups[Controls.currentkey].list[Controls.i])) {
			return true;
		}
		Controls.i++;
	}
	return false;
};
Controls.forcerelease = function(name) {
	Controls.i = 0;
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	Controls.keygroups[Controls.currentkey].held = 0;
	while(Controls.i < Controls.keygroups[Controls.currentkey].list.length) {
		haxegon_Input.forcerelease(Controls.keygroups[Controls.currentkey].list[Controls.i]);
		Controls.i++;
	}
};
Controls.showfirstassigned = function(name) {
	Controls.i = 0;
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(Controls.keygroups[Controls.currentkey].list.length > 0) {
		return haxegon_Input.keyname(Controls.keygroups[Controls.currentkey].list[0]);
	}
	return "Unassigned";
};
Controls.showallassigned = function(name) {
	Controls.keyname = "";
	Controls.i = 0;
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(Controls.keygroups[Controls.currentkey].list.length > 0) {
		while(Controls.i < Controls.keygroups[Controls.currentkey].list.length) {
			Controls.keyname += haxegon_Input.keyname(Controls.keygroups[Controls.currentkey].list[Controls.i]);
			Controls.i++;
			if(Controls.i < Controls.keygroups[Controls.currentkey].list.length) {
				Controls.keyname += " / ";
			}
		}
		return Controls.keyname;
	}
	return "Unassigned";
};
Controls.clearassigned = function(name) {
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	Controls.keygroups[Controls.currentkey].list = [];
};
Controls.assign = function(name,k) {
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	Controls.keygroups[Controls.currentkey].list.push(k);
};
Controls.assigned = function(name,k) {
	var _this = Controls.keyindex;
	Controls.currentkey = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(Controls.keygroups[Controls.currentkey].list.indexOf(k) != -1) {
		return true;
	}
	return false;
};
Controls.processdelaypress = function(heldframes,repeatframes,instantreps) {
	if(instantreps == null) {
		instantreps = -1;
	}
	if(heldframes >= 1) {
		if(heldframes == 1) {
			return true;
		} else {
			var repeatheld = heldframes - (2.35 * repeatframes | 0) - 1;
			if(repeatheld >= 0 && repeatheld % repeatframes == 0) {
				return true;
			} else if(instantreps >= 1 && repeatheld >= instantreps * repeatframes) {
				return true;
			}
		}
	}
	return false;
};
Controls.keydelaypressed = function(k,repeatframes,instantreps) {
	if(instantreps == null) {
		instantreps = -1;
	}
	return Controls.processdelaypress(haxegon_Input.pressheldtime(k),repeatframes,instantreps);
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = null;
	if(manifest.version == 1) {
		if(manifest.libraryType == null) {
			library = new lime_utils_AssetLibrary();
		} else {
			library = Type.createInstance(Type.resolveClass(manifest.libraryType),manifest.libraryArgs);
		}
		library.__fromManifest(manifest);
	}
	return library;
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,paths: null
	,preload: null
	,progressBytesLoadedCache: null
	,progressBytesLoaded: null
	,progressBytesTotal: null
	,progressLoaded: null
	,progressTotal: null
	,promise: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null?js_Boot.__cast(type , String):null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_audio_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_audio_AudioBuffer.fromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]) , haxe_io_Bytes);
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,getPath: function(id) {
		var _this = this.paths;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			return true;
		}
		switch(type != null?js_Boot.__cast(type , String):null) {
		case "IMAGE":
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.existsReserved(id);
			} else {
				return _this1.h.hasOwnProperty(id);
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this2.existsReserved(id);
			} else {
				return _this2.h.hasOwnProperty(id);
			}
			break;
		default:
			var _this3 = this.cachedBytes;
			if(!(__map_reserved[id] != null?_this3.existsReserved(id):_this3.h.hasOwnProperty(id))) {
				var _this4 = this.cachedText;
				if(__map_reserved[id] != null) {
					return _this4.existsReserved(id);
				} else {
					return _this4.h.hasOwnProperty(id);
				}
			} else {
				return true;
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null?js_Boot.__cast(type , String):null;
		var items = [];
		var tmp = this.types.keys();
		while(tmp.hasNext()) {
			var id = tmp.next();
			if(requestedType == null || this.exists(id,type)) {
				items.push(id);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
			break;
		case "TEXT":
			return this.loadText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.progressBytesLoadedCache = new haxe_ds_StringMap();
			this.progressLoaded = 0;
			this.progressTotal = 1;
			var tmp = this.preload.keys();
			while(tmp.hasNext()) {
				var id = tmp.next();
				var _this = this.types;
				var _g = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.progressTotal++;
						var future = this.loadBytes(id);
						future.onProgress((function(id1,f) {
							return function(a1,a2) {
								f[0](id1[0],a1,a2);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future.onError((function(id2,f1) {
							return function(a11) {
								f1[0](id2[0],a11);
							};
						})([id],[$bind(this,this.load_onError)]));
						future.onComplete((function(id3,f2) {
							return function(a12) {
								f2[0](id3[0],a12);
							};
						})([id],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.progressTotal++;
						var future1 = this.loadFont(id);
						future1.onProgress((function(id4,f3) {
							return function(a13,a21) {
								f3[0](id4[0],a13,a21);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id5,f4) {
							return function(a14) {
								f4[0](id5[0],a14);
							};
						})([id],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id6,f5) {
							return function(a15) {
								f5[0](id6[0],a15);
							};
						})([id],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.progressTotal++;
						var future2 = this.loadImage(id);
						future2.onProgress((function(id7,f6) {
							return function(a16,a22) {
								f6[0](id7[0],a16,a22);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id8,f7) {
							return function(a17) {
								f7[0](id8[0],a17);
							};
						})([id],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id9,f8) {
							return function(a18) {
								f8[0](id9[0],a18);
							};
						})([id],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.progressTotal++;
						var future3 = this.loadAudioBuffer(id);
						future3.onProgress((function(id10,f9) {
							return function(a19,a23) {
								f9[0](id10[0],a19,a23);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id11,f10) {
							return function(a110) {
								f10[0](id11[0],a110);
							};
						})([id],[$bind(this,this.load_onError)]));
						future3.onComplete((function(id12,f11) {
							return function(a111) {
								f11[0](id12[0],a111);
							};
						})([id],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.progressTotal++;
						var future4 = this.loadText(id);
						future4.onProgress((function(id13,f12) {
							return function(a112,a24) {
								f12[0](id13[0],a112,a24);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id14,f13) {
							return function(a113) {
								f13[0](id14[0],a113);
							};
						})([id],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id15,f14) {
							return function(a114) {
								f14[0](id15[0],a114);
							};
						})([id],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.updateProgressLoaded();
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_audio_AudioBuffer.loadFromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_text_Font.loadFromName(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]).name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null?_this3.getReserved(id):_this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.loadFromFile(__map_reserved[id] != null?_this4.getReserved(id):_this4.h[id]);
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
		} else {
			return this.loadBytes(id).then(function(bytes) {
				return new lime_app_Future(function() {
					if(bytes == null) {
						return null;
					} else {
						return bytes.getString(0,bytes.length);
					}
				},true);
			});
		}
	}
	,unload: function() {
	}
	,updateProgressLoaded: function() {
		this.progressLoaded++;
		if(this.progressLoaded == this.progressTotal) {
			this.promise.complete(this);
		}
	}
	,__fromManifest: function(manifest) {
		if(manifest.version == 1) {
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				var key = asset.id;
				var value = asset.path;
				var _this = this.paths;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,value);
				} else {
					_this.h[key] = value;
				}
				var key1 = asset.id;
				var value1 = asset.type;
				var _this1 = this.types;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,value1);
				} else {
					_this1.h[key1] = value1;
				}
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		this.updateProgressLoaded();
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.updateProgressLoaded();
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.updateProgressLoaded();
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.updateProgressLoaded();
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.updateProgressLoaded();
	}
	,load_onError: function(id,message) {
		this.promise.error("Error loading asset \"" + id + "\"");
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		var _this = this.progressBytesLoadedCache;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var _this1 = this.progressBytesLoadedCache;
			this.progressBytesLoaded += bytesLoaded - (__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]);
			var _this2 = this.progressBytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,bytesLoaded);
			} else {
				_this2.h[id] = bytesLoaded;
			}
			this.promise.progress(this.progressBytesLoaded,this.progressBytesTotal);
		} else if(bytesTotal > 0) {
			var _this3 = this.progressBytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.progressBytesLoaded += bytesLoaded;
			this.progressBytesTotal += bytesTotal;
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.rootPath = "";
	lime_utils_AssetLibrary.call(this);
	var _this = this.paths;
	if(__map_reserved["data/sounds/alarm.ogg"] != null) {
		_this.setReserved("data/sounds/alarm.ogg","data/sounds/alarm.ogg");
	} else {
		_this.h["data/sounds/alarm.ogg"] = "data/sounds/alarm.ogg";
	}
	var _this1 = this.types;
	var value = "SOUND";
	if(__map_reserved["data/sounds/alarm.ogg"] != null) {
		_this1.setReserved("data/sounds/alarm.ogg",value);
	} else {
		_this1.h["data/sounds/alarm.ogg"] = value;
	}
	var _this2 = this.paths;
	if(__map_reserved["data/sounds/collectgem.ogg"] != null) {
		_this2.setReserved("data/sounds/collectgem.ogg","data/sounds/collectgem.ogg");
	} else {
		_this2.h["data/sounds/collectgem.ogg"] = "data/sounds/collectgem.ogg";
	}
	var _this3 = this.types;
	var value1 = "SOUND";
	if(__map_reserved["data/sounds/collectgem.ogg"] != null) {
		_this3.setReserved("data/sounds/collectgem.ogg",value1);
	} else {
		_this3.h["data/sounds/collectgem.ogg"] = value1;
	}
	var _this4 = this.paths;
	if(__map_reserved["data/sounds/collectitem.ogg"] != null) {
		_this4.setReserved("data/sounds/collectitem.ogg","data/sounds/collectitem.ogg");
	} else {
		_this4.h["data/sounds/collectitem.ogg"] = "data/sounds/collectitem.ogg";
	}
	var _this5 = this.types;
	var value2 = "SOUND";
	if(__map_reserved["data/sounds/collectitem.ogg"] != null) {
		_this5.setReserved("data/sounds/collectitem.ogg",value2);
	} else {
		_this5.h["data/sounds/collectitem.ogg"] = value2;
	}
	var _this6 = this.paths;
	if(__map_reserved["data/sounds/collectkey.ogg"] != null) {
		_this6.setReserved("data/sounds/collectkey.ogg","data/sounds/collectkey.ogg");
	} else {
		_this6.h["data/sounds/collectkey.ogg"] = "data/sounds/collectkey.ogg";
	}
	var _this7 = this.types;
	var value3 = "SOUND";
	if(__map_reserved["data/sounds/collectkey.ogg"] != null) {
		_this7.setReserved("data/sounds/collectkey.ogg",value3);
	} else {
		_this7.h["data/sounds/collectkey.ogg"] = value3;
	}
	var _this8 = this.paths;
	if(__map_reserved["data/sounds/damaged.ogg"] != null) {
		_this8.setReserved("data/sounds/damaged.ogg","data/sounds/damaged.ogg");
	} else {
		_this8.h["data/sounds/damaged.ogg"] = "data/sounds/damaged.ogg";
	}
	var _this9 = this.types;
	var value4 = "SOUND";
	if(__map_reserved["data/sounds/damaged.ogg"] != null) {
		_this9.setReserved("data/sounds/damaged.ogg",value4);
	} else {
		_this9.h["data/sounds/damaged.ogg"] = value4;
	}
	var _this10 = this.paths;
	if(__map_reserved["data/sounds/destroy.ogg"] != null) {
		_this10.setReserved("data/sounds/destroy.ogg","data/sounds/destroy.ogg");
	} else {
		_this10.h["data/sounds/destroy.ogg"] = "data/sounds/destroy.ogg";
	}
	var _this11 = this.types;
	var value5 = "SOUND";
	if(__map_reserved["data/sounds/destroy.ogg"] != null) {
		_this11.setReserved("data/sounds/destroy.ogg",value5);
	} else {
		_this11.h["data/sounds/destroy.ogg"] = value5;
	}
	var _this12 = this.paths;
	if(__map_reserved["data/sounds/fall.ogg"] != null) {
		_this12.setReserved("data/sounds/fall.ogg","data/sounds/fall.ogg");
	} else {
		_this12.h["data/sounds/fall.ogg"] = "data/sounds/fall.ogg";
	}
	var _this13 = this.types;
	var value6 = "SOUND";
	if(__map_reserved["data/sounds/fall.ogg"] != null) {
		_this13.setReserved("data/sounds/fall.ogg",value6);
	} else {
		_this13.h["data/sounds/fall.ogg"] = value6;
	}
	var _this14 = this.paths;
	if(__map_reserved["data/sounds/helicopter.ogg"] != null) {
		_this14.setReserved("data/sounds/helicopter.ogg","data/sounds/helicopter.ogg");
	} else {
		_this14.h["data/sounds/helicopter.ogg"] = "data/sounds/helicopter.ogg";
	}
	var _this15 = this.types;
	var value7 = "SOUND";
	if(__map_reserved["data/sounds/helicopter.ogg"] != null) {
		_this15.setReserved("data/sounds/helicopter.ogg",value7);
	} else {
		_this15.h["data/sounds/helicopter.ogg"] = value7;
	}
	var _this16 = this.paths;
	if(__map_reserved["data/sounds/lockeddoor.ogg"] != null) {
		_this16.setReserved("data/sounds/lockeddoor.ogg","data/sounds/lockeddoor.ogg");
	} else {
		_this16.h["data/sounds/lockeddoor.ogg"] = "data/sounds/lockeddoor.ogg";
	}
	var _this17 = this.types;
	var value8 = "SOUND";
	if(__map_reserved["data/sounds/lockeddoor.ogg"] != null) {
		_this17.setReserved("data/sounds/lockeddoor.ogg",value8);
	} else {
		_this17.h["data/sounds/lockeddoor.ogg"] = value8;
	}
	var _this18 = this.paths;
	if(__map_reserved["data/sounds/nextfloor.ogg"] != null) {
		_this18.setReserved("data/sounds/nextfloor.ogg","data/sounds/nextfloor.ogg");
	} else {
		_this18.h["data/sounds/nextfloor.ogg"] = "data/sounds/nextfloor.ogg";
	}
	var _this19 = this.types;
	var value9 = "SOUND";
	if(__map_reserved["data/sounds/nextfloor.ogg"] != null) {
		_this19.setReserved("data/sounds/nextfloor.ogg",value9);
	} else {
		_this19.h["data/sounds/nextfloor.ogg"] = value9;
	}
	var _this20 = this.paths;
	if(__map_reserved["data/sounds/opendoor.ogg"] != null) {
		_this20.setReserved("data/sounds/opendoor.ogg","data/sounds/opendoor.ogg");
	} else {
		_this20.h["data/sounds/opendoor.ogg"] = "data/sounds/opendoor.ogg";
	}
	var _this21 = this.types;
	var value10 = "SOUND";
	if(__map_reserved["data/sounds/opendoor.ogg"] != null) {
		_this21.setReserved("data/sounds/opendoor.ogg",value10);
	} else {
		_this21.h["data/sounds/opendoor.ogg"] = value10;
	}
	var _this22 = this.paths;
	if(__map_reserved["data/sounds/restart.ogg"] != null) {
		_this22.setReserved("data/sounds/restart.ogg","data/sounds/restart.ogg");
	} else {
		_this22.h["data/sounds/restart.ogg"] = "data/sounds/restart.ogg";
	}
	var _this23 = this.types;
	var value11 = "SOUND";
	if(__map_reserved["data/sounds/restart.ogg"] != null) {
		_this23.setReserved("data/sounds/restart.ogg",value11);
	} else {
		_this23.h["data/sounds/restart.ogg"] = value11;
	}
	var _this24 = this.paths;
	if(__map_reserved["data/sounds/shoot.ogg"] != null) {
		_this24.setReserved("data/sounds/shoot.ogg","data/sounds/shoot.ogg");
	} else {
		_this24.h["data/sounds/shoot.ogg"] = "data/sounds/shoot.ogg";
	}
	var _this25 = this.types;
	var value12 = "SOUND";
	if(__map_reserved["data/sounds/shoot.ogg"] != null) {
		_this25.setReserved("data/sounds/shoot.ogg",value12);
	} else {
		_this25.h["data/sounds/shoot.ogg"] = value12;
	}
	var _this26 = this.paths;
	if(__map_reserved["data/sounds/silence.ogg"] != null) {
		_this26.setReserved("data/sounds/silence.ogg","data/sounds/silence.ogg");
	} else {
		_this26.h["data/sounds/silence.ogg"] = "data/sounds/silence.ogg";
	}
	var _this27 = this.types;
	var value13 = "SOUND";
	if(__map_reserved["data/sounds/silence.ogg"] != null) {
		_this27.setReserved("data/sounds/silence.ogg",value13);
	} else {
		_this27.h["data/sounds/silence.ogg"] = value13;
	}
	var _this28 = this.paths;
	if(__map_reserved["data/sounds/spotted.ogg"] != null) {
		_this28.setReserved("data/sounds/spotted.ogg","data/sounds/spotted.ogg");
	} else {
		_this28.h["data/sounds/spotted.ogg"] = "data/sounds/spotted.ogg";
	}
	var _this29 = this.types;
	var value14 = "SOUND";
	if(__map_reserved["data/sounds/spotted.ogg"] != null) {
		_this29.setReserved("data/sounds/spotted.ogg",value14);
	} else {
		_this29.h["data/sounds/spotted.ogg"] = value14;
	}
	var _this30 = this.paths;
	if(__map_reserved["data/sounds/start.ogg"] != null) {
		_this30.setReserved("data/sounds/start.ogg","data/sounds/start.ogg");
	} else {
		_this30.h["data/sounds/start.ogg"] = "data/sounds/start.ogg";
	}
	var _this31 = this.types;
	var value15 = "SOUND";
	if(__map_reserved["data/sounds/start.ogg"] != null) {
		_this31.setReserved("data/sounds/start.ogg",value15);
	} else {
		_this31.h["data/sounds/start.ogg"] = value15;
	}
	var _this32 = this.paths;
	if(__map_reserved["data/sounds/stun.ogg"] != null) {
		_this32.setReserved("data/sounds/stun.ogg","data/sounds/stun.ogg");
	} else {
		_this32.h["data/sounds/stun.ogg"] = "data/sounds/stun.ogg";
	}
	var _this33 = this.types;
	var value16 = "SOUND";
	if(__map_reserved["data/sounds/stun.ogg"] != null) {
		_this33.setReserved("data/sounds/stun.ogg",value16);
	} else {
		_this33.h["data/sounds/stun.ogg"] = value16;
	}
	var _this34 = this.paths;
	if(__map_reserved["data/sounds/talk.ogg"] != null) {
		_this34.setReserved("data/sounds/talk.ogg","data/sounds/talk.ogg");
	} else {
		_this34.h["data/sounds/talk.ogg"] = "data/sounds/talk.ogg";
	}
	var _this35 = this.types;
	var value17 = "SOUND";
	if(__map_reserved["data/sounds/talk.ogg"] != null) {
		_this35.setReserved("data/sounds/talk.ogg",value17);
	} else {
		_this35.h["data/sounds/talk.ogg"] = value17;
	}
	var _this36 = this.paths;
	if(__map_reserved["data/sounds/ticker.ogg"] != null) {
		_this36.setReserved("data/sounds/ticker.ogg","data/sounds/ticker.ogg");
	} else {
		_this36.h["data/sounds/ticker.ogg"] = "data/sounds/ticker.ogg";
	}
	var _this37 = this.types;
	var value18 = "SOUND";
	if(__map_reserved["data/sounds/ticker.ogg"] != null) {
		_this37.setReserved("data/sounds/ticker.ogg",value18);
	} else {
		_this37.h["data/sounds/ticker.ogg"] = value18;
	}
	var _this38 = this.paths;
	if(__map_reserved["data/sounds/unlock.ogg"] != null) {
		_this38.setReserved("data/sounds/unlock.ogg","data/sounds/unlock.ogg");
	} else {
		_this38.h["data/sounds/unlock.ogg"] = "data/sounds/unlock.ogg";
	}
	var _this39 = this.types;
	var value19 = "SOUND";
	if(__map_reserved["data/sounds/unlock.ogg"] != null) {
		_this39.setReserved("data/sounds/unlock.ogg",value19);
	} else {
		_this39.h["data/sounds/unlock.ogg"] = value19;
	}
	var _this40 = this.paths;
	if(__map_reserved["data/sounds/useitem.ogg"] != null) {
		_this40.setReserved("data/sounds/useitem.ogg","data/sounds/useitem.ogg");
	} else {
		_this40.h["data/sounds/useitem.ogg"] = "data/sounds/useitem.ogg";
	}
	var _this41 = this.types;
	var value20 = "SOUND";
	if(__map_reserved["data/sounds/useitem.ogg"] != null) {
		_this41.setReserved("data/sounds/useitem.ogg",value20);
	} else {
		_this41.h["data/sounds/useitem.ogg"] = value20;
	}
	var _this42 = this.paths;
	if(__map_reserved["data/sounds/victory.ogg"] != null) {
		_this42.setReserved("data/sounds/victory.ogg","data/sounds/victory.ogg");
	} else {
		_this42.h["data/sounds/victory.ogg"] = "data/sounds/victory.ogg";
	}
	var _this43 = this.types;
	var value21 = "SOUND";
	if(__map_reserved["data/sounds/victory.ogg"] != null) {
		_this43.setReserved("data/sounds/victory.ogg",value21);
	} else {
		_this43.h["data/sounds/victory.ogg"] = value21;
	}
	var _this44 = this.paths;
	if(__map_reserved["data/graphics/7drl.png"] != null) {
		_this44.setReserved("data/graphics/7drl.png","data/graphics/7drl.png");
	} else {
		_this44.h["data/graphics/7drl.png"] = "data/graphics/7drl.png";
	}
	var _this45 = this.types;
	var value22 = "IMAGE";
	if(__map_reserved["data/graphics/7drl.png"] != null) {
		_this45.setReserved("data/graphics/7drl.png",value22);
	} else {
		_this45.h["data/graphics/7drl.png"] = value22;
	}
	var _this46 = this.paths;
	if(__map_reserved["data/graphics/7drl.xml"] != null) {
		_this46.setReserved("data/graphics/7drl.xml","data/graphics/7drl.xml");
	} else {
		_this46.h["data/graphics/7drl.xml"] = "data/graphics/7drl.xml";
	}
	var _this47 = this.types;
	var value23 = "TEXT";
	if(__map_reserved["data/graphics/7drl.xml"] != null) {
		_this47.setReserved("data/graphics/7drl.xml",value23);
	} else {
		_this47.h["data/graphics/7drl.xml"] = value23;
	}
	var _this48 = this.paths;
	if(__map_reserved["data/graphics/fonts/fffhomepage/fffhomepage.fnt"] != null) {
		_this48.setReserved("data/graphics/fonts/fffhomepage/fffhomepage.fnt","data/graphics/fonts/fffhomepage/fffhomepage.fnt");
	} else {
		_this48.h["data/graphics/fonts/fffhomepage/fffhomepage.fnt"] = "data/graphics/fonts/fffhomepage/fffhomepage.fnt";
	}
	var _this49 = this.types;
	var value24 = "TEXT";
	if(__map_reserved["data/graphics/fonts/fffhomepage/fffhomepage.fnt"] != null) {
		_this49.setReserved("data/graphics/fonts/fffhomepage/fffhomepage.fnt",value24);
	} else {
		_this49.h["data/graphics/fonts/fffhomepage/fffhomepage.fnt"] = value24;
	}
	var _this50 = this.paths;
	if(__map_reserved["data/graphics/fonts/fffhomepagebold/fffhomepagebold.fnt"] != null) {
		_this50.setReserved("data/graphics/fonts/fffhomepagebold/fffhomepagebold.fnt","data/graphics/fonts/fffhomepagebold/fffhomepagebold.fnt");
	} else {
		_this50.h["data/graphics/fonts/fffhomepagebold/fffhomepagebold.fnt"] = "data/graphics/fonts/fffhomepagebold/fffhomepagebold.fnt";
	}
	var _this51 = this.types;
	var value25 = "TEXT";
	if(__map_reserved["data/graphics/fonts/fffhomepagebold/fffhomepagebold.fnt"] != null) {
		_this51.setReserved("data/graphics/fonts/fffhomepagebold/fffhomepagebold.fnt",value25);
	} else {
		_this51.h["data/graphics/fonts/fffhomepagebold/fffhomepagebold.fnt"] = value25;
	}
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) {
		assetsPrefix = ApplicationMain.config.assetsPrefix;
	}
	if(assetsPrefix != null) {
		var tmp = this.paths.keys();
		while(tmp.hasNext()) {
			var k = tmp.next();
			var _this52 = this.paths;
			var value26 = assetsPrefix + (__map_reserved[k] != null?_this52.getReserved(k):_this52.h[k]);
			var _this53 = this.paths;
			if(__map_reserved[k] != null) {
				_this53.setReserved(k,value26);
			} else {
				_this53.h[k] = value26;
			}
		}
	}
	var tmp1 = this.paths.keys();
	while(tmp1.hasNext()) {
		var id = tmp1.next();
		var _this54 = this.preload;
		if(__map_reserved[id] != null) {
			_this54.setReserved(id,true);
		} else {
			_this54.h[id] = true;
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_utils_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	lastModified: null
	,timer: null
	,rootPath: null
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var GameInput = function() { };
$hxClasses["GameInput"] = GameInput;
GameInput.__name__ = ["GameInput"];
GameInput.fallfromtowerinput = function() {
};
GameInput.endinginput = function() {
	if(Logic.endingstate == "pressspace") {
		if(Controls.justpressed("action")) {
			modernversion_Modern.endlevelanimationstate = 1;
			modernversion_Modern.endlevelanimationaction = "titlescreen";
			haxegon_Music.playsong("silence");
			haxegon_Music.playsound("start");
		}
	}
};
GameInput.titleinput = function() {
	if(Controls.justpressed("action")) {
		modernversion_Modern.endlevelanimationstate = 1;
		modernversion_Modern.endlevelanimationaction = "startgame";
	}
};
GameInput.getkeypriority = function() {
	GameInput.heldkeys[0] = Math.max(haxegon_Input.pressheldtime(haxegon_Key.UP),haxegon_Input.pressheldtime(haxegon_Key.W)) | 0;
	GameInput.heldkeys[1] = Math.max(haxegon_Input.pressheldtime(haxegon_Key.DOWN),haxegon_Input.pressheldtime(haxegon_Key.S)) | 0;
	GameInput.heldkeys[2] = Math.max(haxegon_Input.pressheldtime(haxegon_Key.LEFT),haxegon_Input.pressheldtime(haxegon_Key.A)) | 0;
	GameInput.heldkeys[3] = Math.max(haxegon_Input.pressheldtime(haxegon_Key.RIGHT),haxegon_Input.pressheldtime(haxegon_Key.D)) | 0;
	GameInput.lastpressed = "";
	if(GameInput.heldkeys[0] > 0 && (GameInput.heldkeys[1] <= 0 && GameInput.heldkeys[2] <= 0 && GameInput.heldkeys[3] <= 0)) {
		GameInput.lastpressed = "up";
	} else if(GameInput.heldkeys[1] > 0 && (GameInput.heldkeys[0] <= 0 && GameInput.heldkeys[2] <= 0 && GameInput.heldkeys[3] <= 0)) {
		GameInput.lastpressed = "down";
	} else if(GameInput.heldkeys[2] > 0 && (GameInput.heldkeys[0] <= 0 && GameInput.heldkeys[1] <= 0 && GameInput.heldkeys[3] <= 0)) {
		GameInput.lastpressed = "left";
	} else if(GameInput.heldkeys[3] > 0 && (GameInput.heldkeys[0] <= 0 && GameInput.heldkeys[1] <= 0 && GameInput.heldkeys[2] <= 0)) {
		GameInput.lastpressed = "right";
	} else {
		GameInput.newestkey = -2;
		GameInput.newestkeyheld = -2;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			if(GameInput.heldkeys[i] > -1 && (GameInput.heldkeys[i] < GameInput.newestkeyheld || GameInput.newestkeyheld == -2)) {
				GameInput.newestkey = i;
				GameInput.newestkeyheld = GameInput.heldkeys[i];
			}
		}
		if(GameInput.newestkey == 0) {
			GameInput.lastpressed = "up";
		}
		if(GameInput.newestkey == 1) {
			GameInput.lastpressed = "down";
		}
		if(GameInput.newestkey == 2) {
			GameInput.lastpressed = "left";
		}
		if(GameInput.newestkey == 3) {
			GameInput.lastpressed = "right";
		}
	}
	if(GameInput.lastpressed == "") {
		gamecontrol_Use.doorknockcheck = false;
	}
};
GameInput.gameinput = function() {
	GameInput.getkeypriority();
	if(modernversion_Modern.popupwindow) {
		GameInput.popupinput();
	} else if(gamecontrol_Script.running) {
		if(gamecontrol_Script.pausescript) {
			if(Controls.justpressed("action")) {
				gamecontrol_Script.pausescript = false;
				terrylib_Textbox.textboxremove();
			}
		}
	} else if(gamecontrol_Menu.textmode == 0 && modernversion_Modern.endlevelanimationstate <= 0 && gamecontrol_Game.health > 0) {
		if(gamecontrol_Script.hascontrol) {
			var useitemnow = false;
			if(haxegon_Input.justpressed(haxegon_Key.ONE) && modernversion_Modern.inventoryslots >= 1) {
				modernversion_Modern.currentslot = 0;
				useitemnow = true;
			} else if(haxegon_Input.justpressed(haxegon_Key.TWO) && modernversion_Modern.inventoryslots >= 2) {
				modernversion_Modern.currentslot = 1;
				useitemnow = true;
			} else if(haxegon_Input.justpressed(haxegon_Key.THREE) && modernversion_Modern.inventoryslots >= 3) {
				modernversion_Modern.currentslot = 2;
				useitemnow = true;
			} else if(haxegon_Input.justpressed(haxegon_Key.FOUR) && modernversion_Modern.inventoryslots >= 4) {
				modernversion_Modern.currentslot = 3;
				useitemnow = true;
			} else if(haxegon_Input.justpressed(haxegon_Key.FIVE) && modernversion_Modern.inventoryslots >= 5) {
				modernversion_Modern.currentslot = 4;
				useitemnow = true;
			} else if(haxegon_Input.justpressed(haxegon_Key.SIX) && modernversion_Modern.inventoryslots >= 6) {
				modernversion_Modern.currentslot = 5;
				useitemnow = true;
			} else if(haxegon_Input.justpressed(haxegon_Key.SEVEN) && modernversion_Modern.inventoryslots >= 7) {
				modernversion_Modern.currentslot = 6;
				useitemnow = true;
			} else if(haxegon_Input.justpressed(haxegon_Key.EIGHT) && modernversion_Modern.inventoryslots >= 8) {
				modernversion_Modern.currentslot = 7;
				useitemnow = true;
			}
			if(useitemnow) {
				var player = terrylib_Obj.getplayer();
				if(player > -1) {
					if(modernversion_Modern.inventory[modernversion_Modern.currentslot] != "") {
						modernversion_Modern.useitem(terrylib_Obj.entities[player],modernversion_Modern.inventory[modernversion_Modern.currentslot]);
						gamecontrol_Game.startmove("wait");
					} else {
						gamecontrol_Game.showmessage("NO ITEM EQUIPPED IN SLOT " + (modernversion_Modern.currentslot + 1) + "...","flashing",120);
					}
				}
			}
		}
		if(gamecontrol_Game.turn == "playermove") {
			var _g1 = 0;
			var _g = terrylib_Obj.nentity;
			while(_g1 < _g) {
				var i = _g1++;
				if(terrylib_Obj.entities[i].rule == "player") {
					if(terrylib_Obj.entities[i].active) {
						if(gamecontrol_Script.hascontrol) {
							if(Controls.pressed("action")) {
								gamecontrol_Game.startmove("wait");
							} else if(GameInput.lastpressed == "left") {
								terrylib_Obj.entities[i].animated = 5;
								terrylib_Obj.entities[i].dir = terrylib_Help.LEFT;
								if(!gamecontrol_Game.blockedfrommoving(i)) {
									gamecontrol_Game.startmove("move_left");
								}
							} else if(GameInput.lastpressed == "right") {
								terrylib_Obj.entities[i].animated = 5;
								terrylib_Obj.entities[i].dir = terrylib_Help.RIGHT;
								if(!gamecontrol_Game.blockedfrommoving(i)) {
									gamecontrol_Game.startmove("move_right");
								}
							} else if(GameInput.lastpressed == "up") {
								terrylib_Obj.entities[i].animated = 5;
								terrylib_Obj.entities[i].dir = terrylib_Help.UP;
								if(!gamecontrol_Game.blockedfrommoving(i)) {
									gamecontrol_Game.startmove("move_up");
								}
							} else if(GameInput.lastpressed == "down") {
								terrylib_Obj.entities[i].animated = 5;
								terrylib_Obj.entities[i].dir = terrylib_Help.DOWN;
								if(!gamecontrol_Game.blockedfrommoving(i)) {
									gamecontrol_Game.startmove("move_down");
								}
							}
						}
					}
				}
			}
		}
	} else if(gamecontrol_Menu.textmode == 1) {
		if(Controls.delaypressed("up",7)) {
			gamecontrol_Menu.currentmenu--;
		} else if(Controls.delaypressed("down",7)) {
			gamecontrol_Menu.currentmenu++;
		}
		if(gamecontrol_Menu.currentmenu <= 0) {
			gamecontrol_Menu.currentmenu += gamecontrol_Menu.menusize;
		}
		if(gamecontrol_Menu.currentmenu >= gamecontrol_Menu.menusize) {
			gamecontrol_Menu.currentmenu -= gamecontrol_Menu.menusize;
		}
		if(Controls.pressed("action")) {
			if(gamecontrol_Menu.showscript == "terryletter") {
				if(gamecontrol_Game.lettertime <= 1350) {
					gamecontrol_Game.lettertime += 5;
				}
			} else if(gamecontrol_Menu.showscript == "alpha_secret") {
				if(gamecontrol_Game.lettertime <= 800) {
					gamecontrol_Game.lettertime += 5;
				}
			} else if(gamecontrol_Menu.showscript == "alpha_startup") {
				if(gamecontrol_Game.lettertime <= 800) {
					gamecontrol_Game.lettertime += 5;
				}
			}
		}
		if(Controls.justpressed("action")) {
			if(gamecontrol_Menu.showscript == "terryletter") {
				if(gamecontrol_Game.lettertime >= 1350) {
					gamecontrol_Menu.backtogame();
					modernversion_Modern.usestairs_afteranimation();
				}
			} else if(gamecontrol_Menu.showscript == "alpha_secret") {
				if(gamecontrol_Game.lettertime >= 800) {
					gamecontrol_Menu.backtogame();
					modernversion_Modern.usestairs_afteranimation();
				}
			} else if(gamecontrol_Menu.showscript == "alpha_startup") {
				if(gamecontrol_Game.lettertime >= 800) {
					gamecontrol_Menu.backtogame();
					modernversion_Modern.usestairs_afteranimation();
				}
			} else if(gamecontrol_Menu.showscript == "storeroomletter") {
				gamecontrol_Menu.createmenu("destroyletter");
			} else if(gamecontrol_Menu.showscript == "destroyletter") {
				if(gamecontrol_Menu.currentmenu == 0) {
					gamecontrol_Inventory.destroyinventoryletter(gamecontrol_Inventory.currentletter);
					gamecontrol_Menu.backtogame();
				} else {
					gamecontrol_Menu.backtogame();
				}
			} else if(gamecontrol_Menu.showscript == "readnow") {
				gamecontrol_Menu.createmenu(gamecontrol_Inventory.currentletter);
			} else if(gamecontrol_Menu.showscript == "pawnshop") {
				gamecontrol_Menu.createmenu("pawnshop2");
			} else if(gamecontrol_Menu.showscript == "drink_yes1") {
				gamecontrol_Menu.createmenu("drink_yes2");
			} else if(gamecontrol_Menu.showscript == "drink_question") {
				if(gamecontrol_Menu.currentmenu == 0) {
					gamecontrol_Menu.createmenu("drink_yes1");
				} else {
					gamecontrol_Menu.createmenu("drink_no");
				}
			} else if(gamecontrol_Menu.showscript == "gameoptions") {
				if(gamecontrol_Menu.menuoptions[gamecontrol_Menu.currentmenu] == "Use Tazer") {
					gamecontrol_Menu.backtogame();
				} else if(gamecontrol_Menu.menuoptions[gamecontrol_Menu.currentmenu] == "Open inventory") {
					gamecontrol_Menu.createmenu("inventory");
				} else if(gamecontrol_Menu.menuoptions[gamecontrol_Menu.currentmenu] == "back") {
					gamecontrol_Menu.backtogame();
				}
			} else if(gamecontrol_Menu.showscript == "inventory") {
				var selection = gamecontrol_Inventory.getitemlistnum(gamecontrol_Menu.menuoptions[gamecontrol_Menu.currentmenu]);
				if(selection > -1) {
					if(gamecontrol_Inventory.itemlist[selection].type == gamecontrol_Inventory.WEAPON) {
						gamecontrol_Inventory.setequippedweapon(gamecontrol_Inventory.itemlist[selection].name);
						gamecontrol_Inventory.reloadinventory();
					} else if(gamecontrol_Inventory.itemlist[selection].type == gamecontrol_Inventory.GADGET) {
						gamecontrol_Inventory.setequippedgadget(gamecontrol_Inventory.itemlist[selection].name);
						gamecontrol_Inventory.reloadinventory();
					} else if(gamecontrol_Inventory.itemlist[selection].type == gamecontrol_Inventory.USEABLE) {
						gamecontrol_Inventory.useitemcountdown = 15;
						gamecontrol_Inventory.itemtouse = selection;
						gamecontrol_Inventory.useinventoryitem(selection);
						gamecontrol_Menu.backtogame();
					} else if(gamecontrol_Inventory.itemlist[selection].type == gamecontrol_Inventory.LETTER) {
						gamecontrol_Inventory.currentletter = gamecontrol_Inventory.itemlist[selection].letter;
						gamecontrol_Menu.createmenu(gamecontrol_Inventory.currentletter);
					} else if(gamecontrol_Inventory.itemlist[selection].type == gamecontrol_Inventory.MAP) {
						gamecontrol_Menu.textmode = 2;
						gamecontrol_Openworld.viewmap = 90;
					}
				} else if(gamecontrol_Menu.currentmenu == gamecontrol_Menu.menusize - 1) {
					gamecontrol_Menu.backtogame();
				}
			} else {
				gamecontrol_Menu.backtogame();
			}
		}
	} else if(gamecontrol_Menu.textmode == 2) {
		if(Controls.justpressed("action") || Controls.justpressed("menu")) {
			gamecontrol_Menu.backtogame();
		}
	}
	if(haxegon_Input.justpressed(haxegon_Key.R) && !modernversion_Modern.popupwindow) {
		modernversion_Modern.restartfadeout();
		haxegon_Music.playsound("restart");
	}
};
GameInput.popupinput = function() {
	if(modernversion_Modern.popupmode == "itemshopkeeper") {
		if(modernversion_Modern.popupstate == 1) {
			if(Controls.justpressed("left") || Controls.justpressed("up")) {
				modernversion_Modern.menuselection = 0;
			}
			if(Controls.justpressed("down") || Controls.justpressed("right")) {
				modernversion_Modern.menuselection = 1;
			}
			if(Controls.justpressed("action")) {
				if(modernversion_Modern.popupitem.cost > gamecontrol_Game.cash || modernversion_Modern.slotsfree() == 0) {
					modernversion_Modern.popupstate = 3;
					haxegon_Music.playsound("lockeddoor");
				} else if(modernversion_Modern.menuselection == 1) {
					modernversion_Modern.popupstate = 2;
					haxegon_Music.playsound("lockeddoor");
				} else if(gamecontrol_Game.cash >= modernversion_Modern.popupitem.cost) {
					gamecontrol_Game.cash -= modernversion_Modern.popupitem.cost;
					modernversion_Modern.gemflash = modernversion_Modern.flashtime;
					modernversion_Modern.pickupitembyitemclass(modernversion_Modern.popupitem);
					gamecontrol_Game.keys++;
					modernversion_Modern.keyflash = modernversion_Modern.flashtime;
					var tmp = terrylib_Obj.getplayer();
					var tmp1 = "Bought " + modernversion_Modern.popupitem.name.toUpperCase();
					terrylib_Obj.entities[tmp].setmessage(tmp1,"player",90);
					haxegon_Music.playsound("collectitem");
					modernversion_Modern.popupstate = 2;
					terrylib_Obj.entities[modernversion_Modern.currentshopkeeper].name = "sold out";
				} else {
					haxegon_Music.playsound("lockeddoor");
				}
			}
		}
	} else if(modernversion_Modern.popupmode == "shopkeeper") {
		if(modernversion_Modern.popupstate == 1) {
			if(Controls.justpressed("left") || Controls.justpressed("up")) {
				modernversion_Modern.menuselection = 0;
			}
			if(Controls.justpressed("down") || Controls.justpressed("right")) {
				modernversion_Modern.menuselection = 1;
			}
			if(Controls.justpressed("action")) {
				if(modernversion_Modern.keygemrate > gamecontrol_Game.cash) {
					modernversion_Modern.popupstate = 3;
					haxegon_Music.playsound("lockeddoor");
				} else if(modernversion_Modern.menuselection == 1) {
					modernversion_Modern.popupstate = 2;
					haxegon_Music.playsound("lockeddoor");
				} else if(gamecontrol_Game.cash >= modernversion_Modern.keygemrate) {
					gamecontrol_Game.cash -= modernversion_Modern.keygemrate;
					modernversion_Modern.gemflash = modernversion_Modern.flashtime;
					modernversion_Modern.keygemratelevel++;
					gamecontrol_Game.keys++;
					modernversion_Modern.keyflash = modernversion_Modern.flashtime;
					terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Bought a KEY","key",90);
					haxegon_Music.playsound("collectkey");
					modernversion_Modern.popupstate = 2;
				} else {
					haxegon_Music.playsound("lockeddoor");
				}
			}
		}
	} else if(modernversion_Modern.popupmode == "soldoutshopkeeper") {
		if(modernversion_Modern.popupstate == 1) {
			if(Controls.justpressed("action")) {
				modernversion_Modern.popupstate = 2;
			}
		}
	} else if(modernversion_Modern.popupmode == "newitem") {
		if(modernversion_Modern.popupstate == 1) {
			if(Controls.justpressed("action")) {
				modernversion_Modern.popupstate = 2;
			}
		}
	} else if(modernversion_Modern.popupmode == "newitem_drop") {
		if(modernversion_Modern.popupstate < 2) {
			if(Controls.delaypressed("left",8)) {
				modernversion_Modern.currentslot = (modernversion_Modern.currentslot + (modernversion_Modern.inventory.length - 1)) % modernversion_Modern.inventory.length;
			}
			if(Controls.delaypressed("right",8)) {
				modernversion_Modern.currentslot = (modernversion_Modern.currentslot + 1) % modernversion_Modern.inventory.length;
			}
		}
		if(modernversion_Modern.popupstate == 1) {
			if(Controls.justpressed("action")) {
				modernversion_Modern.popupstate = 2;
			}
		}
	}
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Init = function() { };
$hxClasses["Init"] = Init;
Init.__name__ = ["Init"];
Init.loadresources = function() {
	var soundlist = ["collectgem","collectitem","collectkey","damaged","destroy","nextfloor","lockeddoor","opendoor","shoot","spotted","stun","unlock","useitem","talk","alarm","ticker","victory","fall","start","restart"];
	var _g1 = 0;
	var _g = soundlist.length;
	while(_g1 < _g) haxegon_Music.loadsound(soundlist[_g1++]);
	haxegon_Music.loadsong("helicopter",0.25);
	haxegon_Music.loadsong("silence");
	haxegon_Music.playsong("silence");
	haxegon_Gfx.loadtiles("terminal",12,12);
	haxegon_Gfx.loadtiles("colorterminal",12,12);
	haxegon_Gfx.loadimage("guibar");
	haxegon_Text.set_size(1);
	haxegon_Text.set_font("fffhomepage");
	haxegon_Text.set_size(1);
	haxegon_Text.set_font("fffhomepagebold");
};
Init.init = function() {
	terrylib_World.changecamera("none");
	terrylib_Obj.templates.push(new objs_Ent_$player());
	terrylib_Obj.templates.push(new objs_Ent_$enemy());
	terrylib_Obj.templates.push(new objs_Ent_$item());
	terrylib_Obj.templates.push(new objs_Ent_$treasure());
	terrylib_Obj.templates.push(new objs_Ent_$npc());
	terrylib_Obj.loadtemplates();
	Init.loadresources();
	terrylib_Rand.setseed(Math.random() * 50000 | 0);
	gamecontrol_Openworld.generate("day5");
	Render.initstars();
	gamecontrol_Game.changestate(0);
	haxegon_Music.playsound("start");
	modernversion_Modern.start();
	haxegon_Text.set_font("fffhomepage");
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var tmp = $iterator(it)();
	while(tmp.hasNext()) a.push(tmp.next());
	return a;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var Logic = function() { };
$hxClasses["Logic"] = Logic;
Logic.__name__ = ["Logic"];
Logic.fallfromtowerlogic = function() {
	if(Logic.endingstate == "start") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 5) {
			Logic.endingstatepara = 0;
			Logic.endingstate = "start2";
		}
	} else if(Logic.endingstate == "start2") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 30) {
			Logic.endingstatepara = 0;
			Logic.endingstate = "start3";
		}
	} else if(Logic.endingstate == "start3") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 15) {
			Logic.endingstatepara = 0;
			Logic.endingstate = "start4";
		}
	} else if(Logic.endingstate == "start4") {
		Logic.endingstate = "start5";
		modernversion_Modern.endlevelanimationstate = 1;
		modernversion_Modern.endlevelanimationaction = "outsideworld";
	}
	if(modernversion_Modern.endlevelanimationstate > 0) {
		modernversion_Modern.endlevelanimationdelay++;
		if(modernversion_Modern.endlevelanimationdelay >= modernversion_Modern.endlevelanimationspeed) {
			modernversion_Modern.endlevelanimationstate += 2;
			modernversion_Modern.endlevelanimationdelay = 0;
			if(modernversion_Modern.endlevelanimationstate > gamecontrol_Draw.screentileheight) {
				if(modernversion_Modern.endlevelanimationaction == "outsideworld") {
					gamecontrol_Game.changestate(3);
					modernversion_Modern.outsideworld();
				}
			}
		}
	} else if(modernversion_Modern.endlevelanimationstate < 0) {
		modernversion_Modern.endlevelanimationdelay++;
		if(modernversion_Modern.endlevelanimationdelay >= modernversion_Modern.endlevelanimationspeed) {
			modernversion_Modern.endlevelanimationstate -= 2;
			modernversion_Modern.endlevelanimationdelay = 0;
			if(modernversion_Modern.endlevelanimationstate < -gamecontrol_Draw.screentileheight) {
				modernversion_Modern.endlevelanimationstate = 0;
				modernversion_Modern.endlevelanimationdelay = 0;
			}
		}
	}
};
Logic.endinglogic = function() {
	if(Logic.endingstate == "start") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 5) {
			Logic.endingstatepara = 0;
			Logic.endingstate = "start2";
		}
	} else if(Logic.endingstate == "start2") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 30) {
			Logic.endingstatepara = 0;
			Logic.endingstate = "start3";
		}
	} else if(Logic.endingstate == "start3") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 120) {
			haxegon_Music.playsound("ticker");
			Logic.endingstatepara = 0;
			Logic.endingstate = "start4";
		}
	} else if(Logic.endingstate == "start4") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 30) {
			haxegon_Music.playsound("ticker");
			Logic.endingstatepara = 0;
			Logic.endingstate = "start5";
		}
	} else if(Logic.endingstate == "start5") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 30) {
			Logic.endingstatepara = 0;
			if(gamecontrol_Game.cash == 0) {
				haxegon_Music.playsound("collectitem");
				Logic.endingstate = "nocash";
			} else {
				if(gamecontrol_Game.cash > 1) {
					haxegon_Music.playsound("collectgem");
				}
				Logic.endingstate = "countcash";
				Logic.endingstatepara = 1;
				Logic.endingstatedelay = 5;
			}
		}
	} else if(Logic.endingstate == "countcash") {
		if(Logic.endingstatedelay <= 0) {
			haxegon_Music.playsound("collectgem");
			Logic.endingstatepara++;
			Logic.endingstatedelay = 5;
			if(Logic.endingstatepara >= gamecontrol_Game.cash) {
				Logic.endingstatepara = 0;
				Logic.endingstatedelay = 0;
				Logic.endingstate = "countcash2";
			}
		} else {
			Logic.endingstatedelay--;
		}
	} else if(Logic.endingstate == "countcash2") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 30) {
			haxegon_Music.playsound("victory");
			Logic.endingstatepara = 0;
			Logic.endingstate = "nocash2";
		}
	} else if(Logic.endingstate == "nocash") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 60) {
			haxegon_Music.playsound("victory");
			Logic.endingstatepara = 0;
			Logic.endingstate = "nocash2";
		}
	} else if(Logic.endingstate == "nocash2") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 60) {
			haxegon_Music.playsound("ticker");
			Logic.endingstatepara = 0;
			Logic.endingstate = "nocash3";
		}
	} else if(Logic.endingstate == "nocash3") {
		Logic.endingstatepara++;
		if(Logic.endingstatepara >= 30) {
			haxegon_Music.playsound("ticker");
			Logic.endingstatepara = 0;
			Logic.endingstate = "pressspace";
		}
	}
	if(modernversion_Modern.endlevelanimationstate > 0) {
		modernversion_Modern.endlevelanimationdelay++;
		if(modernversion_Modern.endlevelanimationdelay >= modernversion_Modern.endlevelanimationspeed) {
			modernversion_Modern.endlevelanimationstate += 2;
			modernversion_Modern.endlevelanimationdelay = 0;
			if(modernversion_Modern.endlevelanimationstate > gamecontrol_Draw.screentileheight) {
				if(modernversion_Modern.endlevelanimationaction == "titlescreen") {
					gamecontrol_Game.changestate(0);
					modernversion_Modern.endlevelanimationstate = -1;
				}
			}
		}
	} else if(modernversion_Modern.endlevelanimationstate < 0) {
		modernversion_Modern.endlevelanimationdelay++;
		if(modernversion_Modern.endlevelanimationdelay >= modernversion_Modern.endlevelanimationspeed) {
			modernversion_Modern.endlevelanimationstate -= 2;
			modernversion_Modern.endlevelanimationdelay = 0;
			if(modernversion_Modern.endlevelanimationstate < -gamecontrol_Draw.screentileheight) {
				modernversion_Modern.endlevelanimationstate = 0;
				modernversion_Modern.endlevelanimationdelay = 0;
			}
		}
	}
};
Logic.titlelogic = function() {
	if(modernversion_Modern.endlevelanimationstate > 0) {
		modernversion_Modern.endlevelanimationdelay++;
		if(modernversion_Modern.endlevelanimationdelay >= modernversion_Modern.endlevelanimationspeed) {
			modernversion_Modern.endlevelanimationstate += 2;
			modernversion_Modern.endlevelanimationdelay = 0;
			if(modernversion_Modern.endlevelanimationstate > gamecontrol_Draw.screentileheight) {
				if(modernversion_Modern.endlevelanimationaction == "startgame") {
					gamecontrol_Game.changestate(3);
					modernversion_Modern.start();
				}
			}
		}
	} else if(modernversion_Modern.endlevelanimationstate < 0) {
		modernversion_Modern.endlevelanimationdelay++;
		if(modernversion_Modern.endlevelanimationdelay >= modernversion_Modern.endlevelanimationspeed) {
			modernversion_Modern.endlevelanimationstate -= 2;
			modernversion_Modern.endlevelanimationdelay = 0;
			if(modernversion_Modern.endlevelanimationstate < -gamecontrol_Draw.screentileheight) {
				modernversion_Modern.endlevelanimationstate = 0;
				modernversion_Modern.endlevelanimationdelay = 0;
			}
		}
	}
};
Logic.gamelogic = function() {
	Logic.dopopuplogic();
	Logic.updatetimersandanimations();
	while(gamecontrol_Game.turn == "figureoutmove") {
		var _g1 = 0;
		var _g = terrylib_Obj.nentity;
		while(_g1 < _g) {
			var i = _g1++;
			if(terrylib_Obj.entities[i].active) {
				if(!terrylib_Obj.entities[i].actionset) {
					gamecontrol_Game.clearchain();
					while(!terrylib_Obj.entities[i].actionset) gamecontrol_Game.figureoutmove(i);
				}
			}
		}
		if(gamecontrol_Game.allactionsset()) {
			gamecontrol_Game.turn = "domove";
			var _g11 = 0;
			var _g2 = terrylib_Obj.nentity;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(terrylib_Obj.entities[i1].active) {
					if(terrylib_Obj.entities[i1].action == "nothing") {
						if(gamecontrol_Game.couldtryagain(i1)) {
							if(terrylib_Obj.entities[i1].type != "player") {
								gamecontrol_Game.resetenemymove(i1);
								var canmoveagain = false;
								gamecontrol_Game.tx1 = gamecontrol_Game.getcurrentx(i1);
								gamecontrol_Game.ty1 = gamecontrol_Game.getcurrenty(i1);
								var j = 0;
								while(j < terrylib_Obj.entities[i1].numpossibleactions) {
									if(terrylib_Obj.entities[i1].possibleactions[j] == "move_up") {
										canmoveagain = !gamecontrol_Game.couldtry(gamecontrol_Game.tx1,gamecontrol_Game.ty1 - 1,i1);
									} else if(terrylib_Obj.entities[i1].possibleactions[j] == "move_down") {
										canmoveagain = !gamecontrol_Game.couldtry(gamecontrol_Game.tx1,gamecontrol_Game.ty1 + 1,i1);
									} else if(terrylib_Obj.entities[i1].possibleactions[j] == "move_left") {
										canmoveagain = !gamecontrol_Game.couldtry(gamecontrol_Game.tx1 - 1,gamecontrol_Game.ty1,i1);
									} else if(terrylib_Obj.entities[i1].possibleactions[j] == "move_right") {
										canmoveagain = !gamecontrol_Game.couldtry(gamecontrol_Game.tx1 + 1,gamecontrol_Game.ty1,i1);
									}
									++j;
									if(canmoveagain) {
										j = terrylib_Obj.entities[i1].numpossibleactions;
									}
								}
								if(canmoveagain) {
									gamecontrol_Game.turn = "figureoutmove";
								} else {
									terrylib_Obj.entities[i1].action = "nothing";
									terrylib_Obj.entities[i1].actionset = true;
									terrylib_Obj.entities[i1].numpossibleactions = 0;
								}
							}
						}
					}
				}
			}
		}
		var playervar = terrylib_Obj.getplayer();
		if(playervar == -1) {
			gamecontrol_Game.turn = "playermove";
		} else if(terrylib_Obj.entities[playervar].actionset && terrylib_Obj.entities[playervar].action == "nothing") {
			gamecontrol_Game.turn = "playermove";
			gamecontrol_Game.speedframe += 11;
			if(gamecontrol_Game.speedframe >= 12) {
				gamecontrol_Game.speedframe -= 12;
			}
			gamecontrol_Localworld.updatelighting();
			var _g12 = 0;
			var _g3 = terrylib_Obj.nentity;
			while(_g12 < _g3) {
				var i2 = _g12++;
				if(terrylib_Obj.entities[i2].active) {
					if(terrylib_Obj.entities[i2].userevertdir) {
						terrylib_Obj.entities[i2].dir = terrylib_Obj.entities[i2].revertdir;
					}
				}
			}
		}
	}
	if(gamecontrol_Game.turn == "domove") {
		var _g13 = 0;
		var _g4 = terrylib_Obj.nentity;
		while(_g13 < _g4) {
			var i3 = _g13++;
			if(terrylib_Obj.entities[i3].active) {
				terrylib_Obj.entities[i3].clearanim();
				if(gamecontrol_Game.timestop <= 0 || terrylib_Obj.entities[i3].rule == "player") {
					if(terrylib_Help.getroot(terrylib_Obj.entities[i3].action,"_") == "move") {
						if(terrylib_Obj.entities[i3].action == "move_up") {
							if(terrylib_Obj.entities[i3].canturn) {
								terrylib_Obj.entities[i3].dir = terrylib_Help.UP;
							}
							terrylib_Obj.entities[i3].yp--;
							terrylib_Obj.entities[i3].animy = 12;
							terrylib_Obj.entities[i3].animyrate = 4;
						} else if(terrylib_Obj.entities[i3].action == "move_down") {
							if(terrylib_Obj.entities[i3].canturn) {
								terrylib_Obj.entities[i3].dir = terrylib_Help.DOWN;
							}
							terrylib_Obj.entities[i3].yp++;
							terrylib_Obj.entities[i3].animy = -12;
							terrylib_Obj.entities[i3].animyrate = 4;
						} else if(terrylib_Obj.entities[i3].action == "move_left") {
							if(terrylib_Obj.entities[i3].canturn) {
								terrylib_Obj.entities[i3].dir = terrylib_Help.LEFT;
								terrylib_Obj.entities[i3].dogdir = terrylib_Help.LEFT;
							}
							terrylib_Obj.entities[i3].xp--;
							terrylib_Obj.entities[i3].animx = 12;
							terrylib_Obj.entities[i3].animxrate = 4;
						} else if(terrylib_Obj.entities[i3].action == "move_right") {
							if(terrylib_Obj.entities[i3].canturn) {
								terrylib_Obj.entities[i3].dir = terrylib_Help.RIGHT;
								terrylib_Obj.entities[i3].dogdir = terrylib_Help.RIGHT;
							}
							terrylib_Obj.entities[i3].xp++;
							terrylib_Obj.entities[i3].animx = -12;
							terrylib_Obj.entities[i3].animxrate = 4;
						}
					}
				}
			}
		}
		Logic.turndelay = 3;
		gamecontrol_Game.turn = "animatemove";
	}
	if(gamecontrol_Game.turn == "animatemove") {
		var animationcomplete = true;
		var _g14 = 0;
		var _g5 = terrylib_Obj.nentity;
		while(_g14 < _g5) {
			var i4 = _g14++;
			if(terrylib_Obj.entities[i4].active) {
				if(terrylib_Obj.entities[i4].animx != 0) {
					if(terrylib_Obj.entities[i4].animx > 0) {
						terrylib_Obj.entities[i4].animx -= terrylib_Obj.entities[i4].animxrate;
						if(terrylib_Obj.entities[i4].animx <= 0) {
							terrylib_Obj.entities[i4].animx = 0;
						} else {
							animationcomplete = false;
						}
					} else if(terrylib_Obj.entities[i4].animx < 0) {
						terrylib_Obj.entities[i4].animx += terrylib_Obj.entities[i4].animxrate;
						if(terrylib_Obj.entities[i4].animx >= 0) {
							terrylib_Obj.entities[i4].animx = 0;
						} else {
							animationcomplete = false;
						}
					}
				}
				if(terrylib_Obj.entities[i4].animy != 0) {
					if(terrylib_Obj.entities[i4].animy > 0) {
						terrylib_Obj.entities[i4].animy -= terrylib_Obj.entities[i4].animyrate;
						if(terrylib_Obj.entities[i4].animy <= 0) {
							terrylib_Obj.entities[i4].animy = 0;
						} else {
							animationcomplete = false;
						}
					} else if(terrylib_Obj.entities[i4].animy < 0) {
						terrylib_Obj.entities[i4].animy += terrylib_Obj.entities[i4].animyrate;
						if(terrylib_Obj.entities[i4].animy >= 0) {
							terrylib_Obj.entities[i4].animy = 0;
						} else {
							animationcomplete = false;
						}
					}
				}
			}
		}
		if(animationcomplete) {
			gamecontrol_Game.turn = "endofturn";
		}
		if(Logic.turndelay > 0) {
			Logic.turndelay--;
		}
	}
	if(gamecontrol_Game.turn == "endofturn") {
		if(Logic.turndelay > 0) {
			Logic.turndelay--;
		} else {
			gamecontrol_Game.turn = "playermove";
			Logic.endturn();
		}
	}
	var _g15 = 0;
	var _g6 = terrylib_Obj.nentity;
	while(_g15 < _g6) {
		var i5 = _g15++;
		terrylib_Obj.animateentities(i5);
		if(terrylib_Obj.entities[i5].messagedelay > 0) {
			terrylib_Obj.entities[i5].messagedelay--;
		}
	}
};
Logic.endturn = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(gamecontrol_Game.timestop <= 0 || terrylib_Obj.entities[i].rule == "player") {
				terrylib_Obj.updateentities(i);
			}
		}
	}
	var player = terrylib_Obj.getplayer();
	var _g11 = 0;
	var _g2 = terrylib_Obj.nentity;
	while(_g11 < _g2) {
		var i1 = _g11++;
		if(terrylib_Obj.entities[i1].active) {
			if(terrylib_Obj.entities[i1].rule == "enemy") {
				if(terrylib_Obj.entities[i1].state != 2) {
					if(terrylib_World.at(terrylib_Obj.entities[i1].xp,terrylib_Obj.entities[i1].yp) == gamecontrol_Localworld.BANANAPEEL) {
						terrylib_World.placetile(terrylib_Obj.entities[i1].xp,terrylib_Obj.entities[i1].yp,gamecontrol_Localworld.FLOOR);
						gamecontrol_Game.stunenemy(i1,30);
					}
				} else if(player > -1) {
					if(terrylib_Obj.entities[i1].xp == terrylib_Obj.entities[player].xp) {
						if(terrylib_Obj.entities[i1].yp == terrylib_Obj.entities[player].yp) {
							terrylib_Obj.entities[i1].life++;
						}
					}
				}
			}
		}
	}
	if(modernversion_AIDirector.darkroom || gamecontrol_Game.cloaked > 0) {
		gamecontrol_Localworld.setroomfog(0);
	}
	gamecontrol_Localworld.updatelighting();
	if(gamecontrol_Game.timestop <= 0) {
		gamecontrol_Localworld.updatefire();
	}
	if(gamecontrol_Game.timestop <= 0) {
		if(gamecontrol_Game.health > 0) {
			gamecontrol_Game.doenemyattack();
		}
	}
	gamecontrol_Game.updatestatuseffects();
	if(gamecontrol_Localworld.onfire) {
		gamecontrol_Localworld.incinerate();
	}
	if(gamecontrol_Game.timestop <= 0) {
		gamecontrol_Game.updatereinforcements();
	}
	if(modernversion_AIDirector.glitchmode && !modernversion_AIDirector.outside) {
		modernversion_AIDirector.glitch();
	}
	if(modernversion_AIDirector.outside) {
		var zone = Math.max(Math.abs(modernversion_Modern.worldx - 50),Math.abs(modernversion_Modern.worldy - 50)) | 0;
		if(zone >= 4) {
			modernversion_AIDirector.glitchoutside(zone);
		}
	}
	if(modernversion_Modern.playerjustteleported) {
		modernversion_Modern.playerjustteleported = false;
	}
	modernversion_Modern.checkfortowerexit();
};
Logic.dopopuplogic = function() {
	if(modernversion_Modern.popupwindow) {
		if(modernversion_Modern.popupmode == "itemshopkeeper") {
			if(modernversion_Modern.popupstate == 0) {
				modernversion_Modern.popuplerp++;
				if(modernversion_Modern.popuplerp >= modernversion_Modern.popupspeed) {
					modernversion_Modern.popupstate = 1;
				}
			} else if(modernversion_Modern.popupstate >= 2) {
				modernversion_Modern.popuplerp -= 2;
				if(modernversion_Modern.popuplerp <= 0) {
					modernversion_Modern.popupwindow = false;
				}
			}
		}
		if(modernversion_Modern.popupmode == "shopkeeper") {
			if(modernversion_Modern.popupstate == 0) {
				modernversion_Modern.popuplerp++;
				if(modernversion_Modern.popuplerp >= modernversion_Modern.popupspeed) {
					modernversion_Modern.popupstate = 1;
				}
			} else if(modernversion_Modern.popupstate >= 2) {
				modernversion_Modern.popuplerp -= 2;
				if(modernversion_Modern.popuplerp <= 0) {
					modernversion_Modern.popupwindow = false;
				}
			}
		} else if(modernversion_Modern.popupmode == "soldoutshopkeeper") {
			if(modernversion_Modern.popupstate == 0) {
				modernversion_Modern.popuplerp++;
				if(modernversion_Modern.popuplerp >= modernversion_Modern.popupspeed) {
					modernversion_Modern.popupstate = 1;
				}
			} else if(modernversion_Modern.popupstate == 2) {
				modernversion_Modern.popuplerp -= 2;
				if(modernversion_Modern.popuplerp <= 0) {
					modernversion_Modern.popupwindow = false;
				}
			}
		} else if(modernversion_Modern.popupmode == "newitem") {
			if(modernversion_Modern.popupstate == 0) {
				modernversion_Modern.popuplerp++;
				if(modernversion_Modern.popuplerp >= modernversion_Modern.popupspeed) {
					modernversion_Modern.popupstate = 1;
				}
			} else if(modernversion_Modern.popupstate == 2) {
				modernversion_Modern.popuplerp -= 2;
				if(modernversion_Modern.popuplerp <= 0) {
					modernversion_Modern.popupwindow = false;
				}
			}
		} else if(modernversion_Modern.popupmode == "newitem_drop") {
			if(modernversion_Modern.popupstate == 0) {
				modernversion_Modern.popuplerp++;
				if(modernversion_Modern.popuplerp >= modernversion_Modern.popupspeed) {
					modernversion_Modern.popupstate = 1;
				}
			} else if(modernversion_Modern.popupstate == 2) {
				modernversion_Modern.popuplerp -= 2;
				if(modernversion_Modern.popuplerp <= 0) {
					if(modernversion_Modern.currentslot == modernversion_Modern.inventory.length - 1) {
						modernversion_Modern.inventory[modernversion_Modern.inventory.length - 1] = "";
						modernversion_Modern.currentslot = modernversion_Modern.oldcurrentslot;
					} else {
						modernversion_Modern.inventory[modernversion_Modern.currentslot] = modernversion_Modern.inventory[modernversion_Modern.inventory.length - 1];
						modernversion_Modern.inventory_num[modernversion_Modern.currentslot] = modernversion_Modern.inventory_num[modernversion_Modern.inventory.length - 1];
						modernversion_Modern.inventory[modernversion_Modern.inventory.length - 1] = "";
						modernversion_Modern.currentslot = modernversion_Modern.oldcurrentslot;
					}
					modernversion_Modern.popupwindow = false;
				}
			}
		}
	}
};
Logic.updatetimersandanimations = function() {
	if(gamecontrol_Game.messagedelay > 0) {
		gamecontrol_Game.messagedelay--;
	}
	if(gamecontrol_Openworld.viewmap > 0) {
		gamecontrol_Openworld.viewmap--;
	}
	if(modernversion_Modern.endlevelanimationstate > 0) {
		modernversion_Modern.endlevelanimationdelay++;
		if(modernversion_Modern.endlevelanimationdelay >= modernversion_Modern.endlevelanimationspeed) {
			modernversion_Modern.endlevelanimationstate += 2;
			modernversion_Modern.endlevelanimationdelay = 0;
			if(modernversion_Modern.endlevelanimationstate > gamecontrol_Draw.screentileheight) {
				if(modernversion_Modern.endlevelanimationaction == "next") {
					modernversion_Modern.usestairs_afteranimation();
				} else if(modernversion_Modern.endlevelanimationaction == "endgame") {
					gamecontrol_Game.startending();
				} else if(modernversion_Modern.endlevelanimationaction == "alpha_level12") {
					gamecontrol_Menu.createmenu("terryletter");
					gamecontrol_Menu.textmode = 1;
					gamecontrol_Game.lettertime = 0;
					modernversion_Modern.endlevelanimationaction = "readletter";
					modernversion_Modern.endlevelanimationstate = 0;
				} else if(modernversion_Modern.endlevelanimationaction == "leftmap") {
					gamecontrol_Game.leavetower();
				} else if(modernversion_Modern.endlevelanimationaction == "restart") {
					modernversion_Modern.restart();
				} else {
					throw new js__$Boot_HaxeError("Dunno what to do with " + modernversion_Modern.endlevelanimationaction);
				}
			}
		}
	} else if(modernversion_Modern.endlevelanimationstate < 0) {
		modernversion_Modern.endlevelanimationdelay++;
		if(modernversion_Modern.endlevelanimationdelay >= modernversion_Modern.endlevelanimationspeed) {
			modernversion_Modern.endlevelanimationstate -= 2;
			modernversion_Modern.endlevelanimationdelay = 0;
			if(modernversion_Modern.endlevelanimationstate < -gamecontrol_Draw.screentileheight) {
				modernversion_Modern.endlevelanimationstate = 0;
				modernversion_Modern.endlevelanimationdelay = 0;
			}
		}
	}
	if(gamecontrol_Inventory.useitemcountdown > 0) {
		gamecontrol_Inventory.useitemcountdown--;
		if(gamecontrol_Inventory.useitemcountdown == 0) {
			gamecontrol_Use.doitemaction(gamecontrol_Inventory.itemtouse);
		}
	}
	if(gamecontrol_Game.highlightcooldown > 0) {
		gamecontrol_Game.highlightcooldown--;
		if(gamecontrol_Game.highlightcooldown == 0) {
			gamecontrol_Localworld.clearhighlight();
		}
	}
	if(gamecontrol_Menu.textmode == 1) {
		if(gamecontrol_Menu.showscript == "terryletter" || gamecontrol_Menu.showscript == "alpha_secret") {
			gamecontrol_Game.lettertime++;
		}
	}
};
var Main = function() {
	this.screenshakestart = false;
	this.gamemenu = false;
	this.standalonemode = false;
	haxegon_Gfx.resizescreen(384,240);
	Controls.init();
	terrylib_Help.init();
	terrylib_Lerp.init();
	terrylib_Flag.init();
	gamecontrol_Script.init();
	terrylib_World.init();
	terrylib_Obj.init();
	terrylib_Textbox.init();
	gamecontrol_Game.init();
	gamecontrol_Localworld.init();
	gamecontrol_Generator.init();
	gamecontrol_Openworld.init();
	gamecontrol_Draw.init();
	modernversion_Itemstats.init();
	terrylib_Rand.initperlin(Std.random(10),8,0.5);
	var domain_parts = openfl_Lib.current.stage.get_loaderInfo().url.split("://");
	(domain_parts.length > 1?domain_parts[1].split("/"):domain_parts[0].split("/"))[0].indexOf("terrycavanaghgames.com");
	Init.init();
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.prototype = {
	standalonemode: null
	,gamemenu: null
	,update: function() {
		if(this.standalonemode) {
			if(!this.gamemenu) {
				if(haxegon_Input.justpressed(haxegon_Key.ESCAPE)) {
					this.gamemenu = true;
				}
			} else {
				haxegon_Input.justpressed(haxegon_Key.ESCAPE);
				if(haxegon_Input.justpressed(haxegon_Key.SPACE)) {
					this.gamemenu = false;
					haxegon_Input.forcerelease(haxegon_Key.SPACE);
				}
			}
			if(haxegon_Input.justpressed(haxegon_Key.F5)) {
				haxegon_Gfx.set_fullscreen(!haxegon_Gfx.get_fullscreen());
			}
		}
		this.doinput();
		this.dologic();
	}
	,render: function() {
		this.dorender();
		if(this.standalonemode) {
			if(this.gamemenu) {
				haxegon_Gfx.fillbox(0,0,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight,haxegon_Col.BLACK,0.6);
				gamecontrol_Draw.setboldtext();
				haxegon_Text.set_size(2);
				haxegon_Text.align(haxegon_Text.CENTER);
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,haxegon_Gfx.screenheightmid - 20,"Do you want to quit?");
				gamecontrol_Draw.setnormaltext();
				haxegon_Text.set_size(1);
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,haxegon_Gfx.screenheightmid + 20,"Press ESCAPE again to quit,");
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,haxegon_Gfx.screenheightmid + 35,"or SPACE to return to the game.");
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,haxegon_Gfx.screenheight - 25,"Press F5 to toggle fullscreen");
			}
		}
	}
	,doinput: function() {
		switch(gamecontrol_Game.gamestate) {
		case 0:
			GameInput.titleinput();
			break;
		case 3:
			GameInput.gameinput();
			break;
		case 6:
			GameInput.endinginput();
			break;
		case 7:
			GameInput.fallfromtowerinput();
			break;
		}
	}
	,dologic: function() {
		gamecontrol_Script.runscript();
		terrylib_Textbox.updatetextboxes();
		terrylib_Lerp.update();
		Profiler.startframe(Profiler.PROFILE_LOGIC);
		switch(gamecontrol_Game.gamestate) {
		case 0:
			Logic.titlelogic();
			break;
		case 3:
			Logic.gamelogic();
			break;
		case 6:
			Logic.endinglogic();
			break;
		case 7:
			Logic.fallfromtowerlogic();
			break;
		}
		Profiler.endframe(Profiler.PROFILE_LOGIC);
		gamecontrol_Game.fadelogic();
		terrylib_Obj.cleanup();
		gamecontrol_Draw.processfade();
		terrylib_Help.updateglow();
		if(gamecontrol_Draw.screenshake > 0) {
			var viewPortRectangle = starling_core_Starling.get_current().get_viewPort();
			if(!this.screenshakestart) {
				this.realviewportx = viewPortRectangle.x;
				this.realviewporty = viewPortRectangle.y;
				this.screenshakestart = true;
			}
			viewPortRectangle.x = this.realviewportx + haxegon_Random["int"](-4,4);
			viewPortRectangle.y = this.realviewporty + haxegon_Random["int"](-4,4);
			starling_core_Starling.get_current().set_viewPort(viewPortRectangle);
			gamecontrol_Draw.screenshake--;
			if(gamecontrol_Draw.screenshake <= 0) {
				viewPortRectangle.x = this.realviewportx;
				viewPortRectangle.y = this.realviewporty;
				starling_core_Starling.get_current().set_viewPort(viewPortRectangle);
				this.screenshakestart = false;
			}
		}
	}
	,dorender: function() {
		Profiler.startframe(Profiler.PROFILE_RENDER);
		switch(gamecontrol_Game.gamestate) {
		case 0:
			Render.titlerender();
			break;
		case 3:
			Render.gamerender();
			break;
		case 6:
			Render.endingrender();
			break;
		case 7:
			Render.fallfromtowerrender();
			break;
		}
		Profiler.endframe(Profiler.PROFILE_RENDER);
		gamecontrol_Draw.drawfade();
	}
	,screenshakestart: null
	,realviewportx: null
	,realviewporty: null
	,__class__: Main
};
Math.__name__ = ["Math"];
var Perlinarray = function() { };
$hxClasses["Perlinarray"] = Perlinarray;
Perlinarray.__name__ = ["Perlinarray"];
var Profiler = function() { };
$hxClasses["Profiler"] = Profiler;
Profiler.__name__ = ["Profiler"];
Profiler.init = function() {
	Profiler.active = true;
	Profiler.starttime = openfl_Lib.getTimer();
	Profiler.framesthissecond = 0;
	Profiler.fps = -1;
	Profiler.lastframes = [];
	Profiler.averageframetime = [];
	Profiler.maxframetime = [];
	Profiler.minframetime = [];
	Profiler.frametime = [];
	var _g = 0;
	while(_g < 3) {
		++_g;
		Profiler.lastframes.push([]);
		Profiler.averageframetime.push(-1);
		Profiler.maxframetime.push(-1);
		Profiler.minframetime.push(-1);
		Profiler.frametime.push(0);
	}
	Profiler.started = 2;
	haxegon_Core.set_showstats(true);
	haxegon_Core.callfunctionstartframe(Profiler.startframefunction);
};
Profiler.startframefunction = function() {
	Profiler.startframe(Profiler.PROFILE_MAIN);
};
Profiler.callafterframe = function() {
	Profiler.update();
	Profiler.framesthissecond++;
	Profiler.endframe(Profiler.PROFILE_MAIN);
};
Profiler.now = function() {
	return openfl_Lib.getTimer();
};
Profiler.startframe = function(f) {
	if(!Profiler.active) {
		return;
	}
	Profiler.frametime[f] = openfl_Lib.getTimer();
};
Profiler.endframe = function(f) {
	if(!Profiler.active) {
		return;
	}
	Profiler.frametime[f] = openfl_Lib.getTimer() - Profiler.frametime[f];
	if(Profiler.lastframes[f].length < 30) {
		Profiler.lastframes[f].push(Profiler.frametime[f]);
	} else {
		Profiler.lastframes[f].push(Profiler.frametime[f]);
		Profiler.maxframetime[f] = -1;
		Profiler.minframetime[f] = 99999999;
		var _g = 0;
		while(_g < 30) {
			Profiler.frametime[f] = Profiler.lastframes[f][Profiler.lastframes[f].length - 1 - _g++];
			Profiler.averageframetime[f] += Profiler.frametime[f];
			if(Profiler.frametime[f] > Profiler.maxframetime[f]) {
				Profiler.maxframetime[f] = Profiler.frametime[f];
			}
			if(Profiler.frametime[f] < Profiler.minframetime[f]) {
				Profiler.minframetime[f] = Profiler.frametime[f];
			}
		}
		Profiler.averageframetime[f] = Profiler.averageframetime[f] / 30 | 0;
	}
};
Profiler.update = function() {
	if(!Profiler.active) {
		return;
	}
	haxegon_Text.align(haxegon_Text.LEFT);
	if(Profiler.started == 0) {
		if(openfl_Lib.getTimer() - Profiler.starttime > 1000) {
			Profiler.fps = Profiler.framesthissecond;
			Profiler.framesthissecond = 0;
			Profiler.starttime = openfl_Lib.getTimer();
		}
		Profiler.ypos = 134;
		haxegon_Gfx.fillbox(0,Profiler.ypos,Profiler.graphwidth,240 - Profiler.ypos,haxegon_Col.BLACK);
		if(Profiler.averageframetime[Profiler.PROFILE_MAIN] > -1) {
			haxegon_Gfx.drawline(0,Profiler.ypos + 24,Profiler.graphwidth,Profiler.ypos + 24,13421772);
			haxegon_Gfx.drawline(0,Profiler.ypos + 40,Profiler.graphwidth,Profiler.ypos + 40,13421772);
			var _g1 = 0;
			var _g = Profiler.graphwidth;
			while(_g1 < _g) {
				var j = _g1++;
				if(Profiler.lastframes[Profiler.PROFILE_MAIN].length - Profiler.graphwidth + j >= 0) {
					Profiler.graphy = Profiler.lastframes[Profiler.PROFILE_MAIN][Profiler.lastframes[Profiler.PROFILE_MAIN].length - Profiler.graphwidth + j] / 2 | 0;
					if(Profiler.graphy > 40) {
						haxegon_Gfx.fillbox(j,Profiler.ypos,1,1,haxegon_Col.YELLOW);
					} else {
						haxegon_Gfx.fillbox(j,Profiler.ypos + 40 - Profiler.graphy,1,1,haxegon_Col.YELLOW);
					}
				}
			}
		}
		Profiler.ypos += 44;
		if(Profiler.fps != -1) {
			haxegon_Text.display(5,Profiler.ypos,"FPS: " + Profiler.fps,Profiler.fps <= 28?haxegon_Col.ORANGE:16777215);
			if(Profiler.averageframetime[Profiler.PROFILE_MAIN] > -1) {
				Profiler.ypos += 12;
				if(Profiler.averageframetime[Profiler.PROFILE_MAIN] <= 1) {
					haxegon_Text.display(5,Profiler.ypos,"<1ms per frame",13421772);
				} else {
					haxegon_Text.display(5,Profiler.ypos,Profiler.averageframetime[Profiler.PROFILE_MAIN] + "ms per frame",Profiler.averageframetime[Profiler.PROFILE_MAIN] >= 32?haxegon_Col.ORANGE:13421772);
				}
				Profiler.ypos += 12;
				haxegon_Text.display(5,Profiler.ypos,"min: " + Profiler.minframetime[Profiler.PROFILE_MAIN] + ", max: " + Profiler.maxframetime[Profiler.PROFILE_MAIN],13421772);
			}
			if(Profiler.averageframetime[Profiler.PROFILE_LOGIC] > -1) {
				Profiler.ypos += 12;
				if(Profiler.averageframetime[Profiler.PROFILE_LOGIC] <= 1) {
					haxegon_Text.display(5,Profiler.ypos,"logic: <1ms, (" + Profiler.minframetime[Profiler.PROFILE_LOGIC] + "ms - " + Profiler.maxframetime[Profiler.PROFILE_LOGIC] + "ms)",8947848);
				} else {
					haxegon_Text.display(5,Profiler.ypos,"logic: " + Profiler.averageframetime[Profiler.PROFILE_LOGIC] + "ms, (" + Profiler.minframetime[Profiler.PROFILE_LOGIC] + "ms - " + Profiler.maxframetime[Profiler.PROFILE_LOGIC] + "ms)",Profiler.averageframetime[Profiler.PROFILE_LOGIC] >= 32?haxegon_Col.ORANGE:8947848);
				}
			}
			if(Profiler.averageframetime[Profiler.PROFILE_RENDER] > -1) {
				Profiler.ypos += 12;
				if(Profiler.averageframetime[Profiler.PROFILE_RENDER] <= 1) {
					haxegon_Text.display(5,Profiler.ypos,"draw: <1ms, (" + Profiler.minframetime[Profiler.PROFILE_RENDER] + "ms - " + Profiler.maxframetime[Profiler.PROFILE_RENDER] + "ms)",8947848);
				} else {
					haxegon_Text.display(5,Profiler.ypos,"draw: " + Profiler.averageframetime[Profiler.PROFILE_RENDER] + "ms, (" + Profiler.minframetime[Profiler.PROFILE_RENDER] + "ms - " + Profiler.maxframetime[Profiler.PROFILE_RENDER] + "ms)",Profiler.averageframetime[Profiler.PROFILE_RENDER] >= 32?haxegon_Col.ORANGE:8947848);
				}
			}
		}
	} else if(Profiler.started == 2) {
		if(openfl_Lib.getTimer() - Profiler.starttime > 5000) {
			Profiler.started = 1;
			Profiler.framesthissecond = 0;
			Profiler.starttime = openfl_Lib.getTimer();
		}
		haxegon_Gfx.fillbox(0,225,Profiler.graphwidth,30,haxegon_Col.BLACK);
		haxegon_Text.display(5,226,"starting profiler...",13421772);
	} else if(Profiler.started == 1) {
		if(openfl_Lib.getTimer() - Profiler.starttime > 1000) {
			Profiler.fps = Profiler.framesthissecond;
			Profiler.framesthissecond = 0;
			Profiler.starttime = openfl_Lib.getTimer();
			Profiler.started = 0;
		}
		haxegon_Gfx.fillbox(0,225,Profiler.graphwidth,30,haxegon_Col.BLACK);
		haxegon_Text.display(5,226,"starting profiler...",13421772);
	}
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Render = function() { };
$hxClasses["Render"] = Render;
Render.__name__ = ["Render"];
Render.initstars = function() {
	Render.star_x = [];
	Render.star_y = [];
	Render.star_speed = [];
	var _g = 0;
	while(_g < 50) {
		++_g;
		Render.star_x.push(haxegon_Random["int"](0,haxegon_Gfx.screenwidth));
		Render.star_y.push(haxegon_Random["int"](0,haxegon_Gfx.screenheight));
		Render.star_speed.push(haxegon_Random["float"](0.25,2.5));
	}
};
Render.drawstarfield = function() {
	haxegon_Gfx.clearscreen(34);
	var _g = 0;
	while(_g < 50) {
		var i = _g++;
		gamecontrol_Draw.twinkle = (openfl_Lib.getTimer() + (Render.star_y[i] | 0) * 100) % 1000;
		if(gamecontrol_Draw.twinkle >= 800) {
			gamecontrol_Draw.twinkle = gamecontrol_Draw.twinkle - 800;
			if(gamecontrol_Draw.twinkle >= 100) {
				gamecontrol_Draw.twinkle = 2;
			} else {
				gamecontrol_Draw.twinkle = 1;
			}
		} else {
			gamecontrol_Draw.twinkle = 0;
		}
		gamecontrol_Draw.precoloured_drawtile(haxegon_Gfx.screenwidth - Render.star_x[i],Render.star_y[i],23 + gamecontrol_Draw.twinkle);
		Render.star_x[i] -= Render.star_speed[i];
		if(Render.star_x[i] < -30) {
			Render.star_x[i] += haxegon_Gfx.screenwidth + 40;
			Render.star_y[i] = haxegon_Random["int"](0,haxegon_Gfx.screenheight);
			Render.star_speed[i] = haxegon_Random["float"](0.25,2.5);
		}
	}
};
Render.drawhelicopter = function(x,y,scale) {
	gamecontrol_Draw.twinkle = openfl_Lib.getTimer() % 200 > 100?0:3;
	haxegon_Gfx.scale(scale,scale);
	haxegon_Gfx.imagecolor();
	haxegon_Gfx.drawtile(x,y,"terminal",138 + gamecontrol_Draw.twinkle);
	haxegon_Gfx.drawtile(x + 12 * scale,y,"terminal",139 + gamecontrol_Draw.twinkle);
	haxegon_Gfx.drawtile(x + 12 * scale * 2,y,"terminal",140 + gamecontrol_Draw.twinkle);
	haxegon_Gfx.drawtile(x,y + 12 * scale,"terminal",154 + gamecontrol_Draw.twinkle);
	haxegon_Gfx.drawtile(x + 12 * scale,y + 12 * scale,"terminal",155 + gamecontrol_Draw.twinkle);
	haxegon_Gfx.drawtile(x + 12 * scale * 2,y + 12 * scale,"terminal",156 + gamecontrol_Draw.twinkle);
	haxegon_Gfx.drawtile(x + 12 * scale,y + 12 * scale * 2,"terminal",26);
	haxegon_Gfx.imagecolor(16771587);
	haxegon_Gfx.drawtile(x + 12 * scale * 1.5,y + 12 * scale * 3,"terminal",27);
	haxegon_Gfx.imagecolor();
	haxegon_Gfx.scale(1,1);
};
Render.drawbackdrop = function(divisions,position,height,col,speed,dir) {
	gamecontrol_Draw.twinkle = haxegon_Gfx.screenwidth / divisions | 0;
	Render.scrolloffset = -(haxegon_Core.get_time() * speed % gamecontrol_Draw.twinkle | 0);
	if(dir < 0) {
		var _g1 = 0;
		var _g = divisions + 1;
		while(_g1 < _g) {
			var j = _g1++;
			haxegon_Gfx.filltri(j * gamecontrol_Draw.twinkle - Render.scrolloffset - gamecontrol_Draw.twinkle,position + height,(j + 1) * gamecontrol_Draw.twinkle - Render.scrolloffset,position,(j + 1) * gamecontrol_Draw.twinkle - Render.scrolloffset,position + height,col);
		}
	} else if(dir > 0) {
		var _g11 = 0;
		var _g2 = divisions + 1;
		while(_g11 < _g2) {
			var j1 = _g11++;
			haxegon_Gfx.filltri(j1 * gamecontrol_Draw.twinkle - Render.scrolloffset - gamecontrol_Draw.twinkle,position,(j1 + 1) * gamecontrol_Draw.twinkle - Render.scrolloffset,position + height,j1 * gamecontrol_Draw.twinkle - Render.scrolloffset,position + height,col);
		}
	} else {
		var _g12 = 0;
		var _g3 = divisions + 1;
		while(_g12 < _g3) {
			var j2 = _g12++;
			haxegon_Gfx.filltri(j2 * gamecontrol_Draw.twinkle - Render.scrolloffset - gamecontrol_Draw.twinkle,position + height,(j2 + 0.5) * gamecontrol_Draw.twinkle - Render.scrolloffset - gamecontrol_Draw.twinkle,position,(j2 + 0.5) * gamecontrol_Draw.twinkle - Render.scrolloffset - gamecontrol_Draw.twinkle,position + height,col);
			haxegon_Gfx.filltri((j2 + 0.5) * gamecontrol_Draw.twinkle - Render.scrolloffset - gamecontrol_Draw.twinkle,position,(j2 + 1) * gamecontrol_Draw.twinkle - Render.scrolloffset - gamecontrol_Draw.twinkle,position + height,(j2 + 0.5) * gamecontrol_Draw.twinkle - Render.scrolloffset - gamecontrol_Draw.twinkle,position + height,col);
		}
	}
	haxegon_Gfx.fillbox(0,position + height,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight - (position + height),col);
};
Render.showranknumber = function(gems,ypos) {
	var xoff = 0;
	if(gems == 0) {
		haxegon_Gfx.imagecolor(haxegon_Col.rgb(255,255,96));
		haxegon_Gfx.fillbox(haxegon_Gfx.screenwidth * 0.75 - 12,ypos,25,25,haxegon_Col.BLACK);
		haxegon_Gfx.scale(2,2);
		haxegon_Gfx.drawtile(haxegon_Gfx.screenwidth * 0.75 - 12,ypos + 1,"terminal",48);
		haxegon_Gfx.scale(1,1);
		haxegon_Gfx.imagecolor();
	} else if(gems >= 100) {
		xoff = haxegon_Gfx.screenwidth * 0.75 - 105 - 12 | 0;
		var _g = 0;
		while(_g < 7) {
			var i = _g++;
			haxegon_Gfx.fillbox(xoff + i * 30,ypos,25,25,haxegon_Col.BLACK);
			if(i == 0 && gems < 5 || i == 1 && gems >= 5 && gems < 10 || i == 2 && gems >= 10 && gems < 15 || i == 3 && gems >= 15 && gems < 25 || i == 4 && gems >= 25 && gems < 50 || i == 5 && gems >= 50 && gems < 100 || i == 6 && gems >= 100) {
				haxegon_Gfx.imagecolor(haxegon_Col.rgb(255,255,96));
			} else {
				haxegon_Gfx.imagecolor(haxegon_Col.rgb(40,40,40));
			}
			haxegon_Gfx.scale(2,2);
			haxegon_Gfx.drawtile(xoff + i * 30 + 1,ypos + 1,"terminal",49 + i);
			haxegon_Gfx.scale(1,1);
			haxegon_Gfx.imagecolor();
		}
	} else if(gems >= 50) {
		xoff = haxegon_Gfx.screenwidth * 0.75 - 90 + 3 | 0;
		var _g1 = 0;
		while(_g1 < 6) {
			var i1 = _g1++;
			haxegon_Gfx.fillbox(xoff + i1 * 30,ypos,25,25,haxegon_Col.BLACK);
			if(i1 == 0 && gems < 5 || i1 == 1 && gems >= 5 && gems < 10 || i1 == 2 && gems >= 10 && gems < 15 || i1 == 3 && gems >= 15 && gems < 25 || i1 == 4 && gems >= 25 && gems < 50 || i1 == 5 && gems >= 50) {
				haxegon_Gfx.imagecolor(haxegon_Col.rgb(255,255,96));
			} else {
				haxegon_Gfx.imagecolor(haxegon_Col.rgb(40,40,40));
			}
			haxegon_Gfx.scale(2,2);
			haxegon_Gfx.drawtile(xoff + i1 * 30 + 1,ypos + 1,"terminal",49 + i1);
			haxegon_Gfx.scale(1,1);
			haxegon_Gfx.imagecolor();
		}
	} else {
		xoff = haxegon_Gfx.screenwidth * 0.75 - 75 + 3 | 0;
		var _g2 = 0;
		while(_g2 < 5) {
			var i2 = _g2++;
			haxegon_Gfx.fillbox(xoff + i2 * 30,ypos,25,25,haxegon_Col.BLACK);
			if(i2 == 0 && gems < 5 || i2 == 1 && gems >= 5 && gems < 10 || i2 == 2 && gems >= 10 && gems < 15 || i2 == 3 && gems >= 15 && gems < 25 || i2 == 4 && gems >= 25) {
				haxegon_Gfx.imagecolor(haxegon_Col.rgb(255,255,96));
			} else {
				haxegon_Gfx.imagecolor(haxegon_Col.rgb(40,40,40));
			}
			haxegon_Gfx.scale(2,2);
			haxegon_Gfx.drawtile(xoff + i2 * 30 + 1,ypos + 1,"terminal",49 + i2);
			haxegon_Gfx.scale(1,1);
			haxegon_Gfx.imagecolor();
		}
	}
};
Render.showyouescaped = function(ypos) {
	gamecontrol_Draw.setboldtext();
	haxegon_Text.set_size(2);
	haxegon_Text.align(haxegon_Text.CENTER);
	haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"YOU ESCAPED",16771587);
};
Render.showcongratulationsyouhavereachedrank = function(ypos) {
	gamecontrol_Draw.setnormaltext();
	haxegon_Text.set_size(1);
	haxegon_Text.align(haxegon_Text.CENTER);
	haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"Congratulations! You have reached rank:",haxegon_Col.WHITE);
};
Render.showrankname = function(ypos) {
	if(gamecontrol_Game.cash == 0) {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"Not in it for the money",haxegon_Col.WHITE);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 15,"[Zero gems]",haxegon_Col.WHITE);
	} else if(gamecontrol_Game.cash > 0 && gamecontrol_Game.cash < 5) {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"Better safe than sorry",haxegon_Col.WHITE);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 15,"[less than 5 gems]",haxegon_Col.WHITE);
	} else if(gamecontrol_Game.cash < 10) {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"Underachiever with potential",haxegon_Col.WHITE);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 15,"[between 5-10 gems]",haxegon_Col.WHITE);
	} else if(gamecontrol_Game.cash < 15) {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"Unstoppable",haxegon_Col.WHITE);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 15,"[between 10-15 gems]",haxegon_Col.WHITE);
	} else if(gamecontrol_Game.cash < 25) {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"The Master",haxegon_Col.WHITE);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 15,"[between 15-25 gems]",haxegon_Col.WHITE);
	} else if(gamecontrol_Game.cash < 50) {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"The best of the best",haxegon_Col.WHITE);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 15,"[more than 25 gems!]",haxegon_Col.WHITE);
	} else if(gamecontrol_Game.cash < 100) {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"A whole other level",haxegon_Col.WHITE);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 15,"[more than 50 gems!]",haxegon_Col.WHITE);
	} else {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"Is this even possible?",haxegon_Col.WHITE);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 15,"[more than 100 gems?!]",haxegon_Col.WHITE);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos + 30,"(This is the final rank.)",haxegon_Col.WHITE);
	}
};
Render.showgemcount = function(gems,ypos) {
	if(gems == 0) {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(2);
		haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"No gems!",haxegon_Col.rgb(255,255,96));
	} else {
		gamecontrol_Draw.setboldtext();
		haxegon_Text.set_size(2);
		haxegon_Gfx.imagecolor(haxegon_Col.rgb(255,255,96));
		haxegon_Text.align(haxegon_Text.LEFT);
		var xoff = haxegon_Gfx.screenwidth * 0.75 - haxegon_Text.width(" " + gems + " gem" + (gems > 1?"s":"")) / 2 - 12 | 0;
		haxegon_Gfx.scale(2,2);
		haxegon_Gfx.drawtile(xoff,ypos + 1,"terminal",36);
		haxegon_Gfx.scale(1,1);
		haxegon_Gfx.imagecolor();
		haxegon_Text.display(xoff + 24,ypos," " + gems + " gem" + (gems > 1?"s":""),haxegon_Col.rgb(255,255,96));
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
	}
};
Render.showyouleftthetowerwith = function(ypos) {
	gamecontrol_Draw.setnormaltext();
	haxegon_Text.set_size(1);
	haxegon_Text.display(haxegon_Gfx.screenwidth * 0.75,ypos,"You've left the tower with",haxegon_Col.WHITE);
};
Render.standardbacking = function() {
	Render.drawstarfield();
	Render.drawbackdrop(3,haxegon_Gfx.screenheightmid - 60,50,336911,20,0);
	Render.drawbackdrop(5,haxegon_Gfx.screenheightmid - 30,50,344345,40,0);
	Render.drawbackdrop(8,haxegon_Gfx.screenheightmid + 30,30,884273,60,0);
	Render.drawhelicopter(40,40 + (Math.sin(openfl_Lib.getTimer() / 800) * 20 | 0),3);
};
Render.fallfromtowerrender = function() {
	Render.drawstarfield();
	Render.drawbackdrop(3,haxegon_Gfx.screenheightmid - 60,50,336911,0,0);
	Render.drawbackdrop(5,haxegon_Gfx.screenheightmid - 30,50,344345,0,0);
	Render.drawbackdrop(8,haxegon_Gfx.screenheightmid + 30,30,884273,0,0);
	if(modernversion_Modern.lefttowerdir == "right") {
		haxegon_Gfx.scale(3,3);
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 8) gamecontrol_Draw.precoloured_drawtile(-10 + i * 36,-10 + _g1++ * 36,204);
		}
		haxegon_Gfx.scale(1,1);
		if(Logic.endingstate == "start2") {
			haxegon_Gfx.scale(3,3);
			haxegon_Gfx.imagecolor(16771587);
			haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - 6. + 60,-36 + ((haxegon_Gfx.screenheight + 36) * (Logic.endingstatepara / 30) | 0),"terminal",28 + (openfl_Lib.getTimer() % 200 > 100?1:0));
			haxegon_Gfx.imagecolor();
			haxegon_Gfx.scale(1,1);
		}
	} else {
		haxegon_Gfx.scale(3,3);
		var _g2 = 0;
		while(_g2 < 6) {
			var i1 = _g2++;
			var _g11 = 0;
			while(_g11 < 8) gamecontrol_Draw.precoloured_drawtile(haxegon_Gfx.screenwidthmid + i1 * 36,-10 + _g11++ * 36,204);
		}
		haxegon_Gfx.scale(1,1);
		if(Logic.endingstate == "start2") {
			haxegon_Gfx.scale(3,3);
			haxegon_Gfx.imagecolor(16771587);
			haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - 6. - 60,-36 + ((haxegon_Gfx.screenheight + 36) * (Logic.endingstatepara / 30) | 0),"terminal",28 + (openfl_Lib.getTimer() % 200 > 100?1:0));
			haxegon_Gfx.imagecolor();
			haxegon_Gfx.scale(1,1);
		}
	}
	haxegon_Text.align(haxegon_Text.LEFT);
	if(modernversion_Modern.endlevelanimationstate > 0) {
		gamecontrol_Draw.drawfade_withoutmap(16,10,terrylib_World.tileset,(Math.max(gamecontrol_Draw.screentileheight - 10,10) | 0) - modernversion_Modern.endlevelanimationstate);
	} else if(modernversion_Modern.endlevelanimationstate < 0) {
		gamecontrol_Draw.drawfade_withoutmap(16,10,terrylib_World.tileset,-modernversion_Modern.endlevelanimationstate);
	}
};
Render.endingrender = function() {
	if(Logic.endingstate == "start") {
		Render.drawstarfield();
	} else if(Logic.endingstate == "start2") {
		Render.drawstarfield();
		Render.drawbackdrop(3,haxegon_Gfx.screenheightmid - 60 + (haxegon_Gfx.screenheightmid + 100) - terrylib_Lerp.to_value(0,haxegon_Gfx.screenheightmid + 100,Logic.endingstatepara,30,"back_out") | 0,50,336911,20,0);
		Render.drawbackdrop(5,haxegon_Gfx.screenheightmid - 30 + (haxegon_Gfx.screenheightmid + 100) - terrylib_Lerp.to_value(0,haxegon_Gfx.screenheightmid + 100,Logic.endingstatepara,30,"back_out") | 0,50,344345,40,0);
		Render.drawbackdrop(8,haxegon_Gfx.screenheightmid + 30 + (haxegon_Gfx.screenheightmid + 100) - terrylib_Lerp.to_value(0,haxegon_Gfx.screenheightmid + 100,Logic.endingstatepara,30,"back_out") | 0,30,884273,60,0);
	} else if(Logic.endingstate == "start3") {
		Render.drawstarfield();
		Render.drawbackdrop(3,haxegon_Gfx.screenheightmid - 60,50,336911,20,0);
		Render.drawbackdrop(5,haxegon_Gfx.screenheightmid - 30,50,344345,40,0);
		Render.drawbackdrop(8,haxegon_Gfx.screenheightmid + 30,30,884273,60,0);
		Render.drawhelicopter(40 + haxegon_Gfx.screenwidth - terrylib_Lerp.to_value(0,haxegon_Gfx.screenwidth,Logic.endingstatepara,120,"sine_out") | 0,40 + (Math.sin(openfl_Lib.getTimer() / 800) * 20 | 0),3);
	} else if(Logic.endingstate == "start4") {
		Render.standardbacking();
		Render.showyouescaped(30);
	} else if(Logic.endingstate == "start5") {
		Render.standardbacking();
		Render.showyouescaped(30);
		Render.showyouleftthetowerwith(70);
	} else if(Logic.endingstate == "nocash" || Logic.endingstate == "countcash2") {
		Render.standardbacking();
		Render.showyouescaped(30);
		Render.showyouleftthetowerwith(70);
		Render.showgemcount(gamecontrol_Game.cash,85);
	} else if(Logic.endingstate == "nocash2") {
		Render.standardbacking();
		Render.showyouescaped(30);
		Render.showyouleftthetowerwith(70);
		Render.showgemcount(gamecontrol_Game.cash,85);
		Render.showcongratulationsyouhavereachedrank(115);
		Render.showranknumber(gamecontrol_Game.cash,135);
	} else if(Logic.endingstate == "nocash3") {
		Render.standardbacking();
		Render.showyouescaped(30);
		Render.showyouleftthetowerwith(70);
		Render.showgemcount(gamecontrol_Game.cash,85);
		Render.showcongratulationsyouhavereachedrank(115);
		Render.showranknumber(gamecontrol_Game.cash,135);
		Render.showrankname(165);
	} else if(Logic.endingstate == "countcash") {
		Render.standardbacking();
		Render.showyouescaped(30);
		Render.showyouleftthetowerwith(70);
		Render.showgemcount(Logic.endingstatepara,85);
	} else if(Logic.endingstate == "pressspace") {
		Render.standardbacking();
		Render.showyouescaped(30);
		Render.showyouleftthetowerwith(70);
		Render.showgemcount(gamecontrol_Game.cash,85);
		Render.showcongratulationsyouhavereachedrank(115);
		Render.showranknumber(gamecontrol_Game.cash,135);
		Render.showrankname(165);
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.set_size(1);
		haxegon_Text.display(haxegon_Gfx.screenwidthmid,haxegon_Gfx.screenheight - 20,"[press SPACE to return to title]");
	}
	if(modernversion_Modern.endlevelanimationstate > 0) {
		gamecontrol_Draw.drawfade_withoutmap(16,10,terrylib_World.tileset,(Math.max(gamecontrol_Draw.screentileheight - 10,10) | 0) - modernversion_Modern.endlevelanimationstate);
	} else if(modernversion_Modern.endlevelanimationstate < 0) {
		gamecontrol_Draw.drawfade_withoutmap(16,10,terrylib_World.tileset,-modernversion_Modern.endlevelanimationstate);
	}
	haxegon_Text.align(haxegon_Text.LEFT);
};
Render.titlerender = function() {
	if(Render.titleherostate == 0) {
		Render.titleherox = 1;
		Render.titleheroy = 10;
		Render.titleheroframe = 64;
		Render.titleguardframe = 72;
		Render.titleherostate++;
	} else if(Render.titleherostate >= 1 && Render.titleherostate < 30) {
		Render.titleherostate++;
		Render.titleherostatedelay = 0;
	} else if(Render.titleherostate == 30) {
		if(Render.titleherostatedelay <= 0) {
			if(Render.titleheroanimy == 0) {
				if(Render.titleheroy == 2) {
					Render.titleherostate++;
					Render.titleherostatedelay = 15;
					Render.titleheroframe = 112;
					Render.titleguardframe = 73;
				} else {
					Render.titleheroy--;
					Render.titleheroanimy = 24;
				}
			} else {
				Render.titleheroanimy -= 8;
			}
			Render.titleherostatedelay = 0;
		} else {
			Render.titleherostatedelay--;
		}
	} else if(Render.titleherostate == 31) {
		if(Render.titleherostatedelay <= 0) {
			Render.titleherostate++;
			Render.titleherostatedelay = 0;
		} else {
			Render.titleherostatedelay--;
		}
	} else if(Render.titleherostate == 32) {
		if(Render.titleherostatedelay <= 0) {
			if(Render.titleheroanimx == 0) {
				if(Render.titleherox == 14) {
					Render.titleherostate++;
					Render.titleherostatedelay = 15;
					Render.titleheroframe = 64;
					Render.titleguardframe = 72;
				} else {
					Render.titleherox++;
					Render.titleheroanimx = -24;
				}
			} else {
				Render.titleheroanimx += 8;
			}
			Render.titleherostatedelay = 0;
		} else {
			Render.titleherostatedelay--;
		}
	} else if(Render.titleherostate == 33) {
		if(Render.titleherostatedelay <= 0) {
			Render.titleherostate++;
			Render.titleherostatedelay = 0;
		} else {
			Render.titleherostatedelay--;
		}
	} else if(Render.titleherostate == 34) {
		if(Render.titleherostatedelay <= 0) {
			if(Render.titleheroanimy == 0) {
				if(Render.titleheroy == -2) {
					Render.titleshowguard = !Render.titleshowguard;
					if(Render.titleshowguard) {
						Render.titleplayeronleftguardonright = !Render.titleplayeronleftguardonright;
					}
					Render.titleherostate = 0;
					Render.titleherostatedelay = 0;
					Render.titleheroframe = 64;
					Render.titleguardframe = 71;
				} else {
					Render.titleheroy--;
					Render.titleheroanimy = 24;
				}
			} else {
				Render.titleheroanimy -= 8;
			}
			Render.titleherostatedelay = 0;
		} else {
			Render.titleherostatedelay--;
		}
	}
	haxegon_Gfx.fillbox(0,0,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight,1124677);
	haxegon_Gfx.scale(2,2);
	var _g = 0;
	while(_g < 10) {
		var j = _g++;
		var _g1 = 0;
		while(_g1 < 16) {
			var i = _g1++;
			switch(Render.titlescreenmap[j][i]) {
			case 0:
				gamecontrol_Draw.precoloured_drawtile(i * 12 * 2,j * 12 * 2,224);
				break;
			case 1:
				gamecontrol_Draw.precoloured_drawtile(i * 12 * 2,j * 12 * 2,192);
				break;
			case 2:
				gamecontrol_Draw.precoloured_drawtile(i * 12 * 2,j * 12 * 2,193);
				break;
			}
		}
	}
	if(Render.titleplayeronleftguardonright) {
		if(Render.titleshowguard) {
			Render.titleguardjumpframe -= 2;
			if(Render.titleguardjumpframe <= 0) {
				Render.titleguardjumpframe = 120;
			}
			if(Render.titleguardjumpframe % 20 >= 10) {
				haxegon_Gfx.imagecolor(16776960);
			} else {
				haxegon_Gfx.imagecolor(16711680);
			}
			if(terrylib_Help.tenseconds % 60 >= 30) {
				if(Render.titleguardframe == 72) {
					haxegon_Gfx.drawtile(Render.titleherox * 12 * 2 + Render.titleheroanimx,Render.titleheroy * 12 * 2 + Render.titleheroanimy,"terminal",Render.titleguardframe - 1);
				} else {
					haxegon_Gfx.drawtile(Render.titleherox * 12 * 2 + Render.titleheroanimx,Render.titleheroy * 12 * 2 + Render.titleheroanimy,"terminal",Render.titleguardframe + 1);
				}
			} else {
				haxegon_Gfx.drawtile(Render.titleherox * 12 * 2 + Render.titleheroanimx,Render.titleheroy * 12 * 2 + Render.titleheroanimy,"terminal",HxOverrides.cca("!",0));
			}
		} else {
			haxegon_Gfx.imagecolor(16771587);
			if(Render.titleheroframe == 64) {
				haxegon_Gfx.drawtile((15 - Render.titleherox) * 12 * 2 - Render.titleheroanimx,(9 - Render.titleheroy) * 12 * 2 - Render.titleheroanimy,"terminal",Render.titleheroframe + 1 + (openfl_Lib.getTimer() % 400 >= 200?1:0) + 16);
			} else {
				haxegon_Gfx.drawtile((15 - Render.titleherox) * 12 * 2 - Render.titleheroanimx,(9 - Render.titleheroy) * 12 * 2 - Render.titleheroanimy,"terminal",Render.titleheroframe + 1 + (openfl_Lib.getTimer() % 400 >= 200?1:0) - 16);
			}
		}
		haxegon_Gfx.imagecolor();
	} else {
		if(!Render.titleshowguard) {
			haxegon_Gfx.imagecolor(16771587);
			haxegon_Gfx.drawtile(Render.titleherox * 12 * 2 + Render.titleheroanimx,Render.titleheroy * 12 * 2 + Render.titleheroanimy,"terminal",Render.titleheroframe + 1 + (openfl_Lib.getTimer() % 400 >= 200?1:0));
		} else {
			Render.titleguardjumpframe -= 2;
			if(Render.titleguardjumpframe <= 0) {
				Render.titleguardjumpframe = 120;
			}
			if(Render.titleguardjumpframe % 20 >= 10) {
				haxegon_Gfx.imagecolor(16776960);
			} else {
				haxegon_Gfx.imagecolor(16711680);
			}
			if(terrylib_Help.tenseconds % 60 >= 30) {
				haxegon_Gfx.drawtile((15 - Render.titleherox) * 12 * 2 - Render.titleheroanimx,(9 - Render.titleheroy) * 12 * 2 - Render.titleheroanimy,"terminal",Render.titleguardframe);
			} else {
				haxegon_Gfx.drawtile((15 - Render.titleherox) * 12 * 2 - Render.titleheroanimx,(9 - Render.titleheroy) * 12 * 2 - Render.titleheroanimy,"terminal",HxOverrides.cca("!",0));
			}
		}
		haxegon_Gfx.imagecolor();
	}
	haxegon_Gfx.scale(1,1);
	haxegon_Gfx.fillbox(76,76,232,56,1124677);
	haxegon_Gfx.fillbox(78,78,228,50,5804743);
	gamecontrol_Draw.setboldtext();
	haxegon_Text.set_size(4);
	haxegon_Text.align(haxegon_Text.CENTER);
	haxegon_Text.display(haxegon_Gfx.screenwidthmid,73,"Tiny Heist",haxegon_Col.WHITE);
	gamecontrol_Draw.setnormaltext();
	haxegon_Text.set_size(1);
	haxegon_Text.align(haxegon_Text.LEFT);
	haxegon_Text.align(haxegon_Text.CENTER);
	haxegon_Gfx.fillbox(206,haxegon_Gfx.screenheightmid + 4,112,18,1124677);
	haxegon_Gfx.fillbox(208,haxegon_Gfx.screenheightmid + 6,108,14,5804743);
	haxegon_Text.display(haxegon_Gfx.screenwidthmid + 70,haxegon_Gfx.screenheightmid + 9 - 3,"Press SPACE",haxegon_Col.WHITE);
	haxegon_Gfx.fillbox(76,haxegon_Gfx.screenheight - 36,232,24,1124677);
	haxegon_Gfx.fillbox(78,haxegon_Gfx.screenheight - 36,228,20,5804743);
	haxegon_Text.display(haxegon_Gfx.screenwidthmid,haxegon_Gfx.screenheight - 33,"Terry Cavanagh 2016",haxegon_Col.WHITE);
	haxegon_Text.align(haxegon_Text.LEFT);
	if(modernversion_Modern.endlevelanimationstate > 0) {
		gamecontrol_Draw.drawfade_withoutmap(16,10,terrylib_World.tileset,(Math.max(gamecontrol_Draw.screentileheight - 10,10) | 0) - modernversion_Modern.endlevelanimationstate);
	} else if(modernversion_Modern.endlevelanimationstate < 0) {
		gamecontrol_Draw.drawfade_withoutmap(16,10,terrylib_World.tileset,-modernversion_Modern.endlevelanimationstate);
	}
};
Render.gamerender = function() {
	if(gamecontrol_Menu.textmode == 0) {
		gamecontrol_Draw.drawbackground();
		gamecontrol_Draw.drawmap(terrylib_World.tileset);
		gamecontrol_Draw.drawentities();
		if(modernversion_Modern.endlevelanimationstate > 0) {
			var player = terrylib_Obj.getplayer();
			var playerx = terrylib_Obj.entities[player].xp;
			var playery = terrylib_Obj.entities[player].yp;
			gamecontrol_Draw.drawmapfade(playerx,playery,terrylib_World.tileset,(Math.max(gamecontrol_Draw.screentileheight - playery,playery) | 0) - modernversion_Modern.endlevelanimationstate);
		} else if(modernversion_Modern.endlevelanimationstate < 0) {
			gamecontrol_Draw.drawmapfade(modernversion_Modern.endlevelanimationx,modernversion_Modern.endlevelanimationy,terrylib_World.tileset,-modernversion_Modern.endlevelanimationstate);
		}
		if(gamecontrol_Game.timestop > 0) {
			gamecontrol_Draw.grayscale();
			var key = terrylib_Obj.entities[terrylib_Obj.getplayer()].rule;
			var _this = terrylib_Obj.entindex;
			terrylib_Obj.templates[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]].drawentity(terrylib_Obj.getplayer());
		}
		gamecontrol_Draw.setboldtext();
		gamecontrol_Draw.drawentitymessages();
		gamecontrol_Draw.setnormaltext();
		gamecontrol_Draw.drawgui();
		Render.texty = haxegon_Gfx.screenheight - 13;
		if(gamecontrol_Game.messagedelay != 0) {
			haxegon_Gfx.imagecolor(gamecontrol_Draw.messagecolback(gamecontrol_Game.messagecol));
		} else {
			haxegon_Gfx.imagecolor(gamecontrol_Game.backgroundcolour);
		}
		haxegon_Gfx.drawimage(0,haxegon_Gfx.screenheight - 29,"guibar");
		haxegon_Gfx.imagecolor();
		if(gamecontrol_Game.messagedelay != 0) {
			gamecontrol_Draw.setboldtext();
			if(gamecontrol_Game.messagecol == "kludge") {
				gamecontrol_Draw.setnormaltext();
			}
			haxegon_Text.align(haxegon_Text.CENTER);
			haxegon_Text.display((haxegon_Gfx.screenwidth - modernversion_Modern.inventoryslots * 26) / 2,Render.texty,gamecontrol_Game.message,gamecontrol_Draw.messagecol(gamecontrol_Game.messagecol));
			haxegon_Text.align(haxegon_Text.LEFT);
			gamecontrol_Draw.setnormaltext();
		} else {
			gamecontrol_Draw.setnormaltext();
			if(modernversion_AIDirector.outside) {
				haxegon_Text.display(Render.floortextx,Render.texty,"???",haxegon_Col.rgb(196,196,196));
			} else if(modernversion_AIDirector.floor == 16) {
				haxegon_Text.display(Render.floortextx,Render.texty,"ROOFTOP",haxegon_Col.rgb(196,196,196));
			} else {
				haxegon_Text.display(Render.floortextx,Render.texty,"FLOOR " + modernversion_AIDirector.floor + "/" + 15,haxegon_Col.rgb(196,196,196));
			}
			gamecontrol_Draw.setnormaltext();
			if(modernversion_Modern.hpflash == 0) {
				haxegon_Text.display(Render.hptextx,Render.texty,"HP",haxegon_Col.rgb(255,64,64));
				var _g = 0;
				while(_g < 3) gamecontrol_Draw.precoloured_drawtile(Render.hptextx + 14 + _g++ * 12,Render.texty + 1,19);
				var _g1 = 0;
				var _g2 = gamecontrol_Game.health;
				while(_g1 < _g2) gamecontrol_Draw.precoloured_drawtile(Render.hptextx + 14 + _g1++ * 12,Render.texty + 1,3);
			} else {
				var hpflashamount = haxegon_Col.rgb(Math.min(220 + modernversion_Modern.hpflash * 5,255) | 0,Math.min(64 + modernversion_Modern.hpflash * 5,255) | 0,Math.min(64 + modernversion_Modern.hpflash * 5,255) | 0);
				haxegon_Text.display(Render.hptextx,Render.texty,"HP",hpflashamount);
				var _g3 = 0;
				while(_g3 < 3) {
					var i = _g3++;
					haxegon_Gfx.imagecolor(haxegon_Col.rgb(180,64,64));
					haxegon_Gfx.drawtile(Render.hptextx + 14 + i * 12,Render.texty + 1,"terminal",19);
					haxegon_Gfx.imagecolor();
				}
				var _g11 = 0;
				var _g4 = gamecontrol_Game.health;
				while(_g11 < _g4) {
					var i1 = _g11++;
					haxegon_Gfx.imagecolor(hpflashamount);
					haxegon_Gfx.drawtile(Render.hptextx + 14 + i1 * 12,Render.texty + 1,"terminal",3);
					haxegon_Gfx.imagecolor();
				}
				modernversion_Modern.hpflash--;
			}
			if(gamecontrol_Game.keys > 0) {
				if(modernversion_Modern.keyflash == 0) {
					haxegon_Gfx.imagecolor(haxegon_Col.rgb(128,255,128));
					haxegon_Gfx.drawtile(Render.keytextx,Render.texty + 1,"terminal",12);
					haxegon_Gfx.imagecolor();
					haxegon_Text.display(Render.keytextx + 12,Render.texty,"x" + Std.string(gamecontrol_Game.keys),haxegon_Col.rgb(128,255,128));
				} else {
					var keyflashcol = haxegon_Col.rgb(Math.min(128 + modernversion_Modern.keyflash * 8,255) | 0,Math.min(255 + modernversion_Modern.keyflash * 8,255) | 0,Math.min(128 + modernversion_Modern.keyflash * 8,255) | 0);
					haxegon_Gfx.imagecolor(keyflashcol);
					haxegon_Gfx.drawtile(Render.keytextx,Render.texty + 1,"terminal",12);
					haxegon_Gfx.imagecolor();
					haxegon_Text.display(Render.keytextx + 12,Render.texty,"x" + Std.string(gamecontrol_Game.keys),keyflashcol);
					modernversion_Modern.keyflash--;
				}
			}
			if(gamecontrol_Game.cash > 0) {
				if(modernversion_Modern.gemflash == 0) {
					haxegon_Gfx.imagecolor(haxegon_Col.rgb(255,255,128));
					haxegon_Gfx.drawtile(Render.gemtextx,Render.texty + 1,"terminal",HxOverrides.cca("$",0));
					haxegon_Gfx.imagecolor();
					haxegon_Text.display(Render.gemtextx + 12,Render.texty,"x" + Std.string(gamecontrol_Game.cash),haxegon_Col.rgb(255,255,128));
				} else {
					haxegon_Gfx.imagecolor(haxegon_Col.rgb(Math.min(255 + modernversion_Modern.gemflash * 8,255) | 0,Math.min(255 + modernversion_Modern.gemflash * 8,255) | 0,Math.min(128 + modernversion_Modern.gemflash * 8,255) | 0));
					haxegon_Gfx.drawtile(Render.gemtextx,Render.texty + 1,"terminal",HxOverrides.cca("$",0));
					haxegon_Gfx.imagecolor();
					haxegon_Text.display(Render.gemtextx + 12,Render.texty,"x" + Std.string(gamecontrol_Game.cash),haxegon_Col.rgb(255,255,128));
					modernversion_Modern.gemflash--;
				}
			}
		}
		modernversion_Modern.showitems();
		if(modernversion_Modern.popupwindow) {
			Render.showpopups();
		}
	} else if(gamecontrol_Menu.textmode == 1) {
		haxegon_Gfx.clearscreen(haxegon_Col.BLACK);
		gamecontrol_Menu.showtextbox();
		if(!(gamecontrol_Menu.menusize == 1 && gamecontrol_Menu.menuoptions[0] == "")) {
			gamecontrol_Draw.drawmenu();
		}
	} else if(gamecontrol_Menu.textmode == 2) {
		haxegon_Gfx.clearscreen(haxegon_Col.BLACK);
		gamecontrol_Openworld.drawmap(4,1,terrylib_World.tileset);
	}
};
Render.showpopups = function() {
	if(modernversion_Modern.popupmode == "soldoutshopkeeper") {
		var tx = haxegon_Gfx.screenwidthmid - 120;
		var ty = haxegon_Gfx.screenheightmid - (35. | 0) - (terrylib_Lerp.to_value(140,0,modernversion_Modern.popuplerp,modernversion_Modern.popupspeed,modernversion_Modern.popupstate < 2?modernversion_Modern.popupanimationtype_appear:modernversion_Modern.popupanimationtype_disappear) | 0);
		modernversion_Modern.drawbubble(tx,ty,240,70,gamecontrol_Draw.shade(modernversion_Modern.shopkeepcol,0.8),0,0);
		ty += 2;
		haxegon_Text.align(haxegon_Text.CENTER);
		gamecontrol_Draw.setboldtext();
		haxegon_Gfx.imagecolor(modernversion_Modern.shopkeepcol);
		haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - 6 - 40,ty + 5,"terminal",2);
		haxegon_Gfx.imagecolor();
		haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty + 5,"    Shopkeeper",gamecontrol_Draw.messagecol("white"));
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty + 22,"Sorry, I've got nothing else to sell!",gamecontrol_Draw.messagecol("white"));
		haxegon_Text.align(haxegon_Text.LEFT);
		haxegon_Text.align(haxegon_Text.CENTER);
		haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty + 40,"> Oh, ok. <",gamecontrol_Draw.messagecol("flashing"));
		haxegon_Text.align(haxegon_Text.LEFT);
	} else if(modernversion_Modern.popupmode == "itemshopkeeper") {
		var tx1 = haxegon_Gfx.screenwidthmid - 120;
		var ty1 = haxegon_Gfx.screenheightmid - (45. | 0) - (terrylib_Lerp.to_value(180,0,modernversion_Modern.popuplerp,modernversion_Modern.popupspeed,modernversion_Modern.popupstate < 2?modernversion_Modern.popupanimationtype_appear:modernversion_Modern.popupanimationtype_disappear) | 0);
		modernversion_Modern.drawbubble(tx1,ty1,240,90,gamecontrol_Draw.shade(modernversion_Modern.shopkeepcol,0.8),0,0);
		ty1 += 2;
		haxegon_Text.align(haxegon_Text.CENTER);
		gamecontrol_Draw.setboldtext();
		haxegon_Gfx.imagecolor(modernversion_Modern.shopkeepcol);
		haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - 6 - 40,ty1 + 5,"terminal",2);
		haxegon_Gfx.imagecolor();
		haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty1 + 5,"    Shopkeeper",gamecontrol_Draw.messagecol("white"));
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.align(haxegon_Text.LEFT);
		var slen = haxegon_Text.width("Can I interest you in this " + modernversion_Modern.popupitem.name + "?") + 24 | 0;
		var slen2 = haxegon_Text.width("Can I interest you in this ") | 0;
		haxegon_Text.display(haxegon_Gfx.screenwidthmid - (slen / 2 | 0) - 3,ty1 + 22,"Can I interest you in this ",gamecontrol_Draw.messagecol("white"));
		gamecontrol_Draw.setboldtext();
		haxegon_Text.display(haxegon_Gfx.screenwidthmid - (slen / 2 | 0) - 3 + slen2 + 18,ty1 + 22,modernversion_Modern.popupitem.name + "?",haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b));
		haxegon_Gfx.imagecolor(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b));
		haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - (slen / 2 | 0) - 3 + slen2 + 3,ty1 + 22,"terminal",HxOverrides.cca(modernversion_Modern.popupitem.character,0));
		haxegon_Gfx.imagecolor();
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.align(haxegon_Text.LEFT);
		var slen1 = haxegon_Text.width("It's yours for just " + modernversion_Modern.popupitem.cost + " GEM" + (modernversion_Modern.popupitem.cost > 1?"S":"") + "!") | 0;
		haxegon_Text.display(haxegon_Gfx.screenwidthmid - (slen1 / 2 | 0),ty1 + 34,"It's yours for just ",gamecontrol_Draw.messagecol("white"));
		var slen21 = haxegon_Gfx.screenwidthmid - (slen1 / 2 | 0) + haxegon_Text.width("It's yours for just ") | 0;
		gamecontrol_Draw.setboldtext();
		haxegon_Text.display(slen21 + 4,ty1 + 34,modernversion_Modern.popupitem.cost + " GEM" + (modernversion_Modern.popupitem.cost > 1?"S":"") + "!",gamecontrol_Draw.messagecol("player"));
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.align(haxegon_Text.CENTER);
		if(modernversion_Modern.slotsfree() == 0 && modernversion_Modern.popupstate != 2) {
			haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty1 + 54 + 5,"> I don't have room for that! <",gamecontrol_Draw.messagecol("flashing"));
		} else if(modernversion_Modern.popupitem.cost > gamecontrol_Game.cash && modernversion_Modern.popupstate != 2) {
			haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty1 + 54 + 5,"> I can't afford that! <",gamecontrol_Draw.messagecol("flashing"));
		} else {
			if(modernversion_Modern.menuselection == 0) {
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty1 + 54,"> Great, I'll take one! (cost: " + modernversion_Modern.popupitem.cost + " GEM" + (modernversion_Modern.popupitem.cost > 1?"S":"") + ") <",gamecontrol_Draw.messagecol("flashing"));
			} else {
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty1 + 54,"Great, I'll take one! (cost: " + modernversion_Modern.popupitem.cost + " GEM" + (modernversion_Modern.popupitem.cost > 1?"S":"") + ")",gamecontrol_Draw.messagecol("grayedout"));
			}
			if(modernversion_Modern.menuselection == 1) {
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty1 + 66,"> No way! <",gamecontrol_Draw.messagecol("flashing"));
			} else {
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty1 + 66,"No way!",gamecontrol_Draw.messagecol("grayedout"));
			}
		}
		haxegon_Text.align(haxegon_Text.LEFT);
	} else if(modernversion_Modern.popupmode == "shopkeeper") {
		var tx2 = haxegon_Gfx.screenwidthmid - 120;
		var ty2 = haxegon_Gfx.screenheightmid - (45. | 0) - (terrylib_Lerp.to_value(180,0,modernversion_Modern.popuplerp,modernversion_Modern.popupspeed,modernversion_Modern.popupstate < 2?modernversion_Modern.popupanimationtype_appear:modernversion_Modern.popupanimationtype_disappear) | 0);
		modernversion_Modern.drawbubble(tx2,ty2,240,90,gamecontrol_Draw.shade(modernversion_Modern.shopkeepcol,0.8),0,0);
		ty2 += 2;
		haxegon_Text.align(haxegon_Text.CENTER);
		gamecontrol_Draw.setboldtext();
		haxegon_Gfx.imagecolor(modernversion_Modern.shopkeepcol);
		haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - 6 - 40,ty2 + 5,"terminal",2);
		haxegon_Gfx.imagecolor();
		haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty2 + 5,"    Shopkeeper",gamecontrol_Draw.messagecol("white"));
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty2 + 22,"Hello! Want some keys? I can help!",gamecontrol_Draw.messagecol("white"));
		haxegon_Text.align(haxegon_Text.LEFT);
		var slen3 = haxegon_Text.width("I sell keys for just " + modernversion_Modern.keygemrate + " GEM" + (modernversion_Modern.keygemrate > 1?"S":"") + "!") | 0;
		haxegon_Text.display(haxegon_Gfx.screenwidthmid - (slen3 / 2 | 0),ty2 + 34,"I sell keys for just ",gamecontrol_Draw.messagecol("white"));
		var slen22 = haxegon_Gfx.screenwidthmid - (slen3 / 2 | 0) + haxegon_Text.width("I sell keys for just ") | 0;
		gamecontrol_Draw.setboldtext();
		haxegon_Text.display(slen22 + 3,ty2 + 34,modernversion_Modern.keygemrate + " GEM" + (modernversion_Modern.keygemrate > 1?"S":"") + "!",gamecontrol_Draw.messagecol("player"));
		gamecontrol_Draw.setnormaltext();
		haxegon_Text.align(haxegon_Text.CENTER);
		if(modernversion_Modern.keygemrate > gamecontrol_Game.cash && modernversion_Modern.popupstate != 2) {
			haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty2 + 54 + 5,"> I can't afford that! <",gamecontrol_Draw.messagecol("flashing"));
		} else {
			if(modernversion_Modern.menuselection == 0) {
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty2 + 54,"> Great, I'll take one! (cost: " + modernversion_Modern.keygemrate + " GEM" + (modernversion_Modern.keygemrate > 1?"S":"") + ") <",gamecontrol_Draw.messagecol("flashing"));
			} else {
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty2 + 54,"Great, I'll take one! (cost: " + modernversion_Modern.keygemrate + " GEM" + (modernversion_Modern.keygemrate > 1?"S":"") + ")",gamecontrol_Draw.messagecol("grayedout"));
			}
			if(modernversion_Modern.menuselection == 1) {
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty2 + 66,"> No way! <",gamecontrol_Draw.messagecol("flashing"));
			} else {
				haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty2 + 66,"No way!",gamecontrol_Draw.messagecol("grayedout"));
			}
		}
		haxegon_Text.align(haxegon_Text.LEFT);
	} else if(modernversion_Modern.popupmode == "newitem_drop" || modernversion_Modern.popupmode == "newitem") {
		var boxheight = 68 + modernversion_Modern.popupitem.descriptionsize * 10;
		var tx3 = haxegon_Gfx.screenwidthmid - 120;
		var ty3 = haxegon_Gfx.screenheightmid - (boxheight / 2 | 0) - (terrylib_Lerp.to_value(boxheight * 2,0,modernversion_Modern.popuplerp,modernversion_Modern.popupspeed,modernversion_Modern.popupstate < 2?modernversion_Modern.popupanimationtype_appear:modernversion_Modern.popupanimationtype_disappear) | 0);
		if(modernversion_Modern.popupmode == "newitem_drop") {
			ty3 -= 15;
		}
		if(modernversion_Modern.popupitem.hasmultipleshots) {
			modernversion_Modern.drawbubble(tx3,ty3,240,boxheight,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b),0.8),0,0);
			haxegon_Gfx.imagecolor(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b));
			haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - 6 - 8,ty3 + 25,"terminal",HxOverrides.cca(modernversion_Modern.popupitem.character,0));
			haxegon_Gfx.imagecolor();
			haxegon_Gfx.fillbox(haxegon_Gfx.screenwidthmid - 6 + 6 - 1,ty3 + 26 - 1,haxegon_Text.width("x" + modernversion_Modern.popupitem.typical) + 4,12,0);
			haxegon_Gfx.fillbox(haxegon_Gfx.screenwidthmid - 6 + 6,ty3 + 26,haxegon_Text.width("x" + modernversion_Modern.popupitem.typical) + 2,10,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b),0.8));
			haxegon_Text.display(haxegon_Gfx.screenwidthmid - 6 + 7,ty3 + 26 - 2,"x" + modernversion_Modern.popupitem.typical,0);
		} else if(modernversion_Modern.popupitem.type == gamecontrol_Inventory.USEABLE) {
			modernversion_Modern.drawbubble(tx3,ty3,240,boxheight,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b),0.8),0,0);
			haxegon_Gfx.imagecolor(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b));
			haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - 6,ty3 + 25,"terminal",HxOverrides.cca(modernversion_Modern.popupitem.character,0));
			haxegon_Gfx.imagecolor();
		} else if(modernversion_Modern.popupitem.type == gamecontrol_Inventory.GADGET) {
			modernversion_Modern.drawbubble(tx3,ty3,240,boxheight,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b),0.8),0,0);
			haxegon_Gfx.imagecolor(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b));
			haxegon_Gfx.drawtile(haxegon_Gfx.screenwidthmid - 6,ty3 + 25,"terminal",HxOverrides.cca(modernversion_Modern.popupitem.character,0));
			haxegon_Gfx.imagecolor();
		}
		gamecontrol_Draw.setnormaltext();
		modernversion_Modern.drawbubble(tx3 - 10,ty3 - 5,60,18,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.popupitem.r,modernversion_Modern.popupitem.g,modernversion_Modern.popupitem.b),0.8),0,0);
		haxegon_Text.display(tx3 - 4,ty3 - 3,"NEW ITEM!",gamecontrol_Draw.messagecol("shout"));
		haxegon_Text.align(haxegon_Text.CENTER);
		gamecontrol_Draw.setboldtext();
		haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty3 + 5,modernversion_Modern.popupitem.name,gamecontrol_Draw.messagecol("shout"));
		gamecontrol_Draw.setnormaltext();
		ty3 += 40;
		var _g1 = 0;
		var _g = modernversion_Modern.popupitem.descriptionsize;
		while(_g1 < _g) {
			haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty3,modernversion_Modern.popupitem.description[_g1++],gamecontrol_Draw.messagecol("white"));
			ty3 += 10;
		}
		ty3 = haxegon_Gfx.screenheightmid - (boxheight / 2 | 0) - (terrylib_Lerp.to_value(boxheight * 2,0,modernversion_Modern.popuplerp,modernversion_Modern.popupspeed,modernversion_Modern.popupstate < 2?modernversion_Modern.popupanimationtype_appear:modernversion_Modern.popupanimationtype_disappear) | 0);
		ty3 = ty3 + boxheight - 18;
		if(modernversion_Modern.popupmode == "newitem_drop") {
			ty3 -= 15;
			haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty3,"[" + Controls.showfirstassigned("action") + ": drop item and return to game]",gamecontrol_Draw.messagecol("whisper"));
		} else {
			haxegon_Text.display(haxegon_Gfx.screenwidthmid,ty3,"[" + Controls.showfirstassigned("action") + ": return to game]",gamecontrol_Draw.messagecol("whisper"));
		}
		if(modernversion_Modern.popupmode == "newitem_drop") {
			tx3 = haxegon_Gfx.screenwidth - 200;
			ty3 = haxegon_Gfx.screenheight - 70;
			modernversion_Modern.drawbubble(tx3,ty3,200,70,8947848,0,0);
			gamecontrol_Draw.setnormaltext();
			haxegon_Text.display(tx3 + 100,ty3 + 5,"You need to drop an item...",gamecontrol_Draw.messagecol("white"));
			ty3 += 25;
			tx3 = haxegon_Gfx.screenwidth - 100 - 6 - (modernversion_Modern.inventory.length * 32 / 2 | 0) + (4. | 0);
			haxegon_Text.align(haxegon_Text.LEFT);
			var _g11 = 0;
			var _g2 = modernversion_Modern.inventory.length;
			while(_g11 < _g2) {
				var i = _g11++;
				if(i == modernversion_Modern.inventory.length - 1) {
					tx3 += 12;
					haxegon_Text.display(tx3 + i * 32 - 15,ty3 + 2,"or",gamecontrol_Draw.messagecol("white"));
				}
				if(i == modernversion_Modern.currentslot) {
					gamecontrol_Draw.roundfillrect(tx3 + i * 32 - 2,ty3 - 1,26,24,gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].front_fog);
				}
				modernversion_Modern.currentitem = modernversion_Itemstats.get(modernversion_Modern.inventory[i]);
				if(modernversion_Modern.currentitem.hasmultipleshots) {
					modernversion_Modern.drawbubble(tx3 + i * 32,ty3,22,22,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b),0.8),0,0);
					haxegon_Gfx.imagecolor(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b));
					haxegon_Gfx.drawtile(tx3 + i * 32 + 5,ty3 + 5,"terminal",HxOverrides.cca(modernversion_Modern.currentitem.character,0));
					haxegon_Gfx.imagecolor();
					haxegon_Gfx.fillbox(tx3 + i * 32 + 12 - 1,ty3 - 3 - 1,haxegon_Text.width("x" + modernversion_Modern.inventory_num[i]) + 4,12,0);
					haxegon_Gfx.fillbox(tx3 + i * 32 + 12,ty3 - 3,haxegon_Text.width("x" + modernversion_Modern.inventory_num[i]) + 2,10,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b),0.8));
					haxegon_Text.display(tx3 + i * 32 + 13,ty3 - 5,"x" + modernversion_Modern.inventory_num[i],0);
				} else if(modernversion_Modern.currentitem.type == gamecontrol_Inventory.USEABLE || modernversion_Modern.currentitem.type == gamecontrol_Inventory.GADGET) {
					modernversion_Modern.drawbubble(tx3 + i * 32,ty3,22,22,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b),0.8),0,0);
					haxegon_Gfx.imagecolor(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b));
					haxegon_Gfx.drawtile(tx3 + i * 32 + 5,ty3 + 5,"terminal",HxOverrides.cca(modernversion_Modern.currentitem.character,0));
					haxegon_Gfx.imagecolor();
				} else {
					modernversion_Modern.drawbubble(tx3 + i * 32,ty3,22,22,4473924,0,0);
				}
			}
			modernversion_Modern.currentitem = modernversion_Itemstats.get(modernversion_Modern.inventory[modernversion_Modern.currentslot]);
			haxegon_Text.align(haxegon_Text.CENTER);
			if(modernversion_Modern.currentitem.hasmultipleshots) {
				haxegon_Text.display(haxegon_Gfx.screenwidth - 100,ty3 + 26,modernversion_Modern.inventory[modernversion_Modern.currentslot].toUpperCase() + " [x" + modernversion_Modern.inventory_num[modernversion_Modern.currentslot] + "]",modernversion_Itemstats.get(modernversion_Modern.inventory[modernversion_Modern.currentslot]).highlightcol);
			} else if(modernversion_Modern.currentitem.type == gamecontrol_Inventory.USEABLE || modernversion_Modern.currentitem.type == gamecontrol_Inventory.GADGET) {
				haxegon_Text.display(haxegon_Gfx.screenwidth - 100,ty3 + 26,modernversion_Modern.inventory[modernversion_Modern.currentslot].toUpperCase(),modernversion_Itemstats.get(modernversion_Modern.inventory[modernversion_Modern.currentslot]).highlightcol);
			}
			haxegon_Text.align(haxegon_Text.LEFT);
		}
	}
	haxegon_Text.align(haxegon_Text.LEFT);
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		return __map_reserved[att] != null?_this.getReserved(att):_this.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var config_Entclass = function() {
	this.possibleactions = [];
	var _g = 0;
	while(_g < 20) {
		++_g;
		this.possibleactions.push("");
	}
	this.clear();
};
$hxClasses["config.Entclass"] = config_Entclass;
config_Entclass.__name__ = ["config","Entclass"];
config_Entclass.prototype = {
	clear: function() {
		this.active = false;
		this.invis = false;
		this.tile = 0;
		this.rule = "null";
		this.type = "null";
		this.name = "null";
		this.stringpara = "null";
		this.state = 0;
		this.statedelay = 0;
		this.life = 0;
		this.para = 0;
		this.behave = 0;
		this.animate = 0;
		this.xp = 0;
		this.yp = 0;
		this.ax = 0;
		this.ay = 0;
		this.vx = 0;
		this.vy = 0;
		this.w = 0;
		this.h = 0;
		this.cx = 0;
		this.cy = 0;
		this.newxp = 0;
		this.newyp = 0;
		this.animx = 0;
		this.animy = 0;
		this.animxrate = 0;
		this.animyrate = 0;
		this.col = 16777215;
		this.transx = 0;
		this.transy = 0;
		this.rot = 0;
		this.x1 = 0;
		this.y1 = 0;
		this.x2 = haxegon_Gfx.screenwidth;
		this.y2 = haxegon_Gfx.screenheight;
		this.jumping = false;
		this.gravity = false;
		this.onground = 0;
		this.onroof = 0;
		this.jumpframe = 0;
		this.onentity = 0;
		this.onwall = 0;
		this.onxwall = 0;
		this.onywall = 0;
		this.framedelay = 0;
		this.drawframe = 0;
		this.walkingframe = 0;
		this.dir = 0;
		this.actionframe = 0;
		this.speed = 0;
		this.health = 3;
		this.dogdir = 0;
		this.isarobot = false;
		this.canturn = true;
		this.canattack = true;
		this.alertbysound = true;
		this.tileset = "sprites";
		this.checkcollision = false;
		this.lightsource = "none";
		this.action = "nothing";
		this.actionset = false;
		this.ai = "random";
		this.collidable = true;
		this.numpossibleactions = 0;
		this.inchain = false;
		this.alerted_thisframe = false;
		this.insights_thisframe = false;
		this.userevertdir = false;
		this.revertdir = 0;
		this.message = "";
		this.messagecol = "";
		this.messagedelay = 0;
		this.camerapower = 0;
		this.cameradir = 0;
		this.animated = 0;
		this.fireproof = false;
	}
	,setmessage: function(_message,_messagecol,_messagedelay) {
		if(_messagedelay == null) {
			_messagedelay = 120;
		}
		if(_messagecol == null) {
			_messagecol = "white";
		}
		this.message = " " + _message + " ";
		this.messagecol = _messagecol;
		this.messagedelay = _messagedelay;
	}
	,resetactions: function() {
		this.actionset = false;
		this.numpossibleactions = 0;
	}
	,addaction: function(t) {
		this.possibleactions[this.numpossibleactions] = t;
		this.numpossibleactions++;
	}
	,removeaction: function(t) {
		var _g1 = 0;
		var _g = this.numpossibleactions;
		while(_g1 < _g) {
			var i = _g1++;
			if(t == this.possibleactions[i]) {
				this._removeaction(i);
			}
		}
	}
	,_removeaction: function(j) {
		var _g1 = j;
		var _g = this.numpossibleactions;
		while(_g1 < _g) {
			var i = _g1++;
			this.possibleactions[i] = this.possibleactions[i + 1];
		}
		this.numpossibleactions--;
	}
	,action: null
	,actionset: null
	,possibleactions: null
	,numpossibleactions: null
	,inchain: null
	,ai: null
	,lightsource: null
	,speed: null
	,health: null
	,canturn: null
	,canattack: null
	,alertbysound: null
	,fireproof: null
	,isarobot: null
	,alerted_thisframe: null
	,insights_thisframe: null
	,userevertdir: null
	,revertdir: null
	,active: null
	,invis: null
	,type: null
	,tile: null
	,rule: null
	,state: null
	,statedelay: null
	,behave: null
	,animate: null
	,para: null
	,life: null
	,name: null
	,stringpara: null
	,tileset: null
	,checkcollision: null
	,col: null
	,target: null
	,collidable: null
	,animated: null
	,message: null
	,messagedelay: null
	,messagecol: null
	,xp: null
	,yp: null
	,oldxp: null
	,oldyp: null
	,ax: null
	,ay: null
	,vx: null
	,vy: null
	,cx: null
	,cy: null
	,w: null
	,h: null
	,newxp: null
	,newyp: null
	,x1: null
	,y1: null
	,x2: null
	,y2: null
	,rot: null
	,transx: null
	,transy: null
	,onentity: null
	,onwall: null
	,onxwall: null
	,onywall: null
	,jumping: null
	,gravity: null
	,onground: null
	,onroof: null
	,jumpframe: null
	,framedelay: null
	,drawframe: null
	,walkingframe: null
	,dir: null
	,dogdir: null
	,actionframe: null
	,cameradir: null
	,camerapower: null
	,animx: null
	,animy: null
	,animxrate: null
	,animyrate: null
	,clearanim: function() {
		this.animx = 0;
		this.animy = 0;
		this.animxrate = 0;
		this.animyrate = 0;
	}
	,startshake: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.xbound = x;
		this.ybound = y;
		this.shakecount = 12;
	}
	,shakex: function() {
		if(this.xbound != 0 || this.ybound != 0) {
			return -3 + Math.floor(7 * terrylib_Rand.prandom());
		}
		if(this.xbound < 0) {
			if(this.shakecount >= 9) {
				return -10;
			}
			return terrylib_Lerp.to_value(0,-10,this.shakecount,9,"bounce_in");
		} else if(this.xbound > 0) {
			if(this.shakecount >= 9) {
				return 10;
			}
			return terrylib_Lerp.to_value(0,10,this.shakecount,9,"bounce_in");
		}
		return 0;
	}
	,shakey: function() {
		if(this.xbound != 0 || this.ybound != 0) {
			return -3 + Math.floor(7 * terrylib_Rand.prandom());
		}
		if(this.ybound < 0) {
			if(this.shakecount >= 9) {
				return -10;
			}
			return terrylib_Lerp.to_value(0,-10,this.shakecount,9,"bounce_in");
		} else if(this.ybound > 0) {
			if(this.shakecount >= 9) {
				return 10;
			}
			return terrylib_Lerp.to_value(0,10,this.shakecount,9,"bounce_in");
		}
		return 0;
	}
	,xbound: null
	,ybound: null
	,shakecount: null
	,__class__: config_Entclass
};
var config_Levelcache = function() { };
$hxClasses["config.Levelcache"] = config_Levelcache;
config_Levelcache.__name__ = ["config","Levelcache"];
config_Levelcache.localloadmap = function(s,r) {
	if(s == "newgame") {
		if(r == "enter") {
			terrylib_World.loadmapfromstring(s,r,"25,15,tiles,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,219,219,219,219,219,219,219,0,0,219,219,219,219,219,219,219,219,219,219,219,219,0,0,0,0,219,46,46,46,46,46,219,219,219,219,46,46,46,46,46,46,46,46,46,46,219,0,0,0,0,219,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,219,0,0,0,0,219,46,46,46,46,46,219,219,219,219,46,46,46,46,46,46,46,46,46,46,219,0,0,0,0,219,46,46,46,46,46,219,0,0,219,219,219,219,219,219,219,219,46,219,219,219,0,0,0,0,219,219,219,219,219,46,219,0,0,0,0,0,0,0,219,219,219,46,219,219,219,0,0,0,0,0,0,0,0,219,46,219,0,219,219,219,219,219,219,219,46,46,46,46,46,219,0,0,0,0,0,0,0,0,219,46,219,0,219,46,46,46,46,46,46,46,46,46,46,46,219,0,0,0,0,0,0,0,0,219,46,219,219,219,46,219,219,219,219,219,46,46,46,46,46,219,0,0,0,0,0,0,0,0,219,46,46,46,46,46,219,0,0,0,219,219,219,219,219,219,219,0,0,0,0,0,0,0,0,219,46,46,46,46,46,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,219,46,46,46,46,46,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,219,219,219,219,219,219,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,");
			return true;
		}
		if(r == "room2") {
			terrylib_World.loadmapfromstring(s,r,"24,15,tiles,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,256,192,16,16,newgame_enter,7,22,,0,");
			return true;
		}
	}
	return false;
};
var config_Numlist = function() {
	this.list = [];
	var _g = 0;
	while(_g < 30) {
		++_g;
		this.list.push("");
		this.length = 0;
	}
};
$hxClasses["config.Numlist"] = config_Numlist;
config_Numlist.__name__ = ["config","Numlist"];
config_Numlist.prototype = {
	add: function(t) {
		this.list[this.length] = t;
		this.length++;
		if(this.length > this.list.length) {
			this.list.push("");
		}
	}
	,clear: function() {
		this.length = 0;
	}
	,printout: function() {
		var tstring = "";
		var _g1 = 0;
		var _g = this.length;
		while(_g1 < _g) {
			var i = _g1++;
			tstring += this.list[i];
			if(i != this.length - 1) {
				tstring += ", ";
			}
		}
		if(tstring == "") {
			return "nothing";
		}
		return tstring;
	}
	,list: null
	,length: null
	,__class__: config_Numlist
};
var config_Roomcache = function() { };
$hxClasses["config.Roomcache"] = config_Roomcache;
config_Roomcache.__name__ = ["config","Roomcache"];
config_Roomcache.numrooms = function(category) {
	if(category == "big") {
		return 12;
	}
	if(category == "exit") {
		return 8;
	}
	if(category == "high_ripple") {
		return 14;
	}
	if(category == "high_topfloor_exit") {
		return 8;
	}
	if(category == "high_topfloor_kingpin") {
		return 5;
	}
	if(category == "high_topfloor_long") {
		return 11;
	}
	if(category == "high_topfloor_single") {
		return 2;
	}
	if(category == "high_topfloor_tall") {
		return 11;
	}
	if(category == "intro_ripple") {
		return 20;
	}
	if(category == "intro_topfloor") {
		return 10;
	}
	if(category == "intro_topfloor_exit") {
		return 6;
	}
	if(category == "intro_topfloor_kingpin") {
		return 4;
	}
	if(category == "normal") {
		return 20;
	}
	if(category == "robot_bottomright") {
		return 6;
	}
	if(category == "robot_connection") {
		return 4;
	}
	if(category == "robot_exit") {
		return 2;
	}
	if(category == "robot_normal") {
		return 6;
	}
	if(category == "robot_ripple") {
		return 10;
	}
	if(category == "robot_topfloor_alt") {
		return 7;
	}
	if(category == "robot_topfloor_exit") {
		return 4;
	}
	if(category == "robot_topfloor_kingpin") {
		return 5;
	}
	if(category == "robot_topfloor_middle") {
		return 8;
	}
	if(category == "robot_topfloor_ripple") {
		return 5;
	}
	if(category == "rooftop_exit") {
		return 3;
	}
	if(category == "rooftop_gemroom") {
		return 3;
	}
	if(category == "rooftop_ripple") {
		return 10;
	}
	if(category == "shopfloor") {
		return 2;
	}
	return 0;
};
config_Roomcache.width = function(category,n) {
	if(category == "big") {
		if(n == 0) {
			return 15;
		} else if(n == 1) {
			return 12;
		} else if(n == 2) {
			return 14;
		} else if(n == 3) {
			return 15;
		} else if(n == 4) {
			return 14;
		} else if(n == 5) {
			return 12;
		} else if(n == 6) {
			return 15;
		} else if(n == 7) {
			return 12;
		} else if(n == 8) {
			return 13;
		} else if(n == 9) {
			return 12;
		} else if(n == 10) {
			return 15;
		} else if(n == 11) {
			return 12;
		}
	} else if(category == "exit") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 7;
		} else if(n == 3) {
			return 7;
		} else if(n == 4) {
			return 7;
		} else if(n == 5) {
			return 9;
		} else if(n == 6) {
			return 9;
		} else if(n == 7) {
			return 7;
		}
	} else if(category == "high_ripple") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 12;
		} else if(n == 5) {
			return 10;
		} else if(n == 6) {
			return 11;
		} else if(n == 7) {
			return 11;
		} else if(n == 8) {
			return 9;
		} else if(n == 9) {
			return 13;
		} else if(n == 10) {
			return 7;
		} else if(n == 11) {
			return 5;
		} else if(n == 12) {
			return 7;
		} else if(n == 13) {
			return 15;
		}
	} else if(category == "high_topfloor_exit") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 8;
		} else if(n == 5) {
			return 8;
		} else if(n == 6) {
			return 8;
		} else if(n == 7) {
			return 8;
		}
	} else if(category == "high_topfloor_kingpin") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 8;
		}
	} else if(category == "high_topfloor_long") {
		if(n == 0) {
			return 17;
		} else if(n == 1) {
			return 17;
		} else if(n == 2) {
			return 17;
		} else if(n == 3) {
			return 17;
		} else if(n == 4) {
			return 17;
		} else if(n == 5) {
			return 17;
		} else if(n == 6) {
			return 17;
		} else if(n == 7) {
			return 17;
		} else if(n == 8) {
			return 17;
		} else if(n == 9) {
			return 17;
		} else if(n == 10) {
			return 17;
		}
	} else if(category == "high_topfloor_single") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		}
	} else if(category == "high_topfloor_tall") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 8;
		} else if(n == 5) {
			return 8;
		} else if(n == 6) {
			return 8;
		} else if(n == 7) {
			return 8;
		} else if(n == 8) {
			return 8;
		} else if(n == 9) {
			return 8;
		} else if(n == 10) {
			return 8;
		}
	} else if(category == "intro_ripple") {
		if(n == 0) {
			return 10;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 11;
		} else if(n == 3) {
			return 13;
		} else if(n == 4) {
			return 13;
		} else if(n == 5) {
			return 10;
		} else if(n == 6) {
			return 15;
		} else if(n == 7) {
			return 5;
		} else if(n == 8) {
			return 12;
		} else if(n == 9) {
			return 11;
		} else if(n == 10) {
			return 9;
		} else if(n == 11) {
			return 7;
		} else if(n == 12) {
			return 9;
		} else if(n == 13) {
			return 7;
		} else if(n == 14) {
			return 11;
		} else if(n == 15) {
			return 11;
		} else if(n == 16) {
			return 8;
		} else if(n == 17) {
			return 7;
		} else if(n == 18) {
			return 9;
		} else if(n == 19) {
			return 5;
		}
	} else if(category == "intro_topfloor") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 8;
		} else if(n == 5) {
			return 8;
		} else if(n == 6) {
			return 8;
		} else if(n == 7) {
			return 8;
		} else if(n == 8) {
			return 8;
		} else if(n == 9) {
			return 8;
		}
	} else if(category == "intro_topfloor_exit") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 8;
		} else if(n == 5) {
			return 8;
		}
	} else if(category == "intro_topfloor_kingpin") {
		if(n == 0) {
			return 7;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 7;
		} else if(n == 3) {
			return 7;
		}
	} else if(category == "normal") {
		if(n == 0) {
			return 5;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 7;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 5;
		} else if(n == 5) {
			return 7;
		} else if(n == 6) {
			return 7;
		} else if(n == 7) {
			return 8;
		} else if(n == 8) {
			return 8;
		} else if(n == 9) {
			return 5;
		} else if(n == 10) {
			return 5;
		} else if(n == 11) {
			return 5;
		} else if(n == 12) {
			return 6;
		} else if(n == 13) {
			return 7;
		} else if(n == 14) {
			return 8;
		} else if(n == 15) {
			return 5;
		} else if(n == 16) {
			return 8;
		} else if(n == 17) {
			return 6;
		} else if(n == 18) {
			return 8;
		} else if(n == 19) {
			return 6;
		}
	} else if(category == "robot_bottomright") {
		if(n == 0) {
			return 10;
		} else if(n == 1) {
			return 10;
		} else if(n == 2) {
			return 10;
		} else if(n == 3) {
			return 10;
		} else if(n == 4) {
			return 10;
		} else if(n == 5) {
			return 10;
		}
	} else if(category == "robot_connection") {
		if(n == 0) {
			return 7;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 7;
		} else if(n == 3) {
			return 7;
		}
	} else if(category == "robot_exit") {
		if(n == 0) {
			return 7;
		} else if(n == 1) {
			return 7;
		}
	} else if(category == "robot_normal") {
		if(n == 0) {
			return 10;
		} else if(n == 1) {
			return 10;
		} else if(n == 2) {
			return 10;
		} else if(n == 3) {
			return 10;
		} else if(n == 4) {
			return 10;
		} else if(n == 5) {
			return 10;
		}
	} else if(category == "robot_ripple") {
		if(n == 0) {
			return 10;
		} else if(n == 1) {
			return 10;
		} else if(n == 2) {
			return 10;
		} else if(n == 3) {
			return 10;
		} else if(n == 4) {
			return 10;
		} else if(n == 5) {
			return 10;
		} else if(n == 6) {
			return 10;
		} else if(n == 7) {
			return 10;
		} else if(n == 8) {
			return 10;
		} else if(n == 9) {
			return 10;
		}
	} else if(category == "robot_topfloor_alt") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 9;
		} else if(n == 5) {
			return 9;
		} else if(n == 6) {
			return 9;
		}
	} else if(category == "robot_topfloor_exit") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		}
	} else if(category == "robot_topfloor_kingpin") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 9;
		}
	} else if(category == "robot_topfloor_middle") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 9;
		} else if(n == 5) {
			return 9;
		} else if(n == 6) {
			return 9;
		} else if(n == 7) {
			return 9;
		}
	} else if(category == "robot_topfloor_ripple") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 9;
		}
	} else if(category == "rooftop_exit") {
		if(n == 0) {
			return 15;
		} else if(n == 1) {
			return 15;
		} else if(n == 2) {
			return 15;
		}
	} else if(category == "rooftop_gemroom") {
		if(n == 0) {
			return 15;
		} else if(n == 1) {
			return 15;
		} else if(n == 2) {
			return 15;
		}
	} else if(category == "rooftop_ripple") {
		if(n == 0) {
			return 15;
		} else if(n == 1) {
			return 15;
		} else if(n == 2) {
			return 15;
		} else if(n == 3) {
			return 15;
		} else if(n == 4) {
			return 15;
		} else if(n == 5) {
			return 15;
		} else if(n == 6) {
			return 15;
		} else if(n == 7) {
			return 15;
		} else if(n == 8) {
			return 15;
		} else if(n == 9) {
			return 15;
		}
	} else if(category == "shopfloor") {
		if(n == 0) {
			return 19;
		} else if(n == 1) {
			return 19;
		}
	}
	return 0;
};
config_Roomcache.height = function(category,n) {
	if(category == "big") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 10;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 10;
		} else if(n == 4) {
			return 10;
		} else if(n == 5) {
			return 9;
		} else if(n == 6) {
			return 11;
		} else if(n == 7) {
			return 8;
		} else if(n == 8) {
			return 9;
		} else if(n == 9) {
			return 9;
		} else if(n == 10) {
			return 11;
		} else if(n == 11) {
			return 10;
		}
	} else if(category == "exit") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 5;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 7;
		} else if(n == 5) {
			return 7;
		} else if(n == 6) {
			return 9;
		} else if(n == 7) {
			return 7;
		}
	} else if(category == "high_ripple") {
		if(n == 0) {
			return 6;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 6;
		} else if(n == 4) {
			return 12;
		} else if(n == 5) {
			return 10;
		} else if(n == 6) {
			return 11;
		} else if(n == 7) {
			return 11;
		} else if(n == 8) {
			return 9;
		} else if(n == 9) {
			return 7;
		} else if(n == 10) {
			return 10;
		} else if(n == 11) {
			return 12;
		} else if(n == 12) {
			return 15;
		} else if(n == 13) {
			return 6;
		}
	} else if(category == "high_topfloor_exit") {
		if(n == 0) {
			return 7;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 7;
		} else if(n == 3) {
			return 7;
		} else if(n == 4) {
			return 7;
		} else if(n == 5) {
			return 7;
		} else if(n == 6) {
			return 7;
		} else if(n == 7) {
			return 7;
		}
	} else if(category == "high_topfloor_kingpin") {
		if(n == 0) {
			return 7;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 7;
		} else if(n == 3) {
			return 7;
		} else if(n == 4) {
			return 7;
		}
	} else if(category == "high_topfloor_long") {
		if(n == 0) {
			return 7;
		} else if(n == 1) {
			return 7;
		} else if(n == 2) {
			return 7;
		} else if(n == 3) {
			return 7;
		} else if(n == 4) {
			return 7;
		} else if(n == 5) {
			return 7;
		} else if(n == 6) {
			return 7;
		} else if(n == 7) {
			return 7;
		} else if(n == 8) {
			return 7;
		} else if(n == 9) {
			return 7;
		} else if(n == 10) {
			return 7;
		}
	} else if(category == "high_topfloor_single") {
		if(n == 0) {
			return 7;
		} else if(n == 1) {
			return 7;
		}
	} else if(category == "high_topfloor_tall") {
		if(n == 0) {
			return 16;
		} else if(n == 1) {
			return 16;
		} else if(n == 2) {
			return 16;
		} else if(n == 3) {
			return 16;
		} else if(n == 4) {
			return 16;
		} else if(n == 5) {
			return 16;
		} else if(n == 6) {
			return 16;
		} else if(n == 7) {
			return 16;
		} else if(n == 8) {
			return 16;
		} else if(n == 9) {
			return 16;
		} else if(n == 10) {
			return 16;
		}
	} else if(category == "intro_ripple") {
		if(n == 0) {
			return 10;
		} else if(n == 1) {
			return 12;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 7;
		} else if(n == 4) {
			return 13;
		} else if(n == 5) {
			return 11;
		} else if(n == 6) {
			return 10;
		} else if(n == 7) {
			return 12;
		} else if(n == 8) {
			return 10;
		} else if(n == 9) {
			return 9;
		} else if(n == 10) {
			return 9;
		} else if(n == 11) {
			return 8;
		} else if(n == 12) {
			return 9;
		} else if(n == 13) {
			return 7;
		} else if(n == 14) {
			return 5;
		} else if(n == 15) {
			return 9;
		} else if(n == 16) {
			return 8;
		} else if(n == 17) {
			return 10;
		} else if(n == 18) {
			return 9;
		} else if(n == 19) {
			return 7;
		}
	} else if(category == "intro_topfloor") {
		if(n == 0) {
			return 6;
		} else if(n == 1) {
			return 6;
		} else if(n == 2) {
			return 6;
		} else if(n == 3) {
			return 6;
		} else if(n == 4) {
			return 6;
		} else if(n == 5) {
			return 6;
		} else if(n == 6) {
			return 6;
		} else if(n == 7) {
			return 6;
		} else if(n == 8) {
			return 6;
		} else if(n == 9) {
			return 6;
		}
	} else if(category == "intro_topfloor_exit") {
		if(n == 0) {
			return 6;
		} else if(n == 1) {
			return 6;
		} else if(n == 2) {
			return 6;
		} else if(n == 3) {
			return 6;
		} else if(n == 4) {
			return 6;
		} else if(n == 5) {
			return 6;
		}
	} else if(category == "intro_topfloor_kingpin") {
		if(n == 0) {
			return 6;
		} else if(n == 1) {
			return 6;
		} else if(n == 2) {
			return 6;
		} else if(n == 3) {
			return 6;
		}
	} else if(category == "normal") {
		if(n == 0) {
			return 5;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 7;
		} else if(n == 3) {
			return 6;
		} else if(n == 4) {
			return 7;
		} else if(n == 5) {
			return 6;
		} else if(n == 6) {
			return 8;
		} else if(n == 7) {
			return 6;
		} else if(n == 8) {
			return 7;
		} else if(n == 9) {
			return 7;
		} else if(n == 10) {
			return 8;
		} else if(n == 11) {
			return 7;
		} else if(n == 12) {
			return 7;
		} else if(n == 13) {
			return 5;
		} else if(n == 14) {
			return 6;
		} else if(n == 15) {
			return 5;
		} else if(n == 16) {
			return 5;
		} else if(n == 17) {
			return 8;
		} else if(n == 18) {
			return 8;
		} else if(n == 19) {
			return 8;
		}
	} else if(category == "robot_bottomright") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 8;
		} else if(n == 5) {
			return 8;
		}
	} else if(category == "robot_connection") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		}
	} else if(category == "robot_exit") {
		if(n == 0) {
			return 7;
		} else if(n == 1) {
			return 7;
		}
	} else if(category == "robot_normal") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 8;
		} else if(n == 5) {
			return 8;
		}
	} else if(category == "robot_ripple") {
		if(n == 0) {
			return 8;
		} else if(n == 1) {
			return 8;
		} else if(n == 2) {
			return 8;
		} else if(n == 3) {
			return 8;
		} else if(n == 4) {
			return 8;
		} else if(n == 5) {
			return 8;
		} else if(n == 6) {
			return 8;
		} else if(n == 7) {
			return 8;
		} else if(n == 8) {
			return 8;
		} else if(n == 9) {
			return 8;
		}
	} else if(category == "robot_topfloor_alt") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 9;
		} else if(n == 5) {
			return 9;
		} else if(n == 6) {
			return 9;
		}
	} else if(category == "robot_topfloor_exit") {
		if(n == 0) {
			return 15;
		} else if(n == 1) {
			return 15;
		} else if(n == 2) {
			return 15;
		} else if(n == 3) {
			return 15;
		}
	} else if(category == "robot_topfloor_kingpin") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 9;
		}
	} else if(category == "robot_topfloor_middle") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 9;
		} else if(n == 5) {
			return 9;
		} else if(n == 6) {
			return 9;
		} else if(n == 7) {
			return 9;
		}
	} else if(category == "robot_topfloor_ripple") {
		if(n == 0) {
			return 9;
		} else if(n == 1) {
			return 9;
		} else if(n == 2) {
			return 9;
		} else if(n == 3) {
			return 9;
		} else if(n == 4) {
			return 9;
		}
	} else if(category == "rooftop_exit") {
		if(n == 0) {
			return 15;
		} else if(n == 1) {
			return 15;
		} else if(n == 2) {
			return 15;
		}
	} else if(category == "rooftop_gemroom") {
		if(n == 0) {
			return 15;
		} else if(n == 1) {
			return 15;
		} else if(n == 2) {
			return 15;
		}
	} else if(category == "rooftop_ripple") {
		if(n == 0) {
			return 15;
		} else if(n == 1) {
			return 15;
		} else if(n == 2) {
			return 15;
		} else if(n == 3) {
			return 15;
		} else if(n == 4) {
			return 15;
		} else if(n == 5) {
			return 15;
		} else if(n == 6) {
			return 15;
		} else if(n == 7) {
			return 15;
		} else if(n == 8) {
			return 15;
		} else if(n == 9) {
			return 15;
		}
	} else if(category == "shopfloor") {
		if(n == 0) {
			return 14;
		} else if(n == 1) {
			return 14;
		}
	}
	return 0;
};
config_Roomcache.getroomstring = function(category,n) {
	if(category == "big") {
		if(n == 0) {
			return [63,57,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 1) {
			return [60,58,177,48,7,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 2) {
			return [62,57,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 3) {
			return [63,58,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 4) {
			return [62,58,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 5) {
			return [60,57,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 6) {
			return [63,59,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 7) {
			return [60,56,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 8) {
			return [61,57,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 9) {
			return [60,57,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 10) {
			return [63,59,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 11) {
			return [60,58,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		}
	} else if(category == "exit") {
		if(n == 0) {
			return
		} else if(n == 1) {
			return [57,55,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,240,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 2) {
			return [55,53,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,240,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 3) {
			return [55,57,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,240,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 4) {
			return [55,55,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,240,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 5) {
			return [57,55,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,240,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 6) {
			return [57,57,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,240,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 7) {
			return [55,55,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,240,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		}
	} else if(category == "high_ripple") {
		if(n == 0) {
			return [57,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,88,48,46,48,46,48,46,48,63,48,177,48,46,48,7,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,7,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [55,55,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,68,48,46,48,46,48,46,48,68,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,63,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,68,48,46,48,46,48,46,48,68,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [57,57,32,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,32,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,63,48,46,48,76,48,46,48,63,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,32,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,32,48];
		} else if(n == 3) {
			return [57,54,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,177,48,36,48,25,48,36,48,177,48,46,48,7,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,38,48,177,48,177,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 4) {
			return [60,60,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,165,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,63,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,7,48,7,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,63,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,165,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 5) {
			return [58,58,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,165,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,63,48,46,48,177,48,46,48,7,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,165,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 6) {
			return [59,59,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,67,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,67,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 7) {
			return [59,59,32,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,32,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,7,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,7,48,177,48,46,48,177,48,177,48,73,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,38,48,46,48,46,48,46,48,46,48,74,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,25,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,72,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,75,48,177,48,177,48,46,48,177,48,7,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,12,48,46,48,7,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,32,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,32,48];
		} else if(n == 8) {
			return [57,57,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,177,48,46,48,68,48,46,48,177,48,46,48,7,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48];
		} else if(n == 9) {
			return [61,55,177,48,177,48,177,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,177,48,88,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,88,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,177,48,177,48,177,48,177,48];
		} else if(n == 10) {
			return [55,58,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,32,48,177,48,177,48,88,48,177,48,177,48,32,48,32,48,32,48,177,48,177,48,177,48,32,48,32,48];
		} else if(n == 11) {
			return [53,60,177,48,177,48,7,48,177,48,177,48,177,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,88,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,46,48,88,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,177,48,177,48,177,48,7,48,177,48,177,48];
		} else if(n == 12) {
			return [55,63,177,48,7,48,177,48,177,48,177,48,32,48,32,48,177,48,46,48,177,48,46,48,177,48,32,48,32,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,7,48,177,48,63,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,63,48,177,48,7,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,32,48,32,48,177,48,71,48,177,48,46,48,177,48,32,48,32,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 13) {
			return [63,54,32,48,32,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,32,48,177,48,7,48,177,48,32,48,32,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,165,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,7,48,46,48,46,48,46,48,177,48,177,48,177,48,63,48,177,48,177,48,177,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		}
	} else if(category == "high_topfloor_exit") {
		if(n == 0) {
			return [56,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,240,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [56,55,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,240,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,68,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [56,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,14,48,46,48,177,48,46,48,12,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,68,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,240,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,38,48,177,48,177,48,79,48,177,48,177,48];
		} else if(n == 3) {
			return [56,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,240,48,177,48,24,48,46,48,46,48,46,48,79,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,83,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,46,48,46,48,46,48,46,48,46,48];
		} else if(n == 4) {
			return [56,55,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,67,48,177,48,177,48,46,48,46,48,177,48,177,48,67,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,240,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,67,48,177,48,177,48,46,48,46,48,177,48,177,48,67,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48];
		} else if(n == 5) {
			return [56,55,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,240,48,177,48,79,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,79,48,46,48,46,48,46,48,68,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,79,48,177,48,177,48];
		} else if(n == 6) {
			return [56,55,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,68,48,46,48,177,48,46,48,240,48,46,48,79,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 7) {
			return [56,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,88,48,177,48,177,48,46,48,240,48,46,48,46,48,177,48,46,48,79,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,46,48,177,48,177,48,88,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "high_topfloor_kingpin") {
		if(n == 0) {
			return [56,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,240,48,46,48,38,48,38,48,38,48,38,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [56,55,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,38,48,177,48,177,48,177,48,177,48,240,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,38,48,46,48,38,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [56,55,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,38,48,46,48,46,48,46,48,46,48,177,48,177,48,38,48,46,48,177,48,46,48,46,48,177,48,177,48,38,48,46,48,177,48,177,48,46,48,177,48,177,48,38,48,46,48,177,48,177,48,46,48,177,48,177,48,240,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48];
		} else if(n == 3) {
			return [56,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,46,48,38,48,46,48,38,48,46,48,38,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,240,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 4) {
			return [56,55,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,38,48,46,48,177,48,38,48,177,48,177,48,46,48,38,48,177,48,12,48,177,48,38,48,177,48,177,48,12,48,177,48,177,48,46,48,177,48,38,48,177,48,177,48,46,48,177,48,177,48,12,48,177,48,38,48,177,48,177,48,12,48,177,48,38,48,46,48,177,48,38,48,240,48,177,48,46,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "high_topfloor_long") {
		if(n == 0) {
			return [65,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,73,48,46,48,46,48,46,48,46,48,46,48,46,48,73,48,46,48,46,48,46,48,46,48,46,48,46,48,74,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,72,48,46,48,46,48,46,48,46,48,46,48,46,48,75,48,46,48,46,48,46,48,46,48,46,48,46,48,75,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [65,55,177,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,73,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,73,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,75,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,75,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [65,55,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,68,48,46,48,46,48,46,48,46,48,46,48,68,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,12,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,79,48,177,48,67,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,68,48,46,48,46,48,46,48,46,48,46,48,68,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 3) {
			return [65,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,12,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,76,48,46,48,46,48,46,48,38,48,46,48,46,48,46,48,79,48,46,48,68,48,12,48,177,48,177,48,36,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48];
		} else if(n == 4) {
			return [65,55,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,76,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,68,48,12,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,76,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 5) {
			return [65,55,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,165,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,12,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,165,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48];
		} else if(n == 6) {
			return [65,55,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,165,48,177,48,79,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48];
		} else if(n == 7) {
			return [65,55,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,68,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,12,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,68,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48];
		} else if(n == 8) {
			return [65,55,177,48,79,48,177,48,79,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,79,48,177,48,79,48,177,48,177,48,177,48,79,48,71,48,46,48,46,48,46,48,46,48,46,48,46,48,79,48,46,48,79,48,46,48,79,48,46,48,177,48,46,48,79,48,177,48,177,48,177,48,79,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,79,48,177,48,79,48,177,48,79,48,46,48,79,48,46,48,177,48,46,48,177,48,12,48,79,48,46,48,177,48,71,48,177,48,46,48,79,48,46,48,79,48,177,48,79,48,177,48,79,48,177,48,79,48,177,48,177,48,177,48,79,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,79,48,46,48,177,48,46,48,79,48,46,48,46,48,46,48,46,48,71,48,177,48,46,48,46,48,46,48,79,48,46,48,79,48,177,48,79,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,79,48,177,48,79,48,177,48,79,48,177,48];
		} else if(n == 9) {
			return [65,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 10) {
			return [65,55,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,14,48,46,48,177,48,177,48,46,48,83,48,46,48,46,48,46,48,46,48,46,48,83,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,12,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,79,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "high_topfloor_single") {
		if(n == 0) {
			return [56,55,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,12,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [56,55,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "high_topfloor_tall") {
		if(n == 0) {
			return [56,64,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,79,48,46,48,46,48,46,48,67,48,177,48,177,48,46,48,177,48,46,48,12,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,71,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,67,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,79,48,177,48,177,48];
		} else if(n == 1) {
			return [56,64,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,165,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,79,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,12,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,79,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,165,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [56,64,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,76,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,12,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,76,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 3) {
			return [56,64,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,12,48,177,48,177,48,76,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,76,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,76,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,76,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,79,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 4) {
			return [56,64,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,46,48,46,48,46,48,46,48,46,48,46,48,79,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,76,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,12,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 5) {
			return [56,64,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,12,48,46,48,74,48,177,48,177,48,72,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48];
		} else if(n == 6) {
			return [56,64,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,68,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,68,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,12,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,68,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 7) {
			return [56,64,46,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,12,48,177,48,46,48,46,48,177,48,88,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,88,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,88,48,177,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,88,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,79,48,177,48,46,48,46,48,177,48,46,48];
		} else if(n == 8) {
			return [56,64,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,79,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,165,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,12,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,165,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,79,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 9) {
			return [56,64,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,73,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,36,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,75,48,46,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,67,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,12,48,177,48,177,48,177,48,46,48,67,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 10) {
			return [56,64,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,73,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,12,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,75,48,46,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,67,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,36,48,177,48,177,48,177,48,46,48,67,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "intro_ripple") {
		if(n == 0) {
			return [58,58,177,48,177,48,177,48,177,48,7,48,7,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,7,48,46,48,46,48,177,48,63,48,63,48,177,48,46,48,46,48,7,48,7,48,46,48,46,48,177,48,63,48,63,48,177,48,46,48,46,48,7,48,177,48,46,48,46,48,177,48,177,48,79,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,7,48,7,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [57,60,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,68,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,7,48,46,48,46,48,177,48,32,48,177,48,46,48,46,48,7,48,177,48,177,48,7,48,177,48,32,48,177,48,7,48,177,48,177,48];
		} else if(n == 2) {
			return [59,57,32,48,32,48,32,48,177,48,177,48,7,48,177,48,177,48,32,48,32,48,32,48,32,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,32,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,63,48,46,48,83,48,46,48,63,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,32,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,32,48,32,48,32,48,32,48,177,48,177,48,7,48,177,48,177,48,32,48,32,48,32,48];
		} else if(n == 3) {
			return [61,55,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,67,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,67,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48];
		} else if(n == 4) {
			return [61,61,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,67,48,177,48,67,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,67,48,177,48,67,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 5) {
			return [58,59,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,68,48,63,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 6) {
			return [63,58,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 7) {
			return [53,60,177,48,177,48,7,48,177,48,177,48,7,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,67,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,67,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,7,48,177,48,177,48,7,48,177,48,177,48];
		} else if(n == 8) {
			return [60,58,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,67,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 9) {
			return [59,57,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,67,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48];
		} else if(n == 10) {
			return [57,57,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,67,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,46,48,177,48,177,48,79,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,7,48,46,48,79,48,46,48,63,48,46,48,79,48,46,48,7,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,79,48,177,48,177,48,46,48,177,48,177,48,67,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48];
		} else if(n == 11) {
			return [55,56,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,63,48,177,48,177,48,67,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,67,48,177,48,177,48,63,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 12) {
			return
		} else if(n == 13) {
			return [55,55,177,48,7,48,177,48,46,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,68,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,46,48,177,48,7,48,177,48];
		} else if(n == 14) {
			return [59,53,177,48,7,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,67,48,177,48,67,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 15) {
			return [59,57,32,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48,177,48,32,48,177,48,177,48,63,48,46,48,177,48,46,48,177,48,46,48,63,48,177,48,177,48,177,48,46,48,46,48,68,48,177,48,46,48,177,48,68,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,7,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,32,48,177,48,177,48,79,48,177,48,79,48,177,48,79,48,177,48,177,48,32,48,32,48,32,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,32,48,32,48,32,48,32,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,32,48,32,48];
		} else if(n == 16) {
			return [56,56,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,67,48,46,48,46,48,177,48,177,48,46,48,46,48,67,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 17) {
			return [55,58,32,48,32,48,177,48,177,48,177,48,32,48,32,48,32,48,177,48,177,48,67,48,177,48,177,48,32,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,177,48];
		} else if(n == 18) {
			return [57,57,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,177,48,177,48,38,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,36,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,83,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,24,48,46,48,12,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 19) {
			return [53,55,177,48,177,48,7,48,177,48,177,48,177,48,67,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,63,48,177,48,177,48,177,48,7,48,177,48,177,48];
		}
	} else if(category == "intro_topfloor") {
		if(n == 0) {
			return [56,54,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,12,48,46,48,79,48,46,48,46,48,46,48,46,48,177,48,67,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 1) {
			return [56,54,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,83,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48];
		} else if(n == 2) {
			return [56,54,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,74,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,46,48,46,48,177,48,72,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48];
		} else if(n == 3) {
			return [56,54,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,67,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48];
		} else if(n == 4) {
			return [56,54,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,68,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,68,48,46,48,177,48,177,48,46,48,46,48,12,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 5) {
			return [56,54,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,67,48,177,48,177,48,67,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,12,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,67,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48];
		} else if(n == 6) {
			return [56,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,83,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 7) {
			return [56,54,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,12,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,68,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48];
		} else if(n == 8) {
			return [56,54,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,12,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48];
		} else if(n == 9) {
			return [56,54,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,74,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,12,48,46,48,46,48,177,48,177,48,72,48,46,48,46,48,46,48,46,48,75,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48];
		}
	} else if(category == "intro_topfloor_exit") {
		if(n == 0) {
			return [56,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,240,48,46,48,177,48,46,48,46,48,68,48,177,48,177,48,46,48,46,48,79,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [56,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,240,48,46,48,46,48,46,48,177,48,71,48,177,48,177,48,46,48,46,48,46,48,46,48,79,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [56,54,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,71,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,240,48,177,48,46,48,46,48,46,48,177,48,46,48,79,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48];
		} else if(n == 3) {
			return [56,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,240,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,79,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,71,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 4) {
			return [56,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,79,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,68,48,46,48,177,48,177,48,240,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48];
		} else if(n == 5) {
			return [56,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,240,48,177,48,71,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,83,48,46,48,46,48];
		}
	} else if(category == "intro_topfloor_kingpin") {
		if(n == 0) {
			return [55,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,240,48,177,48,46,48,177,48,177,48,38,48,177,48,177,48,177,48,38,48,177,48,177,48,46,48,46,48,38,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [55,54,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,46,48,46,48,240,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,38,48,177,48,38,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [55,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,38,48,177,48,240,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,38,48,177,48,177,48,46,48,46,48,38,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 3) {
			return [55,54,177,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,46,48,83,48,46,48,12,48,12,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,240,48,177,48,46,48,38,48,46,48,177,48,177,48,46,48,38,48,46,48,177,48,46,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "normal") {
		if(n == 0) {
			return [53,53,177,48,7,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,46,48,63,48,46,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,7,48,177,48];
		} else if(n == 1) {
			return [55,56,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 2) {
			return [55,55,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 3) {
			return [56,54,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 4) {
			return [53,55,177,48,7,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,7,48,177,48];
		} else if(n == 5) {
			return [55,54,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 6) {
			return [55,56,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 7) {
			return [56,54,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 8) {
			return [56,55,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 9) {
			return [53,55,177,48,7,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,7,48,177,48];
		} else if(n == 10) {
			return [53,56,177,48,7,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,7,48,177,48];
		} else if(n == 11) {
			return [53,55,177,48,7,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,7,48,177,48];
		} else if(n == 12) {
			return [54,55,177,48,7,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,7,48,177,48];
		} else if(n == 13) {
			return [55,53,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,63,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 14) {
			return [56,54,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 15) {
			return [53,53,177,48,7,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,46,48,63,48,46,48,177,48,7,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,7,48,177,48];
		} else if(n == 16) {
			return [56,53,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 17) {
			return [54,56,177,48,7,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,7,48,177,48];
		} else if(n == 18) {
			return [56,56,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 19) {
			return [54,56,177,48,7,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,7,48,177,48];
		}
	} else if(category == "robot_bottomright") {
		if(n == 0) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,63,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48];
		} else if(n == 1) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48];
		} else if(n == 2) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48];
		} else if(n == 3) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48];
		} else if(n == 4) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,63,48,46,48,177,48,177,48,46,48,177,48,177,48,32,48,32,48,177,48,177,48,46,48,177,48,177,48,46,48,63,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48];
		} else if(n == 5) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48];
		}
	} else if(category == "robot_connection") {
		if(n == 0) {
			return [55,56,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 1) {
			return [55,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,7,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 2) {
			return [55,56,32,48,32,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,7,48,46,48,7,48,32,48,32,48,32,48,32,48,177,48,46,48,177,48,32,48,32,48,32,48,32,48,177,48,46,48,177,48,32,48,32,48,32,48,32,48,177,48,46,48,177,48,32,48,32,48,32,48,32,48,177,48,46,48,177,48,32,48,32,48,32,48,32,48,7,48,46,48,7,48,32,48,32,48,32,48,32,48,177,48,7,48,177,48,32,48,32,48];
		} else if(n == 3) {
			return [55,56,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48];
		}
	} else if(category == "robot_exit") {
		if(n == 0) {
			return [55,55,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,240,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 1) {
			return [55,55,177,48,7,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,240,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,7,48,177,48];
		}
	} else if(category == "robot_normal") {
		if(n == 0) {
			return
		} else if(n == 1) {
			return
		} else if(n == 2) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 3) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 4) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,63,48,46,48,177,48,177,48,46,48,177,48,32,48,32,48,32,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,32,48,32,48,32,48,177,48,46,48,177,48,177,48,46,48,63,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 5) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,177,48,177,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		}
	} else if(category == "robot_ripple") {
		if(n == 0) {
			return
		} else if(n == 1) {
			return
		} else if(n == 2) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,66,48,46,48,46,48,46,48,7,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,63,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,7,48,46,48,46,48,46,48,66,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 3) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,63,48,177,48,177,48,177,48,177,48,66,48,46,48,7,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,67,48,177,48,177,48,67,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 4) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,177,48,177,48,63,48,67,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,67,48,66,48,177,48,177,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 5) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,7,48,177,48,46,48,66,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,67,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,67,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 6) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,7,48,177,48,46,48,177,48,67,48,46,48,63,48,67,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,66,48,177,48,177,48,67,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 7) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,7,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,73,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,75,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,63,48,46,48,46,48,46,48,46,48,177,48,177,48,7,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 8) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,46,48,46,48,63,48,177,48,177,48,67,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,67,48,177,48,177,48,66,48,46,48,46,48,177,48,7,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		} else if(n == 9) {
			return [58,56,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48,7,48,46,48,79,48,46,48,46,48,79,48,63,48,177,48,46,48,7,48,177,48,79,48,177,48,177,48,79,48,177,48,79,48,177,48,79,48,177,48,177,48,46,48,79,48,46,48,66,48,79,48,46,48,79,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,79,48,177,48,177,48,79,48,177,48,79,48,177,48,79,48,177,48,7,48,46,48,79,48,46,48,46,48,177,48,46,48,79,48,46,48,7,48,177,48,7,48,177,48,177,48,177,48,177,48,177,48,177,48,7,48,177,48];
		}
	} else if(category == "robot_topfloor_alt") {
		if(n == 0) {
			return [57,57,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,88,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 1) {
			return [57,57,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 2) {
			return [57,57,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,88,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,79,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,63,48,46,48,46,48,88,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 3) {
			return [57,57,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 4) {
			return [57,57,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,68,48,46,48,46,48,46,48,68,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,68,48,46,48,46,48,46,48,68,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48];
		} else if(n == 5) {
			return
		} else if(n == 6) {
			return
		}
	} else if(category == "robot_topfloor_exit") {
		if(n == 0) {
			return [57,63,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,240,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,234,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [57,63,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,234,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,240,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [57,63,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,234,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,240,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 3) {
			return [57,63,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,234,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,240,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "robot_topfloor_kingpin") {
		if(n == 0) {
			return [57,57,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,240,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 1) {
			return [57,57,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,240,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 2) {
			return [57,57,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,240,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,38,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 3) {
			return [57,57,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,240,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,38,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 4) {
			return [57,57,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,88,48,46,48,240,48,46,48,38,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48];
		}
	} else if(category == "robot_topfloor_middle") {
		if(n == 0) {
			return [57,57,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,88,48,177,48,46,48,46,48,88,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,63,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 1) {
			return [57,57,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,76,48,46,48,46,48,63,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48];
		} else if(n == 2) {
			return [57,57,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,76,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,24,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 3) {
			return [57,57,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,165,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,79,48,177,48,46,48,46,48,177,48,68,48,46,48,46,48,177,48,63,48,177,48,46,48,46,48,68,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,165,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48];
		} else if(n == 4) {
			return
		} else if(n == 5) {
			return [57,57,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,88,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,88,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 6) {
			return [57,57,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,165,48,177,48,165,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 7) {
			return [57,57,73,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,74,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,63,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,46,48,72,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,75,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "robot_topfloor_ripple") {
		if(n == 0) {
			return [57,57,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,79,48,46,48,46,48,69,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,63,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,69,48,46,48,46,48,79,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 1) {
			return [57,57,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,68,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,68,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,63,48,177,48,177,48,177,48,177,48,46,48,68,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,68,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48];
		} else if(n == 2) {
			return [57,57,177,48,46,48,46,48,46,48,63,48,46,48,46,48,46,48,177,48,177,48,46,48,68,48,46,48,68,48,46,48,68,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,68,48,46,48,68,48,46,48,68,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,68,48,46,48,68,48,46,48,68,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,79,48,177,48,177,48,46,48,177,48];
		} else if(n == 3) {
			return [57,57,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,88,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,88,48,177,48,63,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 4) {
			return [57,57,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,63,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,76,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "rooftop_exit") {
		if(n == 0) {
			return
		} else if(n == 1) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,240,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,78,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,240,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 2) {
			return [63,63,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,79,48,46,48,46,48,240,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,78,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,240,48,46,48,46,48,79,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48];
		}
	} else if(category == "rooftop_gemroom") {
		if(n == 0) {
			return [63,63,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,36,48,46,48,38,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,38,48,46,48,36,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,36,48,46,48,38,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,38,48,46,48,36,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48];
		} else if(n == 1) {
			return [63,63,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,38,48,46,48,36,48,46,48,46,48,46,48,38,48,46,48,46,48,46,48,36,48,46,48,38,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,38,48,46,48,36,48,46,48,46,48,46,48,38,48,46,48,46,48,46,48,36,48,46,48,38,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48];
		} else if(n == 2) {
			return [63,63,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,36,48,177,48,46,48,177,48,177,48,177,48,46,48,38,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,36,48,46,48,177,48,46,48,46,48,177,48,38,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,36,48,46,48,38,48,46,48,46,48,177,48,36,48,46,48,38,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48];
		}
	} else if(category == "rooftop_ripple") {
		if(n == 0) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,88,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,88,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,46,48,46,48,79,48,46,48,46,48,36,48,78,48,36,48,46,48,46,48,79,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,88,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,88,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return
		} else if(n == 2) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,88,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,78,48,46,48,46,48,46,48,88,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,36,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,88,48,46,48,46,48,36,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,88,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,88,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 3) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,76,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,76,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,36,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,78,48,46,48,76,48,46,48,36,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,76,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,76,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 4) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,76,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,76,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,36,48,46,48,36,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,78,48,46,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,76,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,76,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 5) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,88,48,177,48,177,48,177,48,88,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,78,48,36,48,36,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,88,48,177,48,177,48,177,48,88,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 6) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,88,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,78,48,36,48,177,48,46,48,76,48,46,48,177,48,36,48,78,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,88,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 7) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,88,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,46,48,88,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,46,48,36,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,36,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,88,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,88,48,46,48,177,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,46,48,177,48,46,48,177,48,78,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,88,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 8) {
			return [63,63,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,36,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,76,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,78,48,46,48,46,48,177,48,46,48,46,48,36,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48];
		} else if(n == 9) {
			return [63,63,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,88,48,177,48,177,48,177,48,88,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,36,48,46,48,177,48,177,48,177,48,46,48,36,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,79,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,88,48,46,48,46,48,46,48,79,48,46,48,79,48,46,48,46,48,46,48,88,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,78,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	} else if(category == "shopfloor") {
		if(n == 0) {
			return [67,62,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,63,48,46,48,38,48,46,48,38,48,46,48,63,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,240,48,46,48,46,48,46,48,46,48,46,48,46,48,2,48,46,48,46,48,46,48,46,48,46,48,46,48,240,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		} else if(n == 1) {
			return [67,62,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,46,48,240,48,46,48,46,48,46,48,46,48,46,48,46,48,2,48,46,48,46,48,46,48,46,48,46,48,46,48,240,48,46,48,177,48,177,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,46,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,63,48,46,48,38,48,46,48,38,48,46,48,63,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,46,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,177,48,177,48,177,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,38,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,177,48,177,48,46,48,63,48,46,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,46,48,46,48,46,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48,177,48];
		}
	}
	return [];
};
var config_Scriptcache = function() { };
$hxClasses["config.Scriptcache"] = config_Scriptcache;
config_Scriptcache.__name__ = ["config","Scriptcache"];
config_Scriptcache.localloadscript = function(scriptname) {
	if(scriptname == "test") {
		config_Scriptcache.s("say(msa){");
		config_Scriptcache.s("\tHey, I'm Ms A!");
		config_Scriptcache.s("}");
		config_Scriptcache.s("say(mr1){");
		config_Scriptcache.s("\tI'm Mr 1!");
		config_Scriptcache.s("}");
		config_Scriptcache.s("say(doctoralpha){");
		config_Scriptcache.s("\tAND I'M DOCTOR ALPHA!!!");
		config_Scriptcache.s("}");
		return true;
	}
	return false;
};
config_Scriptcache.s = function(t) {
	gamecontrol_Script.add(t);
};
var gamecontrol_Draw = function() { };
$hxClasses["gamecontrol.Draw"] = gamecontrol_Draw;
gamecontrol_Draw.__name__ = ["gamecontrol","Draw"];
gamecontrol_Draw.processfade = function() {
	if(gamecontrol_Draw.fademode > 1) {
		if(gamecontrol_Draw.fademode == 2) {
			gamecontrol_Draw.fadeamount = 0;
			gamecontrol_Draw.fademode = 3;
			terrylib_Lerp.start("fadeout",20);
		} else if(gamecontrol_Draw.fademode == 3) {
			gamecontrol_Draw.fadeamount = terrylib_Lerp.to(0,100,"fadeout","sine_out");
			if(terrylib_Lerp.justfinished("fadeout")) {
				gamecontrol_Draw.fademode = 1;
			}
		} else if(gamecontrol_Draw.fademode == 4) {
			gamecontrol_Draw.fademode = 5;
			terrylib_Lerp.start("fadein",20);
		} else if(gamecontrol_Draw.fademode == 5) {
			gamecontrol_Draw.fadeamount = terrylib_Lerp.to(100,0,"fadein","sine_in");
			if(terrylib_Lerp.justfinished("fadein")) {
				gamecontrol_Draw.fademode = 0;
			}
		}
	}
};
gamecontrol_Draw.fadeout = function(t) {
	if(t == null) {
		t = "nothing";
	}
	gamecontrol_Draw.fademode = 2;
	gamecontrol_Draw.fadeaction = t;
};
gamecontrol_Draw.fadein = function() {
	gamecontrol_Draw.fademode = 4;
};
gamecontrol_Draw.init = function() {
	gamecontrol_Draw.screentilewidth = 32;
	gamecontrol_Draw.screentileheight = 20;
};
gamecontrol_Draw.gfxflashlight = function() {
};
gamecontrol_Draw.gfxscreenshake = function() {
};
gamecontrol_Draw.getperlin = function(x,y) {
	return Perlinarray.perlinnoise[x % 384][y % 240];
};
gamecontrol_Draw.setboldtext = function() {
	haxegon_Text.set_font("fffhomepagebold");
};
gamecontrol_Draw.setnormaltext = function() {
	haxegon_Text.set_font("fffhomepage");
};
gamecontrol_Draw.clicktostart = function() {
	haxegon_Text.display(haxegon_Text.CENTER,haxegon_Text.CENTER,"[Click to start]",haxegon_Col.rgb(255 - terrylib_Help.glow / 2 | 0,255 - terrylib_Help.glow / 2 | 0,255 - terrylib_Help.glow / 2 | 0));
};
gamecontrol_Draw.outoffocusrender = function() {
};
gamecontrol_Draw.drawfade = function() {
	if(gamecontrol_Draw.fademode == 1) {
		haxegon_Gfx.clearscreen(haxegon_Col.BLACK);
	} else if(gamecontrol_Draw.fademode == 3) {
		haxegon_Gfx.fillbox(0,0,gamecontrol_Draw.fadeamount * (haxegon_Gfx.screenwidth / 20) / 10 | 0,haxegon_Gfx.screenheight,haxegon_Col.BLACK);
		haxegon_Gfx.fillbox(haxegon_Gfx.screenwidth - gamecontrol_Draw.fadeamount * (haxegon_Gfx.screenwidth / 20) / 10 | 0,0,haxegon_Gfx.screenwidthmid,haxegon_Gfx.screenheight,haxegon_Col.BLACK);
		haxegon_Gfx.fillbox(0,0,haxegon_Gfx.screenwidth,gamecontrol_Draw.fadeamount * (haxegon_Gfx.screenheight / 20) / 10 | 0,haxegon_Col.BLACK);
		haxegon_Gfx.fillbox(0,haxegon_Gfx.screenheight - gamecontrol_Draw.fadeamount * (haxegon_Gfx.screenheight / 20) / 10 | 0,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheightmid,haxegon_Col.BLACK);
	} else if(gamecontrol_Draw.fademode == 5) {
		haxegon_Gfx.fillbox(0,0,gamecontrol_Draw.fadeamount * (haxegon_Gfx.screenwidth / 20) / 10 | 0,haxegon_Gfx.screenheight,haxegon_Col.BLACK);
		haxegon_Gfx.fillbox(haxegon_Gfx.screenwidth - gamecontrol_Draw.fadeamount * (haxegon_Gfx.screenwidth / 20) / 10 | 0,0,haxegon_Gfx.screenwidthmid,haxegon_Gfx.screenheight,haxegon_Col.BLACK);
		haxegon_Gfx.fillbox(0,0,haxegon_Gfx.screenwidth,gamecontrol_Draw.fadeamount * (haxegon_Gfx.screenheight / 20) / 10 | 0,haxegon_Col.BLACK);
		haxegon_Gfx.fillbox(0,haxegon_Gfx.screenheight - gamecontrol_Draw.fadeamount * (haxegon_Gfx.screenheight / 20) / 10 | 0,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheightmid,haxegon_Col.BLACK);
	}
};
gamecontrol_Draw.textboxcol = function(type,shade) {
	switch(type) {
	case 0:
		switch(shade) {
		case 0:
			return haxegon_Col.rgb(0,0,0);
		case 1:
			return haxegon_Col.rgb(64,64,64);
		case 2:
			return haxegon_Col.rgb(192,192,192);
		}
		break;
	case 1:
		switch(shade) {
		case 0:
			return haxegon_Col.rgb(0,0,0);
		case 1:
			return haxegon_Col.rgb(65,3,19);
		case 2:
			return haxegon_Col.rgb(255,31,41);
		}
		break;
	case 2:
		switch(shade) {
		case 0:
			return haxegon_Col.rgb(0,0,0);
		case 1:
			return haxegon_Col.rgb(3,65,5);
		case 2:
			return haxegon_Col.rgb(31,255,84);
		}
		break;
	case 3:
		switch(shade) {
		case 0:
			return haxegon_Col.rgb(0,0,0);
		case 1:
			return haxegon_Col.rgb(3,37,65);
		case 2:
			return haxegon_Col.rgb(31,105,255);
		}
		break;
	}
	return haxegon_Col.rgb(0,0,0);
};
gamecontrol_Draw.drawtextbox = function(xp,yp,w,h,col,lerp,state) {
	if(state == terrylib_Textbox.STATE_BOXAPPEARING || state == terrylib_Textbox.STATE_DISAPPEARING) {
		gamecontrol_Draw.tempx = (w - 8) / 2 * lerp | 0;
		gamecontrol_Draw.tempy = (h - 8) / 2 * lerp | 0;
		haxegon_Gfx.fillbox(xp + 4 + (w - 8) / 2 - gamecontrol_Draw.tempx | 0,yp + 4 + (h - 8) / 2 - gamecontrol_Draw.tempy | 0,gamecontrol_Draw.tempx * 2,gamecontrol_Draw.tempy * 2,gamecontrol_Draw.shade(gamecontrol_Draw.textboxcol(col,terrylib_Textbox.TEXTBACKING),lerp * 2));
	} else {
		var tmp = state >= terrylib_Textbox.STATE_TEXTAPPEARING && state <= terrylib_Textbox.STATE_VISABLE;
	}
};
gamecontrol_Draw.drawparticles = function() {
};
gamecontrol_Draw.draw_horizontal = function(x1,y1,x2,y2) {
	haxegon_Gfx.fillbox(gamecontrol_Draw.walldrawx + x1,gamecontrol_Draw.walldrawy + y1,x2,y2,gamecontrol_Game.backgroundcolour);
	haxegon_Gfx.fillbox(gamecontrol_Draw.walldrawx + x1,gamecontrol_Draw.walldrawy + y1 + 2,x2,2,5472465);
};
gamecontrol_Draw.draw_vertical = function(x1,y1,x2,y2) {
	haxegon_Gfx.fillbox(gamecontrol_Draw.walldrawx + x1,gamecontrol_Draw.walldrawy + y1,x2,y2,gamecontrol_Game.backgroundcolour);
	haxegon_Gfx.fillbox(gamecontrol_Draw.walldrawx + x1 + 2,gamecontrol_Draw.walldrawy + y1,2,y2,5472465);
};
gamecontrol_Draw.drawwall = function(x,y,drawx,drawy) {
	var check = false;
	gamecontrol_Draw.walldrawx = drawx;
	gamecontrol_Draw.walldrawy = drawy;
	check = terrylib_World.collide(x,y + 1);
	if(!check) {
		gamecontrol_Draw.draw_horizontal(2,6,8,6);
	}
	check = terrylib_World.collide(x,y - 1);
	if(!check) {
		gamecontrol_Draw.draw_horizontal(0,0,12,6);
	}
	check = terrylib_World.collide(x + 1,y);
	if(!check) {
		gamecontrol_Draw.draw_vertical(6,0,6,12);
	}
	check = terrylib_World.collide(x - 1,y);
	if(!check) {
		gamecontrol_Draw.draw_vertical(0,0,6,12);
	}
};
gamecontrol_Draw.drawmap = function(tileset) {
	if(terrylib_World.disablecamera) {
		terrylib_World.camerax = 0;
		terrylib_World.cameray = 0;
	} else {
		if(terrylib_World.noxcam) {
			terrylib_World.camerax = 0;
		}
		if(terrylib_World.noycam) {
			terrylib_World.cameray = 0;
		}
	}
	gamecontrol_Draw.cameraxoff = 0;
	gamecontrol_Draw.camerayoff = 0;
	gamecontrol_Draw.playerindex = terrylib_Obj.getplayer();
	if(gamecontrol_Draw.playerindex > -1) {
		terrylib_World.camerax = terrylib_Obj.entities[gamecontrol_Draw.playerindex].xp - 16;
		if(terrylib_World.camerax < 0) {
			terrylib_World.camerax = 0;
		}
		if(terrylib_World.camerax + 32 > terrylib_World.mapwidth) {
			terrylib_World.camerax = terrylib_World.mapwidth - 32;
		}
		if(terrylib_World.camerax != 0) {
			gamecontrol_Draw.cameraxoff = -terrylib_Obj.entities[gamecontrol_Draw.playerindex].animx;
		}
		if(terrylib_World.camerax >= -1 && terrylib_World.camerax + 31 < terrylib_World.mapwidth) {
			gamecontrol_Draw.cameraxoff = -terrylib_Obj.entities[gamecontrol_Draw.playerindex].animx;
		}
		if(terrylib_Obj.entities[gamecontrol_Draw.playerindex].xp - 15 <= 0 && gamecontrol_Draw.cameraxoff < 0) {
			gamecontrol_Draw.cameraxoff = 0;
		}
		if(terrylib_Obj.entities[gamecontrol_Draw.playerindex].xp - 16 <= 0 && gamecontrol_Draw.cameraxoff > 0) {
			gamecontrol_Draw.cameraxoff = 0;
		}
		if(terrylib_Obj.entities[gamecontrol_Draw.playerindex].xp + 15 >= terrylib_World.mapwidth && gamecontrol_Draw.cameraxoff > 0) {
			gamecontrol_Draw.cameraxoff = 0;
		}
		if(terrylib_Obj.entities[gamecontrol_Draw.playerindex].xp + 16 >= terrylib_World.mapwidth && gamecontrol_Draw.cameraxoff < 0) {
			gamecontrol_Draw.cameraxoff = 0;
		}
		terrylib_World.cameray = terrylib_Obj.entities[gamecontrol_Draw.playerindex].yp - 10;
		if(terrylib_World.cameray < 0) {
			terrylib_World.cameray = 0;
		}
		if(terrylib_World.cameray + 19 >= terrylib_World.mapheight) {
			terrylib_World.cameray = terrylib_World.mapheight - 19;
		}
		if(terrylib_World.cameray >= -1 && terrylib_World.cameray + 18 < terrylib_World.mapheight) {
			gamecontrol_Draw.camerayoff = -terrylib_Obj.entities[gamecontrol_Draw.playerindex].animy;
		}
		if(terrylib_Obj.entities[gamecontrol_Draw.playerindex].yp - 9 <= 0 && gamecontrol_Draw.camerayoff < 0) {
			gamecontrol_Draw.camerayoff = 0;
		}
		if(terrylib_Obj.entities[gamecontrol_Draw.playerindex].yp - 10 <= 0 && gamecontrol_Draw.camerayoff > 0) {
			gamecontrol_Draw.camerayoff = 0;
		}
		if(terrylib_Obj.entities[gamecontrol_Draw.playerindex].yp + 8 >= terrylib_World.mapheight && gamecontrol_Draw.camerayoff > 0) {
			gamecontrol_Draw.camerayoff = 0;
		}
		if(terrylib_Obj.entities[gamecontrol_Draw.playerindex].yp + 9 >= terrylib_World.mapheight && gamecontrol_Draw.camerayoff < 0) {
			gamecontrol_Draw.camerayoff = 0;
		}
	}
	var _g1 = terrylib_World.cameray - (gamecontrol_Draw.camerayoff > 0?1:0);
	var _g = gamecontrol_Draw.screentileheight + 1 + terrylib_World.cameray;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = terrylib_World.camerax - (gamecontrol_Draw.cameraxoff > 0?1:0);
		var _g2 = gamecontrol_Draw.screentilewidth + 1 + terrylib_World.camerax;
		while(_g3 < _g2) {
			var i = _g3++;
			gamecontrol_Draw.currentblock = terrylib_World.at(i,j);
			gamecontrol_Draw.backcolour = gamecontrol_Localworld.backcolourmap(i,j,gamecontrol_Draw.currentblock);
			gamecontrol_Draw.frontcolour = gamecontrol_Localworld.colourmap(i,j,gamecontrol_Draw.currentblock);
			gamecontrol_Draw.frontcolour_wallshade = gamecontrol_Localworld.colourmap_shade(i,j,gamecontrol_Draw.currentblock);
			if(gamecontrol_Draw.currentblock == gamecontrol_Localworld.WALL) {
				if(gamecontrol_Localworld.fogat(i,j) == 1) {
					gamecontrol_Draw.currentblock_south = terrylib_World.at(i,j + 1);
					if(gamecontrol_Draw.currentblock_south != gamecontrol_Localworld.WALL && gamecontrol_Draw.currentblock_south != gamecontrol_Localworld.BACKGROUND) {
						if(gamecontrol_Localworld.backgroundcolour_needschanging || gamecontrol_Localworld.foregroundcolour_needschanging > 0) {
							if(gamecontrol_Localworld.backgroundcolour_needschanging && gamecontrol_Localworld.foregroundcolour_needschanging > 1) {
								gamecontrol_Draw.filltile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Draw.backcolour);
							}
							if(gamecontrol_Localworld.foregroundcolour_needschanging > 1) {
								haxegon_Gfx.imagecolor(gamecontrol_Draw.frontcolour);
								haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,tileset,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock));
								haxegon_Gfx.imagecolor();
								gamecontrol_Draw.filltile_half(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12 + 4,gamecontrol_Draw.backcolour);
								haxegon_Gfx.imagecolor(gamecontrol_Draw.frontcolour_wallshade);
								haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,tileset,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock) + 1);
								haxegon_Gfx.imagecolor();
							} else if(gamecontrol_Localworld.foregroundcolour_needschanging == 1) {
								gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock) + 1 + 16);
							} else if(gamecontrol_Localworld.foregroundcolour_needschanging == 0) {
								gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock) + 1);
							}
						} else {
							gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock) + 1);
						}
					} else {
						if(gamecontrol_Localworld.backgroundcolour_needschanging && gamecontrol_Localworld.foregroundcolour_needschanging > 1) {
							gamecontrol_Draw.filltile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Draw.backcolour);
						}
						if(gamecontrol_Localworld.foregroundcolour_needschanging > 1) {
							haxegon_Gfx.imagecolor(gamecontrol_Draw.frontcolour);
							haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,tileset,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock));
							haxegon_Gfx.imagecolor();
						} else if(gamecontrol_Localworld.foregroundcolour_needschanging == 1) {
							gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock) + 16);
						} else {
							gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock));
						}
					}
				}
			} else if(gamecontrol_Draw.currentblock != gamecontrol_Localworld.BACKGROUND) {
				if(gamecontrol_Localworld.fogat(i,j) == 1) {
					if(gamecontrol_Localworld.backgroundcolour_needschanging || gamecontrol_Localworld.foregroundcolour_needschanging > 1) {
						gamecontrol_Draw.filltile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Draw.backcolour);
					}
					if(gamecontrol_Draw.currentblock == gamecontrol_Localworld.FLOOR) {
						if(gamecontrol_Localworld.foregroundcolour_needschanging > 1) {
							haxegon_Gfx.imagecolor(gamecontrol_Draw.frontcolour);
							haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,tileset,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock));
							haxegon_Gfx.imagecolor();
						} else if(gamecontrol_Localworld.foregroundcolour_needschanging == 1) {
							gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock) + 16);
						} else {
							gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock));
						}
					} else if(gamecontrol_Draw.currentblock == gamecontrol_Localworld.ROOFSTARS) {
						gamecontrol_Draw.twinkle = (openfl_Lib.getTimer() + (j + i) * 100) % 1000;
						if(gamecontrol_Draw.twinkle >= 800) {
							gamecontrol_Draw.twinkle = gamecontrol_Draw.twinkle - 800;
							if(gamecontrol_Draw.twinkle >= 100) {
								gamecontrol_Draw.twinkle = 2;
							} else {
								gamecontrol_Draw.twinkle = 1;
							}
						} else {
							gamecontrol_Draw.twinkle = 0;
						}
						gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock) + gamecontrol_Draw.twinkle);
					} else {
						haxegon_Gfx.imagecolor(gamecontrol_Draw.frontcolour);
						haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,tileset,gamecontrol_Localworld.charmap(i,j,gamecontrol_Draw.currentblock));
						haxegon_Gfx.imagecolor();
					}
				} else if(gamecontrol_Draw.currentblock == gamecontrol_Localworld.KEY) {
					gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + i * 12 - terrylib_World.camerax * 12,gamecontrol_Draw.camerayoff + j * 12 - terrylib_World.cameray * 12,HxOverrides.cca("?",0));
				}
			}
		}
	}
};
gamecontrol_Draw.precoloured_drawtile = function(xp,yp,tilenum) {
	haxegon_Gfx.drawtile(xp,yp,"colorterminal",tilenum);
};
gamecontrol_Draw.filltile = function(xp,yp,col) {
	haxegon_Gfx.imagecolor(col);
	haxegon_Gfx.drawtile(xp,yp,"terminal",17);
	haxegon_Gfx.imagecolor();
};
gamecontrol_Draw.filltile_half = function(xp,yp,col) {
	haxegon_Gfx.imagecolor(col);
	haxegon_Gfx.drawtile(xp,yp,"terminal",18);
	haxegon_Gfx.imagecolor();
};
gamecontrol_Draw.drawmapfade = function(px,py,tileset,fadelevel) {
	if(terrylib_World.disablecamera) {
		terrylib_World.camerax = 0;
		terrylib_World.cameray = 0;
	} else {
		if(terrylib_World.noxcam) {
			terrylib_World.camerax = 0;
		}
		if(terrylib_World.noycam) {
			terrylib_World.cameray = 0;
		}
	}
	if(terrylib_Obj.getplayer() > -1) {
		terrylib_World.camerax = terrylib_Obj.entities[terrylib_Obj.getplayer()].xp - 16;
		if(terrylib_World.camerax < 0) {
			terrylib_World.camerax = 0;
		}
		if(terrylib_World.camerax + 32 > terrylib_World.mapwidth) {
			terrylib_World.camerax = terrylib_World.mapwidth - 32;
		}
		terrylib_World.cameray = terrylib_Obj.entities[terrylib_Obj.getplayer()].yp - 10;
		if(terrylib_World.cameray < 0) {
			terrylib_World.cameray = 0;
		}
		if(terrylib_World.cameray + 19 > terrylib_World.mapheight) {
			terrylib_World.cameray = terrylib_World.mapheight - 19;
		}
	}
	var _g1 = terrylib_World.cameray;
	var _g = gamecontrol_Draw.screentileheight + 1 + terrylib_World.cameray;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = terrylib_World.camerax;
		var _g2 = gamecontrol_Draw.screentilewidth + 1 + terrylib_World.camerax;
		while(_g3 < _g2) {
			var i = _g3++;
			if(Math.abs(px - i) / 2 >= fadelevel || Math.abs(py - j) >= fadelevel) {
				gamecontrol_Draw.filltile(i * 12 - terrylib_World.camerax * 12,j * 12 - terrylib_World.cameray * 12,0);
			}
		}
	}
};
gamecontrol_Draw.drawfade_withoutmap = function(px,py,tileset,fadelevel) {
	var _g1 = 0;
	var _g = gamecontrol_Draw.screentileheight + 1;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = gamecontrol_Draw.screentilewidth + 1;
		while(_g3 < _g2) {
			var i = _g3++;
			if(Math.abs(px - i) / 2 >= fadelevel || Math.abs(py - j) >= fadelevel) {
				gamecontrol_Draw.filltile(i * 12 - terrylib_World.camerax * 12,j * 12 - terrylib_World.cameray * 12,0);
			}
		}
	}
};
gamecontrol_Draw.roundfillrect = function(x,y,w,h,r,g,b) {
	if(b == null) {
		b = -1;
	}
	if(g == null) {
		g = -1;
	}
	if(g != -1 || b != -1) {
		r = haxegon_Col.rgb(r,g,b);
	}
	haxegon_Gfx.fillbox(x + 1,y,w - 2,h,r);
	haxegon_Gfx.fillbox(x,y + 1,w,h - 2,r);
};
gamecontrol_Draw.grayscale = function() {
	haxegon_Gfx.fillbox(0,0,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight,haxegon_Col.WHITE,0.25 - terrylib_Help.glow / 1024);
};
gamecontrol_Draw.alarmtransform = function(amount) {
	var v = 0;
	if(amount >= 250) {
		v = 0.1 * (500 - amount) / 250;
	} else {
		v = 0.1 * amount / 250;
	}
	haxegon_Gfx.fillbox(0,0,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight,haxegon_Col.WHITE,v);
};
gamecontrol_Draw.terminalprint = function(x,y,t,col,drawbacking,xoffset,yoffset,backingcol,bordercol) {
	if(bordercol == null) {
		bordercol = 0;
	}
	if(backingcol == null) {
		backingcol = 4473924;
	}
	if(yoffset == null) {
		yoffset = 0;
	}
	if(xoffset == null) {
		xoffset = 0;
	}
	if(drawbacking == null) {
		drawbacking = false;
	}
	if(col == null) {
		col = 16777215;
	}
	y *= 12;
	if(x == haxegon_Gfx.CENTER) {
		x = haxegon_Gfx.screenwidthmid - (haxegon_Text.width(t) / 2 | 0);
	} else {
		x *= 12;
	}
	if(drawbacking) {
		gamecontrol_Draw.roundfillrect(x - 4 + xoffset,y - 4 + yoffset + 4,haxegon_Text.width(t) + 8,haxegon_Text.height() + 8 - 1,0,0,0);
		gamecontrol_Draw.roundfillrect(x - 2 + xoffset,y - 2 + yoffset + 4,haxegon_Text.width(t) + 4,haxegon_Text.height() + 4 - 1,bordercol);
		gamecontrol_Draw.roundfillrect(x + xoffset,y + yoffset + 4,haxegon_Text.width(t),haxegon_Text.height() - 1,backingcol);
	}
	haxegon_Text.display(x + xoffset - 1,y + yoffset + 3 - 1,t,col);
};
gamecontrol_Draw.letterterminalprint = function(x,y,t,col,drawbacking,xoffset,yoffset,backingcol,bordercol) {
	if(bordercol == null) {
		bordercol = 0;
	}
	if(backingcol == null) {
		backingcol = 4473924;
	}
	if(yoffset == null) {
		yoffset = 0;
	}
	if(xoffset == null) {
		xoffset = 0;
	}
	if(drawbacking == null) {
		drawbacking = false;
	}
	if(col == null) {
		col = 16777215;
	}
	y *= 12;
	if(x == haxegon_Gfx.CENTER) {
		x = haxegon_Gfx.screenwidthmid - (haxegon_Text.width(t) / 2 | 0);
	}
	if(drawbacking) {
		gamecontrol_Draw.roundfillrect(x - 4 + xoffset,y - 4 + yoffset + 4,haxegon_Text.width(t) + 8,haxegon_Text.height() + 8 - 1,0,0,0);
		gamecontrol_Draw.roundfillrect(x - 2 + xoffset,y - 2 + yoffset + 4,haxegon_Text.width(t) + 4,haxegon_Text.height() + 4 - 1,bordercol);
		gamecontrol_Draw.roundfillrect(x + xoffset,y + yoffset + 4,haxegon_Text.width(t),haxegon_Text.height() - 1,backingcol);
	}
	haxegon_Text.display(x + xoffset,y + yoffset + 3,t,col);
};
gamecontrol_Draw.rterminalprint = function(x,y,t,col,drawbacking,backingcol) {
	if(backingcol == null) {
		backingcol = 4473924;
	}
	if(drawbacking == null) {
		drawbacking = false;
	}
	if(col == null) {
		col = 16777215;
	}
	y *= 12;
	x = x * 12 - haxegon_Text.width(t) | 0;
	if(drawbacking) {
		haxegon_Gfx.fillbox(x + 2,y + 4,haxegon_Text.width(t),haxegon_Text.height(),haxegon_Col.BLACK);
		haxegon_Gfx.fillbox(x,y + 2,haxegon_Text.width(t),haxegon_Text.height(),backingcol);
	}
	haxegon_Text.display(x,y + 3,t,col);
};
gamecontrol_Draw.drawbackground = function() {
	haxegon_Gfx.fillbox(0,0,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight,gamecontrol_Game.backgroundcolour);
};
gamecontrol_Draw.messagecol = function(t) {
	switch(t) {
	case "cash":
		return haxegon_Col.rgb(255 - (terrylib_Help.glow / 2 | 0),255 - (terrylib_Help.glow / 2 | 0),64);
	case "flashing":
		if(terrylib_Help.slowsine % 32 >= 16) {
			return haxegon_Col.rgb(255 - terrylib_Help.glow,164,164);
		} else {
			return haxegon_Col.rgb(255 - terrylib_Help.glow,255,164);
		}
		break;
	case "good":
		if(terrylib_Help.slowsine % 32 >= 16) {
			return haxegon_Col.rgb(164,255,164);
		} else {
			return haxegon_Col.rgb(64,255,64);
		}
		break;
	case "grayedout":
		return haxegon_Col.rgb(128,128,128);
	case "key":
		return haxegon_Col.rgb(64,255 - (terrylib_Help.glow / 2 | 0),64);
	case "kludge":
		if(terrylib_Help.slowsine % 32 >= 16) {
			return haxegon_Col.rgb(255,255,255);
		} else {
			return haxegon_Col.rgb(224,224,224);
		}
		break;
	case "player":
		if(terrylib_Help.slowsine % 32 >= 16) {
			return 14811134;
		} else {
			return 16777215;
		}
		break;
	case "red":
		return haxegon_Col.rgb(255 - terrylib_Help.glow,terrylib_Help.glow,terrylib_Help.glow);
	case "shout":
		if(terrylib_Help.slowsine % 32 >= 16) {
			return haxegon_Col.rgb(255,255,255);
		} else {
			return haxegon_Col.rgb(196,196,196);
		}
		break;
	case "whisper":
		if(terrylib_Help.slowsine % 32 >= 16) {
			return haxegon_Col.rgb(164,164,164);
		} else {
			return haxegon_Col.rgb(128,128,128);
		}
		break;
	case "white":
		return haxegon_Col.rgb(255,255,255);
	}
	return haxegon_Col.rgb(255,255,255);
};
gamecontrol_Draw.messagecolback = function(t) {
	switch(t) {
	case "good":
		return haxegon_Col.rgb(32,128,32);
	case "player":
		return 6913158;
	case "red":
		return haxegon_Col.rgb(64,0,0);
	case "white":
		return haxegon_Col.rgb(32,32,32);
	}
	return haxegon_Col.rgb(0,0,0);
};
gamecontrol_Draw.messagecolborder = function(t) {
	switch(t) {
	case "good":
		return haxegon_Col.rgb(64,255,64);
	case "player":
		return 11396858;
	case "red":
		return haxegon_Col.rgb(64,0,0);
	case "white":
		return haxegon_Col.rgb(32,32,32);
	}
	return haxegon_Col.rgb(96,96,96);
};
gamecontrol_Draw.drawmenu = function() {
	if(gamecontrol_Menu.menusize < 8) {
		gamecontrol_Menu.menuoffset = 0;
	} else {
		if(gamecontrol_Menu.currentmenu - gamecontrol_Menu.menuoffset < 1) {
			gamecontrol_Menu.menuoffset = gamecontrol_Menu.currentmenu - 1;
		}
		if(gamecontrol_Menu.currentmenu - gamecontrol_Menu.menuoffset > 6) {
			gamecontrol_Menu.menuoffset = gamecontrol_Menu.currentmenu - 6;
		}
		if(gamecontrol_Menu.menuoffset < 0) {
			gamecontrol_Menu.menuoffset = 0;
		}
	}
	var _g1 = 0;
	var _g = gamecontrol_Menu.menusize;
	while(_g1 < _g) {
		var j = _g1++;
		var i = j + gamecontrol_Menu.menuoffset;
		if(i < gamecontrol_Menu.menusize) {
			if(gamecontrol_Menu.menuoptions[i] == "back") {
				if(gamecontrol_Menu.currentmenu == i) {
					haxegon_Gfx.fillbox(0,132 + j * 12 + 4,haxegon_Gfx.screenwidth,12,haxegon_Col.rgb(64,64,64));
					gamecontrol_Draw.rterminalprint(22,11 + j,"[ " + gamecontrol_Menu.menuoptions[i] + " ]",haxegon_Col.rgb(196,196,255),false);
				} else {
					gamecontrol_Draw.rterminalprint(22,11 + j,gamecontrol_Menu.menuoptions[i] + "  ",haxegon_Col.rgb(164,164,164));
				}
			} else if(gamecontrol_Menu.menucol[i] == 0) {
				if(gamecontrol_Menu.currentmenu == i) {
					haxegon_Gfx.fillbox(0,120 + j * 12 + 4,haxegon_Gfx.screenwidth,12,haxegon_Col.rgb(64,64,64));
					gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10 + j,"[ " + gamecontrol_Menu.menuoptions[i] + " ]",haxegon_Col.rgb(164,164,164),false);
				} else {
					gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10 + j,gamecontrol_Menu.menuoptions[i],haxegon_Col.rgb(164,164,164));
				}
			} else if(gamecontrol_Menu.menucol[i] == 1) {
				if(gamecontrol_Menu.currentmenu == i) {
					haxegon_Gfx.fillbox(0,120 + j * 12 + 4,haxegon_Gfx.screenwidth,12,haxegon_Col.rgb(64,64,64));
					gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10 + j,"[ " + gamecontrol_Menu.menuoptions[i] + " ]",haxegon_Col.rgb(164,164,255),false);
				} else {
					gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10 + j,gamecontrol_Menu.menuoptions[i],haxegon_Col.rgb(164,164,255));
				}
			} else if(gamecontrol_Menu.menucol[i] == 2) {
				if(gamecontrol_Menu.currentmenu == i) {
					haxegon_Gfx.fillbox(0,120 + j * 12 + 4,haxegon_Gfx.screenwidth,12,haxegon_Col.rgb(64,64,64));
					gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10 + j,"[ " + gamecontrol_Menu.menuoptions[i] + " ]",haxegon_Col.rgb(164,255,164),false);
				} else {
					gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10 + j,gamecontrol_Menu.menuoptions[i],haxegon_Col.rgb(164,255,164));
				}
			}
		}
	}
};
gamecontrol_Draw.draw_default = function(i) {
	gamecontrol_Draw.filltile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,gamecontrol_Game.backgroundcolour);
	if(terrylib_Obj.entities[i].shakecount > 0) {
		haxegon_Gfx.imagecolor(terrylib_Obj.entities[i].col);
		haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12 + (terrylib_Obj.entities[i].shakex() | 0),gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12 + (terrylib_Obj.entities[i].shakey() | 0),terrylib_Obj.entities[i].tileset,terrylib_Obj.entities[i].drawframe);
		haxegon_Gfx.imagecolor();
	} else {
		haxegon_Gfx.imagecolor(terrylib_Obj.entities[i].col);
		haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,terrylib_Obj.entities[i].tileset,terrylib_Obj.entities[i].drawframe);
		haxegon_Gfx.imagecolor();
	}
};
gamecontrol_Draw.draw_default_player = function(i) {
	gamecontrol_Draw.filltile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,gamecontrol_Localworld.backcolourmap(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp,terrylib_World.at(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp)));
	if(terrylib_Obj.entities[i].shakecount > 0) {
		haxegon_Gfx.imagecolor(terrylib_Obj.entities[i].col);
		haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12 + (terrylib_Obj.entities[i].shakex() | 0),gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12 + (terrylib_Obj.entities[i].shakey() | 0),terrylib_Obj.entities[i].tileset,terrylib_Obj.entities[i].drawframe);
		haxegon_Gfx.imagecolor();
	} else {
		haxegon_Gfx.imagecolor(terrylib_Obj.entities[i].col);
		haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,terrylib_Obj.entities[i].tileset,terrylib_Obj.entities[i].drawframe);
		haxegon_Gfx.imagecolor();
	}
};
gamecontrol_Draw.draw_default_items = function(i) {
	gamecontrol_Draw.backcolour = gamecontrol_Localworld.backcolourmap(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp,terrylib_World.at(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp));
	if(gamecontrol_Localworld.backgroundcolour_needschanging) {
		gamecontrol_Draw.filltile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,gamecontrol_Draw.backcolour);
	}
	if(terrylib_Obj.entities[i].shakecount > 0) {
		haxegon_Gfx.imagecolor(terrylib_Obj.entities[i].col);
		haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12 + (terrylib_Obj.entities[i].shakex() | 0),gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12 + (terrylib_Obj.entities[i].shakey() | 0),terrylib_Obj.entities[i].tileset,terrylib_Obj.entities[i].drawframe);
		haxegon_Gfx.imagecolor();
	} else {
		haxegon_Gfx.imagecolor(terrylib_Obj.entities[i].col);
		haxegon_Gfx.drawtile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,terrylib_Obj.entities[i].tileset,terrylib_Obj.entities[i].drawframe);
		haxegon_Gfx.imagecolor();
	}
};
gamecontrol_Draw.drawentitymessages = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(!terrylib_Obj.entities[i].invis) {
				if(terrylib_Obj.entities[i].messagedelay > 0) {
					gamecontrol_Draw.drawentitymessage(i);
				}
			}
		}
	}
};
gamecontrol_Draw.drawentitymessage = function(i) {
	var x = terrylib_Obj.entities[i].xp - terrylib_World.camerax;
	var y = terrylib_Obj.entities[i].yp - terrylib_World.cameray - 1;
	var playerx;
	var playery;
	if(terrylib_Obj.getplayer() == -1) {
		playerx = 0;
		playery = 0;
	} else {
		playerx = terrylib_Obj.entities[terrylib_Obj.getplayer()].xp - terrylib_World.camerax;
		playery = terrylib_Obj.entities[terrylib_Obj.getplayer()].yp - terrylib_World.cameray;
	}
	x -= haxegon_Text.width(terrylib_Obj.entities[i].message) / 12 / 2 | 0;
	if(x < 0) {
		x = 0;
	}
	if(x * 12 + haxegon_Text.width(terrylib_Obj.entities[i].message) >= haxegon_Gfx.screenwidth) {
		x = (haxegon_Gfx.screenwidth - haxegon_Text.width(terrylib_Obj.entities[i].message)) / 12 | 0;
	}
	if(y == -1) {
		y = 1;
	}
	if(y == playery) {
		if(playerx >= x && playerx < x + terrylib_Obj.entities[i].message.length) {
			y += 2;
			if(y >= 18) {
				y = 18;
			}
		}
	}
	gamecontrol_Draw.terminalprint(x,y,terrylib_Obj.entities[i].message,gamecontrol_Draw.messagecol(terrylib_Obj.entities[i].messagecol),true,terrylib_Obj.entities[i].animx + gamecontrol_Draw.cameraxoff,terrylib_Obj.entities[i].animy - 10 + gamecontrol_Draw.camerayoff,gamecontrol_Draw.messagecolback(terrylib_Obj.entities[i].messagecol),gamecontrol_Draw.messagecolborder(terrylib_Obj.entities[i].messagecol));
};
gamecontrol_Draw.draw_unknown = function(i) {
	gamecontrol_Draw.filltile(gamecontrol_Draw.cameraxoff + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,gamecontrol_Game.backgroundcolour);
	gamecontrol_Draw.precoloured_drawtile(gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,HxOverrides.cca("?",0));
};
gamecontrol_Draw.draw_unknown_dangerous = function(i) {
	gamecontrol_Draw.filltile(gamecontrol_Draw.cameraxoff + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,gamecontrol_Draw.camerayoff + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,gamecontrol_Game.backgroundcolour);
	haxegon_Gfx.imagecolor(16729156);
	var tmp = gamecontrol_Draw.cameraxoff + terrylib_Obj.entities[i].animx + (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12;
	var tmp1 = gamecontrol_Draw.camerayoff + terrylib_Obj.entities[i].animy + (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12;
	var tmp2 = HxOverrides.cca("?",0);
	haxegon_Gfx.drawtile(tmp,tmp1,terrylib_Obj.entities[i].tileset,tmp2);
	haxegon_Gfx.imagecolor();
};
gamecontrol_Draw.draw_defaultinit = function(i,xoff,yoff,t) {
};
gamecontrol_Draw.drawentities = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(!terrylib_Obj.entities[i].invis) {
				if(terrylib_Obj.entities[i].collidable) {
					var _this = terrylib_Obj.entindex;
					var key = terrylib_Obj.entities[i].rule;
					terrylib_Obj.templates[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]].drawentity(i);
				} else {
					var doubledrawcheck = false;
					var _g3 = 0;
					while(_g3 < i) {
						var j = _g3++;
						if(terrylib_Obj.entities[i].xp == terrylib_Obj.entities[j].xp) {
							if(terrylib_Obj.entities[i].yp == terrylib_Obj.entities[j].yp) {
								doubledrawcheck = true;
							}
						}
					}
					if(!doubledrawcheck) {
						if(terrylib_Obj.entities[i].active) {
							if(!terrylib_Obj.entities[i].invis) {
								var _this1 = terrylib_Obj.entindex;
								var key1 = terrylib_Obj.entities[i].rule;
								terrylib_Obj.templates[__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]].drawentity(i);
							}
						}
					}
				}
			}
		}
	}
};
gamecontrol_Draw.addcolours = function(one,two) {
	var r = (one >> 16 & 255) + (two >> 16 & 255);
	var g = (one >> 8 & 255) + (two >> 8 & 255);
	var b = (one & 255) + (two & 255);
	if(r > 255) {
		r = 255;
	}
	if(g > 255) {
		g = 255;
	}
	if(b > 255) {
		b = 255;
	}
	return haxegon_Col.rgb(r,g,b);
};
gamecontrol_Draw.shade = function(currentcol,a) {
	if(a > 1.0) {
		a = 1.0;
	}
	if(a < 0.0) {
		a = 0.0;
	}
	return haxegon_Col.rgb((currentcol >> 16 & 255) * a | 0,(currentcol >> 8 & 255) * a | 0,(currentcol & 255) * a | 0);
};
gamecontrol_Draw.drawgui = function() {
	terrylib_Textbox.textboxcleanup();
	var _g1 = 0;
	var _g = terrylib_Textbox.ntextbox;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Textbox.tb[i].active) {
			gamecontrol_Draw.drawtextbox(terrylib_Textbox.tb[i].xp | 0,terrylib_Textbox.tb[i].yp | 0,terrylib_Textbox.tb[i].width | 0,terrylib_Textbox.tb[i].height | 0,terrylib_Textbox.tb[i].col,terrylib_Textbox.tb[i].lerp,terrylib_Textbox.tb[i].textboxstate);
			if(terrylib_Textbox.tb[i].textboxstate >= terrylib_Textbox.STATE_TEXTAPPEARING && terrylib_Textbox.tb[i].textboxstate < terrylib_Textbox.STATE_DISAPPEARING) {
				if(terrylib_Textbox.tb[i].showname) {
					var _g3 = 0;
					var _g2 = terrylib_Textbox.tb[i].numlines;
					while(_g3 < _g2) {
						var j = _g3++;
						if(j == 0) {
							haxegon_Text.display(terrylib_Textbox.tb[i].xp + 14,terrylib_Textbox.tb[i].yp + 6,terrylib_Textbox.tb[i].line[j],haxegon_Col.rgb(255,255,0));
						} else {
							terrylib_Textbox.tbprint(j,terrylib_Textbox.tb[i].tbline,terrylib_Textbox.tb[i].tbcursor,terrylib_Textbox.tb[i].xp + 22,terrylib_Textbox.tb[i].yp + 6,terrylib_Textbox.tb[i].line[j],haxegon_Col.rgb(255,255,255));
						}
					}
				} else {
					var _g31 = 0;
					var _g21 = terrylib_Textbox.tb[i].numlines;
					while(_g31 < _g21) {
						var j1 = _g31++;
						terrylib_Textbox.tbprint(j1,terrylib_Textbox.tb[i].tbline,terrylib_Textbox.tb[i].tbcursor,terrylib_Textbox.tb[i].xp + 14,terrylib_Textbox.tb[i].yp + 6,terrylib_Textbox.tb[i].line[j1],255,255,255);
					}
				}
			}
		}
	}
};
var gamecontrol_Game = function() { };
$hxClasses["gamecontrol.Game"] = gamecontrol_Game;
gamecontrol_Game.__name__ = ["gamecontrol","Game"];
gamecontrol_Game.init = function() {
	gamecontrol_Game.numpossiblemoves = 0;
	var _g = 0;
	while(_g < 50) {
		++_g;
		gamecontrol_Game.possiblemove.push("nothing");
		gamecontrol_Game.possiblemovescore.push(0);
		gamecontrol_Game.towergadgets.push("");
		gamecontrol_Game.towergadgets_rare.push("");
		gamecontrol_Game.toweritems.push("");
		gamecontrol_Game.toweritems_rare.push("");
		gamecontrol_Game.preshuffle.push(0);
	}
	var _g1 = 0;
	while(_g1 < 30) {
		++_g1;
		gamecontrol_Game.floorgadgets.push(new config_Numlist());
		gamecontrol_Game.flooritems.push(new config_Numlist());
		gamecontrol_Game.floortreasure.push(0);
	}
	gamecontrol_Game.numtowergadgets = 0;
	gamecontrol_Game.numtowergadgets_rare = 0;
	gamecontrol_Game.numtoweritems = 0;
	gamecontrol_Game.numtoweritems_rare = 0;
	gamecontrol_Game.reinforcements = [];
	gamecontrol_Game.reinforcementspeed = [];
	gamecontrol_Game.reinforcestate = 0;
	gamecontrol_Game.createplacement("stairs");
	gamecontrol_Game.createplacement("collectable");
	gamecontrol_Game.createplacement("treasure");
	gamecontrol_Inventory.setequippedweapon("none",false);
	gamecontrol_Menu.init();
	gamecontrol_Inventory.init();
};
gamecontrol_Game.startending = function() {
	haxegon_Music.playsong("helicopter");
	Logic.endingstate = "start";
	Logic.endingstatepara = 0;
	Logic.endingstatedelay = 0;
	modernversion_Modern.endlevelanimationstate = -1;
	var _g1 = 0;
	var _g = modernversion_Modern.inventoryslots;
	while(_g1 < _g) if(modernversion_Modern.inventory[_g1++] == "helix wing") {
		gamecontrol_Game.cash += 10;
	}
	gamecontrol_Game.changestate(6);
};
gamecontrol_Game.leavetower = function() {
	haxegon_Music.playsound("fall");
	Logic.endingstate = "start";
	Logic.endingstatepara = 0;
	Logic.endingstatedelay = 0;
	modernversion_Modern.endlevelanimationstate = -1;
	gamecontrol_Game.changestate(7);
};
gamecontrol_Game.createplacement = function(t) {
	gamecontrol_Game.placement.push(new gamecontrol_misc_Placementclass(t));
	var value = gamecontrol_Game.placement.length - 1;
	var _this = gamecontrol_Game.placementindex;
	if(__map_reserved[t] != null) {
		_this.setReserved(t,value);
	} else {
		_this.h[t] = value;
	}
};
gamecontrol_Game.addplacement = function(type,thing,x,y,odds) {
	var _this = gamecontrol_Game.placementindex;
	gamecontrol_Game.placement[__map_reserved[type] != null?_this.getReserved(type):_this.h[type]].add(x,y,thing,odds);
};
gamecontrol_Game.changeplacement = function(type) {
	var _this = gamecontrol_Game.placementindex;
	gamecontrol_Game.currentplacement = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
};
gamecontrol_Game.place = function(rule,type,inorder) {
	if(inorder == null) {
		inorder = false;
	}
	if(type == null) {
		type = "";
	}
	if(type.toLowerCase() != "nothing") {
		if(inorder) {
			if(gamecontrol_Game.placement[gamecontrol_Game.currentplacement].length > 0) {
				gamecontrol_Game.placement[gamecontrol_Game.currentplacement].selection = 0;
				gamecontrol_Game.temp = 0;
			}
		} else {
			gamecontrol_Game.placement[gamecontrol_Game.currentplacement].pick();
			gamecontrol_Game.temp = gamecontrol_Game.placement[gamecontrol_Game.currentplacement].selection;
		}
		if(gamecontrol_Game.temp > -1) {
			gamecontrol_Game.tx = gamecontrol_Game.placement[gamecontrol_Game.currentplacement].x(gamecontrol_Game.temp);
			gamecontrol_Game.ty = gamecontrol_Game.placement[gamecontrol_Game.currentplacement].y(gamecontrol_Game.temp);
			if(rule == "entrance") {
				if(gamecontrol_Game.temp == 0) {
					modernversion_AIDirector.entrance = "A";
				} else if(gamecontrol_Game.temp == 1) {
					modernversion_AIDirector.entrance = "B";
				}
			}
			gamecontrol_Game.placement[gamecontrol_Game.currentplacement].remove();
		} else {
			gamecontrol_Game.tx = -1;
			while(gamecontrol_Game.tx == -1 || terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty) != gamecontrol_Localworld.FLOOR) {
				gamecontrol_Game.tx = Math.floor((terrylib_World.mapwidth + 1) * terrylib_Rand.prandom());
				gamecontrol_Game.ty = Math.floor((terrylib_World.mapheight + 1) * terrylib_Rand.prandom());
			}
		}
		switch(rule) {
		case "entrance":
			terrylib_World.placetile(gamecontrol_Game.tx,gamecontrol_Game.ty,gamecontrol_Localworld.ENTRANCE);
			break;
		case "exit":case "stairs":
			terrylib_World.placetile(gamecontrol_Game.tx,gamecontrol_Game.ty,gamecontrol_Localworld.STAIRS);
			break;
		case "key":
			terrylib_World.placetile(gamecontrol_Game.tx,gamecontrol_Game.ty,gamecontrol_Localworld.KEY);
			break;
		default:
			terrylib_Obj.createentity(gamecontrol_Game.tx,gamecontrol_Game.ty,rule,type);
		}
	}
};
gamecontrol_Game.teststart = function() {
	gamecontrol_Game.clearroom();
	gamecontrol_Openworld.inside = true;
	gamecontrol_Game.floor = 1;
	gamecontrol_Game.changeroom("outside");
	gamecontrol_Game.useteststart = true;
};
gamecontrol_Game.restartgame = function() {
	terrylib_Obj.nentity = 0;
	gamecontrol_Game.keys = 0;
	gamecontrol_Game.health = 3;
	gamecontrol_Game.cash = 0;
	gamecontrol_Game.floor = 0;
	gamecontrol_Game.icecube = 0;
	gamecontrol_Game.cloaked = 0;
	gamecontrol_Game.timestop = 0;
	gamecontrol_Game.playerdir = terrylib_Help.RIGHT;
	gamecontrol_Inventory.numitems = 0;
	gamecontrol_Inventory.setequippedgadget("none",false);
};
gamecontrol_Game.clearroom = function() {
	terrylib_World.mapchanged = true;
	terrylib_Obj.nentity = 0;
	gamecontrol_Game.messagedelay = 0;
	gamecontrol_Game.alarm = false;
	gamecontrol_Game.reinforcestate = 0;
};
gamecontrol_Game.changeroom = function(t) {
	switch(t) {
	case "inside":
		terrylib_Rand.setseed(gamecontrol_Openworld.getroomseed(gamecontrol_Openworld.worldx,gamecontrol_Openworld.worldy) + gamecontrol_Game.floor);
		gamecontrol_Openworld.inside = true;
		gamecontrol_Game.clearroom();
		if(gamecontrol_Game.floor == gamecontrol_Game.towerheight) {
			gamecontrol_Game.showmessage("BASEMENT","flashing",120);
		} else {
			gamecontrol_Game.showmessage("FLOOR " + Std.string(gamecontrol_Game.floor) + " OF " + Std.string(gamecontrol_Game.towerheight),"white",120);
		}
		if(gamecontrol_Game.floor == 1) {
			gamecontrol_Game.currentblueprint = gamecontrol_Game.firstfloor;
		} else if(gamecontrol_Game.floor == gamecontrol_Game.towerheight) {
			gamecontrol_Game.currentblueprint = gamecontrol_Game.lastfloor;
		} else {
			gamecontrol_Game.currentblueprint = gamecontrol_Game.blueprint[gamecontrol_Game.floor - 1];
		}
		gamecontrol_Generator.generate("indoors");
		gamecontrol_Game.changeplacement("stairs");
		gamecontrol_Game.place("entrance");
		gamecontrol_Game.placeatentrance("player");
		gamecontrol_Game.changeplacement("collectable");
		var _g1 = 0;
		var _g = gamecontrol_Game.floorgadgets[gamecontrol_Game.floor - 1].length;
		while(_g1 < _g) gamecontrol_Game.place("item",gamecontrol_Game.floorgadgets[gamecontrol_Game.floor - 1].list[_g1++]);
		var _g11 = 0;
		var _g2 = gamecontrol_Game.flooritems[gamecontrol_Game.floor - 1].length;
		while(_g11 < _g2) gamecontrol_Game.place("item",gamecontrol_Game.flooritems[gamecontrol_Game.floor - 1].list[_g11++]);
		gamecontrol_Game.placetreasure();
		if(gamecontrol_Game.floor != gamecontrol_Game.towerheight) {
			gamecontrol_Game.enemylevel = gamecontrol_Game.towerstartlevel + (gamecontrol_Game.floor / (gamecontrol_Game.towerheight / (gamecontrol_Game.towerendlevel - gamecontrol_Game.towerstartlevel + 1) + 1) | 0);
			gamecontrol_Game.getenemywave(gamecontrol_Game.enemylevel,gamecontrol_Game.towertype);
			gamecontrol_Game.createwave(gamecontrol_Game.floorenemies.list[Math.floor((gamecontrol_Game.floorenemies.length - 1 + 1) * terrylib_Rand.prandom())]);
		}
		if(gamecontrol_Game.floor != gamecontrol_Game.towerheight) {
			gamecontrol_Game.changeplacement("stairs");
			gamecontrol_Game.place("exit");
		}
		gamecontrol_Localworld.setroomfog(modernversion_AIDirector.roomlit?1:0);
		gamecontrol_Localworld.updatelighting();
		break;
	case "outside":
		gamecontrol_Game.updateoutsideplayerposition();
		gamecontrol_Openworld.inside = false;
		terrylib_Rand.setseed(gamecontrol_Openworld.getroomseed(gamecontrol_Openworld.worldx,gamecontrol_Openworld.worldy));
		gamecontrol_Generator.generate(gamecontrol_Openworld.roomat(gamecontrol_Openworld.worldx,gamecontrol_Openworld.worldy));
		gamecontrol_Localworld.setroomfog(1);
		switch(gamecontrol_Openworld.roomat(gamecontrol_Openworld.worldx,gamecontrol_Openworld.worldy)) {
		case "outside_camp":
			terrylib_Obj.createentity(24,7,"npc","terry");
			terrylib_Obj.createentity(11,6,"npc","pawnshop");
			break;
		case "outside_river":
			var numfiremen = 3 + Math.floor(3 * terrylib_Rand.prandom());
			var _g12 = 0;
			while(_g12 < numfiremen) {
				++_g12;
				gamecontrol_Generator.getrandompoint_awayfromedge();
				terrylib_Obj.createentity(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,"enemy","fireman");
			}
			break;
		}
		gamecontrol_Localworld.updatelighting();
		gamecontrol_Game.turn = "playermove";
		break;
	}
	gamecontrol_Localworld.updatelighting();
	gamecontrol_Game.turn = "playermove";
};
gamecontrol_Game.createwave = function(t) {
	switch(t) {
	case "1rook":
		gamecontrol_Game.placeatrandom("enemy","rook");
		break;
	case "1rookcameras":
		gamecontrol_Game.placeatrandom("enemy","rook");
		var _g = 0;
		while(_g < 2) {
			++_g;
			gamecontrol_Game.placeatrandom("enemy","lasercamera");
		}
		break;
	case "2guards":
		var _g1 = 0;
		while(_g1 < 2) {
			++_g1;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		break;
	case "2guards1camera":
		var _g2 = 0;
		while(_g2 < 2) {
			++_g2;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		var _g3 = 0;
		while(_g3 < 1) {
			++_g3;
			gamecontrol_Game.placeatrandom("enemy","camera");
		}
		break;
	case "2guardscameras":
		var _g4 = 0;
		while(_g4 < 2) {
			++_g4;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		var _g5 = 0;
		while(_g5 < 2) {
			++_g5;
			gamecontrol_Game.placeatrandom("enemy","camera");
		}
		break;
	case "2rooks":
		var _g6 = 0;
		while(_g6 < 2) {
			++_g6;
			gamecontrol_Game.placeatrandom("enemy","rook");
		}
		break;
	case "2rookscameras":
		var _g7 = 0;
		while(_g7 < 2) {
			++_g7;
			gamecontrol_Game.placeatrandom("enemy","rook");
		}
		var _g8 = 0;
		while(_g8 < 3) {
			++_g8;
			gamecontrol_Game.placeatrandom("enemy","lasercamera");
		}
		break;
	case "3guards":
		var _g9 = 0;
		while(_g9 < 3) {
			++_g9;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		break;
	case "3guardscameras":
		var _g10 = 0;
		while(_g10 < 3) {
			++_g10;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		var _g11 = 0;
		while(_g11 < 3) {
			++_g11;
			gamecontrol_Game.placeatrandom("enemy","camera");
		}
		break;
	case "3guardsdogs":
		var _g12 = 0;
		while(_g12 < 3) {
			++_g12;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		var _g13 = 0;
		while(_g13 < 2) {
			++_g13;
			gamecontrol_Game.placeatrandom("enemy","dog");
		}
		break;
	case "3rooks":
		var _g14 = 0;
		while(_g14 < 3) {
			++_g14;
			gamecontrol_Game.placeatrandom("enemy","rook");
		}
		break;
	case "3rookscameras":
		var _g15 = 0;
		while(_g15 < 3) {
			++_g15;
			gamecontrol_Game.placeatrandom("enemy","rook");
		}
		var _g16 = 0;
		while(_g16 < 3) {
			++_g16;
			gamecontrol_Game.placeatrandom("enemy","lasercamera");
		}
		break;
	case "4guards":
		var _g17 = 0;
		while(_g17 < 4) {
			++_g17;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		break;
	case "4guardscameras":
		var _g18 = 0;
		while(_g18 < 4) {
			++_g18;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		var _g19 = 0;
		while(_g19 < 3) {
			++_g19;
			gamecontrol_Game.placeatrandom("enemy","camera");
		}
		break;
	case "4guardsdogs":
		var _g20 = 0;
		while(_g20 < 4) {
			++_g20;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		var _g21 = 0;
		while(_g21 < 2) {
			++_g21;
			gamecontrol_Game.placeatrandom("enemy","dog");
		}
		break;
	case "5guards":
		var _g22 = 0;
		while(_g22 < 5) {
			++_g22;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		break;
	case "6guards":
		var _g23 = 0;
		while(_g23 < 6) {
			++_g23;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		break;
	case "7guards":
		var _g24 = 0;
		while(_g24 < 7) {
			++_g24;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		break;
	case "8guards":
		var _g25 = 0;
		while(_g25 < 8) {
			++_g25;
			gamecontrol_Game.placeatrandom("enemy","guard");
		}
		break;
	}
};
gamecontrol_Game.addwave = function(t) {
	gamecontrol_Game.floorenemies.add(t);
};
gamecontrol_Game.getenemywave = function(lvl,leveltype) {
	if(leveltype == null) {
		leveltype = "normal";
	}
	if(lvl < 1) {
		lvl = 1;
	}
	if(lvl > 5) {
		lvl = 5;
	}
	gamecontrol_Game.floorenemies.clear();
	switch(leveltype) {
	case "intro":
		switch(lvl) {
		case 1:
			gamecontrol_Game.addwave("2guards");
			gamecontrol_Game.addwave("2guards1camera");
			break;
		case 2:
			gamecontrol_Game.addwave("2guards");
			gamecontrol_Game.addwave("3guards");
			gamecontrol_Game.addwave("2guardscameras");
			break;
		case 3:
			gamecontrol_Game.addwave("3guards");
			gamecontrol_Game.addwave("4guards");
			gamecontrol_Game.addwave("2guardscameras");
			break;
		case 4:
			gamecontrol_Game.addwave("4guards");
			gamecontrol_Game.addwave("5guards");
			gamecontrol_Game.addwave("3guardscameras");
			gamecontrol_Game.addwave("3guardsdogs");
			break;
		case 5:
			gamecontrol_Game.addwave("3guardscameras");
			gamecontrol_Game.addwave("4guardscameras");
			gamecontrol_Game.addwave("4guardsdogs");
			gamecontrol_Game.addwave("5guards");
			gamecontrol_Game.addwave("6guards");
			gamecontrol_Game.addwave("7guards");
			break;
		}
		break;
	case "robot":
		switch(lvl) {
		case 1:
			gamecontrol_Game.addwave("1rook");
			gamecontrol_Game.addwave("2rooks");
			break;
		case 2:
			gamecontrol_Game.addwave("1rookcameras");
			gamecontrol_Game.addwave("2rooks");
			break;
		case 3:
			gamecontrol_Game.addwave("1rookcameras");
			gamecontrol_Game.addwave("2rooks");
			gamecontrol_Game.addwave("2rookscameras");
			break;
		case 4:
			gamecontrol_Game.addwave("2rooks");
			gamecontrol_Game.addwave("2rookscameras");
			gamecontrol_Game.addwave("3rooks");
			break;
		case 5:
			gamecontrol_Game.addwave("2rookscameras");
			gamecontrol_Game.addwave("3rooks");
			gamecontrol_Game.addwave("3rookscameras");
			break;
		default:
			gamecontrol_Game.addwave("3rooks");
		}
		break;
	default:
		switch(lvl) {
		case 1:
			gamecontrol_Game.addwave("2guards");
			gamecontrol_Game.addwave("3guards");
			gamecontrol_Game.addwave("4guards");
			gamecontrol_Game.addwave("5guards");
			break;
		case 2:
			gamecontrol_Game.addwave("3guards");
			gamecontrol_Game.addwave("4guards");
			gamecontrol_Game.addwave("5guards");
			break;
		case 3:
			gamecontrol_Game.addwave("4guards");
			gamecontrol_Game.addwave("5guards");
			break;
		case 4:
			gamecontrol_Game.addwave("4guards");
			gamecontrol_Game.addwave("5guards");
			gamecontrol_Game.addwave("6guards");
			break;
		case 5:
			gamecontrol_Game.addwave("5guards");
			gamecontrol_Game.addwave("6guards");
			gamecontrol_Game.addwave("7guards");
			break;
		}
	}
};
gamecontrol_Game.placetreasure = function() {
	gamecontrol_Game.temp = 0;
	var _g1 = 0;
	var _g = gamecontrol_Generator.treasuredrops;
	while(_g1 < _g) gamecontrol_Game.preshuffle[_g1++] = 0;
	while(gamecontrol_Game.floortreasure[gamecontrol_Game.floor - 1] > 0) {
		gamecontrol_Game.tx = Math.floor(4 * terrylib_Rand.prandom()) * 25;
		if(gamecontrol_Game.floortreasure[gamecontrol_Game.floor - 1] > gamecontrol_Game.tx) {
			gamecontrol_Game.preshuffle[gamecontrol_Game.temp] += gamecontrol_Game.tx;
			gamecontrol_Game.floortreasure[gamecontrol_Game.floor - 1] -= gamecontrol_Game.tx;
		} else {
			gamecontrol_Game.preshuffle[gamecontrol_Game.temp] += gamecontrol_Game.floortreasure[gamecontrol_Game.floor - 1];
			gamecontrol_Game.floortreasure[gamecontrol_Game.floor - 1] = 0;
		}
		gamecontrol_Game.temp = (gamecontrol_Game.temp + 1) % gamecontrol_Generator.treasuredrops;
	}
	gamecontrol_Game.changeplacement("collectable");
	var _g11 = 0;
	var _g2 = gamecontrol_Generator.treasuredrops;
	while(_g11 < _g2) {
		var i = _g11++;
		if(gamecontrol_Game.preshuffle[i] > 0) {
			gamecontrol_Game.place("treasure",Std.string(gamecontrol_Game.preshuffle[i]));
		}
	}
};
gamecontrol_Game.updateoutsideplayerposition = function() {
	gamecontrol_Game.temp = terrylib_Obj.getplayer();
	if(gamecontrol_Game.temp == -1) {
		terrylib_Obj.createentity(24,9,"player");
		gamecontrol_Game.temp = terrylib_Obj.getplayer();
		gamecontrol_Game.tx = terrylib_Obj.entities[gamecontrol_Game.temp].xp;
		gamecontrol_Game.ty = terrylib_Obj.entities[gamecontrol_Game.temp].yp;
		gamecontrol_Game.playerdir = terrylib_Obj.entities[gamecontrol_Game.temp].dir;
	} else {
		gamecontrol_Game.tx = terrylib_Obj.entities[gamecontrol_Game.temp].xp;
		gamecontrol_Game.ty = terrylib_Obj.entities[gamecontrol_Game.temp].yp;
		gamecontrol_Game.playerdir = terrylib_Obj.entities[gamecontrol_Game.temp].dir;
		terrylib_Obj.nentity = 0;
		terrylib_Obj.createentity(gamecontrol_Game.tx,gamecontrol_Game.ty,"player");
	}
};
gamecontrol_Game.entranceclear = function() {
	return true;
};
gamecontrol_Game.numberofenemies = function() {
	var temp = 0;
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].rule == "enemy") {
				++temp;
			}
		}
	}
	return temp;
};
gamecontrol_Game.createentrance = function(rule,type) {
	if(type == null) {
		type = "";
	}
	if(rule == null) {
		rule = "player";
	}
	gamecontrol_Game.tx = -1;
	while(gamecontrol_Game.tx == -1 || terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty) != gamecontrol_Localworld.FLOOR) {
		gamecontrol_Game.tx = Math.floor((terrylib_World.mapwidth + 1) * terrylib_Rand.prandom());
		gamecontrol_Game.ty = Math.floor((terrylib_World.mapheight + 1) * terrylib_Rand.prandom());
	}
	terrylib_World.placetile(gamecontrol_Game.tx,gamecontrol_Game.ty,gamecontrol_Localworld.ENTRANCE);
};
gamecontrol_Game.placeatentrance = function(rule,type) {
	if(type == null) {
		type = "";
	}
	gamecontrol_Game.tx = -1;
	gamecontrol_Game.ty = -1;
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.ENTRANCE) {
				gamecontrol_Game.tx = i;
				gamecontrol_Game.ty = j;
			}
		}
	}
	if(gamecontrol_Game.tx != -1) {
		gamecontrol_Game.attempts = 5;
		while(gamecontrol_Game.attempts >= 0 && terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(gamecontrol_Game.playerdir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(gamecontrol_Game.playerdir))) {
			gamecontrol_Game.playerdir = terrylib_Help.clockwise(gamecontrol_Game.playerdir);
			gamecontrol_Game.attempts--;
		}
		terrylib_Obj.createentity(gamecontrol_Game.tx,gamecontrol_Game.ty,rule,type);
	}
};
gamecontrol_Game.placeatrandom_outside = function(rule,type) {
	if(type == null) {
		type = "";
	}
	gamecontrol_Game.tx = -1;
	while(gamecontrol_Game.tx == -1 || terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty) != gamecontrol_Localworld.OUTSIDE_GROUND) {
		gamecontrol_Game.tx = Math.floor((terrylib_World.mapwidth + 1) * terrylib_Rand.prandom());
		gamecontrol_Game.ty = Math.floor((terrylib_World.mapheight + 1) * terrylib_Rand.prandom());
	}
	terrylib_Obj.createentity(gamecontrol_Game.tx,gamecontrol_Game.ty,rule,type);
};
gamecontrol_Game.pplaceatrandom_outside = function(rule,type) {
	if(type == null) {
		type = "";
	}
	gamecontrol_Game.tx = -1;
	while(gamecontrol_Game.tx == -1 || terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty) != gamecontrol_Localworld.OUTSIDE_GROUND) {
		gamecontrol_Game.tx = Math.floor((terrylib_World.mapwidth + 1) * terrylib_Rand.prandom());
		gamecontrol_Game.ty = Math.floor((terrylib_World.mapheight + 1) * terrylib_Rand.prandom());
	}
	terrylib_Obj.createentity(gamecontrol_Game.tx,gamecontrol_Game.ty,rule,type);
};
gamecontrol_Game.placeatrandom = function(rule,type) {
	if(type == null) {
		type = "";
	}
	gamecontrol_Game.tx = Math.floor((terrylib_Astar.oln - 1 + 1) * terrylib_Rand.prandom());
	gamecontrol_Game.tx1 = terrylib_Astar.fcost[gamecontrol_Game.tx];
	gamecontrol_Game.ty1 = terrylib_Astar.gcost[gamecontrol_Game.tx];
	terrylib_Obj.createentity(gamecontrol_Game.tx1,gamecontrol_Game.ty1,rule,type);
};
gamecontrol_Game.item_placeatrandom = function(item) {
	gamecontrol_Game.tx = -1;
	while(gamecontrol_Game.tx == -1 || terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty) != gamecontrol_Localworld.FLOOR) {
		gamecontrol_Game.tx = Math.floor((terrylib_World.mapwidth + 1) * terrylib_Rand.prandom());
		gamecontrol_Game.ty = Math.floor((terrylib_World.mapheight + 1) * terrylib_Rand.prandom());
	}
	terrylib_World.placetile(gamecontrol_Game.tx,gamecontrol_Game.ty,item);
};
gamecontrol_Game.item_placeatrandom_awayfromplayer = function(item) {
	gamecontrol_Game.tx1 = terrylib_Obj.entities[terrylib_Obj.getplayer()].xp | 0;
	gamecontrol_Game.ty1 = terrylib_Obj.entities[terrylib_Obj.getplayer()].yp | 0;
	gamecontrol_Game.tx = -1;
	gamecontrol_Game.attempts = 100;
	while(gamecontrol_Game.attempts > 0 && (gamecontrol_Game.tx == -1 || terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty) != gamecontrol_Localworld.FLOOR || Math.abs(gamecontrol_Game.tx1 - gamecontrol_Game.tx) < 6 || Math.abs(gamecontrol_Game.ty1 - gamecontrol_Game.ty) < 6)) {
		gamecontrol_Game.tx = Math.floor((terrylib_World.mapwidth + 1) * terrylib_Rand.prandom());
		gamecontrol_Game.ty = Math.floor((terrylib_World.mapheight + 1) * terrylib_Rand.prandom());
		gamecontrol_Game.attempts--;
	}
	if(gamecontrol_Game.attempts > 0) {
		terrylib_World.placetile(gamecontrol_Game.tx,gamecontrol_Game.ty,item);
	}
};
gamecontrol_Game.fadelogic = function() {
	if(gamecontrol_Draw.fademode == 0 && terrylib_Obj.activedoor != "null") {
		gamecontrol_Draw.fademode = 2;
		gamecontrol_Draw.fadeaction = "changeroom";
		terrylib_Obj.activedoordest = terrylib_Obj.activedoor;
	}
	if(gamecontrol_Draw.fademode == 1 && !gamecontrol_Script.running) {
		if(gamecontrol_Draw.fadeaction == "changeroom") {
			terrylib_World.change(terrylib_Obj.activedoordest);
			gamecontrol_Draw.fademode = 4;
			gamecontrol_Draw.fadeaction = "nothing";
		} else if(gamecontrol_Draw.fadeaction == "title") {
			gamecontrol_Game.changestate(0);
			gamecontrol_Draw.fademode = 4;
			gamecontrol_Draw.fadeaction = "nothing";
		} else {
			gamecontrol_Script.load(gamecontrol_Draw.fadeaction);
			gamecontrol_Draw.fademode = 4;
			gamecontrol_Draw.fadeaction = "nothing";
		}
	}
};
gamecontrol_Game.changestate = function(state) {
	gamecontrol_Game.gamestate = state;
};
gamecontrol_Game.sortpossiblemoves = function() {
	var tempint;
	var tempstring;
	var _g1 = 0;
	var _g = gamecontrol_Game.numpossiblemoves;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = j;
		var _g2 = gamecontrol_Game.numpossiblemoves;
		while(_g3 < _g2) {
			var i = _g3++;
			if(gamecontrol_Game.possiblemovescore[i] < gamecontrol_Game.possiblemovescore[j]) {
				tempint = gamecontrol_Game.possiblemovescore[i];
				gamecontrol_Game.possiblemovescore[i] = gamecontrol_Game.possiblemovescore[j];
				gamecontrol_Game.possiblemovescore[j] = tempint;
				tempstring = gamecontrol_Game.possiblemove[i];
				gamecontrol_Game.possiblemove[i] = gamecontrol_Game.possiblemove[j];
				gamecontrol_Game.possiblemove[j] = tempstring;
			}
		}
	}
};
gamecontrol_Game.removemovesbelownothing = function() {
	if(gamecontrol_Game.numpossiblemoves > 0) {
		if(gamecontrol_Game.possiblemove[gamecontrol_Game.numpossiblemoves - 1] != "nothing") {
			gamecontrol_Game.numpossiblemoves--;
			gamecontrol_Game.removemovesbelownothing();
		}
	}
};
gamecontrol_Game.movestring = function(t) {
	if(t == terrylib_Help.UP) {
		return "move_up";
	}
	if(t == terrylib_Help.DOWN) {
		return "move_down";
	}
	if(t == terrylib_Help.LEFT) {
		return "move_left";
	}
	if(t == terrylib_Help.RIGHT) {
		return "move_right";
	}
	return "nothing";
};
gamecontrol_Game.reversemovestring = function(t) {
	if(t == "move_up") {
		return terrylib_Help.UP;
	}
	if(t == "move_down") {
		return terrylib_Help.DOWN;
	}
	if(t == "move_left") {
		return terrylib_Help.LEFT;
	}
	if(t == "move_right") {
		return terrylib_Help.RIGHT;
	}
	return terrylib_Help.NODIRECTION;
};
gamecontrol_Game.resetplayermove = function(i,t) {
	terrylib_Obj.entities[i].resetactions();
	gamecontrol_Game.lastplayeraction = t;
	terrylib_Obj.entities[i].addaction(gamecontrol_Game.lastplayeraction);
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i1 = _g1++;
		terrylib_Obj.entities[i1].alerted_thisframe = false;
		terrylib_Obj.entities[i1].insights_thisframe = false;
	}
};
gamecontrol_Game.startmove = function(t) {
	if(t == "wait") {
		modernversion_Modern.waitflash = modernversion_Modern.flashtime;
	}
	gamecontrol_Game.resetplayermove(terrylib_Obj.getplayer(),t);
	gamecontrol_Game.interactwithdir(terrylib_Obj.getplayer(),t);
	gamecontrol_Game.turn = "figureoutmove";
	gamecontrol_Game.resetenemymoves();
};
gamecontrol_Game.blockedfrommoving = function(e) {
	gamecontrol_Game.tdir = terrylib_Obj.entities[e].dir;
	gamecontrol_Game.tx = terrylib_Obj.entities[e].xp + gamecontrol_Localworld.xstep(gamecontrol_Game.tdir) | 0;
	gamecontrol_Game.ty = terrylib_Obj.entities[e].yp + gamecontrol_Localworld.ystep(gamecontrol_Game.tdir) | 0;
	if(terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty) == gamecontrol_Localworld.WALL) {
		return true;
	} else if(terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty) == gamecontrol_Localworld.LOCKEDDOOR && gamecontrol_Game.keys <= 0) {
		if(!gamecontrol_Use.doorknockcheck) {
			e = terrylib_Obj.getplayer();
			if(e > -1) {
				terrylib_Obj.entities[e].setmessage("It's locked...","player");
				haxegon_Music.playsound("lockeddoor");
			}
			gamecontrol_Use.doorknockcheck = true;
		}
		return true;
	}
	return false;
};
gamecontrol_Game.interactwithdir = function(ent,movestring) {
	gamecontrol_Game.tdir = gamecontrol_Game.reversemovestring(movestring);
	gamecontrol_Game.tx = terrylib_Obj.entities[ent].xp + gamecontrol_Localworld.xstep(gamecontrol_Game.tdir) | 0;
	gamecontrol_Game.ty = terrylib_Obj.entities[ent].yp + gamecontrol_Localworld.ystep(gamecontrol_Game.tdir) | 0;
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].collidable) {
				if((terrylib_Obj.entities[i].xp | 0) == gamecontrol_Game.tx && (terrylib_Obj.entities[i].yp | 0) == gamecontrol_Game.ty) {
					gamecontrol_Use.interactwith(i,ent);
				}
			}
		}
	}
	gamecontrol_Use.interactwithblock(terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty),gamecontrol_Game.tx,gamecontrol_Game.ty,ent);
};
gamecontrol_Game.getinteractblock = function(t) {
	gamecontrol_Game.tdir = terrylib_Obj.entities[t].dir;
	gamecontrol_Game.tx = terrylib_Obj.entities[t].xp + gamecontrol_Localworld.xstep(gamecontrol_Game.tdir) | 0;
	gamecontrol_Game.ty = terrylib_Obj.entities[t].yp + gamecontrol_Localworld.ystep(gamecontrol_Game.tdir) | 0;
	return terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty);
};
gamecontrol_Game.killenemy = function(target) {
	haxegon_Music.playsound("destroy");
	var _this = terrylib_Obj.entindex;
	var key = terrylib_Obj.entities[target].rule;
	terrylib_Obj.templates[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]].kill(target);
};
gamecontrol_Game.stunenemy = function(target,time) {
	haxegon_Music.playsound("stun");
	var _this = terrylib_Obj.entindex;
	var key = terrylib_Obj.entities[target].rule;
	terrylib_Obj.templates[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]].stun(target,time);
};
gamecontrol_Game.allenemiesdead = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].rule == "enemy") {
				return false;
			}
		}
	}
	return true;
};
gamecontrol_Game.hurtplayer = function(fromdirection) {
	if(!modernversion_Modern.playeronstairs && !modernversion_Modern.playerjustteleported) {
		haxegon_Music.playsound("damaged");
		var player = terrylib_Obj.getplayer();
		if(player > -1) {
			if(fromdirection != terrylib_Help.NODIRECTION) {
				terrylib_Obj.entities[player].startshake(gamecontrol_Localworld.xstep(terrylib_Obj.entities[player].dir),gamecontrol_Localworld.ystep(terrylib_Obj.entities[player].dir));
			}
			gamecontrol_Game.health--;
			terrylib_Obj.entities[player].health--;
			gamecontrol_Draw.screenshake = 10;
			gamecontrol_Draw.flashlight = 5;
			modernversion_Modern.hpflash = modernversion_Modern.flashtime;
		}
	}
};
gamecontrol_Game.checkifplayerdead = function() {
	if(terrylib_Obj.getplayer() > -1) {
		if(terrylib_Obj.entities[terrylib_Obj.getplayer()].health <= 0) {
			gamecontrol_Game.showmessage("GAME OVER - PRESS R TO RESTART","red",-1);
		}
	}
};
gamecontrol_Game.doenemyattack = function() {
	gamecontrol_Game.tx = terrylib_Obj.entities[terrylib_Obj.getplayer()].xp | 0;
	gamecontrol_Game.ty = terrylib_Obj.entities[terrylib_Obj.getplayer()].yp | 0;
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].rule == "enemy") {
				if(terrylib_Obj.entities[i].state == 1) {
					if(terrylib_Obj.entities[i].canattack) {
						if(gamecontrol_Game.adjacent(gamecontrol_Game.tx,gamecontrol_Game.ty,terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0)) {
							gamecontrol_Game.hurtplayer(terrylib_Obj.entities[i].dir);
						}
					}
				}
			}
		}
	}
	gamecontrol_Game.checkifplayerdead();
};
gamecontrol_Game.clearchain = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) terrylib_Obj.entities[_g1++].inchain = false;
};
gamecontrol_Game.resetenemymove = function(i) {
	if(terrylib_Obj.entities[i].rule == "enemy") {
		terrylib_Obj.entities[i].action = "nothing";
		terrylib_Obj.entities[i].actionset = false;
		terrylib_Obj.entities[i].userevertdir = false;
		gamecontrol_Game.doenemyai(i);
	}
};
gamecontrol_Game.resetenemymoves = function() {
	gamecontrol_Game.speedframe = gamecontrol_Game.speedframe + 1;
	if(gamecontrol_Game.speedframe == 12) {
		gamecontrol_Game.speedframe = 0;
	}
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			gamecontrol_Game.resetenemymove(i);
		}
	}
};
gamecontrol_Game.updatestatuseffects = function() {
	if(gamecontrol_Game.icecube > 0) {
		gamecontrol_Game.icecube--;
		if(gamecontrol_Game.icecube == 8) {
			if(terrylib_Obj.getplayer() > -1) {
				terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("ICECUBE WEARING OFF...","player");
			}
		} else if(gamecontrol_Game.icecube == 0) {
			terrylib_Obj.entities[terrylib_Obj.getplayer()].messagedelay = 0;
		}
	}
	if(gamecontrol_Game.timestop > 0) {
		gamecontrol_Game.timestop--;
		if(gamecontrol_Game.timestop == 8) {
			if(terrylib_Obj.getplayer() > -1) {
				terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("TIME STOP WEARING OFF...","player");
			}
		} else if(gamecontrol_Game.timestop == 0) {
			terrylib_Obj.entities[terrylib_Obj.getplayer()].messagedelay = 0;
		}
	}
	if(gamecontrol_Game.cloaked > 0) {
		gamecontrol_Game.cloaked--;
		if(gamecontrol_Game.cloaked == 8) {
			if(terrylib_Obj.getplayer() > -1) {
				terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("BOX FALLING APART...","player");
			}
		} else if(gamecontrol_Game.cloaked == 0) {
			terrylib_Obj.entities[terrylib_Obj.getplayer()].messagedelay = 0;
		}
	}
};
gamecontrol_Game.updatereinforcements = function() {
	if(modernversion_AIDirector.reinforcements.length == 0) {
		return;
	}
	var player = terrylib_Obj.getplayer();
	if(gamecontrol_Openworld.inside) {
		gamecontrol_Game.reinforcestate++;
		if(gamecontrol_Game.alarm) {
			gamecontrol_Game.reinforcestate++;
		}
		if(player > -1) {
			if(terrylib_World.at(terrylib_Obj.entities[player].xp,terrylib_Obj.entities[player].yp) == gamecontrol_Localworld.ENTRANCE) {
				gamecontrol_Game.reinforcestate--;
				if(gamecontrol_Game.alarm) {
					gamecontrol_Game.reinforcestate--;
				}
			}
		}
		if(modernversion_AIDirector.reinforcementdelay > 0) {
			if(gamecontrol_Game.reinforcestate >= modernversion_AIDirector.reinforcementdelay || gamecontrol_Game.alarm) {
				modernversion_AIDirector.reinforcementdelay = 0;
				gamecontrol_Game.reinforcestate = 0;
				gamecontrol_Game.nextreinforcement();
			}
		} else if(gamecontrol_Game.reinforcestate >= gamecontrol_Game.reinforcementspeed[0]) {
			gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].charcode_lit = HxOverrides.cca("-",0);
			gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].charcode_fog = HxOverrides.cca("-",0);
			if(gamecontrol_Game.entranceclear()) {
				if(gamecontrol_Game.reinforcements[0] == "guard") {
					gamecontrol_Game.showmessage("PATROL BOT HAS ENTERED THE ROOM","white",120);
				} else if(gamecontrol_Game.reinforcements[0] == "laserguard") {
					gamecontrol_Game.showmessage("LASER PATROL BOT HAS ENTERED THE ROOM","white",120);
				} else if(gamecontrol_Game.reinforcements[0] == "robot") {
					gamecontrol_Game.showmessage("ELITE BOT HAS ENTERED THE ROOM","white",120);
				} else {
					gamecontrol_Game.showmessage(gamecontrol_Game.reinforcements[0].toUpperCase() + " HAS ENTERED THE ROOM","white",120);
				}
				gamecontrol_Game.placeatentrance("enemy",gamecontrol_Game.reinforcements[0]);
				gamecontrol_Game.nextreinforcement();
				gamecontrol_Game.reinforcestate = 0;
			}
		} else if(gamecontrol_Game.reinforcementspeed[0] - gamecontrol_Game.reinforcestate < 10) {
			gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].charcode_lit = HxOverrides.cca(Std.string(gamecontrol_Game.reinforcementspeed[0] - gamecontrol_Game.reinforcestate),0);
			gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].charcode_fog = HxOverrides.cca(Std.string(gamecontrol_Game.reinforcementspeed[0] - gamecontrol_Game.reinforcestate),0);
		} else {
			gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].charcode_lit = HxOverrides.cca("-",0);
			gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].charcode_fog = HxOverrides.cca("-",0);
		}
	}
};
gamecontrol_Game.findpathtopoint = function(t,xoff,yoff,x,y) {
	terrylib_Astar.setmapcollision();
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(i != t) {
				terrylib_Astar.setcollidepoint(gamecontrol_Game.getintendedx(i),gamecontrol_Game.getintendedy(i));
			}
		}
	}
	terrylib_Astar.pathfind(x,y,gamecontrol_Game.getcurrentx(t) + xoff,gamecontrol_Game.getcurrenty(t) + yoff);
};
gamecontrol_Game.findpathbetween = function(a,b) {
	openfl_Lib.getTimer();
	terrylib_Astar.setmapcollision();
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active && terrylib_Obj.entities[i].collidable) {
			if(i != a && i != b) {
				terrylib_Astar.setcollidepoint(gamecontrol_Game.getintendedx(i),gamecontrol_Game.getintendedy(i));
			}
		}
	}
	terrylib_Astar.pathfind(gamecontrol_Game.getcurrentx(b),gamecontrol_Game.getcurrenty(b),gamecontrol_Game.getcurrentx(a),gamecontrol_Game.getcurrenty(a));
};
gamecontrol_Game.adjacenttowall = function(i) {
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp - 1,terrylib_Obj.entities[i].yp)) {
		return true;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp + 1,terrylib_Obj.entities[i].yp)) {
		return true;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp - 1)) {
		return true;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp + 1)) {
		return true;
	}
	return false;
};
gamecontrol_Game.surroundedbywalls = function(i) {
	var numwalls = 0;
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp - 1,terrylib_Obj.entities[i].yp)) {
		numwalls = 1;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp + 1,terrylib_Obj.entities[i].yp)) {
		++numwalls;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp - 1)) {
		++numwalls;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp + 1)) {
		++numwalls;
	}
	if(numwalls == 3) {
		return true;
	}
	return false;
};
gamecontrol_Game.adjacenttocorner = function(i) {
	var numwalls = 0;
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp - 1,terrylib_Obj.entities[i].yp)) {
		numwalls = 1;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp + 1,terrylib_Obj.entities[i].yp)) {
		++numwalls;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp - 1)) {
		++numwalls;
	}
	if(terrylib_World.collide(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp + 1)) {
		++numwalls;
	}
	if(numwalls >= 2) {
		return true;
	}
	return false;
};
gamecontrol_Game.attachtowall = function(i) {
	if(!gamecontrol_Game.adjacenttowall(i)) {
		terrylib_Obj.entities[i].dir = terrylib_Help.randomdirection();
		while(!terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].xp += gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir);
			terrylib_Obj.entities[i].yp += gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir);
		}
		terrylib_Obj.entities[i].dir = terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir);
	}
};
gamecontrol_Game.faceawayfromwall = function(i) {
	if(gamecontrol_Game.surroundedbywalls(i)) {
		terrylib_Obj.entities[i].dir = terrylib_Help.randomdirection();
		if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
		}
		if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
		}
		if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
		}
		if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
		}
	} else {
		terrylib_Obj.entities[i].dir = terrylib_Help.randomdirection();
		if(!terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
		}
		if(!terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
		}
		if(!terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
		}
		if(!terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
			terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
		}
		terrylib_Obj.entities[i].dir = terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir);
	}
};
gamecontrol_Game.attachtocorner = function(i,attempts) {
	if(attempts == null) {
		attempts = 4;
	}
	if(!gamecontrol_Game.adjacenttocorner(i)) {
		gamecontrol_Game.attachtowall(i);
		if(!terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir)),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir))) && !terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)))) {
			if(terrylib_Rand.prandom() < 0.5) {
				terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
				while(!terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
					terrylib_Obj.entities[i].xp += gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir);
					terrylib_Obj.entities[i].yp += gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir);
				}
				terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
			} else {
				terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
				while(!terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
					terrylib_Obj.entities[i].xp += gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir);
					terrylib_Obj.entities[i].yp += gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir);
				}
				terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
			}
		}
	} else {
		attempts = 0;
	}
	if(attempts > 0) {
		gamecontrol_Game.attachtocorner(i,attempts - 1);
	}
};
gamecontrol_Game.adjacent = function(x1,y1,x2,y2) {
	if(x1 == x2 && y1 == y2) {
		return true;
	}
	if(x1 == x2 - 1 && y1 == y2) {
		return true;
	}
	if(x1 == x2 + 1 && y1 == y2) {
		return true;
	}
	if(x1 == x2 && y1 == y2 + 1) {
		return true;
	}
	if(x1 == x2 && y1 == y2 - 1) {
		return true;
	}
	return false;
};
gamecontrol_Game.turnspeed = function(t) {
	if(t == 0) {
		return true;
	}
	if(t == 1) {
		if(gamecontrol_Game.speedframe % 2 == 0) {
			return true;
		}
	}
	if(t == 2) {
		if(gamecontrol_Game.speedframe % 3 == 0) {
			return true;
		}
	}
	if(t == 3) {
		if(gamecontrol_Game.speedframe % 4 == 0) {
			return true;
		}
	}
	return false;
};
gamecontrol_Game.settempobjvariables = function(t) {
	gamecontrol_Game.tx = terrylib_Obj.entities[t].xp;
	gamecontrol_Game.ty = terrylib_Obj.entities[t].yp;
	gamecontrol_Game.tdir = terrylib_Obj.entities[t].dir;
};
gamecontrol_Game.doenemyai = function(i) {
	var player;
	var nextmove;
	player = terrylib_Obj.getplayer();
	terrylib_Obj.entities[i].resetactions();
	if(terrylib_Obj.entities[i].rule == "enemy") {
		if(gamecontrol_Game.turnspeed(terrylib_Obj.entities[i].speed)) {
			switch(terrylib_Obj.entities[i].ai) {
			case "anticlockwisefollowwall":
				gamecontrol_Game.settempobjvariables(i);
				terrylib_Obj.entities[i].userevertdir = true;
				terrylib_Obj.entities[i].revertdir = terrylib_Obj.entities[i].dir;
				terrylib_Obj.entities[i].dir = terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir);
				if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
					terrylib_Obj.entities[i].dir = terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir);
					terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
					if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
						terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
						terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
						terrylib_Obj.entities[i].addaction("wait");
						terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
					} else {
						terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
						terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
					}
				} else {
					terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
					terrylib_Obj.entities[i].addaction("wait");
					terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
				}
				terrylib_Obj.entities[i].addaction("reverse_ai");
				break;
			case "anticlockwiserandommarch":
				gamecontrol_Game.settempobjvariables(i);
				if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
					terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
					if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
						terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
						terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
						if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
							terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
						}
					}
				}
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir)));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir)));
				break;
			case "clockwisefollowwall":
				gamecontrol_Game.settempobjvariables(i);
				terrylib_Obj.entities[i].userevertdir = true;
				terrylib_Obj.entities[i].revertdir = terrylib_Obj.entities[i].dir;
				terrylib_Obj.entities[i].dir = terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir);
				if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
					terrylib_Obj.entities[i].dir = terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir);
					terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
					if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
						terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
						terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
						terrylib_Obj.entities[i].addaction("wait");
						terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
					} else {
						terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
						terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
					}
				} else {
					terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
					terrylib_Obj.entities[i].addaction("wait");
					terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
				}
				terrylib_Obj.entities[i].addaction("reverse_ai");
				break;
			case "clockwiserandommarch":
				gamecontrol_Game.settempobjvariables(i);
				if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
					terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
					if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
						terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
						terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
						if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
							terrylib_Obj.entities[i].dir = terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir);
						}
					}
				}
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir)));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir)));
				break;
			case "pathfind":
				if(gamecontrol_Game.adjacent(gamecontrol_Game.getdestinationx(player,terrylib_Obj.entities[player].possibleactions[0]),gamecontrol_Game.getdestinationy(player,terrylib_Obj.entities[player].possibleactions[0]),gamecontrol_Game.getcurrentx(i),gamecontrol_Game.getcurrenty(i))) {
					terrylib_Obj.entities[i].addaction("wait");
				} else {
					gamecontrol_Game.findpathbetween(i,player);
					nextmove = terrylib_Astar.getnextmove();
					if(nextmove != terrylib_Help.NODIRECTION) {
						terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(nextmove));
						gamecontrol_Game.tx = terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(nextmove);
						gamecontrol_Game.ty = terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(nextmove);
						gamecontrol_Use.interactwithblock(terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty),gamecontrol_Game.tx,gamecontrol_Game.ty,i);
					}
				}
				break;
			case "pathfind_rush":
				gamecontrol_Game.findpathbetween(i,player);
				nextmove = terrylib_Astar.getnextmove();
				if(nextmove != terrylib_Help.NODIRECTION) {
					terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(nextmove));
					gamecontrol_Game.tx = terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(nextmove);
					gamecontrol_Game.ty = terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(nextmove);
					gamecontrol_Use.interactwithblock(terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty),gamecontrol_Game.tx,gamecontrol_Game.ty,i);
					terrylib_Obj.entities[i].ai = "pathfind_rush2";
				}
				break;
			case "pathfind_rush2":
				nextmove = terrylib_Help.NODIRECTION;
				terrylib_Obj.entities[i].ai = "pathfind_rush3";
				break;
			case "pathfind_rush3":
				gamecontrol_Game.settempobjvariables(i);
				if(terrylib_World.collide(gamecontrol_Game.tx + gamecontrol_Localworld.xstep(gamecontrol_Game.tdir),gamecontrol_Game.ty + gamecontrol_Localworld.ystep(gamecontrol_Game.tdir))) {
					terrylib_Obj.entities[i].addaction("wait");
					terrylib_Obj.entities[i].ai = "pathfind_rush";
				} else {
					terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Obj.entities[i].dir));
					terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir)));
					terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir)));
					terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)));
					gamecontrol_Game.tx = terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir);
					gamecontrol_Game.ty = terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir);
					gamecontrol_Use.interactwithblock(terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty),gamecontrol_Game.tx,gamecontrol_Game.ty,i);
				}
				break;
			case "pathfind_totarget":
				gamecontrol_Game.findpathbetween(i,terrylib_Obj.entities[i].target);
				nextmove = terrylib_Astar.getnextmove();
				if(nextmove != terrylib_Help.NODIRECTION) {
					terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(nextmove));
					gamecontrol_Game.tx = terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(nextmove);
					gamecontrol_Game.ty = terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(nextmove);
					gamecontrol_Use.interactwithblock(terrylib_World.at(gamecontrol_Game.tx,gamecontrol_Game.ty),gamecontrol_Game.tx,gamecontrol_Game.ty,i);
				} else {
					terrylib_Obj.entities[i].state = 4;
					terrylib_Obj.entities[i].ai = "pathfind";
				}
				break;
			case "random":
				var randdir = terrylib_Help.randomdirection();
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(randdir));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.clockwise(randdir)));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.clockwise(randdir,2)));
				terrylib_Obj.entities[i].addaction(gamecontrol_Game.movestring(terrylib_Help.clockwise(randdir,3)));
				break;
			}
		} else {
			terrylib_Obj.entities[i].addaction("wait");
		}
	}
};
gamecontrol_Game.getintendedx = function(i) {
	if(terrylib_Obj.entities[i].actionset) {
		return gamecontrol_Game.getdestinationx(i);
	}
	return gamecontrol_Game.getcurrentx(i);
};
gamecontrol_Game.getintendedy = function(i) {
	if(terrylib_Obj.entities[i].actionset) {
		return gamecontrol_Game.getdestinationy(i);
	}
	return gamecontrol_Game.getcurrenty(i);
};
gamecontrol_Game.getcurrentx = function(i) {
	return terrylib_Obj.entities[i].xp | 0;
};
gamecontrol_Game.getcurrenty = function(i) {
	return terrylib_Obj.entities[i].yp | 0;
};
gamecontrol_Game.getdestinationx = function(i,movestring) {
	if(movestring == null) {
		movestring = "";
	}
	gamecontrol_Game.tx = terrylib_Obj.entities[i].xp | 0;
	if(movestring != "") {
		if(movestring == "move_left") {
			gamecontrol_Game.tx--;
		}
		if(movestring == "move_right") {
			gamecontrol_Game.tx++;
		}
	} else {
		if(terrylib_Obj.entities[i].action == "move_left") {
			gamecontrol_Game.tx--;
		}
		if(terrylib_Obj.entities[i].action == "move_right") {
			gamecontrol_Game.tx++;
		}
	}
	return gamecontrol_Game.tx;
};
gamecontrol_Game.getdestinationy = function(i,movestring) {
	if(movestring == null) {
		movestring = "";
	}
	gamecontrol_Game.ty = terrylib_Obj.entities[i].yp | 0;
	if(movestring != "") {
		if(movestring == "move_up") {
			gamecontrol_Game.ty--;
		}
		if(movestring == "move_down") {
			gamecontrol_Game.ty++;
		}
	} else {
		if(terrylib_Obj.entities[i].action == "move_up") {
			gamecontrol_Game.ty--;
		}
		if(terrylib_Obj.entities[i].action == "move_down") {
			gamecontrol_Game.ty++;
		}
	}
	return gamecontrol_Game.ty;
};
gamecontrol_Game.oppositedirstring = function(a,b) {
	if(a == "up" && b == "down") {
		return true;
	}
	if(a == "down" && b == "up") {
		return true;
	}
	if(a == "left" && b == "right") {
		return true;
	}
	if(a == "right" && b == "left") {
		return true;
	}
	return false;
};
gamecontrol_Game.oppositedirmovestring = function(a) {
	if(a == "move_up") {
		return "move_down";
	}
	if(a == "move_down") {
		return "move_up";
	}
	if(a == "move_left") {
		return "move_right";
	}
	if(a == "move_right") {
		return "move_left";
	}
	return "nothing";
};
gamecontrol_Game.couldtry = function(xoff,yoff,i) {
	if(!terrylib_World.collide(xoff,yoff)) {
		var _g1 = 0;
		var _g = terrylib_Obj.nentity;
		while(_g1 < _g) {
			var j = _g1++;
			if(i != j) {
				if(terrylib_Obj.entities[j].active) {
					gamecontrol_Game.tx2 = gamecontrol_Game.getdestinationx(j);
					gamecontrol_Game.ty2 = gamecontrol_Game.getdestinationy(j);
					if(xoff == gamecontrol_Game.tx2 && yoff == gamecontrol_Game.ty2) {
						return true;
					}
				}
			}
		}
	} else {
		return true;
	}
	return false;
};
gamecontrol_Game.couldtryagain = function(i) {
	var mleft = 0;
	var mright = 0;
	var mup = 0;
	var mdown = 0;
	gamecontrol_Game.tx1 = gamecontrol_Game.getcurrentx(i);
	gamecontrol_Game.ty1 = gamecontrol_Game.getcurrenty(i);
	if(gamecontrol_Game.couldtry(gamecontrol_Game.tx1,gamecontrol_Game.ty1 - 1,i)) {
		mup = 1;
	} else {
		mup = 0;
	}
	if(gamecontrol_Game.couldtry(gamecontrol_Game.tx1,gamecontrol_Game.ty1 + 1,i)) {
		mdown = 1;
	} else {
		mdown = 0;
	}
	if(gamecontrol_Game.couldtry(gamecontrol_Game.tx1 - 1,gamecontrol_Game.ty1,i)) {
		mleft = 1;
	} else {
		mleft = 0;
	}
	if(gamecontrol_Game.couldtry(gamecontrol_Game.tx1 + 1,gamecontrol_Game.ty1,i)) {
		mright = 1;
	} else {
		mright = 0;
	}
	if(mleft + mright + mup + mdown == 4) {
		return false;
	}
	return true;
};
gamecontrol_Game.figureoutmove = function(i) {
	if(terrylib_Obj.entities[i].numpossibleactions == 0) {
		terrylib_Obj.entities[i].action = "nothing";
		terrylib_Obj.entities[i].actionset = true;
	} else if(!terrylib_Obj.entities[i].actionset) {
		gamecontrol_Game.tx = 0;
		gamecontrol_Game.tempstring = terrylib_Obj.entities[i].possibleactions[gamecontrol_Game.tx];
		if(terrylib_Help.getroot(gamecontrol_Game.tempstring,"_") == "move") {
			terrylib_Obj.entities[i].action = gamecontrol_Game.tempstring;
		} else if(gamecontrol_Game.tempstring == "wait") {
			terrylib_Obj.entities[i].action = "wait";
			terrylib_Obj.entities[i].actionset = true;
		} else if(gamecontrol_Game.tempstring == "reverse_ai") {
			if(terrylib_Obj.entities[i].ai == "anticlockwisefollowwall") {
				terrylib_Obj.entities[i].ai = "clockwisefollowwall";
			} else if(terrylib_Obj.entities[i].ai == "clockwisefollowwall") {
				terrylib_Obj.entities[i].ai = "anticlockwisefollowwall";
			}
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].action = "nothing";
			terrylib_Obj.entities[i].actionset = true;
		} else {
			terrylib_Obj.entities[i].action = "nothing";
			terrylib_Obj.entities[i].actionset = true;
		}
	}
	if(terrylib_Help.getroot(terrylib_Obj.entities[i].action,"_") == "move") {
		gamecontrol_Game.tx1 = gamecontrol_Game.getdestinationx(i);
		gamecontrol_Game.ty1 = gamecontrol_Game.getdestinationy(i);
		if(terrylib_World.collide(gamecontrol_Game.tx1,gamecontrol_Game.ty1)) {
			terrylib_Obj.entities[i].removeaction(terrylib_Obj.entities[i].action);
			terrylib_Obj.entities[i].action = "nothing";
			return;
		} else {
			var _g1 = 0;
			var _g = terrylib_Obj.nentity;
			while(_g1 < _g) {
				var j = _g1++;
				if(terrylib_Obj.entities[j].active && terrylib_Obj.entities[j].collidable) {
					if(i != j) {
						if(terrylib_Obj.entities[j].actionset || terrylib_Obj.entities[j].inchain) {
							gamecontrol_Game.tx2 = gamecontrol_Game.getdestinationx(j);
							gamecontrol_Game.ty2 = gamecontrol_Game.getdestinationy(j);
							if(gamecontrol_Game.tx1 == gamecontrol_Game.tx2 && gamecontrol_Game.ty1 == gamecontrol_Game.ty2) {
								terrylib_Obj.entities[i].removeaction(terrylib_Obj.entities[i].action);
								terrylib_Obj.entities[i].action = "nothing";
								return;
							}
							if(terrylib_Obj.entities[j].inchain) {
								if(gamecontrol_Game.oppositedirstring(terrylib_Help.getbranch(terrylib_Obj.entities[i].action,"_"),terrylib_Help.getbranch(terrylib_Obj.entities[j].action,"_"))) {
									gamecontrol_Game.tx2 = gamecontrol_Game.getcurrentx(j);
									gamecontrol_Game.ty2 = gamecontrol_Game.getcurrenty(j);
									if(gamecontrol_Game.tx1 == gamecontrol_Game.tx2 && gamecontrol_Game.ty1 == gamecontrol_Game.ty2) {
										terrylib_Obj.entities[i].removeaction(terrylib_Obj.entities[i].action);
										terrylib_Obj.entities[i].action = "nothing";
										return;
									}
								}
							}
						} else {
							gamecontrol_Game.tx2 = gamecontrol_Game.getcurrentx(j);
							gamecontrol_Game.ty2 = gamecontrol_Game.getcurrenty(j);
							if(gamecontrol_Game.tx1 == gamecontrol_Game.tx2 && gamecontrol_Game.ty1 == gamecontrol_Game.ty2) {
								terrylib_Obj.entities[i].inchain = true;
								while(!terrylib_Obj.entities[j].actionset) gamecontrol_Game.figureoutmove(j);
								return;
							}
						}
					}
				}
			}
			terrylib_Obj.entities[i].actionset = true;
		}
	}
};
gamecontrol_Game.allactionsset = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(!terrylib_Obj.entities[i].actionset) {
				return false;
			}
		}
	}
	return true;
};
gamecontrol_Game.checkforenemy = function(x,y) {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active && terrylib_Obj.entities[i].collidable) {
			if(terrylib_Obj.entities[i].xp == x && terrylib_Obj.entities[i].yp == y) {
				if(terrylib_Obj.entities[i].rule == "enemy") {
					return i;
				}
			}
		}
	}
	if(terrylib_World.collide(x,y)) {
		return -2;
	}
	return -1;
};
gamecontrol_Game.checkforentity = function(x,y) {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active && terrylib_Obj.entities[i].collidable) {
			if(terrylib_Obj.entities[i].xp == x && terrylib_Obj.entities[i].yp == y) {
				return i;
			}
		}
	}
	if(terrylib_World.collide(x,y)) {
		return -2;
	}
	return -1;
};
gamecontrol_Game.alertallenemies = function() {
	haxegon_Music.playsound("spotted");
	gamecontrol_Game.alarm = true;
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].rule == "enemy") {
				if(terrylib_Obj.entities[i].state != 2) {
					if(terrylib_Obj.entities[i].alertbysound) {
						gamecontrol_Localworld.alertedtoplayer(i);
					}
				}
			}
		}
	}
};
gamecontrol_Game.dealertall = function() {
	gamecontrol_Game.alarm = false;
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].rule == "enemy") {
				if(terrylib_Obj.entities[i].state == 1) {
					var _this = terrylib_Obj.entindex;
					var key = terrylib_Obj.entities[i].rule;
					terrylib_Obj.templates[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]].dealert(i);
				}
			}
		}
	}
};
gamecontrol_Game.showmessage = function(_message,col,time) {
	gamecontrol_Game.message = _message;
	gamecontrol_Game.messagedelay = time;
	gamecontrol_Game.messagecol = col;
};
gamecontrol_Game.setupreinforcements = function(enemy,time) {
	gamecontrol_Game.reinforcements.push(enemy);
	gamecontrol_Game.reinforcementspeed.push(time);
};
gamecontrol_Game.nextreinforcement = function() {
	if(gamecontrol_Game.reinforcements.length > 0) {
		gamecontrol_Game.reinforcements.splice(0,1);
		gamecontrol_Game.reinforcementspeed.splice(0,1);
	}
	if(gamecontrol_Game.reinforcements.length == 0) {
		var _g1 = 0;
		var _g = modernversion_AIDirector.reinforcements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(haxegon_S.isinstring(modernversion_AIDirector.reinforcements[i],"_")) {
				var options = modernversion_AIDirector.reinforcements[i].split("_");
				terrylib_Rand.pshuffle(options);
				gamecontrol_Game.setupreinforcements(options[0],modernversion_AIDirector.reinforcementtime[i]);
			} else {
				gamecontrol_Game.setupreinforcements(modernversion_AIDirector.reinforcements[i],modernversion_AIDirector.reinforcementtime[i]);
			}
		}
	}
};
gamecontrol_Game.addblueprint = function(t) {
	gamecontrol_Game.towerblueprints[gamecontrol_Game.numtowerblueprints] = t;
	gamecontrol_Game.numtowerblueprints++;
};
gamecontrol_Game.addgadget = function(t) {
	gamecontrol_Game.towergadgets[gamecontrol_Game.numtowergadgets] = t;
	gamecontrol_Game.numtowergadgets++;
};
gamecontrol_Game.addraregadget = function(t) {
	gamecontrol_Game.towergadgets_rare[gamecontrol_Game.numtowergadgets_rare] = t;
	gamecontrol_Game.numtowergadgets_rare++;
};
gamecontrol_Game.shufflegadgets = function() {
	var _g1 = 0;
	var _g = gamecontrol_Game.numtowergadgets;
	while(_g1 < _g) {
		var i = _g1++;
		var j = Math.floor((gamecontrol_Game.numtowergadgets - 1 + 1) * terrylib_Rand.prandom());
		var a = gamecontrol_Game.towergadgets[i];
		gamecontrol_Game.towergadgets[i] = gamecontrol_Game.towergadgets[j];
		gamecontrol_Game.towergadgets[j] = a;
	}
};
gamecontrol_Game.additem = function(t) {
	gamecontrol_Game.toweritems[gamecontrol_Game.numtoweritems] = t;
	gamecontrol_Game.numtoweritems++;
};
gamecontrol_Game.addrareitem = function(t) {
	gamecontrol_Game.toweritems_rare[gamecontrol_Game.numtoweritems_rare] = t;
	gamecontrol_Game.numtoweritems_rare++;
};
gamecontrol_Game.shuffleitems = function() {
	var _g1 = 0;
	var _g = gamecontrol_Game.numtoweritems;
	while(_g1 < _g) {
		var i = _g1++;
		var j = Math.floor((gamecontrol_Game.numtoweritems - 1 + 1) * terrylib_Rand.prandom());
		var a = gamecontrol_Game.toweritems[i];
		gamecontrol_Game.toweritems[i] = gamecontrol_Game.toweritems[j];
		gamecontrol_Game.toweritems[j] = a;
	}
};
gamecontrol_Game.cleartower = function() {
	gamecontrol_Game.numtowergadgets = 0;
	gamecontrol_Game.numtowergadgets_rare = 0;
	gamecontrol_Game.numtoweritems = 0;
	gamecontrol_Game.numtoweritems_rare = 0;
	gamecontrol_Game.numtowerblueprints = 0;
};
gamecontrol_Game.initpreshuffle = function(start,end) {
	var _g1 = start;
	while(_g1 < end) {
		var i = _g1++;
		gamecontrol_Game.preshuffle[i] = i;
	}
	var _g11 = start;
	while(_g11 < end) {
		var i1 = _g11++;
		var j = start + Math.floor((end - 1 - start + 1) * terrylib_Rand.prandom());
		var a = gamecontrol_Game.preshuffle[i1];
		gamecontrol_Game.preshuffle[i1] = gamecontrol_Game.preshuffle[j];
		gamecontrol_Game.preshuffle[j] = a;
	}
};
gamecontrol_Game.distributefloors = function() {
	if(gamecontrol_Game.blueprintorder == "random") {
		var _g1 = 1;
		var _g = gamecontrol_Game.towerheight - 1;
		while(_g1 < _g) gamecontrol_Game.blueprint[_g1++] = gamecontrol_Game.towerblueprints[Math.floor((gamecontrol_Game.numtowerblueprints - 1 + 1) * terrylib_Rand.prandom())];
	} else if(gamecontrol_Game.blueprintorder == "ordered") {
		var div = (gamecontrol_Game.towerheight - 2) / gamecontrol_Game.numtowerblueprints | 0;
		var currentdiv = 0;
		var diviter = 0;
		var _g11 = 1;
		var _g2 = gamecontrol_Game.towerheight - 1;
		while(_g11 < _g2) {
			gamecontrol_Game.blueprint[_g11++] = gamecontrol_Game.towerblueprints[currentdiv];
			++diviter;
			if(diviter >= div) {
				diviter = 0;
				++currentdiv;
				if(currentdiv == gamecontrol_Game.numtowerblueprints) {
					currentdiv = gamecontrol_Game.numtowerblueprints - 1;
				}
			}
		}
	}
};
gamecontrol_Game.distributeitems = function(start,end) {
	var _g1 = 0;
	var _g = gamecontrol_Game.towerheight;
	while(_g1 < _g) {
		var i = _g1++;
		gamecontrol_Game.flooritems[i].clear();
		gamecontrol_Game.floorgadgets[i].clear();
		gamecontrol_Game.floortreasure[i] = 0;
	}
	var i1;
	var j;
	i1 = start;
	j = 0;
	gamecontrol_Game.initpreshuffle(start,end);
	while(j < gamecontrol_Game.numtowergadgets) {
		gamecontrol_Game.floorgadgets[gamecontrol_Game.preshuffle[i1]].add(gamecontrol_Game.towergadgets[j]);
		++i1;
		++j;
		if(i1 >= end) {
			i1 = start;
		}
	}
	if(gamecontrol_Game.numtowergadgets_rare > 0) {
		var tmp = gamecontrol_Game.preshuffle[i1];
		var tmp1 = gamecontrol_Game.towergadgets_rare[Math.floor((gamecontrol_Game.numtowergadgets_rare - 1 + 1) * terrylib_Rand.prandom())];
		gamecontrol_Game.floorgadgets[tmp].add(tmp1);
	}
	i1 = start;
	j = 0;
	gamecontrol_Game.initpreshuffle(start,end);
	while(j < gamecontrol_Game.numtoweritems) {
		gamecontrol_Game.flooritems[gamecontrol_Game.preshuffle[i1]].add(gamecontrol_Game.toweritems[j]);
		++i1;
		++j;
		if(i1 >= end) {
			i1 = start;
		}
	}
	if(gamecontrol_Game.numtoweritems_rare > 0) {
		var tmp2 = gamecontrol_Game.preshuffle[i1];
		var tmp3 = gamecontrol_Game.toweritems_rare[Math.floor((gamecontrol_Game.numtoweritems_rare - 1 + 1) * terrylib_Rand.prandom())];
		gamecontrol_Game.flooritems[tmp2].add(tmp3);
	}
	var _g11 = start;
	while(_g11 < end) gamecontrol_Game.floortreasure[_g11++] = gamecontrol_Game.towertreasure / (gamecontrol_Game.towerheight - 2) | 0;
	gamecontrol_Game.initpreshuffle(start,end);
	var _g12 = start;
	while(_g12 < end) {
		var i2 = _g12++;
		var _g3 = start;
		while(_g3 < end) {
			var j1 = _g3++;
			if(gamecontrol_Game.floortreasure[gamecontrol_Game.preshuffle[i2]] > 50) {
				gamecontrol_Game.floortreasure[gamecontrol_Game.preshuffle[i2]] -= 50;
				gamecontrol_Game.floortreasure[j1] += 50;
			}
		}
	}
	var _g13 = 0;
	var _g2 = gamecontrol_Game.towerheight;
	while(_g13 < _g2) ++_g13;
};
gamecontrol_Game.initblueprints = function(type,first,last) {
	gamecontrol_Game.towertype = type;
	gamecontrol_Game.firstfloor = first;
	gamecontrol_Game.lastfloor = last;
	switch(gamecontrol_Game.towertype) {
	case "intro":
		gamecontrol_Game.blueprintorder = "ordered";
		gamecontrol_Game.addblueprint("intro_small");
		gamecontrol_Game.addblueprint("intro_small2");
		gamecontrol_Game.addblueprint("intro_small3");
		break;
	case "normal":
		gamecontrol_Game.blueprintorder = "ordered";
		gamecontrol_Game.addblueprint("small");
		gamecontrol_Game.addblueprint("medium");
		gamecontrol_Game.addblueprint("big");
		break;
	case "robot":
		gamecontrol_Game.blueprintorder = "ordered";
		gamecontrol_Game.addblueprint("robot_small");
		gamecontrol_Game.addblueprint("robot_large");
		break;
	case "somethingelse":
		gamecontrol_Game.blueprintorder = "random";
		gamecontrol_Game.addblueprint("cross");
		gamecontrol_Game.addblueprint("square");
		break;
	}
};
gamecontrol_Game.generatetowerblock = function(type) {
	gamecontrol_Game.cleartower();
	switch(type) {
	case "fire":
		break;
	case "intro":
		gamecontrol_Localworld.changepalette("blue",0);
		gamecontrol_Game.towerheight = 5;
		gamecontrol_Game.initblueprints("intro","intro_firstfloor","intro_topfloor");
		gamecontrol_Game.towerstartlevel = 1;
		gamecontrol_Game.towerendlevel = 4;
		gamecontrol_Game.itemlevel = 1;
		gamecontrol_Game.towertreasure = 420 + terrylib_Rand.ppickint(0,6) * 30;
		if(terrylib_Rand.prandom() < 0.2) {
			gamecontrol_Game.addgadget(terrylib_Rand.ppickstring("teleporter","knockout gas"));
		} else {
			gamecontrol_Game.addgadget(terrylib_Rand.ppickstring("tazer","leaf blower","skateboard"));
		}
		if(terrylib_Rand.prandom() < 0.05) {
			gamecontrol_Game.addgadget("matchstick");
		} else {
			gamecontrol_Game.addgadget("pistol");
		}
		gamecontrol_Game.shufflegadgets();
		gamecontrol_Game.additem("Lightbulb");
		gamecontrol_Game.additem("Signal Jammer");
		var tmp = terrylib_Rand.ppickint(1,4);
		if(tmp == 1) {
			gamecontrol_Game.additem("First Aid Kit");
			gamecontrol_Game.additem("Signal Jammer");
		} else if(tmp == 2) {
			gamecontrol_Game.additem("First Aid Kit");
			gamecontrol_Game.additem("Cardboard Box");
		} else if(tmp == 3) {
			gamecontrol_Game.additem("Signal Jammer");
			gamecontrol_Game.additem("Cardboard Box");
		} else if(tmp == 4) {
			gamecontrol_Game.additem("Lightbulb");
			gamecontrol_Game.additem("First Aid Kit");
		}
		gamecontrol_Game.shuffleitems();
		break;
	case "normal":
		gamecontrol_Game.towerheight = 5;
		gamecontrol_Game.initblueprints("intro","intro_firstfloor","intro_topfloor");
		gamecontrol_Game.towerstartlevel = 1;
		gamecontrol_Game.towerendlevel = 4;
		gamecontrol_Game.itemlevel = 1;
		break;
	case "robot":
		gamecontrol_Localworld.changepalette("gray",2);
		gamecontrol_Game.towerheight = 5;
		gamecontrol_Game.initblueprints("robot","robot_firstfloor","robot_topfloor");
		gamecontrol_Game.towerstartlevel = 1;
		gamecontrol_Game.towerendlevel = 4;
		gamecontrol_Game.itemlevel = 1;
		gamecontrol_Game.towertreasure = 420 + terrylib_Rand.ppickint(0,6) * 30;
		if(terrylib_Rand.prandom() < 0.2) {
			gamecontrol_Game.addgadget(terrylib_Rand.ppickstring("teleporter","knockout gas"));
		} else {
			gamecontrol_Game.addgadget(terrylib_Rand.ppickstring("tazer","leaf blower","skateboard"));
		}
		if(terrylib_Rand.prandom() < 0.05) {
			gamecontrol_Game.addgadget("matchstick");
		} else {
			gamecontrol_Game.addgadget("pistol");
		}
		gamecontrol_Game.shufflegadgets();
		gamecontrol_Game.additem("Lightbulb");
		gamecontrol_Game.additem("Signal Jammer");
		var tmp1 = terrylib_Rand.ppickint(1,4);
		if(tmp1 == 1) {
			gamecontrol_Game.additem("First Aid Kit");
			gamecontrol_Game.additem("Signal Jammer");
		} else if(tmp1 == 2) {
			gamecontrol_Game.additem("First Aid Kit");
			gamecontrol_Game.additem("Cardboard Box");
		} else if(tmp1 == 3) {
			gamecontrol_Game.additem("Signal Jammer");
			gamecontrol_Game.additem("Cardboard Box");
		} else if(tmp1 == 4) {
			gamecontrol_Game.additem("Lightbulb");
			gamecontrol_Game.additem("First Aid Kit");
		}
		gamecontrol_Game.shuffleitems();
		break;
	default:
		gamecontrol_Game.generatetowerblock("normal");
		type = "error";
	}
	if(type != "error") {
		gamecontrol_Game.enemylevel = gamecontrol_Game.towerstartlevel;
		gamecontrol_Game.distributefloors();
		gamecontrol_Game.distributeitems(1,gamecontrol_Game.towerheight - 1);
	}
};
gamecontrol_Game.cameraframe = function(t) {
	t = terrylib_Help.fixangle(t) | 0;
	if(t > 22 && t <= 67) {
		return 1;
	}
	if(t > 67 && t <= 112) {
		return 2;
	}
	if(t > 112 && t <= 157) {
		return 3;
	}
	if(t > 157 && t <= 202) {
		return 16;
	}
	if(t > 202 && t <= 247) {
		return 17;
	}
	if(t > 247 && t <= 292) {
		return 18;
	}
	if(t > 292 && t <= 337) {
		return 19;
	}
	return 0;
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		var xa = this.x;
		var ya = this.y;
		_this.x = xa;
		_this.y = ya;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var gamecontrol_Generator = function() { };
$hxClasses["gamecontrol.Generator"] = gamecontrol_Generator;
gamecontrol_Generator.__name__ = ["gamecontrol","Generator"];
gamecontrol_Generator.init = function() {
	gamecontrol_Generator.tpoint = new openfl_geom_Point();
	gamecontrol_Generator.tpoint2 = new openfl_geom_Point();
	var _g = 0;
	while(_g < 25) {
		++_g;
		gamecontrol_Generator.rooms.push(new gamecontrol_Roomclass());
	}
	gamecontrol_Generator.numrooms = 0;
	var _g1 = 0;
	while(_g1 < 10) {
		++_g1;
		gamecontrol_Generator.lines.push(new gamecontrol_misc_Line());
	}
	gamecontrol_Generator.numlines = 0;
	var _g2 = 0;
	while(_g2 < 100) {
		++_g2;
		gamecontrol_Generator.connectionsort.push(0);
	}
	gamecontrol_Generator.numconnectionsort = 0;
	gamecontrol_Generator.thingstoplace = new config_Numlist();
	gamecontrol_Generator.thingstoplace_type = new config_Numlist();
	var _g3 = 0;
	while(_g3 < 100) {
		++_g3;
		gamecontrol_Generator.xplace.push(0);
		gamecontrol_Generator.yplace.push(0);
	}
};
gamecontrol_Generator.shift_thingstoplace = function(xoff,yoff) {
	var _g1 = 0;
	var _g = gamecontrol_Generator.thingstoplace.length;
	while(_g1 < _g) {
		var i = _g1++;
		gamecontrol_Generator.xplace[i] += xoff;
		gamecontrol_Generator.yplace[i] += yoff;
	}
};
gamecontrol_Generator.placelater = function(x,y,thing,type) {
	gamecontrol_Generator.xplace[gamecontrol_Generator.thingstoplace.length] = x;
	gamecontrol_Generator.yplace[gamecontrol_Generator.thingstoplace.length] = y;
	gamecontrol_Generator.thingstoplace.add(thing);
	gamecontrol_Generator.thingstoplace_type.add(type);
};
gamecontrol_Generator.clearthingstoplace = function() {
	gamecontrol_Generator.thingstoplace.clear();
	gamecontrol_Generator.thingstoplace_type.clear();
};
gamecontrol_Generator.placethethings = function() {
	if(!gamecontrol_Generator.rejectmap) {
		var _g1 = 0;
		var _g = gamecontrol_Generator.thingstoplace.length;
		while(_g1 < _g) {
			var i = _g1++;
			terrylib_Obj.createentity(gamecontrol_Generator.xplace[i],gamecontrol_Generator.yplace[i],gamecontrol_Generator.thingstoplace.list[i],gamecontrol_Generator.thingstoplace_type.list[i],"preplaced");
		}
	}
	gamecontrol_Generator.clearthingstoplace();
};
gamecontrol_Generator.changemapsize = function(w,h) {
	terrylib_World.changemapsize(w,h);
};
gamecontrol_Generator.clearmap = function() {
	if(!gamecontrol_Generator.rejectmap) {
		var _g1 = 0;
		var _g = terrylib_World.mapheight;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = terrylib_World.mapwidth;
			while(_g3 < _g2) terrylib_World.placetile(_g3++,j,gamecontrol_Localworld.BACKGROUND);
		}
	}
};
gamecontrol_Generator.randomwall = function() {
	terrylib_World.placetile(Math.floor((terrylib_World.mapwidth - 1 + 1) * terrylib_Rand.prandom()),Math.floor((terrylib_World.mapheight - 1 + 1) * terrylib_Rand.prandom()),gamecontrol_Localworld.WALL);
};
gamecontrol_Generator.checkfreespace = function(x,y,w,h,offset) {
	if(offset == null) {
		offset = 0;
	}
	x -= offset;
	y -= offset;
	w += offset * 2;
	h += offset * 2;
	if(x < 0) {
		return false;
	}
	if(y < 0) {
		return false;
	}
	var _g1 = y;
	var _g = y + h;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = x;
		var _g2 = x + w;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) != gamecontrol_Localworld.BACKGROUND) {
				return false;
			}
			if(i >= terrylib_World.mapwidth) {
				return false;
			}
			if(j >= terrylib_World.mapheight) {
				return false;
			}
		}
	}
	return true;
};
gamecontrol_Generator.placerooms = function() {
	var _g1 = 0;
	var _g = gamecontrol_Generator.numrooms;
	while(_g1 < _g) gamecontrol_Generator.placeactualroom(_g1++);
};
gamecontrol_Generator.placeactualroom = function(roomindex) {
	if(roomindex == null) {
		roomindex = -1;
	}
	if(roomindex == -1) {
		roomindex = gamecontrol_Generator.numrooms - 1;
	}
	var _g1 = gamecontrol_Generator.rooms[roomindex].y;
	var _g = gamecontrol_Generator.rooms[roomindex].y + gamecontrol_Generator.rooms[roomindex].height;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = gamecontrol_Generator.rooms[roomindex].x;
		var _g2 = gamecontrol_Generator.rooms[roomindex].x + gamecontrol_Generator.rooms[roomindex].width;
		while(_g3 < _g2) {
			var i = _g3++;
			gamecontrol_Generator.tr = gamecontrol_Generator.rooms[roomindex].blockat(i,j);
			if(gamecontrol_Generator.tr > gamecontrol_Localworld.BACKGROUND) {
				terrylib_World.placetile(i,j,gamecontrol_Generator.tr);
			}
		}
	}
};
gamecontrol_Generator.placeactualroom_nochecks = function(x,y,w,h,floortile,walltile) {
	if(walltile == null) {
		walltile = -1;
	}
	if(floortile == null) {
		floortile = -1;
	}
	if(floortile == -1) {
		floortile = gamecontrol_Localworld.FLOOR;
	}
	if(walltile == -1) {
		walltile = gamecontrol_Localworld.WALL;
	}
	var _g1 = y;
	var _g = y + h;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = x;
		var _g2 = x + w;
		while(_g3 < _g2) {
			var i = _g3++;
			terrylib_World.placetile(i,j,floortile);
			if(i == x) {
				terrylib_World.placetile(i,j,walltile);
			}
			if(i == x + w - 1) {
				terrylib_World.placetile(i,j,walltile);
			}
			if(j == y) {
				terrylib_World.placetile(i,j,walltile);
			}
			if(j == y + h - 1) {
				terrylib_World.placetile(i,j,walltile);
			}
		}
	}
};
gamecontrol_Generator.clearrooms = function() {
	var _g1 = 0;
	var _g = gamecontrol_Generator.numrooms;
	while(_g1 < _g) gamecontrol_Generator.rooms[_g1++].clear();
	gamecontrol_Generator.numrooms = 0;
	gamecontrol_Generator.clearmap();
};
gamecontrol_Generator.addroom = function(x,y,category,n) {
	gamecontrol_Generator.rooms[gamecontrol_Generator.numrooms].load(x,y,category,n);
	gamecontrol_Generator.numrooms++;
};
gamecontrol_Generator.addroom_rect = function(_x,_y,_w,_h) {
	gamecontrol_Generator.rooms[gamecontrol_Generator.numrooms].setrect(_x,_y,_w,_h);
	gamecontrol_Generator.numrooms++;
};
gamecontrol_Generator.setbounds = function(position) {
	switch(position) {
	case "anywhere":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth;
		gamecontrol_Generator.boundh = terrylib_World.mapheight;
		break;
	case "bottom":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 2 | 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "bl":case "bottomleft":case "lb":case "leftbottom":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 2 | 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth / 2 * 3 | 0;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "bottomright":case "br":case "rb":case "rightbottom":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 3 | 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 2 | 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth - gamecontrol_Generator.boundx;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "center":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 6 | 0;
		gamecontrol_Generator.boundy = 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth / 2 * 3 | 0;
		gamecontrol_Generator.boundh = terrylib_World.mapheight;
		break;
	case "bc":case "bottomcenter":case "cb":case "centerbottom":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 6 | 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 2 | 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth / 2 * 3 | 0;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "centertop":case "ct":case "tc":case "topcenter":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 6 | 0;
		gamecontrol_Generator.boundy = 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth / 2 * 3 | 0;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "centermiddle":case "cm":case "mc":case "middlecenter":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 6 | 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 4 | 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth / 2 * 3 | 0;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "left":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth / 2 * 3 | 0;
		gamecontrol_Generator.boundh = terrylib_World.mapheight;
		break;
	case "lefttop":case "lt":case "tl":case "topleft":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth / 2 * 3 | 0;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "middle":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 4 | 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "leftmiddle":case "lm":case "middleleft":case "ml":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 4 | 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth / 2 * 3 | 0;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "right":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 2 | 0;
		gamecontrol_Generator.boundy = 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth - gamecontrol_Generator.boundx;
		gamecontrol_Generator.boundh = terrylib_World.mapheight;
		break;
	case "middleright":case "mr":case "rightmiddle":case "rm":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 3 | 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 4 | 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth - gamecontrol_Generator.boundx;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "top":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	case "righttop":case "rt":case "topright":case "tr":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 3 | 0;
		gamecontrol_Generator.boundy = 0;
		gamecontrol_Generator.boundw = terrylib_World.mapwidth - gamecontrol_Generator.boundx;
		gamecontrol_Generator.boundh = terrylib_World.mapheight / 2 | 0;
		break;
	}
};
gamecontrol_Generator.setposition = function(position) {
	switch(position) {
	case "anywhere":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = 0;
		break;
	case "bottom":
		gamecontrol_Generator.boundx = Math.floor((terrylib_World.mapwidth - 1 + 1) * terrylib_Rand.prandom());
		gamecontrol_Generator.boundy = terrylib_World.mapheight - 1;
		break;
	case "bl":case "bottomleft":case "lb":case "leftbottom":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight - 1;
		break;
	case "bottomright":case "br":case "rb":case "rightbottom":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth - 1;
		gamecontrol_Generator.boundy = terrylib_World.mapheight - 1;
		break;
	case "center":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 2 | 0;
		gamecontrol_Generator.boundy = Math.floor((terrylib_World.mapheight - 1 + 1) * terrylib_Rand.prandom());
		break;
	case "bc":case "bottomcenter":case "cb":case "centerbottom":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 2 | 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight - 1;
		break;
	case "centertop":case "ct":case "tc":case "topcenter":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 2 | 0;
		gamecontrol_Generator.boundy = 0;
		break;
	case "centermiddle":case "cm":case "mc":case "middlecenter":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth / 2 | 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 2 | 0;
		break;
	case "left":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = Math.floor((terrylib_World.mapheight - 1 + 1) * terrylib_Rand.prandom());
		break;
	case "lefttop":case "lt":case "tl":case "topleft":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = 0;
		break;
	case "middle":
		gamecontrol_Generator.boundx = Math.floor((terrylib_World.mapwidth - 1 + 1) * terrylib_Rand.prandom());
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 2 | 0;
		break;
	case "leftmiddle":case "lm":case "middleleft":case "ml":
		gamecontrol_Generator.boundx = 0;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 2 | 0;
		break;
	case "right":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth - 1;
		gamecontrol_Generator.boundy = Math.floor((terrylib_World.mapheight - 1 + 1) * terrylib_Rand.prandom());
		break;
	case "middleright":case "mr":case "rightmiddle":case "rm":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth - 1;
		gamecontrol_Generator.boundy = terrylib_World.mapheight / 2 | 0;
		break;
	case "top":
		gamecontrol_Generator.boundx = Math.floor((terrylib_World.mapwidth - 1 + 1) * terrylib_Rand.prandom());
		gamecontrol_Generator.boundy = 0;
		break;
	case "righttop":case "rt":case "topright":case "tr":
		gamecontrol_Generator.boundx = terrylib_World.mapwidth - 1;
		gamecontrol_Generator.boundy = 0;
		break;
	}
};
gamecontrol_Generator.roughplace = function(type,position,offset) {
	if(offset == null) {
		offset = 5;
	}
	gamecontrol_Generator.setposition(position);
	gamecontrol_Generator.place(type,gamecontrol_Generator.boundx,gamecontrol_Generator.boundy,offset);
};
gamecontrol_Generator.fillrect = function(x,y,w,h,_border,_inside) {
	var _g1 = y;
	var _g = y + h;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = x;
		var _g2 = x + w;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.BACKGROUND) {
				if(i == x || j == y || i == x + w - 1 || j == y + h - 1) {
					terrylib_World.placetile(i,j,_border);
				} else {
					terrylib_World.placetile(i,j,_inside);
				}
			}
		}
	}
};
gamecontrol_Generator.place = function(type,x,y,offset) {
	if(offset == null) {
		offset = 5;
	}
	if(!gamecontrol_Generator.rejectmap) {
		gamecontrol_Generator.setbounds("anywhere");
		gamecontrol_Generator.tx1 = -1;
		gamecontrol_Generator.ty1 = -1;
		gamecontrol_Generator.attempts = 500;
		while(!gamecontrol_Generator.checkfreespace(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,1) && gamecontrol_Generator.attempts > 0) {
			gamecontrol_Generator.tr = Math.floor((config_Roomcache.numrooms(type) - 1 + 1) * terrylib_Rand.prandom());
			gamecontrol_Generator.tx2 = config_Roomcache.width(type,gamecontrol_Generator.tr);
			gamecontrol_Generator.ty2 = config_Roomcache.height(type,gamecontrol_Generator.tr);
			var from = -offset;
			gamecontrol_Generator.tx1 = x + (from + Math.floor((offset - from + 1) * terrylib_Rand.prandom()));
			var from1 = -offset;
			gamecontrol_Generator.ty1 = y + (from1 + Math.floor((offset - from1 + 1) * terrylib_Rand.prandom()));
			gamecontrol_Generator.attempts--;
		}
		if(gamecontrol_Generator.attempts > 0) {
			gamecontrol_Generator.addroom(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,type,gamecontrol_Generator.tr);
			gamecontrol_Generator.placeactualroom();
		} else {
			gamecontrol_Generator.rejectmap = true;
		}
	}
};
gamecontrol_Generator.exactplace = function(type,x,y) {
	if(!gamecontrol_Generator.rejectmap) {
		gamecontrol_Generator.tr = Math.floor((config_Roomcache.numrooms(type) - 1 + 1) * terrylib_Rand.prandom());
		gamecontrol_Generator.addroom(x,y,type,gamecontrol_Generator.tr);
		gamecontrol_Generator.placeactualroom();
	}
};
gamecontrol_Generator.randomroom = function(type,position) {
	if(position == null) {
		position = "anywhere";
	}
	if(!gamecontrol_Generator.rejectmap) {
		gamecontrol_Generator.setbounds(position);
		gamecontrol_Generator.tx1 = -1;
		gamecontrol_Generator.ty1 = -1;
		gamecontrol_Generator.attempts = 500;
		while(!gamecontrol_Generator.checkfreespace(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,1) && gamecontrol_Generator.attempts > 0) {
			gamecontrol_Generator.tr = Math.floor((config_Roomcache.numrooms(type) - 1 + 1) * terrylib_Rand.prandom());
			gamecontrol_Generator.tx2 = config_Roomcache.width(type,gamecontrol_Generator.tr);
			gamecontrol_Generator.ty2 = config_Roomcache.height(type,gamecontrol_Generator.tr);
			var from = gamecontrol_Generator.boundx;
			gamecontrol_Generator.tx1 = from + Math.floor((gamecontrol_Generator.boundx + gamecontrol_Generator.boundw - gamecontrol_Generator.tx2 - 1 - from + 1) * terrylib_Rand.prandom());
			var from1 = gamecontrol_Generator.boundy;
			gamecontrol_Generator.ty1 = from1 + Math.floor((gamecontrol_Generator.boundy + gamecontrol_Generator.boundh - gamecontrol_Generator.ty2 - 1 - from1 + 1) * terrylib_Rand.prandom());
			gamecontrol_Generator.attempts--;
		}
		if(gamecontrol_Generator.attempts > 0) {
			gamecontrol_Generator.addroom(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,type,gamecontrol_Generator.tr);
			gamecontrol_Generator.placeactualroom();
		} else {
			gamecontrol_Generator.rejectmap = true;
		}
	}
};
gamecontrol_Generator.addwalls = function() {
	if(!gamecontrol_Generator.rejectmap) {
		var _g1 = 0;
		var _g = terrylib_World.mapheight;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = terrylib_World.mapwidth;
			while(_g3 < _g2) {
				var i = _g3++;
				if(terrylib_World.at(i,j) == gamecontrol_Localworld.BACKGROUND) {
					terrylib_World.placetile(i,j,gamecontrol_Localworld.WALL);
				}
			}
		}
	}
};
gamecontrol_Generator.dustwalls = function() {
	var wallnearby = false;
	if(!gamecontrol_Generator.rejectmap) {
		var _g1 = 0;
		var _g = terrylib_World.mapheight;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = terrylib_World.mapwidth;
			while(_g3 < _g2) {
				var i = _g3++;
				if(terrylib_World.at(i,j) == gamecontrol_Localworld.FLOOR) {
					wallnearby = false;
					var _g4 = -2;
					while(_g4 < 3) {
						var j2 = _g4++;
						var _g5 = -2;
						while(_g5 < 3) if(terrylib_World.at(i + _g5++,j + j2) == gamecontrol_Localworld.WALL) {
							wallnearby = true;
						}
					}
					if(wallnearby) {
						var _g41 = -1;
						while(_g41 < 2) {
							var j21 = _g41++;
							var _g51 = -1;
							while(_g51 < 2) {
								var i2 = _g51++;
								if(terrylib_World.at(i + i2,j + j21) == gamecontrol_Localworld.BACKGROUND) {
									terrylib_World.placetile(i + i2,j + j21,gamecontrol_Localworld.BLOOD);
								}
							}
						}
					}
				}
			}
		}
		var _g11 = 0;
		var _g6 = terrylib_World.mapheight;
		while(_g11 < _g6) {
			var j1 = _g11++;
			var _g31 = 0;
			var _g21 = terrylib_World.mapwidth;
			while(_g31 < _g21) {
				var i1 = _g31++;
				if(terrylib_World.at(i1,j1) == gamecontrol_Localworld.BLOOD) {
					terrylib_World.placetile(i1,j1,gamecontrol_Localworld.WALL);
				}
			}
		}
	}
};
gamecontrol_Generator.roomoverlap_vertical = function(a,b) {
	if(gamecontrol_Generator.rooms[a].y >= gamecontrol_Generator.rooms[b].y && gamecontrol_Generator.rooms[a].y <= gamecontrol_Generator.rooms[b].y + gamecontrol_Generator.rooms[b].height - 1) {
		return true;
	}
	if(gamecontrol_Generator.rooms[a].y + gamecontrol_Generator.rooms[a].height - 1 >= gamecontrol_Generator.rooms[b].y && gamecontrol_Generator.rooms[a].y + gamecontrol_Generator.rooms[a].height - 1 <= gamecontrol_Generator.rooms[b].y + gamecontrol_Generator.rooms[b].height - 1) {
		return true;
	}
	return false;
};
gamecontrol_Generator.roomoverlap_horizontal = function(a,b) {
	if(gamecontrol_Generator.rooms[a].x >= gamecontrol_Generator.rooms[b].x && gamecontrol_Generator.rooms[a].x <= gamecontrol_Generator.rooms[b].x + gamecontrol_Generator.rooms[b].width - 1) {
		return true;
	}
	if(gamecontrol_Generator.rooms[a].x + gamecontrol_Generator.rooms[a].width - 1 >= gamecontrol_Generator.rooms[b].x && gamecontrol_Generator.rooms[a].x + gamecontrol_Generator.rooms[a].width - 1 <= gamecontrol_Generator.rooms[b].x + gamecontrol_Generator.rooms[b].width - 1) {
		return true;
	}
	return false;
};
gamecontrol_Generator.simpledrill = function(x1,y1,x2,y2,testing) {
	if(testing == null) {
		testing = false;
	}
	if(x1 == x2) {
		if(y1 != y2) {
			if(y1 > y2) {
				var tmp = y1;
				y1 = y2;
				y2 = tmp;
			}
			var _g1 = y1;
			var _g = y2 + 1;
			while(_g1 < _g) {
				var j = _g1++;
				if(terrylib_World.at(x1,j) == gamecontrol_Localworld.BACKGROUND || terrylib_World.at(x1,j) == gamecontrol_Localworld.FLOOR) {
					if(!testing) {
						terrylib_World.placetile(x1,j,gamecontrol_Localworld.FLOOR);
					}
				} else if(testing) {
					return false;
				}
			}
		}
	} else if(y1 == y2) {
		if(x1 != x2) {
			if(x1 > x2) {
				var tmp1 = x1;
				x1 = x2;
				x2 = tmp1;
			}
			var _g11 = x1;
			var _g2 = x2 + 1;
			while(_g11 < _g2) {
				var i = _g11++;
				if(terrylib_World.at(i,y1) == gamecontrol_Localworld.BACKGROUND || terrylib_World.at(i,y2) == gamecontrol_Localworld.FLOOR) {
					if(!testing) {
						terrylib_World.placetile(i,y1,gamecontrol_Localworld.FLOOR);
					}
				} else if(testing) {
					return false;
				}
			}
		}
	}
	return true;
};
gamecontrol_Generator.updateastarmap = function() {
	if(!gamecontrol_Generator.rejectmap) {
		terrylib_Astar.changemapsize(terrylib_World.mapwidth,terrylib_World.mapheight);
		var _g1 = 0;
		var _g = terrylib_World.mapheight;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = terrylib_World.mapwidth;
			while(_g3 < _g2) {
				var i = _g3++;
				if(terrylib_World.at(i,j) == gamecontrol_Localworld.BACKGROUND || terrylib_World.at(i,j) == gamecontrol_Localworld.FLOOR) {
					terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 0;
				} else {
					terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 1;
				}
				if(i == 0 || j == 0 || i >= terrylib_World.mapwidth - 1 || j >= terrylib_World.mapheight - 1) {
					terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 1;
				}
			}
		}
	}
};
gamecontrol_Generator.pathfinddrill = function(x1,y1,x2,y2) {
	terrylib_Astar.contents[x1 + terrylib_Astar.vmult[y1]] = 0;
	terrylib_Astar.contents[x2 + terrylib_Astar.vmult[y2]] = 0;
	terrylib_StraightAstar.pathfind(x1,y1,x2,y2);
	if(terrylib_Astar.pathlength == 0) {
		gamecontrol_Generator.rejectmap = true;
	} else {
		var _g1 = 1;
		var _g = terrylib_Astar.pathlength;
		while(_g1 < _g) {
			var i = _g1++;
			terrylib_World.placetile(terrylib_Astar.pathx[i],terrylib_Astar.pathy[i],gamecontrol_Localworld.FLOOR);
		}
	}
};
gamecontrol_Generator.getdir = function(x,y) {
	if(x == (gamecontrol_Generator.tpoint.x | 0)) {
		if(y == (gamecontrol_Generator.tpoint.y | 0)) {
			return terrylib_Help.NODIRECTION;
		} else if(y < (gamecontrol_Generator.tpoint.y | 0)) {
			return terrylib_Help.DOWN;
		} else {
			return terrylib_Help.UP;
		}
	} else if(y == (gamecontrol_Generator.tpoint.y | 0)) {
		if(x < (gamecontrol_Generator.tpoint.x | 0)) {
			return terrylib_Help.RIGHT;
		} else {
			return terrylib_Help.LEFT;
		}
	}
	return terrylib_Help.NODIRECTION;
};
gamecontrol_Generator.getintersectionpoint = function(x1,y1,dir1,x2,y2,dir2) {
	if(dir1 == terrylib_Help.clockwise(dir2) || dir1 == terrylib_Help.anticlockwise(dir2)) {
		if(dir1 == terrylib_Help.LEFT || dir1 == terrylib_Help.RIGHT) {
			gamecontrol_Generator.tpoint.setTo(x2,y1);
			if(gamecontrol_Generator.getdir(x1,y1) == dir1 && gamecontrol_Generator.getdir(x2,y2) == dir2) {
				return true;
			}
		} else if(dir1 == terrylib_Help.UP || dir1 == terrylib_Help.DOWN) {
			gamecontrol_Generator.tpoint.setTo(x1,y2);
			if(gamecontrol_Generator.getdir(x1,y1) == dir1 && gamecontrol_Generator.getdir(x2,y2) == dir2) {
				return true;
			}
		}
		return false;
	}
	return false;
};
gamecontrol_Generator.addline = function(x1,y1,x2,y2) {
	gamecontrol_Generator.lines[gamecontrol_Generator.numlines].setto(x1,y1,x2,y2);
	gamecontrol_Generator.numlines++;
};
gamecontrol_Generator.connectrooms = function(a,b) {
	if(!gamecontrol_Generator.rejectmap) {
		if(!gamecontrol_Generator.startconnections) {
			gamecontrol_Generator.updateastarmap();
			gamecontrol_Generator.startconnections = true;
		}
		if(gamecontrol_Generator.numrooms > b && gamecontrol_Generator.numrooms > a) {
			if(gamecontrol_Generator.roomoverlap_vertical(a,b)) {
				if(gamecontrol_Generator.rooms[a].x < gamecontrol_Generator.rooms[b].x) {
					gamecontrol_Generator.rooms[a].facing = terrylib_Help.RIGHT;
					gamecontrol_Generator.rooms[b].facing = terrylib_Help.LEFT;
				} else {
					gamecontrol_Generator.rooms[a].facing = terrylib_Help.LEFT;
					gamecontrol_Generator.rooms[b].facing = terrylib_Help.RIGHT;
				}
			} else if(gamecontrol_Generator.roomoverlap_horizontal(a,b)) {
				if(gamecontrol_Generator.rooms[a].y < gamecontrol_Generator.rooms[b].y) {
					gamecontrol_Generator.rooms[a].facing = terrylib_Help.DOWN;
					gamecontrol_Generator.rooms[b].facing = terrylib_Help.UP;
				} else {
					gamecontrol_Generator.rooms[a].facing = terrylib_Help.UP;
					gamecontrol_Generator.rooms[b].facing = terrylib_Help.DOWN;
				}
			} else if(gamecontrol_Generator.rooms[a].x < gamecontrol_Generator.rooms[b].x) {
				gamecontrol_Generator.rooms[a].facing = terrylib_Help.RIGHT;
				if(gamecontrol_Generator.rooms[a].y < gamecontrol_Generator.rooms[b].y) {
					gamecontrol_Generator.rooms[b].facing = terrylib_Help.UP;
				} else {
					gamecontrol_Generator.rooms[b].facing = terrylib_Help.DOWN;
				}
			} else {
				gamecontrol_Generator.rooms[a].facing = terrylib_Help.LEFT;
				if(gamecontrol_Generator.rooms[a].y < gamecontrol_Generator.rooms[b].y) {
					gamecontrol_Generator.rooms[b].facing = terrylib_Help.UP;
				} else {
					gamecontrol_Generator.rooms[b].facing = terrylib_Help.DOWN;
				}
			}
			gamecontrol_Generator.connecta = gamecontrol_Generator.rooms[a].getconnection(gamecontrol_Generator.rooms[a].facing);
			if(gamecontrol_Generator.connecta == -1) {
				gamecontrol_Generator.connecta = gamecontrol_Generator.rooms[a].getconnection();
			} else if(gamecontrol_Generator.rooms[a].connections[gamecontrol_Generator.connecta].dir != gamecontrol_Generator.rooms[a].facing) {
				gamecontrol_Generator.connecta = gamecontrol_Generator.rooms[a].getconnection();
			}
			if(gamecontrol_Generator.connecta == -1) {
				gamecontrol_Generator.rejectmap = true;
				return;
			}
			gamecontrol_Generator.tx1 = gamecontrol_Generator.rooms[a].connections[gamecontrol_Generator.connecta].x + gamecontrol_Generator.rooms[a].x;
			gamecontrol_Generator.ty1 = gamecontrol_Generator.rooms[a].connections[gamecontrol_Generator.connecta].y + gamecontrol_Generator.rooms[a].y;
			gamecontrol_Generator.connectb = gamecontrol_Generator.rooms[b].getconnection(gamecontrol_Generator.rooms[b].facing);
			if(gamecontrol_Generator.connectb == -1) {
				gamecontrol_Generator.connectb = gamecontrol_Generator.rooms[b].getconnection();
			} else if(gamecontrol_Generator.rooms[b].connections[gamecontrol_Generator.connectb].dir != gamecontrol_Generator.rooms[b].facing) {
				gamecontrol_Generator.connectb = gamecontrol_Generator.rooms[b].getconnection();
			}
			if(gamecontrol_Generator.connectb == -1) {
				gamecontrol_Generator.rejectmap = true;
				return;
			}
			gamecontrol_Generator.tx2 = gamecontrol_Generator.rooms[b].connections[gamecontrol_Generator.connectb].x + gamecontrol_Generator.rooms[b].x;
			gamecontrol_Generator.ty2 = gamecontrol_Generator.rooms[b].connections[gamecontrol_Generator.connectb].y + gamecontrol_Generator.rooms[b].y;
			terrylib_World.placetile(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Localworld.BACKGROUND);
			terrylib_World.placetile(gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Localworld.BACKGROUND);
			gamecontrol_Generator.numlines = 0;
			if(gamecontrol_Generator.getintersectionpoint(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.rooms[a].facing,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Generator.rooms[b].facing)) {
				gamecontrol_Generator.addline(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tpoint.x | 0,gamecontrol_Generator.tpoint.y | 0);
				gamecontrol_Generator.addline(gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Generator.tpoint.x | 0,gamecontrol_Generator.tpoint.y | 0);
			} else if(gamecontrol_Generator.rooms[a].facing == terrylib_Help.oppositedirection(gamecontrol_Generator.rooms[b].facing)) {
				if(gamecontrol_Generator.rooms[a].facing == terrylib_Help.LEFT || gamecontrol_Generator.rooms[a].facing == terrylib_Help.RIGHT) {
					gamecontrol_Generator.tr = (gamecontrol_Generator.tx1 + gamecontrol_Generator.tx2) / 2 | 0;
					gamecontrol_Generator.addline(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tr,gamecontrol_Generator.ty1);
					gamecontrol_Generator.addline(gamecontrol_Generator.tr,gamecontrol_Generator.ty1,gamecontrol_Generator.tr,gamecontrol_Generator.ty2);
					gamecontrol_Generator.addline(gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Generator.tr,gamecontrol_Generator.ty2);
				} else if(gamecontrol_Generator.rooms[a].facing == terrylib_Help.UP || gamecontrol_Generator.rooms[a].facing == terrylib_Help.DOWN) {
					gamecontrol_Generator.tr = (gamecontrol_Generator.ty1 + gamecontrol_Generator.ty2) / 2 | 0;
					gamecontrol_Generator.addline(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx1,gamecontrol_Generator.tr);
					gamecontrol_Generator.addline(gamecontrol_Generator.tx1,gamecontrol_Generator.tr,gamecontrol_Generator.tx2,gamecontrol_Generator.tr);
					gamecontrol_Generator.addline(gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Generator.tx2,gamecontrol_Generator.tr);
				}
			}
			if(gamecontrol_Generator.numlines > 0) {
				gamecontrol_Generator.tr = 0;
				var _g1 = 0;
				var _g = gamecontrol_Generator.numlines;
				while(_g1 < _g) {
					var i = _g1++;
					if(!gamecontrol_Generator.simpledrill(gamecontrol_Generator.lines[i].x1,gamecontrol_Generator.lines[i].y1,gamecontrol_Generator.lines[i].x2,gamecontrol_Generator.lines[i].y2,true)) {
						gamecontrol_Generator.tr = 1;
						gamecontrol_Generator.numlines = 0;
					}
				}
				if(gamecontrol_Generator.tr == 0) {
					var _g11 = 0;
					var _g2 = gamecontrol_Generator.numlines;
					while(_g11 < _g2) {
						var i1 = _g11++;
						gamecontrol_Generator.simpledrill(gamecontrol_Generator.lines[i1].x1,gamecontrol_Generator.lines[i1].y1,gamecontrol_Generator.lines[i1].x2,gamecontrol_Generator.lines[i1].y2);
					}
				}
			}
			if(gamecontrol_Generator.numlines == 0) {
				gamecontrol_Generator.pathfinddrill(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
			}
			gamecontrol_Generator.dustwalls();
			gamecontrol_Generator.rooms[a].connectto(a,b);
			if(gamecontrol_Generator.lockedtype == "A") {
				if(gamecontrol_Generator.rooms[a].doorodds == 3) {
					terrylib_World.placetile(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Localworld.CONSIDERLOCKEDEXIT_A);
				}
				if(gamecontrol_Generator.rooms[b].doorodds == 3) {
					terrylib_World.placetile(gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Localworld.CONSIDERLOCKEDEXIT_A);
				}
				gamecontrol_Generator.lockedtype = "B";
			} else if(gamecontrol_Generator.lockedtype == "B") {
				if(gamecontrol_Generator.rooms[a].doorodds == 3) {
					terrylib_World.placetile(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Localworld.CONSIDERLOCKEDEXIT_B);
				}
				if(gamecontrol_Generator.rooms[b].doorodds == 3) {
					terrylib_World.placetile(gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Localworld.CONSIDERLOCKEDEXIT_B);
				}
				gamecontrol_Generator.lockedtype = "A";
			}
			if(gamecontrol_Generator.rooms[a].doorodds == 1) {
				terrylib_World.placetile(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Localworld.CONSIDERLOCKEDDOOR);
			}
			if(gamecontrol_Generator.rooms[b].doorodds == 1) {
				terrylib_World.placetile(gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Localworld.CONSIDERLOCKEDDOOR);
			}
			if(gamecontrol_Generator.rooms[a].doorodds == 2) {
				if(1 + Math.floor(8 * terrylib_Rand.prandom()) == 1) {
					terrylib_World.placetile(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Localworld.DOOR);
				}
			}
			if(gamecontrol_Generator.rooms[b].doorodds == 2) {
				if(1 + Math.floor(8 * terrylib_Rand.prandom()) == 1) {
					terrylib_World.placetile(gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Localworld.DOOR);
				}
			}
		}
	}
};
gamecontrol_Generator.debugroomconnections = function(currenttime) {
	if(currenttime == null) {
		currenttime = "unknown time";
	}
	var _g1 = 0;
	var _g = gamecontrol_Generator.numrooms;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Generator.rooms[i].grounded) {
			haxe_Log.trace("   - IS GROUNDED",{ fileName : "Generator.hx", lineNumber : 788, className : "gamecontrol.Generator", methodName : "debugroomconnections"});
		}
		var _g3 = 0;
		var _g2 = gamecontrol_Generator.rooms[i].numconnectedrooms;
		while(_g3 < _g2) ++_g3;
	}
};
gamecontrol_Generator.connectall = function() {
	if(!gamecontrol_Generator.rejectmap) {
		gamecontrol_Generator.rooms[0].grounded = true;
		var _g1 = 0;
		var _g = gamecontrol_Generator.numrooms;
		while(_g1 < _g) {
			var i = _g1++;
			gamecontrol_Generator.tr = gamecontrol_Generator.closestroom_cutoff(i);
			if(gamecontrol_Generator.tr == -1) {
				if(gamecontrol_Generator.rooms[i].grounded) {
					gamecontrol_Generator.tr = gamecontrol_Generator.closestroom_ungrounded(i);
				} else {
					gamecontrol_Generator.tr = gamecontrol_Generator.closestroom_grounded(i);
				}
				if(gamecontrol_Generator.tr != -1) {
					gamecontrol_Generator.connectrooms(i,gamecontrol_Generator.tr);
				}
			} else {
				gamecontrol_Generator.connectrooms(i,gamecontrol_Generator.tr);
			}
		}
		var i1 = 0;
		while(i1 < gamecontrol_Generator.numrooms && !gamecontrol_Generator.allroomsgrounded()) {
			if(!gamecontrol_Generator.rooms[i1].grounded) {
				gamecontrol_Generator.tr = gamecontrol_Generator.closestroom_grounded(i1);
				if(gamecontrol_Generator.tr == -1) {
					gamecontrol_Generator.rejectmap = true;
				} else {
					gamecontrol_Generator.connectrooms(i1,gamecontrol_Generator.tr);
				}
			}
			i1 = (i1 + 1) % gamecontrol_Generator.numrooms;
		}
	}
};
gamecontrol_Generator.allroomsgrounded = function() {
	if(!gamecontrol_Generator.rejectmap) {
		var _g1 = 0;
		var _g = gamecontrol_Generator.numrooms;
		while(_g1 < _g) if(!gamecontrol_Generator.rooms[_g1++].grounded) {
			return false;
		}
	}
	return true;
};
gamecontrol_Generator.closestroom_getdist = function(x1,y1,x2,y2) {
	var xdist = Math.abs(x1 - x2) | 0;
	var ydist = Math.abs(y1 - y2) | 0;
	if(xdist > ydist) {
		return 14 * ydist + 10 * (xdist - ydist) | 0;
	}
	return 14 * xdist + 10 * (ydist - xdist) | 0;
};
gamecontrol_Generator.closestroom_getdist_straight = function(x1,y1,x2,y2) {
	return (Math.abs(x1 - x2) | 0) + (Math.abs(y1 - y2) | 0);
};
gamecontrol_Generator.closestroom_grounded = function(t) {
	gamecontrol_Generator.tx1 = gamecontrol_Generator.rooms[t].x + (gamecontrol_Generator.rooms[t].width / 2 | 0);
	gamecontrol_Generator.ty1 = gamecontrol_Generator.rooms[t].y + (gamecontrol_Generator.rooms[t].height / 2 | 0);
	var roomdist = -1;
	var currentdist;
	var closest = -1;
	var _g1 = 0;
	var _g = gamecontrol_Generator.numrooms;
	while(_g1 < _g) {
		var i = _g1++;
		if(i != t) {
			if(gamecontrol_Generator.rooms[i].grounded && !gamecontrol_Generator.rooms[i].isconnectedtoroom(t)) {
				gamecontrol_Generator.tx2 = gamecontrol_Generator.rooms[i].x + (gamecontrol_Generator.rooms[i].width / 2 | 0);
				gamecontrol_Generator.ty2 = gamecontrol_Generator.rooms[i].y + (gamecontrol_Generator.rooms[i].height / 2 | 0);
				currentdist = gamecontrol_Generator.closestroom_getdist(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
				if(currentdist < roomdist || roomdist == -1) {
					roomdist = currentdist;
					closest = i;
				}
			}
		}
	}
	return closest;
};
gamecontrol_Generator.closestroom_ungrounded = function(t) {
	gamecontrol_Generator.tx1 = gamecontrol_Generator.rooms[t].x + (gamecontrol_Generator.rooms[t].width / 2 | 0);
	gamecontrol_Generator.ty1 = gamecontrol_Generator.rooms[t].y + (gamecontrol_Generator.rooms[t].height / 2 | 0);
	var roomdist = -1;
	var currentdist;
	var closest = -1;
	var _g1 = 0;
	var _g = gamecontrol_Generator.numrooms;
	while(_g1 < _g) {
		var i = _g1++;
		if(i != t) {
			if(!gamecontrol_Generator.rooms[i].grounded && !gamecontrol_Generator.rooms[i].isconnectedtoroom(t)) {
				gamecontrol_Generator.tx2 = gamecontrol_Generator.rooms[i].x + (gamecontrol_Generator.rooms[i].width / 2 | 0);
				gamecontrol_Generator.ty2 = gamecontrol_Generator.rooms[i].y + (gamecontrol_Generator.rooms[i].height / 2 | 0);
				currentdist = gamecontrol_Generator.closestroom_getdist(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
				if(currentdist < roomdist || roomdist == -1) {
					roomdist = currentdist;
					closest = i;
				}
			}
		}
	}
	return closest;
};
gamecontrol_Generator.closestroom_cutoff = function(t) {
	gamecontrol_Generator.tx1 = gamecontrol_Generator.rooms[t].x + (gamecontrol_Generator.rooms[t].width / 2 | 0);
	gamecontrol_Generator.ty1 = gamecontrol_Generator.rooms[t].y + (gamecontrol_Generator.rooms[t].height / 2 | 0);
	var roomdist = -1;
	var currentdist;
	var closest = -1;
	var _g1 = 0;
	var _g = gamecontrol_Generator.numrooms;
	while(_g1 < _g) {
		var i = _g1++;
		if(i != t) {
			if(gamecontrol_Generator.rooms[i].numconnectedrooms == 0) {
				gamecontrol_Generator.tx2 = gamecontrol_Generator.rooms[i].x + (gamecontrol_Generator.rooms[i].width / 2 | 0);
				gamecontrol_Generator.ty2 = gamecontrol_Generator.rooms[i].y + (gamecontrol_Generator.rooms[i].height / 2 | 0);
				currentdist = gamecontrol_Generator.closestroom_getdist(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
				if(currentdist < roomdist || roomdist == -1) {
					roomdist = currentdist;
					closest = i;
				}
			}
		}
	}
	return closest;
};
gamecontrol_Generator.closestroom = function(t) {
	gamecontrol_Generator.tx1 = gamecontrol_Generator.rooms[t].x + (gamecontrol_Generator.rooms[t].width / 2 | 0);
	gamecontrol_Generator.ty1 = gamecontrol_Generator.rooms[t].y + (gamecontrol_Generator.rooms[t].height / 2 | 0);
	var roomdist = -1;
	var currentdist;
	var closest = -1;
	var _g1 = 0;
	var _g = gamecontrol_Generator.numrooms;
	while(_g1 < _g) {
		var i = _g1++;
		if(i != t) {
			gamecontrol_Generator.tx2 = gamecontrol_Generator.rooms[i].x + (gamecontrol_Generator.rooms[i].width / 2 | 0);
			gamecontrol_Generator.ty2 = gamecontrol_Generator.rooms[i].y + (gamecontrol_Generator.rooms[i].height / 2 | 0);
			currentdist = gamecontrol_Generator.closestroom_getdist(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
			if(currentdist < roomdist || roomdist == -1) {
				roomdist = currentdist;
				closest = i;
			}
		}
	}
	return closest;
};
gamecontrol_Generator.shiftleft = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth - 1;
		while(_g3 < _g2) {
			var i = _g3++;
			terrylib_World.placetile(i,j,terrylib_World.at(i + 1,j));
		}
	}
	var _g11 = 0;
	var _g4 = terrylib_World.mapheight;
	while(_g11 < _g4) terrylib_World.placetile(terrylib_World.mapwidth - 1,_g11++,gamecontrol_Localworld.BACKGROUND);
	var _g12 = 0;
	var _g5 = gamecontrol_Game.placement.length;
	while(_g12 < _g5) {
		var j1 = _g12++;
		var _g31 = 0;
		var _g21 = gamecontrol_Game.placement[j1].length;
		while(_g31 < _g21) gamecontrol_Game.placement[j1].shift(_g31++,-1,0);
	}
	gamecontrol_Generator.shift_thingstoplace(-1,0);
};
gamecontrol_Generator.shiftup = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapwidth;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapheight - 1;
		while(_g3 < _g2) {
			var j = _g3++;
			terrylib_World.placetile(i,j,terrylib_World.at(i,j + 1));
		}
	}
	var _g11 = 0;
	var _g4 = terrylib_World.mapwidth;
	while(_g11 < _g4) terrylib_World.placetile(_g11++,terrylib_World.mapheight - 1,gamecontrol_Localworld.BACKGROUND);
	var _g12 = 0;
	var _g5 = gamecontrol_Game.placement.length;
	while(_g12 < _g5) {
		var j1 = _g12++;
		var _g31 = 0;
		var _g21 = gamecontrol_Game.placement[j1].length;
		while(_g31 < _g21) gamecontrol_Game.placement[j1].shift(_g31++,0,-1);
	}
	gamecontrol_Generator.shift_thingstoplace(0,-1);
};
gamecontrol_Generator.shiftright = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var i = terrylib_World.mapwidth - 1;
		while(i > 0) {
			terrylib_World.placetile(i,j,terrylib_World.at(i - 1,j));
			--i;
		}
	}
	var _g11 = 0;
	var _g2 = terrylib_World.mapheight;
	while(_g11 < _g2) terrylib_World.placetile(0,_g11++,gamecontrol_Localworld.BACKGROUND);
	var _g12 = 0;
	var _g3 = gamecontrol_Game.placement.length;
	while(_g12 < _g3) {
		var j1 = _g12++;
		var _g31 = 0;
		var _g21 = gamecontrol_Game.placement[j1].length;
		while(_g31 < _g21) gamecontrol_Game.placement[j1].shift(_g31++,1,0);
	}
	gamecontrol_Generator.shift_thingstoplace(1,0);
};
gamecontrol_Generator.shiftdown = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapwidth;
	while(_g1 < _g) {
		var i = _g1++;
		var j = terrylib_World.mapheight - 1;
		while(j > 0) {
			terrylib_World.placetile(i,j,terrylib_World.at(i,j - 1));
			--j;
		}
	}
	var _g11 = 0;
	var _g2 = terrylib_World.mapwidth;
	while(_g11 < _g2) terrylib_World.placetile(_g11++,0,gamecontrol_Localworld.BACKGROUND);
	var _g12 = 0;
	var _g3 = gamecontrol_Game.placement.length;
	while(_g12 < _g3) {
		var j1 = _g12++;
		var _g31 = 0;
		var _g21 = gamecontrol_Game.placement[j1].length;
		while(_g31 < _g21) gamecontrol_Game.placement[j1].shift(_g31++,0,1);
	}
	gamecontrol_Generator.shift_thingstoplace(0,1);
};
gamecontrol_Generator.centermap = function() {
	if(!gamecontrol_Generator.rejectmap) {
		gamecontrol_Generator.tx1 = terrylib_World.mapwidth;
		gamecontrol_Generator.ty1 = terrylib_World.mapheight;
		gamecontrol_Generator.tx2 = -1;
		gamecontrol_Generator.ty2 = -1;
		var _g1 = 0;
		var _g = terrylib_World.mapheight;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = terrylib_World.mapwidth;
			while(_g3 < _g2) {
				var i = _g3++;
				if(terrylib_World.at(i,j) != gamecontrol_Localworld.BACKGROUND) {
					if(i < gamecontrol_Generator.tx1) {
						gamecontrol_Generator.tx1 = i;
					}
					if(j < gamecontrol_Generator.ty1) {
						gamecontrol_Generator.ty1 = j;
					}
					if(i > gamecontrol_Generator.tx2) {
						gamecontrol_Generator.tx2 = i;
					}
					if(j > gamecontrol_Generator.ty2) {
						gamecontrol_Generator.ty2 = j;
					}
				}
			}
		}
		gamecontrol_Generator.tx2 = terrylib_World.mapwidth - 1 - gamecontrol_Generator.tx2;
		gamecontrol_Generator.ty2 = terrylib_World.mapheight - 1 - gamecontrol_Generator.ty2;
		while(gamecontrol_Generator.tx1 - gamecontrol_Generator.tx2 > 2) {
			gamecontrol_Generator.shiftleft();
			gamecontrol_Generator.tx1--;
			gamecontrol_Generator.tx2++;
		}
		while(gamecontrol_Generator.tx1 - gamecontrol_Generator.tx2 < -2) {
			gamecontrol_Generator.shiftright();
			gamecontrol_Generator.tx1++;
			gamecontrol_Generator.tx2--;
		}
		while(gamecontrol_Generator.ty1 - gamecontrol_Generator.ty2 > 1) {
			gamecontrol_Generator.shiftup();
			gamecontrol_Generator.ty1--;
			gamecontrol_Generator.ty2++;
		}
		while(gamecontrol_Generator.ty1 - gamecontrol_Generator.ty2 < -1) {
			gamecontrol_Generator.shiftdown();
			gamecontrol_Generator.ty1++;
			gamecontrol_Generator.ty2--;
		}
	}
};
gamecontrol_Generator.dighole = function(x,y) {
	if(terrylib_Help.inbox(x,y,(terrylib_World.mapwidth / 2 | 0) - 10,(terrylib_World.mapheight / 2 | 0) - 5,(terrylib_World.mapwidth / 2 | 0) + 10,(terrylib_World.mapheight / 2 | 0) + 5)) {
		if(terrylib_World.at(x,y) != -100) {
			terrylib_World.placetile(x,y,-100);
			if(1 + Math.floor(2 * terrylib_Rand.prandom()) == 1) {
				gamecontrol_Generator.dighole(x,y - 1);
			}
			if(1 + Math.floor(2 * terrylib_Rand.prandom()) == 1) {
				gamecontrol_Generator.dighole(x,y + 1);
			}
			if(1 + Math.floor(2 * terrylib_Rand.prandom()) == 1) {
				gamecontrol_Generator.dighole(x - 1,y);
			}
			if(1 + Math.floor(2 * terrylib_Rand.prandom()) == 1) {
				gamecontrol_Generator.dighole(x + 1,y);
			}
		}
	}
};
gamecontrol_Generator.placeoutsidecrater = function() {
	var from = (terrylib_World.mapwidth / 2 | 0) - 10;
	gamecontrol_Generator.tx = from + Math.floor(((terrylib_World.mapwidth / 2 | 0) + 10 - from + 1) * terrylib_Rand.prandom());
	var from1 = (terrylib_World.mapheight / 2 | 0) - 5;
	gamecontrol_Generator.ty = from1 + Math.floor(((terrylib_World.mapheight / 2 | 0) + 5 - from1 + 1) * terrylib_Rand.prandom());
	gamecontrol_Generator.dighole(gamecontrol_Generator.tx,gamecontrol_Generator.ty);
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == -100) {
				if(terrylib_World.at(i,j - 1) != -100 && terrylib_World.at(i,j - 1) != gamecontrol_Localworld.OUTSIDE_EDGE && terrylib_World.at(i,j - 1) != gamecontrol_Localworld.OUTSIDE_ABYSS) {
					terrylib_World.placetile(i,j,gamecontrol_Localworld.OUTSIDE_EDGE);
				} else {
					terrylib_World.placetile(i,j,gamecontrol_Localworld.OUTSIDE_ABYSS);
				}
			}
		}
	}
};
gamecontrol_Generator.getrandompoint_awayfromedge = function() {
	gamecontrol_Generator.tx = 2 + Math.floor((terrylib_World.mapwidth - 3 - 2 + 1) * terrylib_Rand.prandom());
	gamecontrol_Generator.ty = 2 + Math.floor((terrylib_World.mapheight - 3 - 2 + 1) * terrylib_Rand.prandom());
};
gamecontrol_Generator.getrandompointin = function(x,y,w,h) {
	gamecontrol_Generator.tx = x + Math.floor((x + w - 1 - x + 1) * terrylib_Rand.prandom());
	gamecontrol_Generator.ty = y + Math.floor((y + h - 1 - y + 1) * terrylib_Rand.prandom());
};
gamecontrol_Generator.placedoorin = function(x,y,w,h,open) {
	if(open == null) {
		open = true;
	}
	if(terrylib_Rand.prandom() < 0.5) {
		var from = x + 2;
		gamecontrol_Generator.tx = from + Math.floor((x + w - 4 - from + 1) * terrylib_Rand.prandom());
		if(terrylib_Rand.prandom() < 0.5) {
			terrylib_World.placetile(gamecontrol_Generator.tx,y,open?gamecontrol_Localworld.OUTSIDE_GROUND:gamecontrol_Localworld.DOOR);
		} else {
			terrylib_World.placetile(gamecontrol_Generator.tx,y + h - 1,open?gamecontrol_Localworld.OUTSIDE_GROUND:gamecontrol_Localworld.DOOR);
		}
	} else {
		var from1 = y + 2;
		gamecontrol_Generator.ty = from1 + Math.floor((y + h - 4 - from1 + 1) * terrylib_Rand.prandom());
		if(terrylib_Rand.prandom() < 0.5) {
			terrylib_World.placetile(x,gamecontrol_Generator.ty,open?gamecontrol_Localworld.OUTSIDE_GROUND:gamecontrol_Localworld.DOOR);
		} else {
			terrylib_World.placetile(x + w - 1,gamecontrol_Generator.ty,open?gamecontrol_Localworld.OUTSIDE_GROUND:gamecontrol_Localworld.DOOR);
		}
	}
};
gamecontrol_Generator.placestairsin = function(x,y,w,h) {
	if(terrylib_Rand.prandom() < 0.5) {
		var from = x + 2;
		gamecontrol_Generator.tx = from + Math.floor((x + w - 4 - from + 1) * terrylib_Rand.prandom());
		if(terrylib_Rand.prandom() < 0.5) {
			terrylib_World.placetile(gamecontrol_Generator.tx,y,gamecontrol_Localworld.STAIRS);
		} else {
			terrylib_World.placetile(gamecontrol_Generator.tx,y + h - 1,gamecontrol_Localworld.STAIRS);
		}
	} else {
		var from1 = y + 2;
		gamecontrol_Generator.ty = from1 + Math.floor((y + h - 4 - from1 + 1) * terrylib_Rand.prandom());
		if(terrylib_Rand.prandom() < 0.5) {
			terrylib_World.placetile(x,gamecontrol_Generator.ty,gamecontrol_Localworld.STAIRS);
		} else {
			terrylib_World.placetile(x + w - 1,gamecontrol_Generator.ty,gamecontrol_Localworld.STAIRS);
		}
	}
};
gamecontrol_Generator.placeitemin = function(x,y,w,h,item) {
	var from = x + 1;
	gamecontrol_Generator.tx = from + Math.floor((x + w - 2 - from + 1) * terrylib_Rand.prandom());
	var from1 = y + 1;
	gamecontrol_Generator.ty = from1 + Math.floor((y + h - 2 - from1 + 1) * terrylib_Rand.prandom());
	if(item == "key") {
		terrylib_World.placetile(gamecontrol_Generator.tx,gamecontrol_Generator.ty,gamecontrol_Localworld.KEY);
	} else {
		terrylib_Obj.createentity(26,8,"item",item);
	}
};
gamecontrol_Generator.placeoutsideroom = function(roomtype) {
	switch(roomtype) {
	case "campgrounds":
		gamecontrol_Generator.tx1 = 10;
		gamecontrol_Generator.ty1 = 5;
		gamecontrol_Generator.tx2 = terrylib_World.mapwidth - 20;
		gamecontrol_Generator.ty2 = terrylib_World.mapheight - 10;
		var _g1 = gamecontrol_Generator.ty1 - 1;
		var _g = gamecontrol_Generator.ty1 + gamecontrol_Generator.ty2 + 2;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = gamecontrol_Generator.tx1 - 1;
			var _g2 = gamecontrol_Generator.tx1 + gamecontrol_Generator.tx2 + 2;
			while(_g3 < _g2) terrylib_World.placetile(_g3++,j,gamecontrol_Localworld.OUTSIDE_GROUND);
		}
		gamecontrol_Generator.placeactualroom_nochecks(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
		var _g11 = gamecontrol_Generator.ty1 + 1;
		var _g4 = gamecontrol_Generator.ty1 + gamecontrol_Generator.ty2 - 1;
		while(_g11 < _g4) {
			var j1 = _g11++;
			var _g31 = gamecontrol_Generator.tx1 + 1;
			var _g21 = gamecontrol_Generator.tx1 + gamecontrol_Generator.tx2 - 1;
			while(_g31 < _g21) terrylib_World.placetile(_g31++,j1,gamecontrol_Localworld.OUTSIDE_GROUND);
		}
		terrylib_World.placetile(10,11,gamecontrol_Localworld.OUTSIDE_GROUND);
		terrylib_World.placetile(26,5,gamecontrol_Localworld.OUTSIDE_GROUND);
		terrylib_World.placetile(26,13,gamecontrol_Localworld.OUTSIDE_GROUND);
		terrylib_World.placetile(21,8,gamecontrol_Localworld.OUTSIDE_GROUND);
		break;
	case "heistytower":
		gamecontrol_Generator.tx1 = 11;
		gamecontrol_Generator.ty1 = 4;
		gamecontrol_Generator.tx2 = 11;
		gamecontrol_Generator.ty2 = 10;
		var _g12 = gamecontrol_Generator.ty1 - 2;
		var _g5 = gamecontrol_Generator.ty1 + gamecontrol_Generator.ty2 + 4;
		while(_g12 < _g5) {
			var j2 = _g12++;
			var _g32 = gamecontrol_Generator.tx1 - 2;
			var _g22 = gamecontrol_Generator.tx1 + gamecontrol_Generator.tx2 + 4;
			while(_g32 < _g22) {
				var i = _g32++;
				if(Math.floor(101 * terrylib_Rand.prandom()) >= 66) {
					terrylib_World.placetile(i,j2,gamecontrol_Localworld.DEBRIS);
				} else {
					terrylib_World.placetile(i,j2,gamecontrol_Localworld.FLOOR);
				}
			}
		}
		gamecontrol_Generator.placeactualroom_nochecks(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Localworld.BACKGROUND);
		terrylib_World.placetile(16,13,gamecontrol_Localworld.STAIRS);
		break;
	case "pawnshop":
		gamecontrol_Generator.tx1 = 9;
		gamecontrol_Generator.ty1 = 4;
		gamecontrol_Generator.tx2 = 6;
		gamecontrol_Generator.ty2 = 5;
		gamecontrol_Generator.placeactualroom_nochecks(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Localworld.OUTSIDE_GROUND);
		var _g6 = 13;
		while(_g6 < 17) terrylib_World.placetile(_g6++ - 3,5,gamecontrol_Localworld.OUTSIDE_EDGE);
		terrylib_World.placetile(12,8,gamecontrol_Localworld.OUTSIDE_GROUND);
		break;
	case "storeroom":
		gamecontrol_Generator.tx1 = 20;
		gamecontrol_Generator.ty1 = 10;
		gamecontrol_Generator.tx2 = 9;
		gamecontrol_Generator.ty2 = 5;
		gamecontrol_Generator.placeactualroom_nochecks(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2,gamecontrol_Localworld.BACKGROUND);
		terrylib_World.placetile(24,10,gamecontrol_Localworld.STAIRS);
		break;
	}
};
gamecontrol_Generator.picktopfloorlayout = function() {
	switch(Math.floor(12 * terrylib_Rand.prandom())) {
	case 0:
		gamecontrol_Generator.topfloorlayout = [[2,4,3],[0,3,4],[3,4,3],[4,1,4]];
		break;
	case 1:
		gamecontrol_Generator.topfloorlayout = [[3,3,0],[4,4,3],[3,1,4],[4,2,4]];
		break;
	case 2:
		gamecontrol_Generator.topfloorlayout = [[3,2,4],[4,3,0],[1,4,3],[2,4,4]];
		break;
	case 3:
		gamecontrol_Generator.topfloorlayout = [[0,2,4],[2,4,3],[3,1,4],[4,2,4]];
		break;
	case 4:
		gamecontrol_Generator.topfloorlayout = [[0,2,4],[3,2,4],[4,3,3],[1,4,4]];
		break;
	case 5:
		gamecontrol_Generator.topfloorlayout = [[0,2,4],[2,4,3],[2,4,4],[1,2,4]];
		break;
	case 6:
		gamecontrol_Generator.topfloorlayout = [[2,4,0],[2,4,3],[2,4,4],[2,4,1]];
		break;
	case 7:
		gamecontrol_Generator.topfloorlayout = [[0,2,4],[2,4,3],[2,4,4],[1,2,4]];
		break;
	case 8:
		gamecontrol_Generator.topfloorlayout = [[0,2,4],[3,3,3],[4,4,4],[2,4,1]];
		break;
	case 9:
		gamecontrol_Generator.topfloorlayout = [[0,2,4],[2,4,3],[3,3,4],[4,4,1]];
		break;
	case 10:
		gamecontrol_Generator.topfloorlayout = [[3,0,3],[4,3,4],[3,4,3],[4,1,4]];
		break;
	case 11:
		gamecontrol_Generator.topfloorlayout = [[3,2,4],[4,1,3],[2,4,4],[0,2,4]];
		break;
	default:
		gamecontrol_Generator.topfloorlayout = [[3,0,3],[4,3,4],[3,4,3],[4,1,4]];
	}
};
gamecontrol_Generator.place2x2 = function(x,y,t) {
	terrylib_World.placetile(x,y,gamecontrol_Localworld.WALL);
	terrylib_World.placetile(x + 1,y,gamecontrol_Localworld.WALL);
	terrylib_World.placetile(x,y + 1,gamecontrol_Localworld.WALL);
	terrylib_World.placetile(x + 1,y + 1,gamecontrol_Localworld.WALL);
};
gamecontrol_Generator.useblueprint = function(roomtype) {
	gamecontrol_Generator.lastblueprint = roomtype;
	gamecontrol_Generator.lockedtype = "A";
	switch(roomtype) {
	case "big":
		gamecontrol_Generator.changemapsize(32,50);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.randomroom("exit");
		gamecontrol_Generator.randomroom("exit");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.randomroom("big");
		var _g = 0;
		while(_g < 4) {
			++_g;
			gamecontrol_Generator.randomroom("normal");
		}
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "cross":
		gamecontrol_Generator.changemapsize(32,30);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.place("exit",12,10);
		gamecontrol_Generator.place("big",1,10);
		gamecontrol_Generator.place("big",18,1);
		gamecontrol_Generator.place("big",36,10);
		gamecontrol_Generator.place("big",18,20);
		gamecontrol_Generator.place("exit",24,10);
		gamecontrol_Generator.connectrooms(1,2);
		gamecontrol_Generator.connectrooms(2,3);
		gamecontrol_Generator.connectrooms(3,4);
		gamecontrol_Generator.connectrooms(4,1);
		gamecontrol_Generator.connectrooms(0,1);
		gamecontrol_Generator.connectrooms(5,3);
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "firstfloor":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.randomroom("exit");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("exit");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "floor11":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.fillrect(0,0,32,19,gamecontrol_Localworld.WALL,gamecontrol_Localworld.WALL);
		gamecontrol_Generator.exactplace("shopfloor",7,3);
		break;
	case "high_big1":
		gamecontrol_Generator.changemapsize(32,50);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("high_ripple",10,5);
		gamecontrol_Generator.place("high_ripple",10,25);
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.place("high_ripple",10,25);
		} else {
			gamecontrol_Generator.randomroom("normal");
		}
		if(terrylib_Rand.prandom() < 0.05) {
			gamecontrol_Generator.randomroom("intro_ripple");
		} else {
			gamecontrol_Generator.randomroom("normal");
		}
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "high_big2":
		gamecontrol_Generator.changemapsize(32,50);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("high_ripple",10,5);
		gamecontrol_Generator.place("high_ripple",10,25);
		gamecontrol_Generator.place("high_ripple",10,25);
		gamecontrol_Generator.randomroom("intro_ripple");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "high_big3":
		gamecontrol_Generator.changemapsize(32,50);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("high_ripple",10,5);
		gamecontrol_Generator.place("high_ripple",10,25);
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.place("high_ripple",10,25);
		} else {
			gamecontrol_Generator.randomroom("normal");
		}
		if(terrylib_Rand.prandom() < 0.05) {
			gamecontrol_Generator.randomroom("intro_ripple");
		} else {
			gamecontrol_Generator.randomroom("normal");
		}
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "high_medium1":
		gamecontrol_Generator.changemapsize(32,36);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("high_ripple",10,5);
		gamecontrol_Generator.place("high_ripple",10,25);
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "high_medium2":
		gamecontrol_Generator.changemapsize(32,36);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("high_ripple",10,5);
		gamecontrol_Generator.place("high_ripple",10,25);
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "high_medium3":
		gamecontrol_Generator.changemapsize(32,36);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("high_ripple",10,5);
		gamecontrol_Generator.place("high_ripple",10,25);
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "high_topfloor":
		gamecontrol_Generator.changemapsize(32,38);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.fillrect(0,0,32,38,gamecontrol_Localworld.WALL,gamecontrol_Localworld.FLOOR);
		gamecontrol_Generator.picktopfloorlayout();
		var _g1 = 0;
		while(_g1 < 3) {
			var i = _g1++;
			var _g11 = 0;
			while(_g11 < 4) {
				var j = _g11++;
				var r = gamecontrol_Generator.topfloorlayout[j][i];
				if(r == 0) {
					gamecontrol_Generator.exactplace("high_topfloor_exit",3 + i * 9,2 + j * 9);
				} else if(r == 1) {
					gamecontrol_Generator.exactplace("high_topfloor_kingpin",3 + i * 9,2 + j * 9);
				} else if(r == 2) {
					gamecontrol_Generator.exactplace("high_topfloor_long",3 + i * 9,2 + j * 9);
				} else if(r == 3) {
					gamecontrol_Generator.exactplace("high_topfloor_tall",3 + i * 9,2 + j * 9);
				}
			}
		}
		break;
	case "intro_firstfloor":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.roughplace("exit","tl");
		gamecontrol_Generator.place("exit",25,14);
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "intro_small":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("intro_ripple",10,5);
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "intro_small2":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("intro_ripple",10,5);
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "intro_small3":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		if(terrylib_Rand.prandom() < 0.5) {
			gamecontrol_Generator.roughplace("exit","tl");
			gamecontrol_Generator.place("exit",25,14);
		} else {
			gamecontrol_Generator.place("exit",25,1);
			gamecontrol_Generator.place("exit",3,14);
		}
		gamecontrol_Generator.place("intro_ripple",10,5);
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "intro_topfloor":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.fillrect(0,0,32,19,gamecontrol_Localworld.WALL,gamecontrol_Localworld.FLOOR);
		gamecontrol_Generator.exactplace("intro_topfloor_exit",3,2);
		gamecontrol_Generator.exactplace("intro_topfloor",12,2);
		gamecontrol_Generator.exactplace("intro_topfloor",21,2);
		gamecontrol_Generator.exactplace("intro_topfloor",3,11);
		gamecontrol_Generator.exactplace("intro_topfloor",12,11);
		gamecontrol_Generator.exactplace("intro_topfloor_kingpin",21,11);
		gamecontrol_Generator.addwalls();
		break;
	case "medium":
		gamecontrol_Generator.changemapsize(32,30);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.randomroom("exit");
		gamecontrol_Generator.randomroom("exit");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "robot_firstfloor":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.exactplace("robot_normal",1,1);
		gamecontrol_Generator.exactplace("robot_exit",13,3);
		gamecontrol_Generator.exactplace("robot_ripple",22,1);
		gamecontrol_Generator.exactplace("robot_bottomright",22,11);
		gamecontrol_Generator.exactplace("robot_exit",13,10);
		gamecontrol_Generator.exactplace("robot_ripple",1,11);
		gamecontrol_Generator.connectrooms(0,1);
		gamecontrol_Generator.connectrooms(1,2);
		gamecontrol_Generator.connectrooms(2,3);
		gamecontrol_Generator.connectrooms(3,4);
		gamecontrol_Generator.connectrooms(4,5);
		gamecontrol_Generator.connectrooms(5,0);
		gamecontrol_Generator.addwalls();
		break;
	case "robot_large":
		gamecontrol_Generator.changemapsize(32,40);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.exactplace("robot_normal",1,1);
		gamecontrol_Generator.exactplace("robot_exit",13,3);
		gamecontrol_Generator.exactplace("robot_ripple",22,1);
		gamecontrol_Generator.exactplace("robot_ripple",1,11);
		gamecontrol_Generator.exactplace("robot_connection",13,10);
		gamecontrol_Generator.exactplace("robot_normal",22,11);
		gamecontrol_Generator.exactplace("robot_normal",1,21);
		gamecontrol_Generator.exactplace("robot_connection",13,20);
		gamecontrol_Generator.exactplace("robot_ripple",22,21);
		gamecontrol_Generator.exactplace("robot_ripple",1,31);
		gamecontrol_Generator.exactplace("robot_exit",13,30);
		gamecontrol_Generator.exactplace("robot_bottomright",22,31);
		gamecontrol_Generator.connectrooms(0,1);
		gamecontrol_Generator.connectrooms(1,2);
		gamecontrol_Generator.connectrooms(2,5);
		gamecontrol_Generator.connectrooms(0,3);
		gamecontrol_Generator.connectrooms(3,4);
		gamecontrol_Generator.connectrooms(4,5);
		gamecontrol_Generator.connectrooms(3,6);
		gamecontrol_Generator.connectrooms(5,8);
		gamecontrol_Generator.connectrooms(6,7);
		gamecontrol_Generator.connectrooms(7,8);
		gamecontrol_Generator.connectrooms(6,9);
		gamecontrol_Generator.connectrooms(8,11);
		gamecontrol_Generator.connectrooms(9,10);
		gamecontrol_Generator.connectrooms(10,11);
		gamecontrol_Generator.addwalls();
		break;
	case "robot_small":
		gamecontrol_Generator.changemapsize(32,30);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.exactplace("robot_normal",1,1);
		gamecontrol_Generator.exactplace("robot_exit",13,3);
		gamecontrol_Generator.exactplace("robot_ripple",22,1);
		gamecontrol_Generator.exactplace("robot_normal",1,11);
		gamecontrol_Generator.exactplace("robot_connection",13,10);
		gamecontrol_Generator.exactplace("robot_normal",22,11);
		gamecontrol_Generator.exactplace("robot_ripple",1,21);
		gamecontrol_Generator.exactplace("robot_exit",13,20);
		gamecontrol_Generator.exactplace("robot_bottomright",22,21);
		gamecontrol_Generator.connectrooms(0,1);
		gamecontrol_Generator.connectrooms(1,2);
		gamecontrol_Generator.connectrooms(2,5);
		gamecontrol_Generator.connectrooms(0,3);
		gamecontrol_Generator.connectrooms(3,4);
		gamecontrol_Generator.connectrooms(4,5);
		gamecontrol_Generator.connectrooms(3,6);
		gamecontrol_Generator.connectrooms(5,8);
		gamecontrol_Generator.connectrooms(6,7);
		gamecontrol_Generator.connectrooms(7,8);
		gamecontrol_Generator.addwalls();
		break;
	case "robot_topfloor":
		gamecontrol_Generator.changemapsize(32,80);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.exactplace("robot_topfloor_kingpin",12,5);
		gamecontrol_Generator.exactplace("robot_topfloor_ripple",12,14);
		gamecontrol_Generator.exactplace("robot_topfloor_alt",12,23);
		gamecontrol_Generator.exactplace("robot_topfloor_middle",12,32);
		gamecontrol_Generator.exactplace("robot_topfloor_ripple",12,41);
		gamecontrol_Generator.exactplace("robot_topfloor_alt",12,50);
		gamecontrol_Generator.exactplace("robot_topfloor_exit",12,59);
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "rooftop":
		gamecontrol_Generator.changemapsize(77,77);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.fillrect(6,6,65,65,gamecontrol_Localworld.WALL,gamecontrol_Localworld.FLOOR);
		gamecontrol_Generator.fillrect(6,66,65,11,gamecontrol_Localworld.ROOFSIDE,gamecontrol_Localworld.ROOFSIDE);
		var _g2 = 0;
		while(_g2 < 77) {
			var j1 = _g2++;
			var _g12 = 0;
			while(_g12 < 77) {
				var i1 = _g12++;
				if(terrylib_World.at(i1,j1) == gamecontrol_Localworld.BACKGROUND) {
					if(haxegon_Random.rare()) {
						terrylib_World.placetile(i1,j1,gamecontrol_Localworld.ROOFSTARS);
					} else {
						terrylib_World.placetile(i1,j1,gamecontrol_Localworld.ROOFBACKGROUND);
					}
				}
			}
		}
		var _g3 = 0;
		while(_g3 < 20) {
			var j2 = _g3++;
			gamecontrol_Generator.place2x2(25,9 + j2 * 3,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(28,9 + j2 * 3,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(47,9 + j2 * 3,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(50,9 + j2 * 3,gamecontrol_Localworld.WALL);
		}
		var _g4 = 0;
		while(_g4 < 5) {
			var i2 = _g4++;
			gamecontrol_Generator.place2x2(9 + i2 * 3,25,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(9 + i2 * 3,28,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(9 + i2 * 3,47,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(9 + i2 * 3,50,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(32 + i2 * 3,25,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(32 + i2 * 3,28,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(32 + i2 * 3,47,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(32 + i2 * 3,50,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(53 + i2 * 3,25,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(53 + i2 * 3,28,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(53 + i2 * 3,47,gamecontrol_Localworld.WALL);
			gamecontrol_Generator.place2x2(53 + i2 * 3,50,gamecontrol_Localworld.WALL);
		}
		gamecontrol_Generator.exactplace("rooftop_exit",31,31);
		var roomlist = [];
		var _g5 = 0;
		while(_g5 < 7) {
			++_g5;
			roomlist.push("rooftop_ripple");
		}
		roomlist.push("rooftop_gemroom");
		terrylib_Rand.pshuffle(roomlist);
		gamecontrol_Generator.exactplace(roomlist.pop(),9,9);
		gamecontrol_Generator.exactplace(roomlist.pop(),31,9);
		gamecontrol_Generator.exactplace(roomlist.pop(),53,9);
		gamecontrol_Generator.exactplace(roomlist.pop(),9,31);
		gamecontrol_Generator.exactplace(roomlist.pop(),53,31);
		gamecontrol_Generator.exactplace(roomlist.pop(),9,53);
		gamecontrol_Generator.exactplace(roomlist.pop(),31,53);
		gamecontrol_Generator.exactplace(roomlist.pop(),53,53);
		break;
	case "simpleempty":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.roughplace("exit","tl");
		gamecontrol_Generator.place("exit",25,14);
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.randomroom("normal");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "small":
		gamecontrol_Generator.changemapsize(32,19);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.randomroom("big");
		gamecontrol_Generator.randomroom("exit");
		gamecontrol_Generator.randomroom("exit");
		gamecontrol_Generator.connectall();
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	case "square":
		gamecontrol_Generator.changemapsize(32,30);
		gamecontrol_Generator.clearrooms();
		gamecontrol_Generator.place("exit",12,10);
		gamecontrol_Generator.place("big",1,1);
		gamecontrol_Generator.place("big",36,1);
		gamecontrol_Generator.place("big",36,20);
		gamecontrol_Generator.place("big",1,20);
		gamecontrol_Generator.place("exit",24,10);
		gamecontrol_Generator.connectrooms(1,2);
		gamecontrol_Generator.connectrooms(2,3);
		gamecontrol_Generator.connectrooms(3,4);
		gamecontrol_Generator.connectrooms(4,1);
		gamecontrol_Generator.connectrooms(0,1);
		gamecontrol_Generator.connectrooms(5,3);
		gamecontrol_Generator.centermap();
		gamecontrol_Generator.addwalls();
		break;
	default:
	}
};
gamecontrol_Generator.setup_randomplacementlist = function() {
	terrylib_Astar.changemapsize(terrylib_World.mapwidth,terrylib_World.mapheight);
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.FLOOR) {
				terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 0;
			} else {
				terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 1;
			}
			if(i == 0 || j == 0 || i >= terrylib_World.mapwidth - 1 || j >= terrylib_World.mapheight - 1) {
				terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 1;
			}
		}
	}
	var _g11 = 0;
	var _g4 = gamecontrol_Generator.numrooms;
	while(_g11 < _g4) {
		var k = _g11++;
		if(terrylib_Help.isinstring(gamecontrol_Generator.rooms[k].category,"exit") || terrylib_Help.isinstring(gamecontrol_Generator.rooms[k].category,"ripple") || terrylib_Help.isinstring(gamecontrol_Generator.rooms[k].category,"kingpin")) {
			var _g31 = 0;
			var _g21 = gamecontrol_Generator.rooms[k].height;
			while(_g31 < _g21) {
				var j1 = _g31++;
				var _g5 = 0;
				var _g41 = gamecontrol_Generator.rooms[k].width;
				while(_g5 < _g41) terrylib_Astar.contents[gamecontrol_Generator.rooms[k].x + _g5++ + terrylib_Astar.vmult[gamecontrol_Generator.rooms[k].y + j1]] = 1;
			}
		}
	}
	terrylib_Astar.oln = 0;
	var _g12 = 0;
	var _g6 = terrylib_World.mapheight;
	while(_g12 < _g6) {
		var j2 = _g12++;
		var _g32 = 0;
		var _g22 = terrylib_World.mapwidth;
		while(_g32 < _g22) {
			var i1 = _g32++;
			if(terrylib_Astar.contents[i1 + terrylib_Astar.vmult[j2]] == 0) {
				terrylib_Astar.fcost[terrylib_Astar.oln] = i1;
				terrylib_Astar.gcost[terrylib_Astar.oln] = j2;
				terrylib_Astar.oln++;
			}
		}
	}
};
gamecontrol_Generator.generateroom = function(name) {
	gamecontrol_Game.currentblueprint = name;
	gamecontrol_Generator.generate("indoors");
};
gamecontrol_Generator.generate = function(s,regenerate) {
	if(regenerate == null) {
		regenerate = false;
	}
	gamecontrol_Generator.rejectmap = false;
	gamecontrol_Generator.startconnections = false;
	if(!regenerate) {
		gamecontrol_Generator.numrejections = 0;
	}
	if(gamecontrol_Generator.numrejections > 0) {
		terrylib_Rand.setseed(terrylib_Rand.seed + gamecontrol_Generator.numrejections);
	}
	terrylib_World.tileset = "terminal";
	gamecontrol_Draw.screentilewidth = haxegon_Gfx.screenwidth / 12 | 0;
	gamecontrol_Draw.screentileheight = haxegon_Gfx.screenheight / 12 | 0;
	gamecontrol_Generator.treasuredrops = 3;
	var _g1 = 0;
	var _g = gamecontrol_Game.placement.length;
	while(_g1 < _g) gamecontrol_Game.placement[_g1++].clear();
	gamecontrol_Generator.clearthingstoplace();
	gamecontrol_Localworld.clearfire();
	switch(s) {
	case "indoors":
		gamecontrol_Generator.useblueprint(gamecontrol_Game.currentblueprint);
		gamecontrol_Generator.setup_randomplacementlist();
		gamecontrol_Generator.placethethings();
		break;
	case "outside_boundary":
		gamecontrol_Generator.changemapsize(32,19);
		var _g11 = 0;
		var _g2 = terrylib_World.mapheight;
		while(_g11 < _g2) {
			var j = _g11++;
			var _g3 = 0;
			var _g21 = terrylib_World.mapwidth;
			while(_g3 < _g21) {
				var i = _g3++;
				if(Math.floor(101 * terrylib_Rand.prandom()) > 90) {
					terrylib_World.placetile(i,j,gamecontrol_Localworld.WALL);
				} else {
					terrylib_World.placetile(i,j,gamecontrol_Localworld.OUTSIDE_GROUND);
				}
			}
		}
		if(gamecontrol_Openworld.worldx == 0) {
			var _g12 = 0;
			var _g4 = terrylib_World.mapheight;
			while(_g12 < _g4) {
				var j1 = _g12++;
				gamecontrol_Generator.tx = 3 + Math.floor(3 * terrylib_Rand.prandom());
				var _g31 = 0;
				var _g22 = gamecontrol_Generator.tx;
				while(_g31 < _g22) terrylib_World.placetile(_g31++,j1,gamecontrol_Localworld.WALL);
			}
		} else if(gamecontrol_Openworld.worldx == gamecontrol_Openworld.worldwidth - 1) {
			var _g13 = 0;
			var _g5 = terrylib_World.mapheight;
			while(_g13 < _g5) {
				var j2 = _g13++;
				gamecontrol_Generator.tx = 3 + Math.floor(3 * terrylib_Rand.prandom());
				var _g32 = 0;
				var _g23 = gamecontrol_Generator.tx;
				while(_g32 < _g23) terrylib_World.placetile(terrylib_World.mapwidth - 1 - _g32++,j2,gamecontrol_Localworld.WALL);
			}
		}
		if(gamecontrol_Openworld.worldy == 0) {
			var _g14 = 0;
			var _g6 = terrylib_World.mapwidth;
			while(_g14 < _g6) {
				var i1 = _g14++;
				gamecontrol_Generator.ty = 3 + Math.floor(3 * terrylib_Rand.prandom());
				var _g33 = 0;
				var _g24 = gamecontrol_Generator.ty;
				while(_g33 < _g24) terrylib_World.placetile(i1,_g33++,gamecontrol_Localworld.WALL);
			}
		} else if(gamecontrol_Openworld.worldy == gamecontrol_Openworld.worldheight - 1) {
			var _g15 = 0;
			var _g7 = terrylib_World.mapwidth;
			while(_g15 < _g7) {
				var i2 = _g15++;
				gamecontrol_Generator.ty = 3 + Math.floor(3 * terrylib_Rand.prandom());
				var _g34 = 0;
				var _g25 = gamecontrol_Generator.ty;
				while(_g34 < _g25) terrylib_World.placetile(i2,terrylib_World.mapheight - 1 - _g34++,gamecontrol_Localworld.WALL);
			}
		}
		break;
	case "outside_building":
		gamecontrol_Generator.changemapsize(32,19);
		var _g16 = 0;
		var _g8 = terrylib_World.mapheight;
		while(_g16 < _g8) {
			var j3 = _g16++;
			var _g35 = 0;
			var _g26 = terrylib_World.mapwidth;
			while(_g35 < _g26) {
				var i3 = _g35++;
				if(Math.floor(101 * terrylib_Rand.prandom()) > 90) {
					terrylib_World.placetile(i3,j3,gamecontrol_Localworld.WALL);
				} else {
					terrylib_World.placetile(i3,j3,gamecontrol_Localworld.OUTSIDE_GROUND);
				}
			}
		}
		gamecontrol_Generator.tx1 = 3 + Math.floor((terrylib_World.mapwidth - 1 - 18 - 3 + 1) * terrylib_Rand.prandom());
		gamecontrol_Generator.ty1 = 3 + Math.floor((terrylib_World.mapheight - 1 - 14 - 3 + 1) * terrylib_Rand.prandom());
		gamecontrol_Generator.tx2 = 12 + Math.floor(4 * terrylib_Rand.prandom());
		gamecontrol_Generator.ty2 = 8 + Math.floor(4 * terrylib_Rand.prandom());
		var _g17 = gamecontrol_Generator.ty1 - 1;
		var _g9 = gamecontrol_Generator.ty1 + gamecontrol_Generator.ty2 + 2;
		while(_g17 < _g9) {
			var j4 = _g17++;
			var _g36 = gamecontrol_Generator.tx1 - 1;
			var _g27 = gamecontrol_Generator.tx1 + gamecontrol_Generator.tx2 + 2;
			while(_g36 < _g27) terrylib_World.placetile(_g36++,j4,gamecontrol_Localworld.OUTSIDE_GROUND);
		}
		gamecontrol_Generator.placeactualroom_nochecks(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
		var _g18 = gamecontrol_Generator.ty1 + 1;
		var _g10 = gamecontrol_Generator.ty1 + gamecontrol_Generator.ty2 - 1;
		while(_g18 < _g10) {
			var j5 = _g18++;
			var _g37 = gamecontrol_Generator.tx1 + 1;
			var _g28 = gamecontrol_Generator.tx1 + gamecontrol_Generator.tx2 - 1;
			while(_g37 < _g28) terrylib_World.placetile(_g37++,j5,gamecontrol_Localworld.OUTSIDE_ABYSS);
		}
		gamecontrol_Generator.placestairsin(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
		break;
	case "outside_camp":
		gamecontrol_Generator.changemapsize(32,19);
		var _g19 = 0;
		var _g20 = terrylib_World.mapheight;
		while(_g19 < _g20) {
			var j6 = _g19++;
			var _g38 = 0;
			var _g29 = terrylib_World.mapwidth;
			while(_g38 < _g29) {
				var i4 = _g38++;
				if(Math.floor(101 * terrylib_Rand.prandom()) > 90) {
					terrylib_World.placetile(i4,j6,gamecontrol_Localworld.WALL);
				} else {
					terrylib_World.placetile(i4,j6,gamecontrol_Localworld.OUTSIDE_GROUND);
				}
			}
		}
		gamecontrol_Generator.placeoutsideroom("campgrounds");
		gamecontrol_Generator.placeoutsideroom("pawnshop");
		gamecontrol_Generator.placeoutsideroom("storeroom");
		break;
	case "outside_river":
		gamecontrol_Generator.changemapsize(32,19);
		var _g110 = 0;
		var _g30 = terrylib_World.mapheight;
		while(_g110 < _g30) {
			var j7 = _g110++;
			var _g39 = 0;
			var _g210 = terrylib_World.mapwidth;
			while(_g39 < _g210) {
				var i5 = _g39++;
				if(Math.floor(101 * terrylib_Rand.prandom()) > 90) {
					terrylib_World.placetile(i5,j7,gamecontrol_Localworld.WALL);
				} else {
					terrylib_World.placetile(i5,j7,gamecontrol_Localworld.OUTSIDE_GROUND);
				}
				gamecontrol_Localworld.startfire(i5,j7);
			}
		}
		break;
	case "outside_ruin":
		gamecontrol_Generator.changemapsize(32,19);
		var _g111 = 0;
		var _g40 = terrylib_World.mapheight;
		while(_g111 < _g40) {
			var j8 = _g111++;
			var _g310 = 0;
			var _g211 = terrylib_World.mapwidth;
			while(_g310 < _g211) {
				var i6 = _g310++;
				if(Math.floor(101 * terrylib_Rand.prandom()) > 90) {
					terrylib_World.placetile(i6,j8,gamecontrol_Localworld.WALL);
				} else {
					terrylib_World.placetile(i6,j8,gamecontrol_Localworld.FLOOR);
				}
			}
		}
		gamecontrol_Generator.tpoint.setTo(-1,-1);
		if(Math.floor(101 * terrylib_Rand.prandom()) > 90) {
			gamecontrol_Generator.placeoutsidecrater();
			if(Math.floor(101 * terrylib_Rand.prandom()) > 90) {
				gamecontrol_Generator.placeoutsidecrater();
			}
		} else if(Math.floor(101 * terrylib_Rand.prandom()) > 75) {
			gamecontrol_Generator.tx1 = 3 + Math.floor((terrylib_World.mapwidth - 1 - 14 - 3 + 1) * terrylib_Rand.prandom());
			gamecontrol_Generator.ty1 = 3 + Math.floor((terrylib_World.mapheight - 1 - 13 - 3 + 1) * terrylib_Rand.prandom());
			gamecontrol_Generator.tx2 = 7 + Math.floor(6 * terrylib_Rand.prandom());
			gamecontrol_Generator.ty2 = 7 + Math.floor(4 * terrylib_Rand.prandom());
			var _g112 = gamecontrol_Generator.ty1 - 1;
			var _g41 = gamecontrol_Generator.ty1 + gamecontrol_Generator.ty2 + 2;
			while(_g112 < _g41) {
				var j9 = _g112++;
				var _g311 = gamecontrol_Generator.tx1 - 1;
				var _g212 = gamecontrol_Generator.tx1 + gamecontrol_Generator.tx2 + 2;
				while(_g311 < _g212) terrylib_World.placetile(_g311++,j9,gamecontrol_Localworld.FLOOR);
			}
			gamecontrol_Generator.placeactualroom_nochecks(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
			gamecontrol_Generator.placedoorin(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
			gamecontrol_Generator.getrandompointin(gamecontrol_Generator.tx1 + 1,gamecontrol_Generator.ty1 + 1,gamecontrol_Generator.tx2 - 2,gamecontrol_Generator.ty2 - 2);
			terrylib_Obj.createentity(gamecontrol_Generator.tx,gamecontrol_Generator.ty,"item",terrylib_Rand.ppickstring("Fire Extinguisher","matchstick","Ice Cube"));
		}
		break;
	case "wasteland":
		gamecontrol_Generator.changemapsize(32,19);
		var _g113 = 0;
		var _g42 = terrylib_World.mapheight;
		while(_g113 < _g42) {
			var j10 = _g113++;
			var _g312 = 0;
			var _g213 = terrylib_World.mapwidth;
			while(_g312 < _g213) {
				var i7 = _g312++;
				terrylib_World.placetile(i7,j10,Math.floor((gamecontrol_Localworld.numworldblocks - 1 + 1) * terrylib_Rand.prandom()));
				while(terrylib_World.at(i7,j10) == gamecontrol_Localworld.STAIRS || terrylib_World.at(i7,j10) == gamecontrol_Localworld.KEY) terrylib_World.placetile(i7,j10,Math.floor((gamecontrol_Localworld.numworldblocks - 1 + 1) * terrylib_Rand.prandom()));
			}
		}
		break;
	}
	if(gamecontrol_Generator.rejectmap) {
		gamecontrol_Generator.numrejections++;
		gamecontrol_Generator.generate(s,true);
	}
};
var gamecontrol_Inventory = function() { };
$hxClasses["gamecontrol.Inventory"] = gamecontrol_Inventory;
gamecontrol_Inventory.__name__ = ["gamecontrol","Inventory"];
gamecontrol_Inventory.init = function() {
	gamecontrol_Inventory.totalitems = 100;
	var _g1 = 0;
	var _g = gamecontrol_Inventory.totalitems;
	while(_g1 < _g) {
		gamecontrol_Inventory.itemlist.push(new gamecontrol_Itemclass(_g1++));
		gamecontrol_Inventory.inventory.push(0);
		gamecontrol_Inventory.inventory_count.push(0);
	}
	gamecontrol_Inventory.numitems = 0;
	gamecontrol_Inventory.changedequippedweapon = false;
	gamecontrol_Inventory.changedequippedgadget = false;
	gamecontrol_Inventory.changedequippedarmor = false;
};
gamecontrol_Inventory.getinventorynum = function(t) {
	t = t.toLowerCase();
	var _g1 = 0;
	var _g = gamecontrol_Inventory.numitems;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].name.toLowerCase() == t) {
			return gamecontrol_Inventory.inventory[i];
		}
	}
	return -1;
};
gamecontrol_Inventory.getitemlistnum = function(t) {
	t = t.toLowerCase();
	var _g1 = 0;
	var _g = gamecontrol_Inventory.totalitems;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Inventory.itemlist[i].name.toLowerCase() == t) {
			return i;
		}
	}
	return -1;
};
gamecontrol_Inventory.getitemlistnumfromletter = function(t) {
	t = t.toLowerCase();
	var _g1 = 0;
	var _g = gamecontrol_Inventory.totalitems;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Inventory.itemlist[i].letter.toLowerCase() == t) {
			return i;
		}
	}
	return -1;
};
gamecontrol_Inventory.getitemlistcharacter = function(t) {
	var i = gamecontrol_Inventory.getitemlistnum(t);
	if(i > -1) {
		return gamecontrol_Inventory.itemlist[i].character;
	}
	return "?";
};
gamecontrol_Inventory.getitemlistamount = function(t) {
	var i = gamecontrol_Inventory.getitemlistnum(t);
	if(i > -1) {
		return gamecontrol_Inventory.itemlist[i].typical;
	}
	return 1;
};
gamecontrol_Inventory.sortinventory = function() {
	var changed = false;
	while(!changed) {
		changed = true;
		var _g1 = 0;
		var _g = gamecontrol_Inventory.numitems - 1;
		while(_g1 < _g) {
			var j = _g1++;
			if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[j]].type > gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[j + 1]].type) {
				var tmp = gamecontrol_Inventory.inventory[j];
				gamecontrol_Inventory.inventory[j] = gamecontrol_Inventory.inventory[j + 1];
				gamecontrol_Inventory.inventory[j + 1] = tmp;
				tmp = gamecontrol_Inventory.inventory_count[j];
				gamecontrol_Inventory.inventory_count[j] = gamecontrol_Inventory.inventory_count[j + 1];
				gamecontrol_Inventory.inventory_count[j + 1] = tmp;
				changed = false;
			}
		}
	}
};
gamecontrol_Inventory.setequippedweapon = function(t,showalert) {
	if(showalert == null) {
		showalert = true;
	}
	t = t.toLowerCase();
	gamecontrol_Inventory.oldequippedweapon = gamecontrol_Inventory.equippedweapon;
	gamecontrol_Inventory.equippedweapon = -1;
	if(t == "none") {
		gamecontrol_Inventory.equippedweapon = -1;
	}
	var _g1 = 0;
	var _g = gamecontrol_Inventory.numitems;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].name.toLowerCase() == t) {
			gamecontrol_Inventory.equippedweapon = gamecontrol_Inventory.inventory[i];
		}
	}
	if(gamecontrol_Inventory.equippedweapon != -1 && gamecontrol_Inventory.equippedweapon != gamecontrol_Inventory.oldequippedweapon && showalert) {
		gamecontrol_Inventory.changedequippedweapon = true;
	}
};
gamecontrol_Inventory.setequippedgadget = function(t,showalert) {
	if(showalert == null) {
		showalert = true;
	}
	t = t.toLowerCase();
	gamecontrol_Inventory.oldequippedgadget = gamecontrol_Inventory.equippedgadget;
	gamecontrol_Inventory.equippedgadget = -1;
	if(t == "none") {
		gamecontrol_Inventory.equippedgadget = -1;
	}
	var _g1 = 0;
	var _g = gamecontrol_Inventory.numitems;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].name.toLowerCase() == t) {
			gamecontrol_Inventory.equippedgadget = gamecontrol_Inventory.inventory[i];
		}
	}
	if(gamecontrol_Inventory.equippedgadget != -1 && gamecontrol_Inventory.equippedgadget != gamecontrol_Inventory.oldequippedgadget && showalert) {
		gamecontrol_Inventory.changedequippedgadget = true;
	}
};
gamecontrol_Inventory.destroyinventoryletter = function(t) {
	var _g1 = 0;
	var _g = gamecontrol_Inventory.numitems;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].letter == t) {
			gamecontrol_Inventory.removeitemfrominventory(i);
		}
	}
};
gamecontrol_Inventory.useinventoryitem = function(t) {
	var _g1 = 0;
	var _g = gamecontrol_Inventory.numitems;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Inventory.inventory[i] == t) {
			gamecontrol_Inventory.inventory_count[i]--;
			if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].type == gamecontrol_Inventory.USEABLE || gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].type == gamecontrol_Inventory.GADGET) {
				if(gamecontrol_Inventory.inventory_count[i] <= 0) {
					gamecontrol_Inventory.removeitemfrominventory(i);
				}
			}
		}
	}
};
gamecontrol_Inventory.removeitemfrominventory = function(index) {
	var _g1 = index;
	var _g = gamecontrol_Inventory.numitems;
	while(_g1 < _g) {
		var i = _g1++;
		gamecontrol_Inventory.inventory[i] = gamecontrol_Inventory.inventory[i + 1];
		gamecontrol_Inventory.inventory_count[i] = gamecontrol_Inventory.inventory_count[i + 1];
	}
	gamecontrol_Inventory.numitems--;
};
gamecontrol_Inventory.giveitem = function(t,num) {
	if(num == null) {
		num = 1;
	}
	var found = 0;
	t = t.toLowerCase();
	if(gamecontrol_Inventory.numitems < gamecontrol_Inventory.totalitems) {
		var _g1 = 0;
		var _g = gamecontrol_Inventory.totalitems;
		while(_g1 < _g) {
			var i = _g1++;
			if(gamecontrol_Inventory.itemlist[i].name.toLowerCase() == t) {
				var _g3 = 0;
				var _g2 = gamecontrol_Inventory.numitems;
				while(_g3 < _g2) {
					var j = _g3++;
					if(gamecontrol_Inventory.inventory[j] == i) {
						gamecontrol_Inventory.inventory_count[j] += num;
						found = 1;
					}
				}
				if(found == 0) {
					gamecontrol_Inventory.inventory[gamecontrol_Inventory.numitems] = i;
					gamecontrol_Inventory.inventory_count[gamecontrol_Inventory.numitems] = num;
					gamecontrol_Inventory.numitems++;
				}
			}
		}
		gamecontrol_Inventory.sortinventory();
		if(found == 1) {
			return true;
		}
		return false;
	}
	return false;
};
gamecontrol_Inventory.reloadinventory = function() {
	var oldmenulocation = gamecontrol_Menu.currentmenu;
	gamecontrol_Menu.createmenu("inventory");
	gamecontrol_Menu.currentmenu = oldmenulocation;
};
gamecontrol_Inventory.getammo = function(t) {
	var _g1 = 0;
	var _g = gamecontrol_Inventory.numitems;
	while(_g1 < _g) {
		var i = _g1++;
		if(gamecontrol_Inventory.inventory[i] == t) {
			return gamecontrol_Inventory.inventory_count[i];
		}
	}
	return 0;
};
var gamecontrol_Itemclass = function(t) {
	this.description = [];
	var _g = 0;
	while(_g < 10) {
		++_g;
		this.description.push("");
	}
	this.clear();
	this.inititem(t);
};
$hxClasses["gamecontrol.Itemclass"] = gamecontrol_Itemclass;
gamecontrol_Itemclass.__name__ = ["gamecontrol","Itemclass"];
gamecontrol_Itemclass.prototype = {
	clear: function() {
		this.name = "";
		var _g = 0;
		while(_g < 10) this.description[_g++] = "";
		this.descriptionsize = 0;
		this.power = 0;
		this.ability = 0;
		this.type = gamecontrol_Inventory.TREASURE;
		this.lethal = false;
		this.letter = "";
		this.typical = 1;
		this.cost = 3;
		this.hasmultipleshots = false;
		this.multiname = "CHARGE";
	}
	,inititem: function(t) {
		this.index = t;
		this.r = -1;
		switch(t) {
		case 0:
			this.name = "Photograph";
			this.description[0] = "An old, faded photograph of what the";
			this.description[1] = "world looked like before the whole";
			this.description[2] = "armageddon thing happened.";
			this.descriptionsize = 3;
			this.type = gamecontrol_Inventory.TREASURE;
			break;
		case 1:
			this.name = "First Aid Kit";
			this.description[0] = "Restores some of your health.";
			this.descriptionsize = 1;
			this.type = gamecontrol_Inventory.USEABLE;
			this.character = "\x06";
			this.r = 128;
			this.g = 225;
			this.b = 128;
			this.highlightcol = haxegon_Col.rgb(144,255,144);
			break;
		case 2:
			this.name = "Tazer";
			this.description[0] = "Can knock someone out at very close range.";
			this.description[1] = "(Between 1-5 spaces).";
			this.descriptionsize = 2;
			this.multiname = "CHARGE";
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 8;
			break;
		case 3:
			this.name = "Time Stopper";
			this.description[0] = "Stops time.";
			this.description[1] = "";
			this.description[2] = "If you attack someone or use a gadget while";
			this.description[3] = "time is stopped, time will start again!";
			this.descriptionsize = 4;
			this.type = gamecontrol_Inventory.USEABLE;
			this.character = "\r";
			this.r = 128;
			this.g = 128;
			this.b = 255;
			this.highlightcol = haxegon_Col.rgb(128,128,255);
			break;
		case 4:
			this.name = "Pistol";
			this.description[0] = "Multiple uses. Very noisy, but effective!";
			this.description[2] = "Destroys whatever it aims at, but alerts";
			this.description[3] = "everything on the current floor to you.";
			this.descriptionsize = 4;
			this.hasmultipleshots = true;
			this.multiname = "AMMO";
			this.type = gamecontrol_Inventory.GADGET;
			this.lethal = true;
			this.typical = 4;
			break;
		case 5:
			this.name = "Signal Jammer";
			this.description[0] = "Temporarily disable nearby cameras and sentinels.";
			this.descriptionsize = 1;
			this.type = gamecontrol_Inventory.USEABLE;
			this.character = "\x05";
			this.r = 140;
			this.g = 140;
			this.b = 255;
			this.highlightcol = haxegon_Col.rgb(174,174,255);
			break;
		case 6:
			this.name = "Cardboard Box";
			this.description[0] = "Hide from enemies! You might not be able to";
			this.description[1] = "see where you're going when you wear it, though.";
			this.descriptionsize = 2;
			this.type = gamecontrol_Inventory.USEABLE;
			this.character = "\x08";
			this.r = 192;
			this.g = 192;
			this.b = 192;
			this.highlightcol = haxegon_Col.rgb(226,226,226);
			break;
		case 7:
			this.name = "Skateboard";
			this.description[0] = "Skate forward until you bump into something!";
			this.descriptionsize = 1;
			this.multiname = "CHARGE";
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 3;
			this.hasmultipleshots = true;
			this.character = "d";
			this.r = 96;
			this.g = 255;
			this.b = 96;
			this.highlightcol = haxegon_Col.rgb(96,255,96);
			break;
		case 8:
			this.name = "Tranquilizer";
			this.description[0] = "Shoots tranquilizer darts. Puts human and animal";
			this.description[1] = "enemies to sleep for a while.";
			this.description[2] = "";
			this.description[3] = "No effect on robots.";
			this.descriptionsize = 4;
			this.multiname = "AMMO";
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 3;
			break;
		case 9:
			this.name = "Sniper Rifle";
			this.description[0] = "Kill someone from a long way away, without";
			this.description[1] = "making any noise.";
			this.descriptionsize = 2;
			this.multiname = "AMMO";
			this.type = gamecontrol_Inventory.GADGET;
			this.lethal = true;
			this.typical = 3;
			break;
		case 10:
			this.name = "Knockout Gas";
			this.description[0] = "Knocks out nearby human and animal enemies.";
			this.description[1] = "No effect on robots.";
			this.descriptionsize = 2;
			this.multiname = "CANISTER";
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 4;
			break;
		case 11:
			this.name = "Lightbulb";
			this.description[0] = "Switch on the lights so you can see properly!";
			this.descriptionsize = 1;
			this.type = gamecontrol_Inventory.USEABLE;
			this.character = "\x04";
			this.r = 255;
			this.g = 255;
			this.b = 24;
			this.highlightcol = haxegon_Col.rgb(255,255,48);
			break;
		case 12:
			this.name = "Drill";
			this.description[0] = "Make a hole in a wall big enough to walk through.";
			this.description[1] = "Drills all the way through to the other side.";
			this.descriptionsize = 2;
			this.type = gamecontrol_Inventory.USEABLE;
			this.typical = 3;
			this.character = "\x07";
			this.r = 255;
			this.g = 255;
			this.b = 255;
			this.highlightcol = haxegon_Col.rgb(255,255,255);
			break;
		case 13:
			this.name = "Letter from Terry";
			this.description[0] = "The back reads, \"from Terry\".";
			this.description[2] = "Some kind of instructions, maybe?";
			this.descriptionsize = 3;
			this.letter = "terryletter";
			this.type = gamecontrol_Inventory.LETTER;
			break;
		case 14:
			this.name = "Valuable Art";
			this.description[0] = "A very valuable art. Highly sought after";
			this.description[1] = "as a source of fuel.";
			this.descriptionsize = 2;
			this.type = gamecontrol_Inventory.TREASURE;
			break;
		case 15:
			this.name = "Ice Cube";
			this.description[0] = "Swallow to make you immune to fire for";
			this.description[1] = "a short time.";
			this.descriptionsize = 2;
			this.type = gamecontrol_Inventory.USEABLE;
			break;
		case 16:
			this.name = "World Map";
			this.description[0] = "A rough sketch of the city, updated";
			this.description[1] = "throughout your travels.";
			this.descriptionsize = 2;
			this.type = gamecontrol_Inventory.MAP;
			break;
		case 17:
			this.name = "Storeroom Inventory";
			this.description[0] = "";
			this.descriptionsize = 1;
			this.letter = "storeroomletter";
			this.type = gamecontrol_Inventory.LETTER;
			break;
		case 18:
			this.name = "Fire Extinguisher";
			this.description[0] = "Puts out fires! Also stuns whatever";
			this.description[1] = "it hits - cameras, robots, everything.";
			this.descriptionsize = 2;
			this.character = ")";
			this.r = 225;
			this.g = 128;
			this.b = 128;
			this.highlightcol = haxegon_Col.rgb(144,255,144);
			this.type = gamecontrol_Inventory.GADGET;
			this.hasmultipleshots = true;
			this.typical = 6;
			break;
		case 19:
			this.name = "Matchstick";
			this.description[0] = "Probably completely safe to use.";
			this.descriptionsize = 1;
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 10;
			this.character = "%";
			this.r = 230;
			this.g = 136;
			this.b = 60;
			this.highlightcol = haxegon_Col.rgb(240,177,130);
			break;
		case 20:
			this.name = "Sword";
			this.description[0] = "Deadly sword slices through enemies.";
			this.description[1] = "";
			this.description[2] = "When used, dash forwards until you hit a";
			this.description[3] = "wall, and destroy everything in your path.";
			this.descriptionsize = 4;
			this.multiname = "CHARGES";
			this.type = gamecontrol_Inventory.GADGET;
			this.lethal = true;
			this.typical = 6;
			this.character = "\x0E";
			this.r = 255;
			this.g = 255;
			this.b = 255;
			this.highlightcol = haxegon_Col.rgb(255,255,255);
			break;
		case 21:
			this.name = "Leaf Blower";
			this.description[0] = "Shoots a powerful gust of air that";
			this.description[1] = "knocks back anything chasing you.";
			this.descriptionsize = 2;
			this.multiname = "CHARGE";
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 8;
			this.character = "\x10";
			this.r = 96;
			this.g = 255;
			this.b = 96;
			this.highlightcol = haxegon_Col.rgb(96,255,96);
			break;
		case 22:
			this.name = "Teleporter";
			this.description[0] = "Miniture teleporting device!";
			this.description[1] = "";
			this.description[2] = "Teleports you somewhere nearby.";
			this.description[3] = "Can be used multiple times!";
			this.descriptionsize = 4;
			this.multiname = "CHARGE";
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 3;
			this.hasmultipleshots = true;
			this.character = String.fromCharCode(162);
			this.r = 87;
			this.g = 241;
			this.b = 238;
			this.highlightcol = haxegon_Col.rgb(176,246,245);
			break;
		case 23:
			this.name = "EMP Blaster";
			this.description[0] = "Knocks out all nearby machines.";
			this.description[1] = "No effect on humans.";
			this.descriptionsize = 2;
			this.multiname = "CHARGE";
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 4;
			break;
		case 24:
			this.name = "Lockdown";
			this.description[0] = "Shuts all doors in a level.";
			this.descriptionsize = 1;
			this.type = gamecontrol_Inventory.USEABLE;
			break;
		case 25:
			this.name = "Portable Door";
			this.description[0] = "Instead of door, portable door!";
			this.description[0] = "Can be placed in walls.";
			this.descriptionsize = 2;
			this.type = gamecontrol_Inventory.USEABLE;
			this.character = "\n";
			this.r = 160;
			this.g = 76;
			this.b = 20;
			this.highlightcol = 15366704;
			break;
		case 26:
			this.name = "Banana";
			this.description[0] = "Delicious Banana! Be careful to properly dispose";
			this.description[1] = "of the banana peel afterwards, or pursuing";
			this.description[2] = "guards may slip on it.";
			this.descriptionsize = 3;
			this.type = gamecontrol_Inventory.USEABLE;
			this.character = String.fromCharCode(160);
			this.r = 233;
			this.g = 229;
			this.b = 115;
			this.highlightcol = 16315842;
			break;
		case 27:
			this.name = "Bomb";
			this.description[0] = "Explodes, destroying everything up to three";
			this.description[1] = "squares away.";
			this.description[2] = "";
			this.description[3] = "Anything left after you use this is alerted!";
			this.descriptionsize = 4;
			this.multiname = "CANISTER";
			this.type = gamecontrol_Inventory.GADGET;
			this.typical = 4;
			this.character = String.fromCharCode(163);
			this.r = 125;
			this.g = 200;
			this.b = 249;
			this.highlightcol = 11525627;
			break;
		case 28:
			this.name = "Helix Wing";
			this.description[0] = "Summons a helicopter to immediately pick you up";
			this.description[1] = "and bring you home. Can be used from anywhere.";
			this.description[2] = "";
			this.description[3] = "Worth 10 gems at the end if you don't use it...";
			this.descriptionsize = 4;
			this.type = gamecontrol_Inventory.USEABLE;
			this.character = "\x1F";
			this.r = 226;
			this.g = 151;
			this.b = 249;
			this.highlightcol = 14850041;
			break;
		case 29:
			this.name = "Error";
			this.descriptionsize = 0;
			this.type = gamecontrol_Inventory.GADGET;
			this.character = ";";
			this.r = 233;
			this.g = 229;
			this.b = 115;
			this.highlightcol = 16315842;
			break;
		}
		if(this.r == -1) {
			if(this.type == gamecontrol_Inventory.USEABLE) {
				this.character = "*";
				this.r = 96;
				this.g = 96;
				this.b = 255;
				this.highlightcol = haxegon_Col.rgb(144,144,255);
			} else if(this.type == gamecontrol_Inventory.WEAPON) {
				this.character = "/";
				this.r = 225;
				this.g = 128;
				this.b = 128;
				this.highlightcol = haxegon_Col.rgb(144,255,144);
			} else if(this.type == gamecontrol_Inventory.GADGET) {
				this.character = "\x15";
				this.r = 255;
				this.g = 128;
				this.b = 128;
				this.highlightcol = haxegon_Col.rgb(255,144,144);
			} else if(this.type == gamecontrol_Inventory.TREASURE) {
				this.character = "$";
				this.r = 196;
				this.g = 196;
				this.b = 32;
				this.highlightcol = haxegon_Col.rgb(255,255,96);
			} else if(this.type == gamecontrol_Inventory.LETTER) {
				this.character = "\x14";
				this.r = 180;
				this.g = 180;
				this.b = 180;
				this.highlightcol = haxegon_Col.rgb(224,224,224);
			}
		}
	}
	,name: null
	,description: null
	,descriptionsize: null
	,power: null
	,ability: null
	,type: null
	,lethal: null
	,letter: null
	,typical: null
	,multiname: null
	,cost: null
	,hasmultipleshots: null
	,character: null
	,r: null
	,g: null
	,b: null
	,highlightcol: null
	,index: null
	,__class__: gamecontrol_Itemclass
};
var gamecontrol_Localworld = function() { };
$hxClasses["gamecontrol.Localworld"] = gamecontrol_Localworld;
gamecontrol_Localworld.__name__ = ["gamecontrol","Localworld"];
gamecontrol_Localworld.init = function() {
	var _g = 0;
	while(_g < 100) {
		++_g;
		gamecontrol_Localworld.worldblock.push(new gamecontrol_misc_Worldblockclass());
	}
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.BACKGROUND].set(0,0,haxegon_Col.rgb(0,0,0),gamecontrol_Game.backgroundcolour);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.EMPTYBACKGROUND].set(0,0,haxegon_Col.rgb(0,0,0),gamecontrol_Game.backgroundcolour);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.BLOOD].set(gamecontrol_Localworld.c("#"),gamecontrol_Localworld.c("#"),haxegon_Col.rgb(164,164,164),haxegon_Col.rgb(140,140,140));
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DOOR].set(10,10,15366704,10505236);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.LOCKEDDOOR].set(11,11,5494302,3973140);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.KEY].set(12,12,haxegon_Col.rgb(128,255,128),haxegon_Col.rgb(96,255,96));
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.OPENDOOR].set(9,9,15366704,10505236);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.STAIRS].set(44,44,15170294,15170294);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].set(34,34,haxegon_Col.rgb(164,164,164),haxegon_Col.rgb(140,140,140));
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.RUBBLE].set(gamecontrol_Localworld.c("#"),gamecontrol_Localworld.c("#"),haxegon_Col.rgb(164,164,164),haxegon_Col.rgb(140,140,140));
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ROOFSIDE].set(201,201,5264830,2308767);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ROOFBACKGROUND].set(17,17,34,34);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ROOFSTARS].set(23,23,16313742,16313742);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.BANANAPEEL].set(161,161,16315842,15328627);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].set(45,45,16183930,16183930);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.OUTSIDE_GROUND].set(228,228,11350202,7039851);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.OUTSIDE_EDGE].set(195,195,11350202,7039851);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.OUTSIDE_ABYSS].set(17,17,haxegon_Col.rgb(16,0,0),haxegon_Col.rgb(16,0,0),2228224,0);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.BACKGROUND].flamable = -1;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.OUTSIDE_EDGE].flamable = -1;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.OUTSIDE_ABYSS].flamable = -1;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ROOFBACKGROUND].flamable = -1;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ROOFSTARS].flamable = -1;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ROOFSIDE].flamable = -1;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.OUTSIDE_GROUND].flamable = 15;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].flamable = 15;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].flamable = 15;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.BLOOD].flamable = 15;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.RUBBLE].flamable = 15;
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.BANANAPEEL].flamable = 15;
	gamecontrol_Localworld.changepalette("blue",0);
};
gamecontrol_Localworld.changepalette = function(pal,walltile) {
	if(walltile == null) {
		walltile = 0;
	}
	switch(pal) {
	case "blue":
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,13293037,5804743);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,3628757,2835883);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(3628757,2835883);
		gamecontrol_Localworld.setbackcolours(1130361,1124677);
		gamecontrol_Localworld.setshadecolours(0.4,0.4,0.8);
		break;
	case "cyan":
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,12967668,4044770);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,1148155,744651);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(1148155,744651);
		gamecontrol_Localworld.setbackcolours(24203,342610);
		gamecontrol_Localworld.setshadecolours(0.4,0.8,0.8);
		break;
	case "darkred":
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,16775165,16596295);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,16729876,13186560);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(16729876,13186560);
		gamecontrol_Localworld.setbackcolours(8003328,2883840);
		gamecontrol_Localworld.setshadecolours(0.8,0.4,0.4);
		break;
	case "green":
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,13692362,8505176);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,4045360,2790693);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(4045360,2790693);
		gamecontrol_Localworld.setbackcolours(4028962,1850382);
		gamecontrol_Localworld.setshadecolours(0.4,0.8,0.4);
		break;
	case "gray":case "grey":
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,14474460,9474192);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,8816262,7039851);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(8816262,7039851);
		gamecontrol_Localworld.setbackcolours(4539717,2894892);
		gamecontrol_Localworld.setshadecolours(0.6,0.6,0.6);
		break;
	case "purple":
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,15190765,10377415);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,11350202,9446805);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(11350202,9446805);
		gamecontrol_Localworld.setbackcolours(6234746,3018300);
		gamecontrol_Localworld.setshadecolours(0.80519480519480524,0.39603960396039606,0.79746835443037978);
		break;
	case "red":
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,15583952,13064321);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,13973318,11217713);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(13973318,11217713);
		gamecontrol_Localworld.setbackcolours(7934255,4526369);
		gamecontrol_Localworld.setshadecolours(0.8,0.4,0.4);
		break;
	case "yellow":
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,15201477,14016829);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,12371258,9479208);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(12371258,9479208);
		gamecontrol_Localworld.setbackcolours(6971418,4275216);
		gamecontrol_Localworld.setshadecolours(0.8,0.8,0.4);
		break;
	default:
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].set(192 + walltile * 2,192 + walltile * 2,13293037,5804743);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.FLOOR].set(224 + walltile * 2,224 + walltile * 2,3628757,2835883);
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.DEBRIS].setcol(3628757,2835883);
		gamecontrol_Localworld.setbackcolours(1130361,1124677);
		gamecontrol_Localworld.setshadecolours(0.4,0.4,0.8);
	}
};
gamecontrol_Localworld.setshadecolours = function(r,g,b) {
	gamecontrol_Game.redwallshade = r;
	gamecontrol_Game.greenwallshade = g;
	gamecontrol_Game.bluewallshade = b;
};
gamecontrol_Localworld.setbackcolours = function(lit,shade) {
	gamecontrol_Game.backgroundcolour = shade;
	var _g1 = 0;
	var _g = gamecontrol_Localworld.numworldblocks;
	while(_g1 < _g) {
		var i = _g1++;
		gamecontrol_Localworld.worldblock[i].back_lit = lit;
		gamecontrol_Localworld.worldblock[i].back_fog = shade;
	}
};
gamecontrol_Localworld.sc = function(t) {
	terrylib_World.sc(t);
};
gamecontrol_Localworld.initcollisionarray = function() {
	gamecontrol_Localworld.sc(gamecontrol_Localworld.BACKGROUND);
	gamecontrol_Localworld.sc(gamecontrol_Localworld.WALL);
	gamecontrol_Localworld.sc(gamecontrol_Localworld.DOOR);
	gamecontrol_Localworld.sc(gamecontrol_Localworld.LOCKEDDOOR);
	gamecontrol_Localworld.sc(gamecontrol_Localworld.OUTSIDE_EDGE);
	gamecontrol_Localworld.sc(gamecontrol_Localworld.OUTSIDE_ABYSS);
};
gamecontrol_Localworld.loadlevel = function(s,r) {
	terrylib_World.noxcam = false;
	terrylib_World.noycam = false;
	if(!terrylib_World.loadmap(s,r)) {
		if(!config_Levelcache.localloadmap(s,r)) {
			terrylib_World.clearmap();
		}
	}
	if(terrylib_World.mapwidth <= gamecontrol_Draw.screentilewidth) {
		terrylib_World.noxcam = true;
	}
	if(terrylib_World.mapheight <= gamecontrol_Draw.screentileheight) {
		terrylib_World.noycam = true;
	}
};
gamecontrol_Localworld.c = function(t) {
	return HxOverrides.cca(t,0);
};
gamecontrol_Localworld.charmap = function(x,y,t) {
	gamecontrol_Localworld.light = gamecontrol_Localworld.lightat(x,y);
	gamecontrol_Localworld.fog = gamecontrol_Localworld.fogat(x,y);
	gamecontrol_Localworld.highlight = gamecontrol_Localworld.highlightat(x,y);
	gamecontrol_Localworld.laser = gamecontrol_Localworld.laserat(x,y);
	gamecontrol_Localworld.fire = gamecontrol_Localworld.fireat(x,y);
	if(gamecontrol_Localworld.fire >= 100) {
		if(gamecontrol_Draw.getperlin(x * 16 + (terrylib_Help.longglow / 2 | 0),y * 16 + (terrylib_Help.longglow | 0)) > 150) {
			return 37 + (openfl_Lib.getTimer() % 600 / 200 | 0);
		}
	}
	if(gamecontrol_Localworld.light == 1 && gamecontrol_Localworld.fog == 1) {
		return gamecontrol_Localworld.worldblock[t].charcode_lit;
	} else if(gamecontrol_Localworld.fog == 1) {
		return gamecontrol_Localworld.worldblock[t].charcode_fog;
	} else {
		return 0;
	}
};
gamecontrol_Localworld.colourmap_shade = function(x,y,t) {
	var c = gamecontrol_Localworld.colourmap(x,y,t);
	gamecontrol_Localworld.tr = c >> 16 & 255;
	gamecontrol_Localworld.tg = c >> 8 & 255;
	gamecontrol_Localworld.tb = c & 255;
	gamecontrol_Localworld.tr = gamecontrol_Localworld.tr * gamecontrol_Game.redwallshade | 0;
	gamecontrol_Localworld.tg = gamecontrol_Localworld.tg * gamecontrol_Game.greenwallshade | 0;
	gamecontrol_Localworld.tb = gamecontrol_Localworld.tb * gamecontrol_Game.bluewallshade | 0;
	return haxegon_Col.rgb(gamecontrol_Localworld.tr,gamecontrol_Localworld.tg,gamecontrol_Localworld.tb);
};
gamecontrol_Localworld.colourmap = function(x,y,t) {
	gamecontrol_Localworld.foregroundcolour_needschanging = 2;
	gamecontrol_Localworld.light = gamecontrol_Localworld.lightat(x,y);
	gamecontrol_Localworld.fog = gamecontrol_Localworld.fogat(x,y);
	gamecontrol_Localworld.highlight = gamecontrol_Localworld.highlightat(x,y);
	gamecontrol_Localworld.laser = gamecontrol_Localworld.laserat(x,y);
	gamecontrol_Localworld.fire = gamecontrol_Localworld.fireat(x,y);
	if(gamecontrol_Localworld.fire >= 100 && gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.fire = (Math.random() * 64 | 0) + 64;
		gamecontrol_Localworld.fire2 = 0;
		gamecontrol_Localworld.fire3 = 0;
		gamecontrol_Localworld.firecol = gamecontrol_Draw.getperlin(x * 16 + (terrylib_Help.longglow / 2 | 0),y * 16 + (terrylib_Help.longglow | 0)) / 20 | 0;
		if(gamecontrol_Localworld.firecol == 10) {
			gamecontrol_Localworld.fire = 255;
			gamecontrol_Localworld.fire2 = gamecontrol_Localworld.fire;
			gamecontrol_Localworld.fire3 = gamecontrol_Localworld.fire;
		} else if(gamecontrol_Localworld.firecol == 9 || gamecontrol_Localworld.firecol == 8) {
			gamecontrol_Localworld.fire = 255;
			gamecontrol_Localworld.fire2 = gamecontrol_Localworld.fire;
		} else if(gamecontrol_Localworld.firecol == 7 || gamecontrol_Localworld.firecol == 6) {
			gamecontrol_Localworld.fire = 255;
		}
		if(gamecontrol_Localworld.highlight == 1) {
			gamecontrol_Localworld.tr = Math.min((gamecontrol_Localworld.worldblock[t].front_lit >> 16 & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
			gamecontrol_Localworld.tg = Math.min((gamecontrol_Localworld.worldblock[t].front_lit >> 8 & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
			gamecontrol_Localworld.tb = Math.min((gamecontrol_Localworld.worldblock[t].front_lit & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
			return gamecontrol_Draw.addcolours(haxegon_Col.rgb(gamecontrol_Localworld.tr,gamecontrol_Localworld.tg,gamecontrol_Localworld.tb),haxegon_Col.rgb(gamecontrol_Localworld.fire,gamecontrol_Localworld.fire2,gamecontrol_Localworld.fire3));
		} else if(gamecontrol_Localworld.laser == 1) {
			gamecontrol_Localworld.tg = Math.min((gamecontrol_Localworld.worldblock[t].front_lit >> 8 & 255) * 0.2,255) | 0;
			gamecontrol_Localworld.tb = Math.min((gamecontrol_Localworld.worldblock[t].front_lit & 255) * 0.2,255) | 0;
			return gamecontrol_Draw.addcolours(haxegon_Col.rgb(255,gamecontrol_Localworld.tg,gamecontrol_Localworld.tb),haxegon_Col.rgb(gamecontrol_Localworld.fire,gamecontrol_Localworld.fire2,gamecontrol_Localworld.fire3));
		} else if(gamecontrol_Localworld.light == 1) {
			return gamecontrol_Draw.addcolours(gamecontrol_Localworld.worldblock[t].front_lit,haxegon_Col.rgb(gamecontrol_Localworld.fire,gamecontrol_Localworld.fire2,gamecontrol_Localworld.fire3));
		} else {
			return haxegon_Col.rgb(gamecontrol_Localworld.fire,gamecontrol_Localworld.fire2,gamecontrol_Localworld.fire3);
		}
	} else if(gamecontrol_Localworld.highlight == 1 && gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.tr = Math.min((gamecontrol_Localworld.worldblock[t].front_lit >> 16 & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
		gamecontrol_Localworld.tg = Math.min((gamecontrol_Localworld.worldblock[t].front_lit >> 8 & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
		gamecontrol_Localworld.tb = Math.min((gamecontrol_Localworld.worldblock[t].front_lit & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
		return haxegon_Col.rgb(gamecontrol_Localworld.tr,gamecontrol_Localworld.tg,gamecontrol_Localworld.tb);
	} else if(gamecontrol_Localworld.laser == 1 && gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.tg = Math.min((gamecontrol_Localworld.worldblock[t].front_lit >> 8 & 255) * 0.2,255) | 0;
		gamecontrol_Localworld.tb = Math.min((gamecontrol_Localworld.worldblock[t].front_lit & 255) * 0.2,255) | 0;
		return haxegon_Col.rgb(255,gamecontrol_Localworld.tg,gamecontrol_Localworld.tb);
	} else if(gamecontrol_Localworld.light == 1 && gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.foregroundcolour_needschanging = 1;
		return gamecontrol_Localworld.worldblock[t].front_lit;
	} else if(gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.foregroundcolour_needschanging = 0;
		return gamecontrol_Localworld.worldblock[t].front_fog;
	} else {
		return 0;
	}
};
gamecontrol_Localworld.backcolourmap = function(x,y,t) {
	gamecontrol_Localworld.backgroundcolour_needschanging = true;
	gamecontrol_Localworld.light = gamecontrol_Localworld.lightat(x,y);
	gamecontrol_Localworld.fog = gamecontrol_Localworld.fogat(x,y);
	gamecontrol_Localworld.highlight = gamecontrol_Localworld.highlightat(x,y);
	gamecontrol_Localworld.laser = gamecontrol_Localworld.laserat(x,y);
	gamecontrol_Localworld.fire = gamecontrol_Localworld.fireat(x,y);
	if(gamecontrol_Localworld.fire >= 100 && gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.fire = (Math.random() * 16 | 0) + 32;
		if(gamecontrol_Localworld.highlight == 1) {
			return haxegon_Col.rgb(Math.min(gamecontrol_Localworld.fire * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0,0,0);
		} else if(gamecontrol_Localworld.laser == 1) {
			gamecontrol_Localworld.tg = Math.min((gamecontrol_Localworld.worldblock[t].front_lit >> 8 & 255) * 0.2,255) | 0;
			gamecontrol_Localworld.tb = Math.min((gamecontrol_Localworld.worldblock[t].front_lit & 255) * 0.2,255) | 0;
			return gamecontrol_Draw.addcolours(haxegon_Col.rgb(64,gamecontrol_Localworld.tg,gamecontrol_Localworld.tb),haxegon_Col.rgb(gamecontrol_Localworld.fire,0,0));
		} else if(gamecontrol_Localworld.light == 1) {
			return gamecontrol_Draw.addcolours(gamecontrol_Localworld.worldblock[t].back_lit,haxegon_Col.rgb(gamecontrol_Localworld.fire,0,0));
		} else {
			return haxegon_Col.rgb(gamecontrol_Localworld.fire,0,0);
		}
	} else if(gamecontrol_Localworld.highlight == 1 && gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.tr = Math.min((gamecontrol_Localworld.worldblock[t].back_lit >> 16 & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
		gamecontrol_Localworld.tg = Math.min((gamecontrol_Localworld.worldblock[t].back_lit >> 8 & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
		gamecontrol_Localworld.tb = Math.min((gamecontrol_Localworld.worldblock[t].back_lit & 255) * (1 + terrylib_Lerp.from_value(0.8,0.0,gamecontrol_Game.highlightcooldown,20,"sine_in")),255) | 0;
		return haxegon_Col.rgb(gamecontrol_Localworld.tr,gamecontrol_Localworld.tg,gamecontrol_Localworld.tb);
	} else if(gamecontrol_Localworld.laser == 1 && gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.tg = Math.min((gamecontrol_Localworld.worldblock[t].front_lit >> 8 & 255) * 0.2,255) | 0;
		gamecontrol_Localworld.tb = Math.min((gamecontrol_Localworld.worldblock[t].front_lit & 255) * 0.2,255) | 0;
		return haxegon_Col.rgb(64,gamecontrol_Localworld.tg,gamecontrol_Localworld.tb);
	} else if(gamecontrol_Localworld.light == 1 && gamecontrol_Localworld.fog == 1) {
		return gamecontrol_Localworld.worldblock[t].back_lit;
	} else if(gamecontrol_Localworld.fog == 1) {
		gamecontrol_Localworld.backgroundcolour_needschanging = false;
		return gamecontrol_Localworld.worldblock[t].back_fog;
	}
	gamecontrol_Localworld.backgroundcolour_needschanging = false;
	return gamecontrol_Game.backgroundcolour;
};
gamecontrol_Localworld.setroomfog = function(t) {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) terrylib_World.fog[_g3++ + terrylib_World.vmult[j]] = t;
	}
};
gamecontrol_Localworld.clearlighting = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) terrylib_World.lighting[_g3++ + terrylib_World.vmult[j]] = 0;
	}
};
gamecontrol_Localworld.clearhighlight = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) terrylib_World.highlight[_g3++ + terrylib_World.vmult[j]] = 0;
	}
};
gamecontrol_Localworld.clearlaser = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) terrylib_World.laser[_g3++ + terrylib_World.vmult[j]] = 0;
	}
};
gamecontrol_Localworld.lightpoint = function(x,y,ent) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
		terrylib_World.lighting[x + terrylib_World.vmult[y]] = 1;
		if(x == gamecontrol_Localworld.playerx && y == gamecontrol_Localworld.playery) {
			if(ent > -1) {
				gamecontrol_Localworld.alertedtoplayer(ent);
				gamecontrol_Localworld.hasplayerinsight(ent);
			}
		}
	}
};
gamecontrol_Localworld.checkforfire = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) if(gamecontrol_Localworld.fireat(_g3++,j) >= 100) {
			return true;
		}
	}
	return false;
};
gamecontrol_Localworld.clearfire = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) terrylib_World.fire[_g3++ + terrylib_World.vmult[j]] = 0;
	}
	gamecontrol_Localworld.onfire = false;
};
gamecontrol_Localworld.incinerate = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].rule == "player") {
				if(gamecontrol_Localworld.fireat(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp) >= 100) {
					if(!terrylib_Obj.entities[i].fireproof && gamecontrol_Game.icecube <= 0) {
						gamecontrol_Game.hurtplayer(terrylib_Help.NODIRECTION);
						gamecontrol_Game.checkifplayerdead();
						gamecontrol_Localworld.updatelighting();
					}
				}
			} else if(terrylib_Obj.entities[i].rule == "item") {
				if(gamecontrol_Localworld.fireat(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp) >= 100) {
					terrylib_Obj.entities[i].active = false;
				}
			} else if(terrylib_Obj.entities[i].rule == "enemy") {
				if(gamecontrol_Localworld.fireat(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp) >= 100) {
					if(!terrylib_Obj.entities[i].fireproof) {
						gamecontrol_Game.killenemy(i);
					}
				}
			} else if(terrylib_Obj.entities[i].rule == "npc") {
				if(gamecontrol_Localworld.fireat(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp) >= 100) {
					gamecontrol_Draw.screenshake = 10;
					gamecontrol_Draw.flashlight = 5;
					terrylib_Obj.entities[i].active = false;
				}
			}
		}
	}
};
gamecontrol_Localworld.startfire = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
		terrylib_World.fire[x + terrylib_World.vmult[y]] = 100;
		gamecontrol_Localworld.firepoint(x - 1,y - 1);
		gamecontrol_Localworld.firepoint(x,y - 1);
		gamecontrol_Localworld.firepoint(x + 1,y - 1);
		gamecontrol_Localworld.firepoint(x - 1,y);
		gamecontrol_Localworld.firepoint(x,y);
		gamecontrol_Localworld.firepoint(x + 1,y);
		gamecontrol_Localworld.firepoint(x - 1,y + 1);
		gamecontrol_Localworld.firepoint(x,y + 1);
		gamecontrol_Localworld.firepoint(x + 1,y + 1);
	}
	gamecontrol_Localworld.onfire = true;
};
gamecontrol_Localworld.extingushfire = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
		terrylib_World.fire[x + terrylib_World.vmult[y]] = 0;
	}
	if(!gamecontrol_Localworld.checkforfire()) {
		gamecontrol_Localworld.clearfire();
	}
};
gamecontrol_Localworld.extingushfireblock = function(x,y) {
	var _g = -2;
	while(_g < 3) {
		var j = _g++;
		var _g1 = -2;
		while(_g1 < 3) {
			var i = _g1++;
			if(terrylib_Help.inboxw(x + i,y + j,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
				terrylib_World.fire[x + i + terrylib_World.vmult[y + j]] = 0;
			}
		}
	}
	if(!gamecontrol_Localworld.checkforfire()) {
		gamecontrol_Localworld.clearfire();
	}
};
gamecontrol_Localworld.supressfire = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.fire[i + terrylib_World.vmult[j]] < 100) {
				terrylib_World.fire[i + terrylib_World.vmult[j]] = 0;
			}
		}
	}
	var _g11 = 0;
	var _g4 = terrylib_World.mapheight;
	while(_g11 < _g4) {
		var j1 = _g11++;
		var _g31 = 0;
		var _g21 = terrylib_World.mapwidth;
		while(_g31 < _g21) {
			var i1 = _g31++;
			if(terrylib_World.fire[i1 + terrylib_World.vmult[j1]] >= 100) {
				gamecontrol_Localworld.firepoint(i1 - 1,j1 - 1);
				gamecontrol_Localworld.firepoint(i1,j1 - 1);
				gamecontrol_Localworld.firepoint(i1 + 1,j1 - 1);
				gamecontrol_Localworld.firepoint(i1 - 1,j1);
				gamecontrol_Localworld.firepoint(i1,j1);
				gamecontrol_Localworld.firepoint(i1 + 1,j1);
				gamecontrol_Localworld.firepoint(i1 - 1,j1 + 1);
				gamecontrol_Localworld.firepoint(i1,j1 + 1);
				gamecontrol_Localworld.firepoint(i1 + 1,j1 + 1);
			}
		}
	}
};
gamecontrol_Localworld.fireextinguisher_checkforenemy = function(x,y) {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].rule == "enemy") {
				if(terrylib_Obj.entities[i].type == "fireman") {
					if(terrylib_Obj.entities[i].xp == x && terrylib_Obj.entities[i].yp == y) {
						var tmp = terrylib_Rand.ppickstring("Stop!","No!!!","Hiss!!!");
						terrylib_Obj.entities[i].setmessage(tmp,"flashing");
						gamecontrol_Game.stunenemy(i,20);
					}
				}
			}
		}
	}
};
gamecontrol_Localworld.fireextinguisher_explode = function(x,y,rad) {
	terrylib_World.mapchanged = true;
	var _g1 = -rad;
	var _g = rad + 1;
	while(_g1 < _g) {
		var k = _g1++;
		var _g3 = -rad;
		var _g2 = rad + 1;
		while(_g3 < _g2) {
			var j = _g3++;
			if(Math.sqrt(Math.pow(j,2) + Math.pow(k,2)) <= rad) {
				if(terrylib_World.fire[x + j + terrylib_World.vmult[y + k]] > 0) {
					gamecontrol_Localworld.highlightpoint(x + j,y + k);
				}
			}
			if(Math.sqrt(Math.pow(j,2) + Math.pow(k,2)) <= rad) {
				terrylib_World.fire[x + j + terrylib_World.vmult[y + k]] = 0;
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.DEBRIS) {
					terrylib_World.placetile(x + j,y + k,gamecontrol_Localworld.FLOOR);
				}
			}
		}
	}
};
gamecontrol_Localworld.fireextinguisher = function(x,y,dir,power) {
	if(power > 0) {
		if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
			terrylib_World.fire[x + terrylib_World.vmult[y]] = 0;
			if(terrylib_World.at(x,y) == gamecontrol_Localworld.DEBRIS) {
				terrylib_World.placetile(x,y,gamecontrol_Localworld.FLOOR);
			}
			var temp = gamecontrol_Game.checkforenemy(x,y);
			if(temp >= 0) {
				gamecontrol_Game.stunenemy(temp,30);
				gamecontrol_Draw.flashlight = 5;
				gamecontrol_Draw.screenshake = 10;
			}
			gamecontrol_Localworld.highlightpoint(x,y);
			gamecontrol_Localworld.fireextinguisher_checkforenemy(x,y);
		}
		gamecontrol_Localworld.fireextinguisher(x + gamecontrol_Localworld.xstep(dir),y + gamecontrol_Localworld.ystep(dir),dir,power - 1);
		gamecontrol_Localworld.fireextinguisher(x + gamecontrol_Localworld.xstep(dir,2) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(dir)),y + gamecontrol_Localworld.ystep(dir,2) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(dir)),dir,power - 1);
		gamecontrol_Localworld.fireextinguisher(x + gamecontrol_Localworld.xstep(dir,2) + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(dir)),y + gamecontrol_Localworld.ystep(dir,2) + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(dir)),dir,power - 1);
	}
};
gamecontrol_Localworld.flamethrower = function(x,y,dir,power) {
	if(power > 0) {
		if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
			gamecontrol_Localworld.startfire(x,y);
			gamecontrol_Localworld.highlightpoint(x,y);
		}
		gamecontrol_Localworld.flamethrower(x + gamecontrol_Localworld.xstep(dir),y + gamecontrol_Localworld.ystep(dir),dir,power - 1);
		gamecontrol_Localworld.flamethrower(x + gamecontrol_Localworld.xstep(dir,2) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(dir)),y + gamecontrol_Localworld.ystep(dir,2) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(dir)),dir,power - 1);
		gamecontrol_Localworld.flamethrower(x + gamecontrol_Localworld.xstep(dir,2) + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(dir)),y + gamecontrol_Localworld.ystep(dir,2) + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(dir)),dir,power - 1);
	}
};
gamecontrol_Localworld.firepoint = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
		if(terrylib_World.fire[x + terrylib_World.vmult[y]] < 100) {
			terrylib_World.fire[x + terrylib_World.vmult[y]]++;
			if(gamecontrol_Localworld.worldblock[terrylib_World.at(x,y)].flamable > -1) {
				if(terrylib_World.fire[x + terrylib_World.vmult[y]] >= gamecontrol_Localworld.worldblock[terrylib_World.at(x,y)].flamable) {
					if(1 + Math.floor(5 * terrylib_Rand.prandom()) == 5) {
						terrylib_World.fire[x + terrylib_World.vmult[y]] = 0;
					} else {
						terrylib_World.fire[x + terrylib_World.vmult[y]] = 100;
						gamecontrol_Localworld.firepoint(x - 1,y - 1);
						gamecontrol_Localworld.firepoint(x,y - 1);
						gamecontrol_Localworld.firepoint(x + 1,y - 1);
						gamecontrol_Localworld.firepoint(x - 1,y);
						gamecontrol_Localworld.firepoint(x,y);
						gamecontrol_Localworld.firepoint(x + 1,y);
						gamecontrol_Localworld.firepoint(x - 1,y + 1);
						gamecontrol_Localworld.firepoint(x,y + 1);
						gamecontrol_Localworld.firepoint(x + 1,y + 1);
					}
				}
			}
		}
	}
};
gamecontrol_Localworld.createinitheatmap = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapwidth;
	while(_g1 < _g) {
		var i = _g1++;
		gamecontrol_Localworld.heatmapset(i,0,-1);
		gamecontrol_Localworld.heatmapset(i,terrylib_World.mapheight - 1,-1);
	}
	var _g11 = 0;
	var _g2 = terrylib_World.mapheight;
	while(_g11 < _g2) {
		var j = _g11++;
		gamecontrol_Localworld.heatmapset(0,j,-1);
		gamecontrol_Localworld.heatmapset(terrylib_World.mapwidth - 1,j,-1);
	}
	gamecontrol_Localworld.heatstartx = -1;
	gamecontrol_Localworld.heatstarty = -1;
};
gamecontrol_Localworld.createheatmap = function() {
	throw new js__$Boot_HaxeError("Error: request to create heatmap, but heatmap has been disabled.");
};
gamecontrol_Localworld.heatmapfill = function(x,y,temperature) {
	gamecontrol_Localworld.tr = terrylib_World.heatmap[x + terrylib_World.vmult[y]];
	if(gamecontrol_Localworld.tr == -2 || temperature < gamecontrol_Localworld.tr) {
		terrylib_World.heatmap[x + terrylib_World.vmult[y]] = temperature;
		gamecontrol_Localworld.heatmapfill(x,y - 1,temperature + 1);
		gamecontrol_Localworld.heatmapfill(x,y + 1,temperature + 1);
		gamecontrol_Localworld.heatmapfill(x - 1,y,temperature + 1);
		gamecontrol_Localworld.heatmapfill(x + 1,y,temperature + 1);
	}
};
gamecontrol_Localworld.heatmapmove = function(x,y) {
	throw new js__$Boot_HaxeError("Error: request to heatmapmove, but heatmap has been disabled.");
};
gamecontrol_Localworld.updatefire = function() {
	if(gamecontrol_Localworld.onfire) {
		var _g1 = 0;
		var _g = terrylib_World.mapheight;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = terrylib_World.mapwidth;
			while(_g3 < _g2) {
				var i = _g3++;
				if(gamecontrol_Localworld.fireat(i,j) > 0) {
					gamecontrol_Localworld.firepoint(i,j);
				}
			}
		}
	}
};
gamecontrol_Localworld.fireat = function(x,y) {
	if(x >= 0 && y >= 0 && x < terrylib_World.mapwidth && y < terrylib_World.mapheight) {
		return terrylib_World.fire[x + terrylib_World.vmult[y]];
	}
	return 0;
};
gamecontrol_Localworld.highlightpoint = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
		terrylib_World.highlight[x + terrylib_World.vmult[y]] = 1;
	}
	gamecontrol_Game.highlightcooldown = 20;
};
gamecontrol_Localworld.laserpoint = function(x,y,ent) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
		terrylib_World.laser[x + terrylib_World.vmult[y]] = 1;
		if(x == gamecontrol_Localworld.playerx && y == gamecontrol_Localworld.playery) {
			if(ent > -1) {
				gamecontrol_Localworld.alertedtoplayer(ent);
				gamecontrol_Localworld.hasplayerinsight(ent);
			}
		}
	}
};
gamecontrol_Localworld.laserat = function(x,y) {
	if(x >= 0 && y >= 0 && x < terrylib_World.mapwidth && y < terrylib_World.mapheight) {
		return terrylib_World.laser[x + terrylib_World.vmult[y]];
	}
	return 0;
};
gamecontrol_Localworld.lightat = function(x,y) {
	if(x >= 0 && y >= 0 && x < terrylib_World.mapwidth && y < terrylib_World.mapheight) {
		return terrylib_World.lighting[x + terrylib_World.vmult[y]];
	}
	return 0;
};
gamecontrol_Localworld.heatmapat = function(x,y) {
	return terrylib_World.heatmap[x + terrylib_World.vmult[y]];
};
gamecontrol_Localworld.heatmapset = function(x,y,t) {
	terrylib_World.heatmap[x + terrylib_World.vmult[y]] = t;
};
gamecontrol_Localworld.fogpoint = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
		terrylib_World.fog[x + terrylib_World.vmult[y]] = 1;
	}
};
gamecontrol_Localworld.fogat = function(x,y) {
	if(x >= 0 && y >= 0 && x < terrylib_World.mapwidth && y < terrylib_World.mapheight) {
		return terrylib_World.fog[x + terrylib_World.vmult[y]];
	}
	return 0;
};
gamecontrol_Localworld.highlightat = function(x,y) {
	if(x >= 0 && y >= 0 && x < terrylib_World.mapwidth && y < terrylib_World.mapheight) {
		return terrylib_World.highlight[x + terrylib_World.vmult[y]];
	}
	return 0;
};
gamecontrol_Localworld.xstep = function(t,dif) {
	if(dif == null) {
		dif = 1;
	}
	if(t == terrylib_Help.LEFT) {
		return -dif;
	}
	if(t == terrylib_Help.RIGHT) {
		return dif;
	}
	return 0;
};
gamecontrol_Localworld.ystep = function(t,dif) {
	if(dif == null) {
		dif = 1;
	}
	if(t == terrylib_Help.UP) {
		return -dif;
	}
	if(t == terrylib_Help.DOWN) {
		return dif;
	}
	return 0;
};
gamecontrol_Localworld.explode = function(x,y,rad,hurtplayer) {
	if(hurtplayer == null) {
		hurtplayer = true;
	}
	terrylib_World.mapchanged = true;
	var _g1 = -rad;
	var _g = rad + 1;
	while(_g1 < _g) {
		var k = _g1++;
		var _g3 = -rad;
		var _g2 = rad + 1;
		while(_g3 < _g2) {
			var j = _g3++;
			if(Math.sqrt(Math.pow(j,2) + Math.pow(k,2)) <= rad) {
				gamecontrol_Localworld.highlightpoint(x + j,y + k);
			}
			if(Math.sqrt(Math.pow(j,2) + Math.pow(k,2)) <= rad) {
				var protectedsquares = true;
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.ENTRANCE) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.STAIRS) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.KEY) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.ROOFBACKGROUND) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.ROOFSIDE) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.ROOFSTARS) {
					protectedsquares = false;
				}
				if(protectedsquares) {
					terrylib_World.placetile(x + j,y + k,terrylib_Rand.ppickint(gamecontrol_Localworld.RUBBLE,gamecontrol_Localworld.EMPTYBACKGROUND,gamecontrol_Localworld.EMPTYBACKGROUND));
					if(Math.sqrt(Math.pow(j,2) + Math.pow(k,2)) <= (rad * 2 / 3 | 0)) {
						terrylib_World.placetile(x + j,y + k,gamecontrol_Localworld.EMPTYBACKGROUND);
					}
				}
			}
		}
	}
	var _g11 = 0;
	var _g4 = terrylib_Obj.nentity;
	while(_g11 < _g4) {
		var i = _g11++;
		if(terrylib_Obj.entities[i].active) {
			if(gamecontrol_Generator.closestroom_getdist_straight(x,y,terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp) <= rad) {
				if(terrylib_Obj.entities[i].rule == "enemy") {
					gamecontrol_Game.killenemy(i);
				} else if(terrylib_Obj.entities[i].rule == "player" && hurtplayer) {
					gamecontrol_Game.hurtplayer(terrylib_Help.NODIRECTION);
					gamecontrol_Game.checkifplayerdead();
				}
			}
		}
	}
	gamecontrol_Draw.screenshake = 10;
	gamecontrol_Draw.flashlight = 5;
};
gamecontrol_Localworld.glitchexplode = function(x,y,rad,hurtplayer) {
	if(hurtplayer == null) {
		hurtplayer = true;
	}
	terrylib_World.mapchanged = true;
	var randomblocks = [gamecontrol_Localworld.FLOOR,gamecontrol_Localworld.BLOOD,gamecontrol_Localworld.WALL,gamecontrol_Localworld.DOOR,gamecontrol_Localworld.OPENDOOR,gamecontrol_Localworld.RUBBLE,gamecontrol_Localworld.EMPTYBACKGROUND,gamecontrol_Localworld.OUTSIDE_GROUND,gamecontrol_Localworld.DEBRIS,gamecontrol_Localworld.ROOFSIDE,gamecontrol_Localworld.ROOFBACKGROUND,gamecontrol_Localworld.ROOFSTARS];
	if(modernversion_AIDirector.floor == 16) {
		HxOverrides.remove(randomblocks,gamecontrol_Localworld.ROOFSIDE);
		HxOverrides.remove(randomblocks,gamecontrol_Localworld.ROOFBACKGROUND);
		HxOverrides.remove(randomblocks,gamecontrol_Localworld.ROOFSTARS);
	}
	var _g1 = -rad;
	var _g = rad + 1;
	while(_g1 < _g) {
		var k = _g1++;
		var _g3 = -rad;
		var _g2 = rad + 1;
		while(_g3 < _g2) {
			var j = _g3++;
			if(Math.sqrt(Math.pow(j,2) + Math.pow(k,2)) <= rad) {
				gamecontrol_Localworld.highlightpoint(x + j,y + k);
			}
			if(Math.sqrt(Math.pow(j,2) + Math.pow(k,2)) <= rad) {
				var protectedsquares = true;
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.ENTRANCE) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.STAIRS) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.KEY) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.ROOFBACKGROUND) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.ROOFSIDE) {
					protectedsquares = false;
				}
				if(terrylib_World.at(x + j,y + k) == gamecontrol_Localworld.ROOFSTARS) {
					protectedsquares = false;
				}
				if(protectedsquares) {
					terrylib_World.placetile(x + j,y + k,terrylib_Rand.ppick(randomblocks));
					if(terrylib_Rand.prandom() < 0.05) {
						terrylib_World.placetile(x + j,y + k,terrylib_Rand.ppick([gamecontrol_Localworld.BANANAPEEL,gamecontrol_Localworld.OUTSIDE_EDGE,gamecontrol_Localworld.ENTRANCE,gamecontrol_Localworld.LOCKEDDOOR]));
						if(terrylib_Rand.prandom() < 0.05 && x + j > 5 && y + k > 5 && x + j < terrylib_World.mapwidth - 5 && y + k < terrylib_World.mapheight - 5) {
							terrylib_World.placetile(x + j,y + k,gamecontrol_Localworld.STAIRS);
						}
					}
				}
			}
		}
	}
	var _g11 = 0;
	var _g4 = terrylib_Obj.nentity;
	while(_g11 < _g4) {
		var i = _g11++;
		if(terrylib_Obj.entities[i].active) {
			if(gamecontrol_Generator.closestroom_getdist_straight(x,y,terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp) <= rad) {
				if(terrylib_Obj.entities[i].rule == "enemy") {
					gamecontrol_Game.killenemy(i);
				} else if(terrylib_Obj.entities[i].rule == "player" && hurtplayer) {
					gamecontrol_Game.hurtplayer(terrylib_Help.NODIRECTION);
					gamecontrol_Game.checkifplayerdead();
				}
			}
		}
	}
	gamecontrol_Draw.screenshake = 10;
	gamecontrol_Draw.flashlight = 5;
};
gamecontrol_Localworld.drill = function(x,y,dir) {
	terrylib_World.mapchanged = true;
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
		if(terrylib_World.at(x,y) == gamecontrol_Localworld.WALL || terrylib_World.at(x,y) == gamecontrol_Localworld.BACKGROUND) {
			terrylib_World.placetile(x,y,haxegon_Random.pickint(gamecontrol_Localworld.DEBRIS,gamecontrol_Localworld.DEBRIS,gamecontrol_Localworld.FLOOR));
			if(terrylib_World.at(x + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(dir))) == gamecontrol_Localworld.BACKGROUND) {
				terrylib_World.placetile(x + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(dir)),gamecontrol_Localworld.WALL);
			}
			if(terrylib_World.at(x + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(dir))) == gamecontrol_Localworld.BACKGROUND) {
				terrylib_World.placetile(x + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(dir)),gamecontrol_Localworld.WALL);
			}
			gamecontrol_Localworld.drill(x + gamecontrol_Localworld.xstep(dir),y + gamecontrol_Localworld.ystep(dir),dir);
		}
	} else {
		terrylib_World.placetile(x,y,gamecontrol_Localworld.WALL);
	}
};
gamecontrol_Localworld.tinydirectionallaser = function(x,y,dir,ent,range) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth,terrylib_World.mapheight) && range != 0) {
		if(!terrylib_World.collide(x,y)) {
			gamecontrol_Localworld.laserpoint(x,y,ent);
			gamecontrol_Localworld.tinydirectionallaser(x + gamecontrol_Localworld.xstep(dir),y + gamecontrol_Localworld.ystep(dir),dir,ent,range - 1);
		} else {
			gamecontrol_Localworld.laserpoint(x,y,ent);
		}
	}
};
gamecontrol_Localworld.tinydirectionallight = function(x,y,dir,ent,range) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth,terrylib_World.mapheight) && range != 0) {
		if(!terrylib_World.collide(x,y)) {
			gamecontrol_Localworld.lightpoint(x,y,ent);
			gamecontrol_Localworld.tinydirectionallight(x + gamecontrol_Localworld.xstep(dir),y + gamecontrol_Localworld.ystep(dir),dir,ent,range - 1);
		} else {
			gamecontrol_Localworld.lightpoint(x,y,ent);
		}
	}
};
gamecontrol_Localworld.raytrace = function(x,y,dir,power,ent) {
	terrylib_Help.bresenhamline(x,y,x + Math.cos(terrylib_Help.torad(dir)) * power * 2 | 0,y + Math.sin(terrylib_Help.torad(dir)) * power * 2 | 0);
	var _g1 = 0;
	var _g = terrylib_Help.bressize / 2 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_World.collide(terrylib_Help.bresx[i],terrylib_Help.bresy[i])) {
			gamecontrol_Localworld.lightpoint(terrylib_Help.bresx[i],terrylib_Help.bresy[i],ent);
			return;
		} else {
			gamecontrol_Localworld.lightpoint(terrylib_Help.bresx[i],terrylib_Help.bresy[i],ent);
		}
	}
};
gamecontrol_Localworld.laserraytrace = function(x,y,dir,power,ent) {
	terrylib_Help.bresenhamline(x,y,x + Math.cos(terrylib_Help.torad(dir)) * power * 2 | 0,y + Math.sin(terrylib_Help.torad(dir)) * power * 2 | 0);
	var _g1 = 0;
	var _g = terrylib_Help.bressize / 2 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_World.collide(terrylib_Help.bresx[i],terrylib_Help.bresy[i])) {
			gamecontrol_Localworld.laserpoint(terrylib_Help.bresx[i],terrylib_Help.bresy[i],ent);
			return;
		} else {
			gamecontrol_Localworld.laserpoint(terrylib_Help.bresx[i],terrylib_Help.bresy[i],ent);
		}
	}
};
gamecontrol_Localworld.directionallight = function(x,y,dir,ent,range,lighttype,shootleft,shootright) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth,terrylib_World.mapheight) && range != 0) {
		if(!terrylib_World.collide(x,y)) {
			gamecontrol_Localworld.lightpoint(x,y,ent);
			if(shootright) {
				gamecontrol_Localworld.lightpoint(x + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(dir)),ent);
			}
			if(shootleft) {
				gamecontrol_Localworld.lightpoint(x + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(dir)),ent);
			}
			if(lighttype != 0) {
				if(terrylib_World.collide(x + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(dir)))) {
					shootright = false;
				}
				if(terrylib_World.collide(x + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(dir)))) {
					shootleft = false;
				}
			}
			gamecontrol_Localworld.directionallight(x + gamecontrol_Localworld.xstep(dir),y + gamecontrol_Localworld.ystep(dir),dir,ent,range - 1,lighttype,shootleft,shootright);
		} else {
			gamecontrol_Localworld.lightpoint(x,y,ent);
		}
	}
};
gamecontrol_Localworld.directionallaser = function(x,y,dir,ent,range,lighttype,shootleft,shootright) {
	if(terrylib_Help.inboxw(x,y,0,0,terrylib_World.mapwidth,terrylib_World.mapheight) && range != 0) {
		if(!terrylib_World.collide(x,y)) {
			gamecontrol_Localworld.laserpoint(x,y,ent);
			if(shootright) {
				gamecontrol_Localworld.laserpoint(x + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(dir)),ent);
			}
			if(shootleft) {
				gamecontrol_Localworld.laserpoint(x + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(dir)),ent);
			}
			if(lighttype != 0) {
				if(terrylib_World.collide(x + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(dir)))) {
					shootright = false;
				}
				if(terrylib_World.collide(x + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(dir)),y + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(dir)))) {
					shootleft = false;
				}
			}
			gamecontrol_Localworld.directionallaser(x + gamecontrol_Localworld.xstep(dir),y + gamecontrol_Localworld.ystep(dir),dir,ent,range - 1,lighttype,shootleft,shootright);
		} else {
			gamecontrol_Localworld.laserpoint(x,y,ent);
		}
	}
};
gamecontrol_Localworld.alertedtoplayer = function(ent) {
	var _this = terrylib_Obj.entindex;
	var key = terrylib_Obj.entities[ent].rule;
	gamecontrol_Localworld.tr = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
	gamecontrol_Localworld.tempbool = terrylib_Obj.templates[gamecontrol_Localworld.tr].getalerted_thisframe(ent);
	if(gamecontrol_Game.cloaked <= 0 && gamecontrol_Game.timestop <= 0 && !gamecontrol_Localworld.tempbool) {
		terrylib_Obj.templates[gamecontrol_Localworld.tr].alert(ent);
		terrylib_Obj.templates[gamecontrol_Localworld.tr].setalerted_thisframe(ent);
	}
};
gamecontrol_Localworld.hasplayerinsight = function(ent) {
	var _this = terrylib_Obj.entindex;
	var key = terrylib_Obj.entities[ent].rule;
	gamecontrol_Localworld.tr = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
	gamecontrol_Localworld.tempbool = terrylib_Obj.templates[gamecontrol_Localworld.tr].getinsights_thisframe(ent);
	if(gamecontrol_Game.cloaked <= 0 && gamecontrol_Game.timestop <= 0 && !gamecontrol_Localworld.tempbool) {
		terrylib_Obj.templates[gamecontrol_Localworld.tr].insight(ent);
		terrylib_Obj.templates[gamecontrol_Localworld.tr].setinsights_thisframe(ent);
	}
};
gamecontrol_Localworld.updatelighting = function() {
	gamecontrol_Localworld.clearlighting();
	gamecontrol_Localworld.clearlaser();
	gamecontrol_Localworld.playerx = terrylib_Obj.entities[terrylib_Obj.getplayer()].xp | 0;
	gamecontrol_Localworld.playery = terrylib_Obj.entities[terrylib_Obj.getplayer()].yp | 0;
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			gamecontrol_Localworld.tx = terrylib_Obj.entities[i].xp | 0;
			gamecontrol_Localworld.ty = terrylib_Obj.entities[i].yp | 0;
			gamecontrol_Localworld.tdir = terrylib_Obj.entities[i].dir;
			if(terrylib_Obj.entities[i].lightsource == "bombbot") {
				var _g3 = -3;
				while(_g3 < 4) {
					var k = _g3++;
					var _g5 = -3;
					while(_g5 < 4) {
						var j = _g5++;
						if(Math.sqrt(Math.pow(j,2) + Math.pow(k,2)) <= 3) {
							terrylib_World.lighting[gamecontrol_Localworld.tx + j + terrylib_World.vmult[gamecontrol_Localworld.ty + k]] = 1;
						}
					}
				}
			} else if(terrylib_Obj.entities[i].lightsource == "directional") {
				gamecontrol_Localworld.directionallight(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.tdir,i,6,0,true,true);
				if(!terrylib_World.collide(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir))) {
					if(!terrylib_World.collide(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(gamecontrol_Localworld.tdir)))) {
						gamecontrol_Localworld.directionallight(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir,2) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir,2) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.tdir,i,6,1,true,true);
					}
					if(!terrylib_World.collide(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir) + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir) + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(gamecontrol_Localworld.tdir)))) {
						gamecontrol_Localworld.directionallight(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir,2) + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir,2) + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.tdir,i,6,-1,true,true);
					}
				}
			} else if(terrylib_Obj.entities[i].lightsource == "laserdirectional") {
				gamecontrol_Localworld.directionallaser(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.tdir,i,6,0,true,true);
				if(!terrylib_World.collide(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir))) {
					if(!terrylib_World.collide(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(gamecontrol_Localworld.tdir)))) {
						gamecontrol_Localworld.directionallaser(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir,2) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir,2) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.tdir,i,6,1,true,true);
					}
					if(!terrylib_World.collide(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir) + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir) + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(gamecontrol_Localworld.tdir)))) {
						gamecontrol_Localworld.directionallaser(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir,2) + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir,2) + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(gamecontrol_Localworld.tdir)),gamecontrol_Localworld.tdir,i,6,-1,true,true);
					}
				}
			} else if(terrylib_Obj.entities[i].lightsource == "directional_narrow") {
				gamecontrol_Localworld.tinydirectionallight(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.tdir,i,6);
			} else if(terrylib_Obj.entities[i].lightsource == "camera") {
				var _g31 = terrylib_Obj.entities[i].cameradir - 18 | 0;
				var _g2 = terrylib_Obj.entities[i].cameradir + 18 | 0;
				while(_g31 < _g2) gamecontrol_Localworld.raytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,_g31++,terrylib_Obj.entities[i].camerapower,i);
			} else if(terrylib_Obj.entities[i].lightsource == "lasercamera") {
				var _g32 = terrylib_Obj.entities[i].cameradir - 18 | 0;
				var _g21 = terrylib_Obj.entities[i].cameradir + 18 | 0;
				while(_g32 < _g21) gamecontrol_Localworld.laserraytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,_g32++,terrylib_Obj.entities[i].camerapower,i);
			} else if(terrylib_Obj.entities[i].lightsource == "sentinal") {
				var _g33 = -1;
				while(_g33 < 2) {
					var k1 = _g33++;
					var _g51 = -1;
					while(_g51 < 2) gamecontrol_Localworld.lightpoint(terrylib_Obj.entities[i].xp + _g51++,terrylib_Obj.entities[i].yp + k1,i);
				}
				gamecontrol_Localworld.raytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,terrylib_Obj.entities[i].cameradir * 7.5,terrylib_Obj.entities[i].camerapower,i);
				gamecontrol_Localworld.raytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,terrylib_Obj.entities[i].cameradir * 7.5 + 90,terrylib_Obj.entities[i].camerapower,i);
				gamecontrol_Localworld.raytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,terrylib_Obj.entities[i].cameradir * 7.5 + 180,terrylib_Obj.entities[i].camerapower,i);
				gamecontrol_Localworld.raytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,terrylib_Obj.entities[i].cameradir * 7.5 + 270,terrylib_Obj.entities[i].camerapower,i);
			} else if(terrylib_Obj.entities[i].lightsource == "lasersentinal") {
				var _g34 = -1;
				while(_g34 < 2) {
					var k2 = _g34++;
					var _g52 = -1;
					while(_g52 < 2) gamecontrol_Localworld.laserpoint(terrylib_Obj.entities[i].xp + _g52++,terrylib_Obj.entities[i].yp + k2,i);
				}
				gamecontrol_Localworld.laserraytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,terrylib_Obj.entities[i].cameradir * 7.5,terrylib_Obj.entities[i].camerapower,i);
				gamecontrol_Localworld.laserraytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,terrylib_Obj.entities[i].cameradir * 7.5 + 90,terrylib_Obj.entities[i].camerapower,i);
				gamecontrol_Localworld.laserraytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,terrylib_Obj.entities[i].cameradir * 7.5 + 180,terrylib_Obj.entities[i].camerapower,i);
				gamecontrol_Localworld.laserraytrace(gamecontrol_Localworld.tx,gamecontrol_Localworld.ty,terrylib_Obj.entities[i].cameradir * 7.5 + 270,terrylib_Obj.entities[i].camerapower,i);
			} else if(terrylib_Obj.entities[i].lightsource == "laser_narrow") {
				gamecontrol_Localworld.tinydirectionallaser(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.tdir,i,6);
			} else if(terrylib_Obj.entities[i].lightsource == "laser_bubble") {
				gamecontrol_Localworld.tinydirectionallaser(gamecontrol_Localworld.tx + gamecontrol_Localworld.xstep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.ty + gamecontrol_Localworld.ystep(gamecontrol_Localworld.tdir),gamecontrol_Localworld.tdir,i,6);
				var _g35 = -terrylib_Obj.entities[i].para;
				var _g22 = terrylib_Obj.entities[i].para + 1;
				while(_g35 < _g22) {
					var k3 = _g35++;
					var _g53 = -terrylib_Obj.entities[i].para;
					var _g4 = terrylib_Obj.entities[i].para + 1;
					while(_g53 < _g4) gamecontrol_Localworld.laserpoint(terrylib_Obj.entities[i].xp + _g53++,terrylib_Obj.entities[i].yp + k3,i);
				}
			} else if(terrylib_Obj.entities[i].lightsource == "bubble") {
				var _g36 = -terrylib_Obj.entities[i].para;
				var _g23 = terrylib_Obj.entities[i].para + 1;
				while(_g36 < _g23) {
					var k4 = _g36++;
					var _g54 = -terrylib_Obj.entities[i].para;
					var _g41 = terrylib_Obj.entities[i].para + 1;
					while(_g54 < _g41) {
						var j1 = _g54++;
						if(Math.abs(k4) + Math.abs(j1) < terrylib_Obj.entities[i].para * 2 - 1) {
							gamecontrol_Localworld.lightpoint(terrylib_Obj.entities[i].xp + j1,terrylib_Obj.entities[i].yp + k4,i);
						}
					}
				}
			} else if(terrylib_Obj.entities[i].lightsource == "dogbubble") {
				var _g37 = -terrylib_Obj.entities[i].para;
				var _g24 = terrylib_Obj.entities[i].para + 1;
				while(_g37 < _g24) {
					var k5 = _g37++;
					var _g55 = -terrylib_Obj.entities[i].para;
					var _g42 = terrylib_Obj.entities[i].para + 1;
					while(_g55 < _g42) gamecontrol_Localworld.lightpoint(terrylib_Obj.entities[i].xp + _g55++,terrylib_Obj.entities[i].yp + k5,i);
				}
			} else if(terrylib_Obj.entities[i].lightsource == "laserbeside") {
				var _g25 = -1;
				while(_g25 < 2) {
					var k6 = _g25++;
					var _g38 = -1;
					while(_g38 < 2) gamecontrol_Localworld.laserpoint(terrylib_Obj.entities[i].xp + _g38++,terrylib_Obj.entities[i].yp + k6,i);
				}
			} else if(terrylib_Obj.entities[i].lightsource == "close") {
				var _g26 = -5;
				while(_g26 < 6) {
					var k7 = _g26++;
					var _g39 = -5;
					while(_g39 < 6) {
						var j2 = _g39++;
						if(Math.abs(k7) + Math.abs(j2) < 9) {
							gamecontrol_Localworld.fogpoint(terrylib_Obj.entities[i].xp + j2 | 0,terrylib_Obj.entities[i].yp + k7 | 0);
						}
					}
				}
			}
		}
	}
};
var gamecontrol_Menu = function() { };
$hxClasses["gamecontrol.Menu"] = gamecontrol_Menu;
gamecontrol_Menu.__name__ = ["gamecontrol","Menu"];
gamecontrol_Menu.showtextbox = function() {
	var liney = 7;
	switch(gamecontrol_Menu.showscript) {
	case "alpha_secret":
		liney = 7;
		var lettercontents = ["Hah! You left the map. Nice.","              ","If you do that in the final version, something","cool will happen. It's a secret. Don't tell anyone!","              ","(for now, let's just take you to the next floor...)"];
		var typedlettercontents = [];
		var cursor = 0;
		var currentline = 0;
		while(currentline < lettercontents.length && cursor < (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0)) {
			if(lettercontents[currentline].length > (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) - cursor) {
				typedlettercontents.push(HxOverrides.substr(lettercontents[currentline],0,(gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) - cursor));
				cursor = (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) + 1;
			} else {
				typedlettercontents.push(lettercontents[currentline]);
				cursor += lettercontents[currentline].length;
			}
			++currentline;
		}
		var _g1 = 0;
		var _g = typedlettercontents.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i == 5 || i == 6) {
				gamecontrol_Draw.letterterminalprint(haxegon_Gfx.screenwidthmid - (haxegon_Text.width(lettercontents[i]) / 2 | 0),7 + i,typedlettercontents[i],8947848);
			} else {
				gamecontrol_Draw.letterterminalprint(haxegon_Gfx.screenwidthmid - (haxegon_Text.width(lettercontents[i]) / 2 | 0),7 + i,typedlettercontents[i]);
			}
		}
		break;
	case "alpha_startup":
		liney = 7;
		var lettercontents1 = ["Hello! Thanks for playing the alpha of my new game!","                     ","This is a tiny little thing that I'm hoping to finish","before the end of the year. If you run into any","problems or have any suggestions, let me know!","","I'm @terrycavanagh on twitter, or my blog is at","http://www.distractionware.com"];
		var typedlettercontents1 = [];
		var cursor1 = 0;
		var currentline1 = 0;
		while(currentline1 < lettercontents1.length && cursor1 < (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0)) {
			if(lettercontents1[currentline1].length > (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) - cursor1) {
				typedlettercontents1.push(HxOverrides.substr(lettercontents1[currentline1],0,(gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) - cursor1));
				cursor1 = (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) + 1;
			} else {
				typedlettercontents1.push(lettercontents1[currentline1]);
				cursor1 += lettercontents1[currentline1].length;
			}
			++currentline1;
		}
		var _g11 = 0;
		var _g2 = typedlettercontents1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(i1 == 5 || i1 == 6) {
				gamecontrol_Draw.letterterminalprint(haxegon_Gfx.screenwidthmid - (haxegon_Text.width(lettercontents1[i1]) / 2 | 0),7 + i1,typedlettercontents1[i1],8947848);
			} else {
				gamecontrol_Draw.letterterminalprint(haxegon_Gfx.screenwidthmid - (haxegon_Text.width(lettercontents1[i1]) / 2 | 0),7 + i1,typedlettercontents1[i1]);
			}
		}
		break;
	case "destroyletter":
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,7,"Destroy the letter?");
		break;
	case "drink_no":
		liney = 9;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,9,"You step away from the fountain.");
		break;
	case "drink_question":
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,7,"Would you like to drink the");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,8,"water from the fountain?");
		break;
	case "drink_yes1":
		liney = 8;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,8,"You drink from the fountain.");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,9,"Suddenly, every muscle in your");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10,"body tightens. You feel like");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,11,"a teenager again.");
		break;
	case "drink_yes2":
		liney = 8;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,8,"Each time you drink from the");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,9,"fountain, the effects diminish.");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,11,"Death is inevitable.");
		break;
	case "error":
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,7,"ERROR! ERROR! ABORT! ABORT!");
		break;
	case "inventory":
		if(gamecontrol_Menu.currentmenu < gamecontrol_Menu.menusize - 1) {
			liney = 7 - gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].descriptionsize;
			var _g12 = 0;
			var _g3 = gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].descriptionsize;
			while(_g12 < _g3) {
				var i2 = _g12++;
				gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,liney + i2,gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].description[i2]);
			}
			if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].type == gamecontrol_Inventory.WEAPON) {
				gamecontrol_Draw.rterminalprint(31,0,"WEAPON",haxegon_Col.rgb(96,96,96));
				if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].lethal) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						gamecontrol_Draw.rterminalprint(31,1,"LETHAL",haxegon_Col.rgb(255,96,96));
					} else {
						gamecontrol_Draw.rterminalprint(31,1,"LETHAL",haxegon_Col.rgb(128,96,96));
					}
				} else {
					gamecontrol_Draw.rterminalprint(31,1,"NON LETHAL",haxegon_Col.rgb(96,96,255));
				}
				gamecontrol_Draw.terminalprint(1,0,"WALK INTO ENEMY TO USE WHEN EQUIPPED",11197866);
			}
			if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].type == gamecontrol_Inventory.GADGET) {
				gamecontrol_Draw.rterminalprint(31,0,"GADGET",haxegon_Col.rgb(96,96,96));
				if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].lethal) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						gamecontrol_Draw.rterminalprint(31,1,"LETHAL",haxegon_Col.rgb(255,96,96));
					} else {
						gamecontrol_Draw.rterminalprint(31,1,"LETHAL",haxegon_Col.rgb(128,96,96));
					}
				} else {
					gamecontrol_Draw.rterminalprint(31,1,"NON LETHAL",haxegon_Col.rgb(96,96,255));
				}
				gamecontrol_Draw.rterminalprint(29,liney + gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].descriptionsize + 1,gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].multiname + ": x" + Std.string(gamecontrol_Inventory.inventory_count[gamecontrol_Menu.currentmenu]),haxegon_Col.rgb(164,164,255));
				gamecontrol_Draw.terminalprint(1,0,"PRESS SPACE TO USE WHEN EQUIPPED",11197866);
			}
			if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].type == gamecontrol_Inventory.USEABLE) {
				gamecontrol_Draw.rterminalprint(29,1,"ITEM",haxegon_Col.rgb(96,96,96));
				gamecontrol_Draw.rterminalprint(29,liney + gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].descriptionsize + 1,"x" + Std.string(gamecontrol_Inventory.inventory_count[gamecontrol_Menu.currentmenu]),haxegon_Col.rgb(164,164,255));
			}
			if(gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].type == gamecontrol_Inventory.TREASURE) {
				gamecontrol_Draw.rterminalprint(29,1,"ITEM",haxegon_Col.rgb(96,96,96));
				gamecontrol_Draw.rterminalprint(29,liney + gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[gamecontrol_Menu.currentmenu]].descriptionsize + 1,"x" + Std.string(gamecontrol_Inventory.inventory_count[gamecontrol_Menu.currentmenu]),haxegon_Col.rgb(164,164,255));
			}
		}
		break;
	case "npctest":
		liney = 8;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,8,"I wish I'd never drank from");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,9,"that damn fountain. I'm ready.");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10,"Let me die in peace. ");
		break;
	case "pawnshop":
		liney = 7;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,7,"Welcome to my shop!");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,9,"If you come across anything useful out");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10,"there, let me take a look at it. I might be");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,11,"able to give you a few quid for it.");
		break;
	case "pawnshop2":
		liney = 9;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,9,"Well, not really... Once you go up those");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10,"steps, there's no way back down. Hah!");
		break;
	case "readnow":
		var cl = gamecontrol_Inventory.getitemlistnumfromletter(gamecontrol_Inventory.currentletter);
		liney = 13 - gamecontrol_Inventory.itemlist[cl].descriptionsize;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,liney - 3,"It's a letter.");
		var _g13 = 0;
		var _g4 = gamecontrol_Inventory.itemlist[cl].descriptionsize;
		while(_g13 < _g4) {
			var i3 = _g13++;
			gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,liney + i3,gamecontrol_Inventory.itemlist[cl].description[i3]);
		}
		break;
	case "storeroomletter":
		liney = 9;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,9,"Wow, did you really just rob the storeroom?");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,11,"Tut tut!");
		break;
	case "terry":
		liney = 7;
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,7,"Hey, I'm Terry. Welcome to my world!");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,9,"There's not much out there right now.");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,10,"You should probably just stick exploring");
		gamecontrol_Draw.terminalprint(haxegon_Gfx.CENTER,11,"the tower here.");
		break;
	case "terryletter":
		liney = 4;
		var lettercontents2 = ["Hey! Thanks for playing the alpha!","              ","That's it for now. I'm aiming for 16 floors with a","boss level in the final version, but right now I","just have these 12 floors.","              ","(You can keep playing, but the 12th floor layout will","just keep repeating. See how far you can get!)","              ","Please let me know what you think on my blog - I'm","gonna release a final version just before the new year!","                                          - Terry"];
		var typedlettercontents2 = [];
		var cursor2 = 0;
		var currentline2 = 0;
		while(currentline2 < lettercontents2.length && cursor2 < (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0)) {
			if(lettercontents2[currentline2].length > (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) - cursor2) {
				typedlettercontents2.push(HxOverrides.substr(lettercontents2[currentline2],0,(gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) - cursor2));
				cursor2 = (gamecontrol_Game.lettertime / gamecontrol_Game.letterreadspeed | 0) + 1;
			} else {
				typedlettercontents2.push(lettercontents2[currentline2]);
				cursor2 += lettercontents2[currentline2].length;
			}
			++currentline2;
		}
		var _g14 = 0;
		var _g5 = typedlettercontents2.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			if(i4 == 6 || i4 == 7) {
				gamecontrol_Draw.letterterminalprint(haxegon_Gfx.screenwidthmid - (haxegon_Text.width(lettercontents2[i4]) / 2 | 0),4 + i4,typedlettercontents2[i4],8947848);
			} else {
				gamecontrol_Draw.letterterminalprint(haxegon_Gfx.screenwidthmid - (haxegon_Text.width(lettercontents2[i4]) / 2 | 0),4 + i4,typedlettercontents2[i4]);
			}
		}
		break;
	}
};
gamecontrol_Menu.backtogame = function() {
	gamecontrol_Menu.textmode = 0;
	if(gamecontrol_Inventory.changedequippedarmor) {
		gamecontrol_Inventory.changedequippedarmor = false;
	}
	if(gamecontrol_Inventory.changedequippedweapon && gamecontrol_Inventory.changedequippedgadget) {
		gamecontrol_Inventory.changedequippedweapon = false;
		gamecontrol_Inventory.changedequippedgadget = false;
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Equipped " + gamecontrol_Inventory.itemlist[gamecontrol_Inventory.equippedweapon].name + " and " + gamecontrol_Inventory.itemlist[gamecontrol_Inventory.equippedgadget].name + "!","player");
	} else if(gamecontrol_Inventory.changedequippedweapon) {
		gamecontrol_Inventory.changedequippedweapon = false;
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Equipped " + gamecontrol_Inventory.itemlist[gamecontrol_Inventory.equippedweapon].name + "!","player");
	} else if(gamecontrol_Inventory.changedequippedgadget) {
		gamecontrol_Inventory.changedequippedgadget = false;
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Equipped " + gamecontrol_Inventory.itemlist[gamecontrol_Inventory.equippedgadget].name + "!","player");
	}
};
gamecontrol_Menu.createmenu = function(t) {
	gamecontrol_Menu.clearmenucol();
	gamecontrol_Menu.menusize = 1;
	gamecontrol_Menu.showscript = t;
	gamecontrol_Menu.currentmenu = 0;
	switch(t) {
	case "destroyletter":
		gamecontrol_Menu.menuoptions[0] = "Yes";
		gamecontrol_Menu.menuoptions[1] = "No";
		gamecontrol_Menu.menusize = 2;
		break;
	case "drink_question":
		gamecontrol_Menu.menuoptions[0] = "Drink";
		gamecontrol_Menu.menuoptions[1] = "Don't drink";
		gamecontrol_Menu.menusize = 2;
		break;
	case "gameoptions":
		gamecontrol_Menu.menusize = 0;
		gamecontrol_Menu.menuoptions[gamecontrol_Menu.menusize] = "Open inventory";
		gamecontrol_Menu.menusize++;
		gamecontrol_Menu.menuoptions[gamecontrol_Menu.menusize] = "back";
		gamecontrol_Menu.menusize++;
		break;
	case "inventory":
		var _g1 = 0;
		var _g = gamecontrol_Inventory.numitems;
		while(_g1 < _g) {
			var i = _g1++;
			gamecontrol_Menu.menuoptions[i] = gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].name;
			if(gamecontrol_Inventory.equippedgadget == gamecontrol_Inventory.inventory[i] && gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].type == gamecontrol_Inventory.GADGET) {
				gamecontrol_Menu.menuoptions[i] = gamecontrol_Inventory.itemlist[gamecontrol_Inventory.inventory[i]].name + " (equipped)";
				gamecontrol_Menu.menucol[i] = 2;
			}
		}
		gamecontrol_Menu.menuoptions[gamecontrol_Inventory.numitems] = "back";
		gamecontrol_Menu.menusize = gamecontrol_Inventory.numitems + 1;
		break;
	default:
		gamecontrol_Menu.menuoptions[0] = "";
		gamecontrol_Menu.menusize = 1;
	}
};
gamecontrol_Menu.init = function() {
	var _g = 0;
	while(_g < 120) {
		++_g;
		gamecontrol_Menu.menuoptions.push("");
		gamecontrol_Menu.menucol.push(0);
	}
	gamecontrol_Menu.menusize = 0;
	gamecontrol_Menu.currentmenu = 0;
};
gamecontrol_Menu.clearmenucol = function() {
	var _g = 0;
	while(_g < 120) gamecontrol_Menu.menucol[_g++] = 0;
};
var gamecontrol_Openworld = function() { };
$hxClasses["gamecontrol.Openworld"] = gamecontrol_Openworld;
gamecontrol_Openworld.__name__ = ["gamecontrol","Openworld"];
gamecontrol_Openworld.init = function() {
	var _g = 0;
	while(_g < 100) {
		++_g;
		gamecontrol_Openworld.worldblock.push(new gamecontrol_misc_Worldblockclass());
	}
	gamecontrol_Openworld.worldblock[0].set(0,0,haxegon_Col.rgb(0,0,0),haxegon_Col.rgb(0,0,32));
	var tmp = gamecontrol_Openworld.c(".");
	var tmp1 = gamecontrol_Openworld.c(".");
	gamecontrol_Openworld.worldblock[1].set(tmp,tmp1,haxegon_Col.rgb(64,64,64),haxegon_Col.rgb(64,64,64),haxegon_Col.rgb(32,32,32),haxegon_Col.rgb(32,32,32));
	var tmp2 = gamecontrol_Openworld.c(" ");
	var tmp3 = gamecontrol_Openworld.c(" ");
	gamecontrol_Openworld.worldblock[2].set(tmp2,tmp3,haxegon_Col.rgb(64,64,64),haxegon_Col.rgb(64,64,64),haxegon_Col.rgb(32,32,32),haxegon_Col.rgb(32,32,32));
	var tmp4 = gamecontrol_Openworld.c(" ");
	var tmp5 = gamecontrol_Openworld.c(" ");
	gamecontrol_Openworld.worldblock[3].set(tmp4,tmp5,haxegon_Col.rgb(64,64,64),haxegon_Col.rgb(64,64,64),haxegon_Col.rgb(32,32,32),haxegon_Col.rgb(32,32,32));
	var tmp6 = gamecontrol_Openworld.c("#");
	var tmp7 = gamecontrol_Openworld.c("#");
	gamecontrol_Openworld.worldblock[4].set(tmp6,tmp7,haxegon_Col.rgb(96,96,96),haxegon_Col.rgb(96,96,96),haxegon_Col.rgb(32,32,32),haxegon_Col.rgb(32,32,32));
	gamecontrol_Openworld.worldblock[5].set(177,177,haxegon_Col.rgb(160,32,32),haxegon_Col.rgb(160,16,16));
	gamecontrol_Openworld.worldblock[6].set(8,8,haxegon_Col.rgb(220,220,220),haxegon_Col.rgb(160,160,160));
	gamecontrol_Openworld.worldblock[7].set(219,219,haxegon_Col.rgb(96,96,96),haxegon_Col.rgb(96,96,96));
	var tmp8 = gamecontrol_Openworld.c("+");
	var tmp9 = gamecontrol_Openworld.c("+");
	gamecontrol_Openworld.worldblock[8].set(tmp8,tmp9,haxegon_Col.rgb(64,220,64),haxegon_Col.rgb(32,160,32));
};
gamecontrol_Openworld.checkforroomchange = function() {
	if(!gamecontrol_Openworld.inside) {
		var player = terrylib_Obj.getplayer();
		if(!terrylib_Help.inboxw(terrylib_Obj.entities[player].xp,terrylib_Obj.entities[player].yp,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
			if(terrylib_Obj.entities[player].xp < 0) {
				terrylib_Obj.entities[player].xp += 32;
				gamecontrol_Openworld.worldx--;
			} else if(terrylib_Obj.entities[player].xp >= 32) {
				terrylib_Obj.entities[player].xp -= 32;
				gamecontrol_Openworld.worldx++;
			} else if(terrylib_Obj.entities[player].yp < 0) {
				terrylib_Obj.entities[player].yp += 19;
				gamecontrol_Openworld.worldy--;
			} else if(terrylib_Obj.entities[player].yp >= 19) {
				terrylib_Obj.entities[player].yp -= 19;
				gamecontrol_Openworld.worldy++;
			}
			gamecontrol_Game.changeroom("outside");
			if(gamecontrol_Localworld.onfire) {
				gamecontrol_Localworld.extingushfireblock(terrylib_Obj.entities[player].xp,terrylib_Obj.entities[player].yp);
			}
			gamecontrol_Localworld.updatelighting();
		}
	}
};
gamecontrol_Openworld.roomat = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,gamecontrol_Openworld.worldwidth - 1,gamecontrol_Openworld.worldheight - 1)) {
		gamecontrol_Openworld.temp = terrylib_World.worldmap[x + y * gamecontrol_Openworld.worldwidth];
		switch(gamecontrol_Openworld.temp) {
		case 0:
			return "outside_ruin";
		case 1:case 2:case 3:case 4:
			if(x == 0 || y == 0 || x == gamecontrol_Openworld.worldwidth - 1 || y == gamecontrol_Openworld.worldheight - 1) {
				return "outside_boundary";
			}
			return "outside_ruin";
		case 5:
			return "outside_river";
		case 6:
			if(x == 0 || y == 0 || x == gamecontrol_Openworld.worldwidth - 1 || y == gamecontrol_Openworld.worldheight - 1) {
				return "outside_boundary";
			}
			return "outside_building";
		case 7:
			if(x == 0 || y == 0 || x == gamecontrol_Openworld.worldwidth - 1 || y == gamecontrol_Openworld.worldheight - 1) {
				return "outside_boundary";
			}
			return "outside_ruin";
		case 8:
			return "outside_camp";
		}
	}
	return "wasteland";
};
gamecontrol_Openworld.c = function(t) {
	return HxOverrides.cca(t,0);
};
gamecontrol_Openworld.charmap = function(t,fog) {
	if(fog == 1) {
		return gamecontrol_Openworld.worldblock[t].charcode_fog;
	} else {
		return 0;
	}
};
gamecontrol_Openworld.colourmap = function(t,fog) {
	if(fog == 1) {
		return gamecontrol_Openworld.worldblock[t].front_fog;
	} else {
		return 0;
	}
};
gamecontrol_Openworld.backcolourmap = function(t,fog) {
	if(fog == 1) {
		return gamecontrol_Openworld.worldblock[t].back_fog;
	}
	return 0;
};
gamecontrol_Openworld.changemapsize = function(w,h) {
	gamecontrol_Openworld.worldwidth = w;
	gamecontrol_Openworld.worldheight = h;
};
gamecontrol_Openworld.xstep = function(t,dif) {
	if(dif == null) {
		dif = 1;
	}
	if(t == terrylib_Help.LEFT) {
		return -dif;
	}
	if(t == terrylib_Help.RIGHT) {
		return dif;
	}
	return 0;
};
gamecontrol_Openworld.ystep = function(t,dif) {
	if(dif == null) {
		dif = 1;
	}
	if(t == terrylib_Help.UP) {
		return -dif;
	}
	if(t == terrylib_Help.DOWN) {
		return dif;
	}
	return 0;
};
gamecontrol_Openworld.generateroomseed = function(x,y,t) {
	if(terrylib_Help.inboxw(x,y,0,0,gamecontrol_Openworld.worldwidth - 1,gamecontrol_Openworld.worldheight - 1)) {
		terrylib_World.worldmapseed[x + y * gamecontrol_Openworld.worldwidth] = t;
	}
};
gamecontrol_Openworld.getroomseed = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,gamecontrol_Openworld.worldwidth - 1,gamecontrol_Openworld.worldheight - 1)) {
		return terrylib_World.worldmapseed[x + y * gamecontrol_Openworld.worldwidth];
	}
	return gamecontrol_Openworld.worldseed + x + gamecontrol_Openworld.worldwidth * y;
};
gamecontrol_Openworld.placetile = function(x,y,t) {
	if(terrylib_Help.inboxw(x,y,0,0,gamecontrol_Openworld.worldwidth - 1,gamecontrol_Openworld.worldheight - 1)) {
		terrylib_World.worldmap[x + y * gamecontrol_Openworld.worldwidth] = t;
	}
};
gamecontrol_Openworld.at = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,gamecontrol_Openworld.worldwidth - 1,gamecontrol_Openworld.worldheight - 1)) {
		return terrylib_World.worldmap[x + y * gamecontrol_Openworld.worldwidth];
	}
	return 0;
};
gamecontrol_Openworld.ruinat = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,gamecontrol_Openworld.worldwidth - 1,gamecontrol_Openworld.worldheight - 1)) {
		var t = terrylib_World.worldmap[x + y * gamecontrol_Openworld.worldwidth];
		if(t == 1 || t == 2 || t == 3 || t == 4) {
			return true;
		}
	}
	return false;
};
gamecontrol_Openworld.fogpoint = function(x,y) {
	if(terrylib_Help.inboxw(x,y,0,0,gamecontrol_Openworld.worldwidth,gamecontrol_Openworld.worldheight)) {
		terrylib_World.worldmapfog[x + y * gamecontrol_Openworld.worldwidth] = 1;
	}
};
gamecontrol_Openworld.fogat = function(x,y) {
	return 1;
};
gamecontrol_Openworld.drawmap = function(x,y,tileset) {
	var t;
	var _g = 0;
	while(_g < 21) {
		var j = _g++;
		var _g1 = 0;
		while(_g1 < 49) {
			var i = _g1++;
			t = gamecontrol_Openworld.at(i,j);
			if(t > 0) {
				haxegon_Gfx.fillbox((i + x) * 12,(j + y) * 12,12,12,gamecontrol_Openworld.backcolourmap(t,gamecontrol_Openworld.fogat(i,j)));
				haxegon_Gfx.imagecolor(gamecontrol_Openworld.colourmap(t,gamecontrol_Openworld.fogat(i,j)));
				haxegon_Gfx.drawtile((i + x) * 12,(j + y) * 12,tileset,gamecontrol_Openworld.charmap(t,gamecontrol_Openworld.fogat(i,j)));
				haxegon_Gfx.imagecolor();
			}
		}
	}
	if(gamecontrol_Openworld.viewmap <= 0) {
		haxegon_Gfx.fillbox((gamecontrol_Openworld.worldx + x) * 12,(gamecontrol_Openworld.worldy + y) * 12,12,12,haxegon_Col.BLACK);
		haxegon_Gfx.drawtile((gamecontrol_Openworld.worldx + x) * 12,(gamecontrol_Openworld.worldy + y) * 12,tileset,HxOverrides.cca("@",0));
	} else if(terrylib_Help.tenseconds % 20 >= 10) {
		haxegon_Gfx.fillbox((gamecontrol_Openworld.worldx + x) * 12,(gamecontrol_Openworld.worldy + y) * 12,12,12,haxegon_Col.BLACK);
		haxegon_Gfx.drawtile((gamecontrol_Openworld.worldx + x) * 12,(gamecontrol_Openworld.worldy + y) * 12,tileset,HxOverrides.cca("@",0));
	}
};
gamecontrol_Openworld.flood = function() {
	var _g1 = 0;
	var _g = gamecontrol_Openworld.worldheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = gamecontrol_Openworld.worldwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(gamecontrol_Openworld.at(i,j) == 5) {
				var _g4 = -1;
				while(_g4 < 2) {
					var j2 = _g4++;
					var _g5 = -1;
					while(_g5 < 2) {
						var i2 = _g5++;
						if(gamecontrol_Openworld.at(i + i2,j + j2) != 5) {
							gamecontrol_Openworld.placetile(i + i2,j + j2,-1);
						}
					}
				}
			}
		}
	}
	var _g11 = 0;
	var _g6 = gamecontrol_Openworld.worldheight;
	while(_g11 < _g6) {
		var j1 = _g11++;
		var _g31 = 0;
		var _g21 = gamecontrol_Openworld.worldwidth;
		while(_g31 < _g21) {
			var i1 = _g31++;
			if(gamecontrol_Openworld.at(i1,j1) == -1) {
				gamecontrol_Openworld.placetile(i1,j1,terrylib_Rand.ppickint(5,5,terrylib_Rand.ppickint(1,2,3,4)));
			}
		}
	}
};
gamecontrol_Openworld.getbordertile = function() {
	if(terrylib_Rand.prandom() < 0.5) {
		gamecontrol_Openworld.getborderhorizontal();
	} else {
		gamecontrol_Openworld.getbordervertical();
	}
};
gamecontrol_Openworld.getborderhorizontal = function() {
	if(terrylib_Rand.prandom() < 0.5) {
		gamecontrol_Openworld.ty = 0;
		gamecontrol_Openworld.tdir = terrylib_Help.DOWN;
	} else {
		gamecontrol_Openworld.ty = gamecontrol_Openworld.worldheight - 1;
		gamecontrol_Openworld.tdir = terrylib_Help.UP;
	}
	var from = (gamecontrol_Openworld.worldwidth / 2 | 0) - 10;
	gamecontrol_Openworld.tx = from + Math.floor(((gamecontrol_Openworld.worldwidth / 2 | 0) + 10 - from + 1) * terrylib_Rand.prandom());
};
gamecontrol_Openworld.getbordervertical = function() {
	if(terrylib_Rand.prandom() < 0.5) {
		gamecontrol_Openworld.tx = 0;
		gamecontrol_Openworld.tdir = terrylib_Help.RIGHT;
	} else {
		gamecontrol_Openworld.tx = gamecontrol_Openworld.worldwidth - 1;
		gamecontrol_Openworld.tdir = terrylib_Help.LEFT;
	}
	var from = (gamecontrol_Openworld.worldheight / 2 | 0) - 4;
	gamecontrol_Openworld.ty = from + Math.floor(((gamecontrol_Openworld.worldheight / 2 | 0) + 4 - from + 1) * terrylib_Rand.prandom());
};
gamecontrol_Openworld.riverflow = function(x,y,dir) {
	gamecontrol_Openworld.tx = x;
	gamecontrol_Openworld.ty = y;
	gamecontrol_Openworld.tr = Math.floor(101 * terrylib_Rand.prandom());
	if(gamecontrol_Openworld.tr < 60) {
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
	} else if(gamecontrol_Openworld.tr < 80) {
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		dir = terrylib_Help.clockwise(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		dir = terrylib_Help.anticlockwise(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
	} else {
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		dir = terrylib_Help.anticlockwise(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
		dir = terrylib_Help.clockwise(dir);
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,5);
		gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(dir);
		gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(dir);
	}
	if(terrylib_Help.inboxw(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,0,0,gamecontrol_Openworld.worldwidth,gamecontrol_Openworld.worldheight)) {
		gamecontrol_Openworld.riverflow(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,dir);
	}
};
gamecontrol_Openworld.drive = function() {
	gamecontrol_Openworld.tx = gamecontrol_Openworld.tx + gamecontrol_Openworld.xstep(gamecontrol_Openworld.tdir);
	gamecontrol_Openworld.ty = gamecontrol_Openworld.ty + gamecontrol_Openworld.ystep(gamecontrol_Openworld.tdir);
};
gamecontrol_Openworld.roadflow = function(x,y,dir) {
	gamecontrol_Openworld.tx = x;
	gamecontrol_Openworld.ty = y;
	gamecontrol_Openworld.tdir = dir;
	gamecontrol_Openworld.tr = Math.floor(101 * terrylib_Rand.prandom());
	if(gamecontrol_Openworld.tr < 90) {
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
	} else {
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
		gamecontrol_Openworld.tdir = terrylib_Rand.ppickint(terrylib_Help.clockwise(gamecontrol_Openworld.tdir),terrylib_Help.anticlockwise(gamecontrol_Openworld.tdir));
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,7);
		gamecontrol_Openworld.drive();
	}
	if(terrylib_Help.inboxw(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,0,0,gamecontrol_Openworld.worldwidth,gamecontrol_Openworld.worldheight)) {
		gamecontrol_Openworld.roadflow(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,gamecontrol_Openworld.tdir);
	}
};
gamecontrol_Openworld.placeatrandom_avoiding = function(block,avoid1,avoid2,avoid3) {
	if(avoid3 == null) {
		avoid3 = 0;
	}
	if(avoid2 == null) {
		avoid2 = 0;
	}
	if(avoid1 == null) {
		avoid1 = 0;
	}
	gamecontrol_Openworld.tx = -1;
	gamecontrol_Openworld.attempts = 250;
	while(gamecontrol_Openworld.attempts > 0 && (gamecontrol_Openworld.tx == -1 || !gamecontrol_Openworld.ruinat(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty))) {
		gamecontrol_Openworld.tx = 2 + Math.floor((gamecontrol_Openworld.worldwidth - 3 - 2 + 1) * terrylib_Rand.prandom());
		gamecontrol_Openworld.ty = 2 + Math.floor((gamecontrol_Openworld.worldheight - 3 - 2 + 1) * terrylib_Rand.prandom());
	}
	if(gamecontrol_Openworld.attempts > 0) {
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,block);
	} else {
		var checknearby = 0;
		var _g = -2;
		while(_g < 3) {
			var j = _g++;
			var _g1 = -2;
			while(_g1 < 3) {
				var i = _g1++;
				if(gamecontrol_Openworld.at(gamecontrol_Openworld.tx + i,gamecontrol_Openworld.ty + j) == block || gamecontrol_Openworld.at(gamecontrol_Openworld.tx + i,gamecontrol_Openworld.ty + j) == avoid1 || gamecontrol_Openworld.at(gamecontrol_Openworld.tx + i,gamecontrol_Openworld.ty + j) == avoid2 || gamecontrol_Openworld.at(gamecontrol_Openworld.tx + i,gamecontrol_Openworld.ty + j) == avoid3) {
					checknearby = 1;
				}
			}
		}
		if(checknearby == 1) {
			gamecontrol_Openworld.placeatrandom_avoiding(block,avoid1,avoid2,avoid3);
		} else {
			gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,block);
		}
	}
};
gamecontrol_Openworld.placeatcenter_avoiding = function(block,avoid1,avoid2,avoid3) {
	if(avoid3 == null) {
		avoid3 = 0;
	}
	if(avoid2 == null) {
		avoid2 = 0;
	}
	if(avoid1 == null) {
		avoid1 = 0;
	}
	gamecontrol_Openworld.tx = -1;
	gamecontrol_Openworld.attempts = 250;
	while(gamecontrol_Openworld.attempts > 0 && (gamecontrol_Openworld.tx == -1 || !gamecontrol_Openworld.ruinat(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty))) {
		var from = (gamecontrol_Openworld.worldwidth / 2 | 0) - 8;
		gamecontrol_Openworld.tx = from + Math.floor(((gamecontrol_Openworld.worldwidth / 2 | 0) + 8 - from + 1) * terrylib_Rand.prandom());
		var from1 = (gamecontrol_Openworld.worldheight / 2 | 0) - 5;
		gamecontrol_Openworld.ty = from1 + Math.floor(((gamecontrol_Openworld.worldheight / 2 | 0) + 5 - from1 + 1) * terrylib_Rand.prandom());
		gamecontrol_Openworld.attempts--;
	}
	if(gamecontrol_Openworld.attempts > 0) {
		gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,block);
	} else {
		var checknearby = 0;
		var _g = -2;
		while(_g < 3) {
			var j = _g++;
			var _g1 = -2;
			while(_g1 < 3) {
				var i = _g1++;
				if(gamecontrol_Openworld.at(gamecontrol_Openworld.tx + i,gamecontrol_Openworld.ty + j) == block || gamecontrol_Openworld.at(gamecontrol_Openworld.tx + i,gamecontrol_Openworld.ty + j) == avoid1 || gamecontrol_Openworld.at(gamecontrol_Openworld.tx + i,gamecontrol_Openworld.ty + j) == avoid2 || gamecontrol_Openworld.at(gamecontrol_Openworld.tx + i,gamecontrol_Openworld.ty + j) == avoid3) {
					checknearby = 1;
				}
			}
		}
		if(checknearby == 1) {
			gamecontrol_Openworld.placeatrandom_avoiding(block,avoid1,avoid2,avoid3);
		} else {
			gamecontrol_Openworld.placetile(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,block);
		}
	}
};
gamecontrol_Openworld.gotocamp = function() {
	var _g1 = 0;
	var _g = gamecontrol_Openworld.worldheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = gamecontrol_Openworld.worldwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(gamecontrol_Openworld.at(i,j) == 8) {
				gamecontrol_Openworld.worldx = i;
				gamecontrol_Openworld.worldy = j;
			}
		}
	}
};
gamecontrol_Openworld.generate = function(t) {
	gamecontrol_Openworld.worldseed = 0;
	var _g1 = 0;
	var _g = t.length;
	while(_g1 < _g) {
		var i = _g1++;
		gamecontrol_Openworld.worldseed += HxOverrides.cca(terrylib_Help.Mid(t,i),0) * HxOverrides.cca(terrylib_Help.Mid(t,i),0) % 233280;
	}
	terrylib_Rand.setseed(gamecontrol_Openworld.worldseed);
	gamecontrol_Openworld.changemapsize(40,18);
	var _g11 = 0;
	var _g2 = gamecontrol_Openworld.worldheight;
	while(_g11 < _g2) {
		var j = _g11++;
		var _g3 = 0;
		var _g21 = gamecontrol_Openworld.worldwidth;
		while(_g3 < _g21) {
			var i1 = _g3++;
			gamecontrol_Openworld.placetile(i1,j,terrylib_Rand.ppickint(1,2,3,4));
			gamecontrol_Openworld.generateroomseed(i1,j,Math.floor(233281 * terrylib_Rand.prandom()) * Math.floor(233281 * terrylib_Rand.prandom()) % 233280);
		}
	}
	gamecontrol_Openworld.getborderhorizontal();
	gamecontrol_Openworld.roadflow(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,gamecontrol_Openworld.tdir);
	gamecontrol_Openworld.getbordervertical();
	gamecontrol_Openworld.roadflow(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,gamecontrol_Openworld.tdir);
	gamecontrol_Openworld.getbordervertical();
	gamecontrol_Openworld.roadflow(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,gamecontrol_Openworld.tdir);
	if(Math.floor(101 * terrylib_Rand.prandom()) > 95) {
		gamecontrol_Openworld.getborderhorizontal();
		gamecontrol_Openworld.roadflow(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,gamecontrol_Openworld.tdir);
	}
	if(Math.floor(101 * terrylib_Rand.prandom()) > 95) {
		gamecontrol_Openworld.getbordertile();
		gamecontrol_Openworld.riverflow(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,gamecontrol_Openworld.tdir);
	}
	gamecontrol_Openworld.getbordertile();
	gamecontrol_Openworld.riverflow(gamecontrol_Openworld.tx,gamecontrol_Openworld.ty,gamecontrol_Openworld.tdir);
	gamecontrol_Openworld.flood();
	gamecontrol_Openworld.flood();
	var _g4 = 0;
	while(_g4 < 10) {
		++_g4;
		gamecontrol_Openworld.placeatrandom_avoiding(6,5);
	}
	gamecontrol_Openworld.placeatcenter_avoiding(8,5,6);
	gamecontrol_Openworld.gotocamp();
};
var gamecontrol_Roomclass = function() {
	this.connectedrooms = [];
	this.connections = [];
	this.vmult = [];
	this.odds = [];
	this.contents = [];
	var _g = 0;
	while(_g < 20) {
		++_g;
		var _g1 = 0;
		while(_g1 < 20) {
			++_g1;
			this.contents.push(0);
			this.odds.push(0);
		}
	}
	var _g2 = 0;
	while(_g2 < 30) {
		++_g2;
		this.vmult.push(0);
		this.connections.push(new gamecontrol_misc_Roomconnection());
		this.connectedrooms.push(0);
	}
	this.numconnectedrooms = 0;
};
$hxClasses["gamecontrol.Roomclass"] = gamecontrol_Roomclass;
gamecontrol_Roomclass.__name__ = ["gamecontrol","Roomclass"];
gamecontrol_Roomclass.prototype = {
	changemapsize: function(w,h) {
		this.width = w;
		this.height = h;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var i = _g1++;
			this.vmult[i] = i * this.width;
		}
	}
	,clear: function() {
		var _g = 0;
		while(_g < 20) {
			var j = _g++;
			var _g1 = 0;
			while(_g1 < 20) {
				var i = _g1++;
				this.contents[i + j * 20] = 0;
				this.contents[i + j * 20] = 0;
			}
		}
		this.numconnections = 0;
		this.numconnectedrooms = 0;
		this.grounded = false;
	}
	,load: function(x,y,_category,_roomnumber) {
		this.setrect(x,y,config_Roomcache.width(_category,_roomnumber),config_Roomcache.height(_category,_roomnumber));
		this.category = _category;
		this.roomnumber = _roomnumber;
		this.numconnectedrooms = 0;
		this.grounded = false;
		this.doorodds = 2;
		if(terrylib_Help.isinstring(this.category,"ripple")) {
			this.doorodds = 1;
		} else if(terrylib_Help.isinstring(this.category,"exit")) {
			this.doorodds = 3;
		}
		this.fillcontents();
		this.makeconnectionlist();
	}
	,setrect: function(_x,_y,_w,_h) {
		this.x = _x;
		this.y = _y;
		this.changemapsize(_w,_h);
	}
	,contains: function(xp,yp) {
		if(xp >= this.x && yp >= this.y) {
			if(xp < this.x + this.width && yp < this.y + this.height) {
				return true;
			}
		}
		return false;
	}
	,blockat: function(xp,yp) {
		this.temp = this.at(xp - this.x,yp - this.y);
		switch(this.temp) {
		case 2:
			gamecontrol_Generator.placelater(xp,yp,"npc","Key");
			return gamecontrol_Localworld.FLOOR;
		case 3:
			gamecontrol_Generator.placelater(xp,yp,"npc","randomitem");
			return gamecontrol_Localworld.FLOOR;
		case 4:
			gamecontrol_Generator.placelater(xp,yp,"item","lightbulb");
			return gamecontrol_Localworld.FLOOR;
		case 7:
			return gamecontrol_Localworld.WALL;
		case 12:
			return gamecontrol_Localworld.KEY;
		case 14:
			gamecontrol_Generator.placelater(xp,yp,"item","sword");
			return gamecontrol_Localworld.FLOOR;
		case 15:
			gamecontrol_Generator.placelater(xp,yp,"enemy","drone_light");
			return gamecontrol_Localworld.FLOOR;
		case 16:
			gamecontrol_Generator.placelater(xp,yp,"item","leaf blower");
			return gamecontrol_Localworld.FLOOR;
		case 18:
			gamecontrol_Generator.placelater(xp,yp,"enemy","drone_laser");
			return gamecontrol_Localworld.FLOOR;
		case 21:
			gamecontrol_Generator.placelater(xp,yp,"item","pistol");
			return gamecontrol_Localworld.FLOOR;
		case 23:
			gamecontrol_Generator.placelater(xp,yp,"item","drill");
			return gamecontrol_Localworld.FLOOR;
		case 24:
			gamecontrol_Generator.placelater(xp,yp,"item",terrylib_Rand.ppickstring("drill","lightbulb","first aid kit","signal jammer","skateboard","leaf blower","banana"));
			return gamecontrol_Localworld.FLOOR;
		case 25:
			gamecontrol_Generator.placelater(xp,yp,"item",terrylib_Rand.ppickstring("drill","time stopper","cardboard box","teleporter","pistol","fire extinguisher","sword","bomb"));
			return gamecontrol_Localworld.FLOOR;
		case 32:
			return gamecontrol_Localworld.BACKGROUND;
		case 36:
			gamecontrol_Generator.placelater(xp,yp,"treasure","gem");
			return gamecontrol_Localworld.FLOOR;
		case 38:
			return gamecontrol_Localworld.LOCKEDDOOR;
		case 46:
			return gamecontrol_Localworld.FLOOR;
		case 63:
			gamecontrol_Game.addplacement("collectable","any",xp,yp,0);
			return gamecontrol_Localworld.FLOOR;
		case 66:
			gamecontrol_Generator.placelater(xp,yp,"enemy","bombbot");
			return gamecontrol_Localworld.FLOOR;
		case 67:
			gamecontrol_Generator.placelater(xp,yp,"enemy","camera");
			return gamecontrol_Localworld.FLOOR;
		case 68:
			gamecontrol_Generator.placelater(xp,yp,"enemy","dog");
			return gamecontrol_Localworld.FLOOR;
		case 69:
			gamecontrol_Generator.placelater(xp,yp,"enemy","laserguard");
			return gamecontrol_Localworld.FLOOR;
		case 70:
			gamecontrol_Generator.placelater(xp,yp,"enemy","fireman");
			return gamecontrol_Localworld.FLOOR;
		case 71:
			gamecontrol_Generator.placelater(xp,yp,"enemy","guard");
			return gamecontrol_Localworld.FLOOR;
		case 72:
			gamecontrol_Generator.placelater(xp,yp,"enemy","guard_clockwise_u");
			return gamecontrol_Localworld.FLOOR;
		case 73:
			gamecontrol_Generator.placelater(xp,yp,"enemy","guard_clockwise_r");
			return gamecontrol_Localworld.FLOOR;
		case 74:
			gamecontrol_Generator.placelater(xp,yp,"enemy","guard_clockwise_d");
			return gamecontrol_Localworld.FLOOR;
		case 75:
			gamecontrol_Generator.placelater(xp,yp,"enemy","guard_clockwise_l");
			return gamecontrol_Localworld.FLOOR;
		case 76:
			gamecontrol_Generator.placelater(xp,yp,"enemy","lasersentinal");
			return gamecontrol_Localworld.FLOOR;
		case 78:
			gamecontrol_Generator.placelater(xp,yp,"item","bomb");
			return gamecontrol_Localworld.FLOOR;
		case 79:
			return gamecontrol_Localworld.DOOR;
		case 83:
			gamecontrol_Generator.placelater(xp,yp,"enemy","sentinal");
			return gamecontrol_Localworld.FLOOR;
		case 88:
			gamecontrol_Generator.placelater(xp,yp,"enemy","lasercamera");
			return gamecontrol_Localworld.FLOOR;
		case 90:
			gamecontrol_Generator.placelater(xp,yp,"item","portable door");
			return gamecontrol_Localworld.FLOOR;
		case 144:
			gamecontrol_Generator.placelater(xp,yp,"enemy","tripwire_up");
			return gamecontrol_Localworld.FLOOR;
		case 145:
			gamecontrol_Generator.placelater(xp,yp,"enemy","tripwire_down");
			return gamecontrol_Localworld.FLOOR;
		case 146:
			gamecontrol_Generator.placelater(xp,yp,"enemy","tripwire_left");
			return gamecontrol_Localworld.FLOOR;
		case 147:
			gamecontrol_Generator.placelater(xp,yp,"enemy","tripwire_right");
			return gamecontrol_Localworld.FLOOR;
		case 148:
			gamecontrol_Generator.placelater(xp,yp,"enemy","laserwire_up");
			return gamecontrol_Localworld.FLOOR;
		case 149:
			gamecontrol_Generator.placelater(xp,yp,"enemy","laserwire_down");
			return gamecontrol_Localworld.FLOOR;
		case 150:
			gamecontrol_Generator.placelater(xp,yp,"enemy","laserwire_left");
			return gamecontrol_Localworld.FLOOR;
		case 151:
			gamecontrol_Generator.placelater(xp,yp,"enemy","laserwire_right");
			return gamecontrol_Localworld.FLOOR;
		case 165:
			gamecontrol_Generator.placelater(xp,yp,"enemy","rook");
			return gamecontrol_Localworld.FLOOR;
		case 177:
			return gamecontrol_Localworld.WALL;
		case 233:
			gamecontrol_Generator.placelater(xp,yp,"enemy","robot");
			return gamecontrol_Localworld.FLOOR;
		case 234:
			gamecontrol_Generator.placelater(xp,yp,"enemy","terminator");
			return gamecontrol_Localworld.FLOOR;
		case 240:
			gamecontrol_Game.addplacement("stairs","stairs",xp,yp,0);
			return gamecontrol_Localworld.FLOOR;
		default:
		}
		return gamecontrol_Localworld.FLOOR;
	}
	,at: function(xp,yp) {
		if(xp >= 0 && yp >= 0 && xp < this.width && yp < this.height) {
			return this.contents[xp + this.vmult[yp]];
		}
		return 0;
	}
	,pset: function(xp,yp,t) {
		if(xp >= 0 && yp >= 0 && xp < this.width && yp < this.height) {
			this.contents[xp + this.vmult[yp]] = t;
		}
	}
	,psetodds: function(xp,yp,t) {
		if(xp >= 0 && yp >= 0 && xp < this.width && yp < this.height) {
			this.odds[xp + this.vmult[yp]] = t;
		}
	}
	,fillcontents: function() {
		this.roomarray = config_Roomcache.getroomstring(this.category,this.roomnumber);
		this.temp = 2;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var i = _g3++;
				this.pset(i,j,this.roomarray[this.temp]);
				this.psetodds(i,j,this.roomarray[this.temp + 1]);
				this.temp += 2;
			}
		}
	}
	,makeconnectionlist: function() {
		this.numconnections = 0;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var i = _g3++;
				if(this.contents[i + this.vmult[j]] == 7) {
					this.temp = terrylib_Help.NODIRECTION;
					if(i == 0) {
						this.temp = terrylib_Help.LEFT;
					} else if(j == 0) {
						this.temp = terrylib_Help.UP;
					} else if(i == this.width - 1) {
						this.temp = terrylib_Help.RIGHT;
					} else if(j == this.height - 1) {
						this.temp = terrylib_Help.DOWN;
					} else if(this.at(i,j - 1) == 32) {
						this.temp = terrylib_Help.UP;
					} else if(this.at(i,j + 1) == 32) {
						this.temp = terrylib_Help.DOWN;
					} else if(this.at(i - 1,j) == 32) {
						this.temp = terrylib_Help.LEFT;
					} else if(this.at(i + 1,j) == 32) {
						this.temp = terrylib_Help.RIGHT;
					} else {
						this.temp = terrylib_Help.NODIRECTION;
					}
					this.connections[this.numconnections].set(i,j,this.temp);
					this.numconnections++;
				}
			}
		}
	}
	,getconnection: function(d) {
		if(d == null) {
			d = -1;
		}
		gamecontrol_Generator.numconnectionsort = 0;
		var _g1 = 0;
		var _g = this.numconnections;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.connections[i].dir == d || d == -1 && !this.connections[i].inuse) {
				gamecontrol_Generator.connectionsort[gamecontrol_Generator.numconnectionsort] = i;
				gamecontrol_Generator.numconnectionsort++;
			}
		}
		if(gamecontrol_Generator.numconnectionsort > 0) {
			var pick = Math.floor((gamecontrol_Generator.numconnectionsort - 1 + 1) * terrylib_Rand.prandom());
			this.connections[pick].inuse = true;
			return gamecontrol_Generator.connectionsort[pick];
		} else {
			return -1;
		}
	}
	,connectto: function(thisroom,newroom) {
		var alreadyconnected = false;
		var _g1 = 0;
		var _g = this.numconnectedrooms;
		while(_g1 < _g) if(this.connectedrooms[_g1++] == newroom) {
			alreadyconnected = true;
			if(this.grounded) {
				gamecontrol_Generator.rooms[newroom].groundroom();
			}
		}
		if(!alreadyconnected) {
			this.connectedrooms[this.numconnectedrooms] = newroom;
			this.numconnectedrooms++;
			gamecontrol_Generator.rooms[newroom].connectto(newroom,thisroom);
			if(this.grounded) {
				gamecontrol_Generator.rooms[newroom].groundroom();
			}
		}
	}
	,groundroom: function() {
		if(!this.grounded) {
			this.grounded = true;
			var _g1 = 0;
			var _g = this.numconnectedrooms;
			while(_g1 < _g) gamecontrol_Generator.rooms[_g1++].groundroom();
		}
	}
	,isconnectedtoroom: function(t) {
		var _g1 = 0;
		var _g = this.numconnectedrooms;
		while(_g1 < _g) if(this.connectedrooms[_g1++] == t) {
			return true;
		}
		return false;
	}
	,x: null
	,y: null
	,width: null
	,height: null
	,temp: null
	,grounded: null
	,doorodds: null
	,category: null
	,roomnumber: null
	,roomarray: null
	,facing: null
	,contents: null
	,odds: null
	,vmult: null
	,connections: null
	,numconnections: null
	,connectedrooms: null
	,numconnectedrooms: null
	,__class__: gamecontrol_Roomclass
};
var gamecontrol_Script = function() { };
$hxClasses["gamecontrol.Script"] = gamecontrol_Script;
gamecontrol_Script.__name__ = ["gamecontrol","Script"];
gamecontrol_Script.load = function(t) {
	gamecontrol_Script.position = 0;
	gamecontrol_Script.scriptlength = 0;
	gamecontrol_Script.parsetext = false;
	if(t == "hardcoded") {
		gamecontrol_Script.s("talk(enter hardcoded scripts here, not in the generated script file!)");
	} else if(!gamecontrol_Script.loadexternalscript(t)) {
		if(!config_Scriptcache.localloadscript(t)) {
			haxe_Log.trace("Error: Can't find script " + t,{ fileName : "Script.hx", lineNumber : 18, className : "gamecontrol.Script", methodName : "load"});
		}
	}
	gamecontrol_Script.running = true;
};
gamecontrol_Script.s = function(t) {
	gamecontrol_Script.add(t);
};
gamecontrol_Script.runscript = function() {
	while(gamecontrol_Script.running && gamecontrol_Script.scriptdelay <= 0 && !gamecontrol_Script.pausescript) if(gamecontrol_Script.position < gamecontrol_Script.scriptlength) {
		gamecontrol_Script.tokenize(gamecontrol_Script.commands[gamecontrol_Script.position]);
		if(gamecontrol_Script.parsetext) {
			terrylib_Textbox.addline(terrylib_Help.trimspaces(gamecontrol_Script.words[0]));
		} else if(gamecontrol_Script.words[0] == "if") {
			if(terrylib_Flag.istrue(gamecontrol_Script.words[1])) {
				gamecontrol_Script.load(gamecontrol_Script.words[2]);
				gamecontrol_Script.position--;
			}
		} else if(gamecontrol_Script.words[0] == "endif") {
			if(terrylib_Flag.istrue(gamecontrol_Script.words[1])) {
				gamecontrol_Script.position = gamecontrol_Script.scriptlength;
			}
		} else if(gamecontrol_Script.words[0] == "settrue") {
			terrylib_Flag.settrue(gamecontrol_Script.words[1]);
		} else if(gamecontrol_Script.words[0] == "setfalse") {
			terrylib_Flag.setfalse(gamecontrol_Script.words[1]);
		} else if(gamecontrol_Script.words[0] == "fadeout") {
			gamecontrol_Draw.fademode = 2;
			if(gamecontrol_Script.words[1] != "") {
				gamecontrol_Draw.fadeaction = gamecontrol_Script.words[1];
			}
		} else if(gamecontrol_Script.words[0] == "music") {
			haxegon_Music.playsong(gamecontrol_Script.words[1]);
		} else if(gamecontrol_Script.words[0] == "sound") {
			haxegon_Music.playsound(gamecontrol_Script.words[1]);
		} else if(gamecontrol_Script.words[0] == "fadein") {
			gamecontrol_Draw.fademode = 4;
		} else if(gamecontrol_Script.words[0] == "delay") {
			gamecontrol_Script.scriptdelay = Std.parseInt(gamecontrol_Script.words[1]);
		} else if(gamecontrol_Script.words[0] == "flash") {
			gamecontrol_Draw.flashlight = Std.parseInt(gamecontrol_Script.words[1]);
		} else if(gamecontrol_Script.words[0] == "shake") {
			gamecontrol_Draw.screenshake = Std.parseInt(gamecontrol_Script.words[1]);
		} else if(gamecontrol_Script.words[0] == "changemap") {
			terrylib_Obj.activedoordest = gamecontrol_Script.words[1];
			terrylib_Obj.doortox = Std.parseInt(gamecontrol_Script.words[2]);
			terrylib_Obj.doortoy = Std.parseInt(gamecontrol_Script.words[3]);
			gamecontrol_Draw.fademode = 2;
			gamecontrol_Draw.fadeaction = "changeroom";
		} else if(gamecontrol_Script.words[0] == "wait") {
			if(gamecontrol_Script.words[1] == "fade") {
				if(gamecontrol_Draw.fademode != 1 && gamecontrol_Draw.fademode != 0) {
					gamecontrol_Script.scriptdelay = 2;
					gamecontrol_Script.position--;
				} else {
					gamecontrol_Script.scriptdelay = 0;
				}
			}
		} else if(gamecontrol_Script.words[0] == "say") {
			gamecontrol_Script.speaker = gamecontrol_Script.words[1];
			terrylib_Textbox.createtextbox(terrylib_Obj.entities[terrylib_Obj.getnpc(gamecontrol_Script.speaker)].stringpara,0,0,terrylib_Textbox.col);
			gamecontrol_Script.parsetext = true;
		} else if(gamecontrol_Script.words[0] == "endsay") {
			if(gamecontrol_Script.speaker != "") {
				terrylib_Textbox.textboxposition(terrylib_Obj.getnpc(gamecontrol_Script.speaker));
			}
			terrylib_Textbox.starttextbox();
			gamecontrol_Script.parsetext = false;
			gamecontrol_Script.pausescript = true;
		} else if(gamecontrol_Script.words[0] == "textboxstyle") {
			terrylib_Textbox.col = Std.parseInt(gamecontrol_Script.words[1]);
		}
		gamecontrol_Script.position++;
	} else {
		gamecontrol_Script.running = false;
	}
	if(gamecontrol_Script.scriptdelay > 0) {
		gamecontrol_Script.scriptdelay--;
	}
};
gamecontrol_Script.add = function(t) {
	gamecontrol_Script.commands[gamecontrol_Script.scriptlength] = t;
	gamecontrol_Script.scriptlength++;
};
gamecontrol_Script.loadexternalscript = function(t) {
	return terrylib_util_Fileaccess.loadscriptfile(t);
};
gamecontrol_Script.tokenize = function(t) {
	gamecontrol_Script.numwords = 0;
	gamecontrol_Script.tempword = "";
	if(gamecontrol_Script.parsetext) {
		gamecontrol_Script.words[0] = t;
	}
	if(!gamecontrol_Script.parsetext) {
		var _g1 = 0;
		var _g = t.length;
		while(_g1 < _g) {
			gamecontrol_Script.currentletter = HxOverrides.substr(t,_g1++,1);
			if(gamecontrol_Script.currentletter == "(" || gamecontrol_Script.currentletter == ")" || gamecontrol_Script.currentletter == ",") {
				gamecontrol_Script.words[gamecontrol_Script.numwords] = gamecontrol_Script.tempword;
				if(gamecontrol_Script.numwords == 0 && gamecontrol_Script.words[0] == "say") {
					gamecontrol_Script.words[1] = terrylib_Help.getbrackets(t);
					break;
				} else if(gamecontrol_Script.numwords == 0 && gamecontrol_Script.words[0] == "talk") {
					gamecontrol_Script.words[1] = terrylib_Help.getbrackets(t);
					break;
				} else if(gamecontrol_Script.numwords == 0 && gamecontrol_Script.words[0] == "speaker") {
					gamecontrol_Script.words[1] = terrylib_Help.getbrackets(t);
					break;
				} else if(gamecontrol_Script.numwords == 0 && gamecontrol_Script.words[0] == "call") {
					gamecontrol_Script.words[1] = terrylib_Help.getbrackets(t);
					break;
				} else {
					gamecontrol_Script.words[gamecontrol_Script.numwords] = gamecontrol_Script.words[gamecontrol_Script.numwords].toLowerCase();
				}
				gamecontrol_Script.numwords++;
				gamecontrol_Script.tempword = "";
			} else if(gamecontrol_Script.currentletter != " ") {
				gamecontrol_Script.tempword += gamecontrol_Script.currentletter;
			}
		}
		if(gamecontrol_Script.tempword != "") {
			gamecontrol_Script.words[gamecontrol_Script.numwords] = gamecontrol_Script.tempword;
			gamecontrol_Script.numwords++;
		}
	}
	if(gamecontrol_Script.words[0].charAt(0) == "}") {
		gamecontrol_Script.words[0] = "endsay";
		gamecontrol_Script.parsetext = false;
	}
};
gamecontrol_Script.init = function() {
	gamecontrol_Script.speaker = "";
	gamecontrol_Script.parsetext = false;
	gamecontrol_Script.pausescript = false;
	var _g = 0;
	while(_g < 500) {
		++_g;
		gamecontrol_Script.commands.push(new String(""));
	}
	var _g1 = 0;
	while(_g1 < 100) {
		++_g1;
		gamecontrol_Script.words.push(new String(""));
		gamecontrol_Script.txt.push(new String(""));
	}
	gamecontrol_Script.position = 0;
	gamecontrol_Script.scriptlength = 0;
	gamecontrol_Script.scriptdelay = 0;
	gamecontrol_Script.running = false;
	gamecontrol_Script.hascontrol = true;
};
var gamecontrol_Use = function() { };
$hxClasses["gamecontrol.Use"] = gamecontrol_Use;
gamecontrol_Use.__name__ = ["gamecontrol","Use"];
gamecontrol_Use.doitemaction = function(t) {
	switch(gamecontrol_Inventory.itemlist[t].name.toLowerCase()) {
	case "banana":
		gamecontrol_Use.tdir = terrylib_Help.oppositedirection(terrylib_Obj.entities[terrylib_Obj.getplayer()].dir);
		gamecontrol_Use.tx = terrylib_Obj.entities[terrylib_Obj.getplayer()].xp;
		gamecontrol_Use.ty = terrylib_Obj.entities[terrylib_Obj.getplayer()].yp;
		var enemybehind = -1;
		var _g1 = 0;
		var _g = terrylib_Obj.nentity;
		while(_g1 < _g) {
			var i = _g1++;
			if(enemybehind == -1) {
				if(terrylib_Obj.entities[i].active) {
					if(terrylib_Obj.entities[i].state != 2) {
						if(terrylib_Obj.entities[i].rule == "enemy") {
							if(terrylib_Obj.entities[i].xp == gamecontrol_Use.tx && terrylib_Obj.entities[i].yp == gamecontrol_Use.ty) {
								gamecontrol_Game.stunenemy(i,30);
								enemybehind = i;
							}
						}
					}
				}
			}
		}
		if(enemybehind == -1) {
			if(terrylib_World.at(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir)) != gamecontrol_Localworld.WALL) {
				terrylib_World.placetile(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir),gamecontrol_Localworld.BANANAPEEL);
			} else {
				terrylib_World.placetile(gamecontrol_Use.tx,gamecontrol_Use.ty,gamecontrol_Localworld.BANANAPEEL);
			}
		}
		haxegon_Music.playsound("useitem");
		break;
	case "cardboard box":
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Wearing Box!","player");
		gamecontrol_Game.cloaked += 50;
		gamecontrol_Localworld.setroomfog(0);
		gamecontrol_Game.dealertall();
		haxegon_Music.playsound("useitem");
		break;
	case "drill":
		gamecontrol_Use.tdir = terrylib_Obj.entities[terrylib_Obj.getplayer()].dir;
		gamecontrol_Use.tx = terrylib_Obj.entities[terrylib_Obj.getplayer()].xp;
		gamecontrol_Use.ty = terrylib_Obj.entities[terrylib_Obj.getplayer()].yp;
		gamecontrol_Localworld.drill(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir),gamecontrol_Use.tdir);
		haxegon_Music.playsound("useitem");
		break;
	case "first aid kit":
		gamecontrol_Game.health++;
		terrylib_Obj.entities[terrylib_Obj.getplayer()].health = gamecontrol_Game.health;
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("HEALTH RESTORED!","good");
		modernversion_Modern.hpflash = modernversion_Modern.flashtime;
		haxegon_Music.playsound("useitem");
		break;
	case "helix wing":
		modernversion_Modern.playeronstairs = true;
		modernversion_Modern.endlevelanimationstate = 1;
		modernversion_Modern.endlevelanimationaction = "endgame";
		haxegon_Music.playsound("nextfloor");
		break;
	case "ice cube":
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Swallowed Ice Cube!","player");
		gamecontrol_Game.icecube += 60;
		haxegon_Music.playsound("useitem");
		break;
	case "lightbulb":
		modernversion_AIDirector.darkroom = false;
		gamecontrol_Localworld.setroomfog(1);
		var _g11 = 0;
		var _g2 = terrylib_World.mapheight;
		while(_g11 < _g2) {
			var j = _g11++;
			var _g3 = 0;
			var _g21 = terrylib_World.mapwidth;
			while(_g3 < _g21) gamecontrol_Localworld.highlightpoint(_g3++,j);
		}
		gamecontrol_Game.showmessage("LIGHT SWITCHED ON!","good",120);
		haxegon_Music.playsound("useitem");
		break;
	case "lockdown":
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Initiating Lockdown!","player");
		gamecontrol_Draw.screenshake = 10;
		var _g12 = 0;
		var _g4 = terrylib_World.mapheight;
		while(_g12 < _g4) {
			var j1 = _g12++;
			var _g31 = 0;
			var _g22 = terrylib_World.mapwidth;
			while(_g31 < _g22) {
				var i1 = _g31++;
				if(terrylib_World.at(i1,j1) == gamecontrol_Localworld.OPENDOOR) {
					terrylib_World.placetile(i1,j1,gamecontrol_Localworld.DOOR);
				}
			}
		}
		haxegon_Music.playsound("useitem");
		break;
	case "portable door":
		gamecontrol_Draw.screenshake = 10;
		var player = terrylib_Obj.getplayer();
		terrylib_World.placetile(terrylib_Obj.entities[player].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[player].dir),terrylib_Obj.entities[player].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[player].dir),gamecontrol_Localworld.DOOR);
		haxegon_Music.playsound("useitem");
		break;
	case "signal jammer":
		var _g13 = 0;
		var _g5 = terrylib_Obj.nentity;
		while(_g13 < _g5) {
			var i2 = _g13++;
			if(terrylib_Obj.entities[i2].active) {
				if(terrylib_Obj.entities[i2].rule == "enemy") {
					if(terrylib_Obj.entities[i2].type == "camera" || terrylib_Obj.entities[i2].type == "sentinal" || terrylib_Obj.entities[i2].type == "lasercamera" || terrylib_Obj.entities[i2].type == "lasersentinal" || terrylib_Obj.entities[i2].type == "drone_light" || terrylib_Obj.entities[i2].type == "drone_laser" || terrylib_Obj.entities[i2].type == "tripwire_up" || terrylib_Obj.entities[i2].type == "tripwire_down" || terrylib_Obj.entities[i2].type == "tripwire_left" || terrylib_Obj.entities[i2].type == "tripwire_right" || terrylib_Obj.entities[i2].type == "laserwire_up" || terrylib_Obj.entities[i2].type == "laserwire_down" || terrylib_Obj.entities[i2].type == "laserwire_left" || terrylib_Obj.entities[i2].type == "laserwire_right") {
						gamecontrol_Game.stunenemy(i2,60);
					}
				}
			}
		}
		gamecontrol_Draw.flashlight = 5;
		gamecontrol_Draw.screenshake = 10;
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Jamming Camera Signals!","player");
		gamecontrol_Localworld.updatelighting();
		haxegon_Music.playsound("useitem");
		break;
	case "time stopper":
		terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Time stopped!","player");
		gamecontrol_Game.timestop += 20;
		haxegon_Music.playsound("useitem");
		break;
	}
};
gamecontrol_Use.usegadget = function(ent,gadget) {
	gamecontrol_Use.tdir = terrylib_Obj.entities[ent].dir;
	gamecontrol_Use.tx = terrylib_Obj.entities[ent].xp;
	gamecontrol_Use.ty = terrylib_Obj.entities[ent].yp;
	gamecontrol_Game.cloaked = 0;
	switch(gamecontrol_Inventory.itemlist[gadget].name.toLowerCase()) {
	case "bomb":
		gamecontrol_Localworld.explode(gamecontrol_Use.tx,gamecontrol_Use.ty,3,false);
		gamecontrol_Game.alertallenemies();
		haxegon_Music.playsound("shoot");
		break;
	case "emp blaster":
		var _g = -3;
		while(_g < 4) {
			var j = _g++;
			var _g1 = -3;
			while(_g1 < 4) {
				var i = _g1++;
				if(Math.abs(i) + Math.abs(j) < 5) {
					gamecontrol_Use.temp = gamecontrol_Game.checkforenemy(gamecontrol_Use.tx + i,gamecontrol_Use.ty + j);
					gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + i,gamecontrol_Use.ty + j);
					if(gamecontrol_Use.temp >= 0) {
						if(terrylib_Obj.entities[gamecontrol_Use.temp].isarobot) {
							gamecontrol_Game.stunenemy(gamecontrol_Use.temp,30);
							gamecontrol_Draw.flashlight = 5;
							gamecontrol_Draw.screenshake = 10;
						}
					}
				}
			}
		}
		haxegon_Music.playsound("shoot");
		break;
	case "error":
		gamecontrol_Localworld.glitchexplode(gamecontrol_Use.tx,gamecontrol_Use.ty,6,false);
		gamecontrol_Game.alertallenemies();
		haxegon_Music.playsound("shoot");
		break;
	case "fire extinguisher":
		gamecontrol_Localworld.fireextinguisher(gamecontrol_Use.tx,gamecontrol_Use.ty,gamecontrol_Use.tdir,1);
		gamecontrol_Localworld.fireextinguisher(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir),gamecontrol_Use.tdir,4);
		gamecontrol_Localworld.fireextinguisher(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(gamecontrol_Use.tdir)),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(gamecontrol_Use.tdir)),gamecontrol_Use.tdir,2);
		gamecontrol_Localworld.fireextinguisher(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir) + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(gamecontrol_Use.tdir)),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir) + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(gamecontrol_Use.tdir)),gamecontrol_Use.tdir,2);
		gamecontrol_Localworld.supressfire();
		if(!gamecontrol_Localworld.checkforfire()) {
			gamecontrol_Localworld.clearfire();
		}
		haxegon_Music.playsound("shoot");
		break;
	case "knockout gas":
		var _g2 = -3;
		while(_g2 < 4) {
			var j1 = _g2++;
			var _g11 = -3;
			while(_g11 < 4) {
				var i1 = _g11++;
				if(Math.abs(i1) + Math.abs(j1) < 5) {
					gamecontrol_Use.temp = gamecontrol_Game.checkforenemy(gamecontrol_Use.tx + i1,gamecontrol_Use.ty + j1);
					gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + i1,gamecontrol_Use.ty + j1);
					if(gamecontrol_Use.temp >= 0) {
						if(!terrylib_Obj.entities[i1].isarobot) {
							gamecontrol_Game.stunenemy(gamecontrol_Use.temp,30);
							gamecontrol_Draw.flashlight = 5;
							gamecontrol_Draw.screenshake = 10;
						}
					}
				}
			}
		}
		haxegon_Music.playsound("shoot");
		break;
	case "leaf blower":
		var shotdistance = 1;
		var hitwall = false;
		while(shotdistance < Math.max(terrylib_World.mapheight + 1,terrylib_World.mapwidth + 1) && !hitwall) {
			gamecontrol_Use.temp = gamecontrol_Game.checkforenemy(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance));
			gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance));
			if(gamecontrol_Use.temp == -2) {
				hitwall = true;
			}
			if(gamecontrol_Use.temp >= 0) {
				gamecontrol_Game.stunenemy(gamecontrol_Use.temp,30);
				hitwall = true;
				gamecontrol_Draw.flashlight = 5;
				gamecontrol_Draw.screenshake = 10;
			}
			++shotdistance;
		}
		if(gamecontrol_Use.temp >= 0) {
			while(gamecontrol_Game.checkforentity(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance)) == -1 && terrylib_Help.inboxw(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance),0,0,terrylib_World.mapwidth,terrylib_World.mapheight)) {
				gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance));
				terrylib_Obj.entities[gamecontrol_Use.temp].xp = gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance);
				terrylib_Obj.entities[gamecontrol_Use.temp].yp = gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance);
				++shotdistance;
			}
		}
		haxegon_Music.playsound("shoot");
		break;
	case "matchstick":
		gamecontrol_Draw.flashlight = 5;
		gamecontrol_Draw.screenshake = 10;
		gamecontrol_Localworld.flamethrower(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir),gamecontrol_Use.tdir,4);
		gamecontrol_Localworld.flamethrower(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(gamecontrol_Use.tdir)),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(gamecontrol_Use.tdir)),gamecontrol_Use.tdir,2);
		gamecontrol_Localworld.flamethrower(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir) + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(gamecontrol_Use.tdir)),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir) + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(gamecontrol_Use.tdir)),gamecontrol_Use.tdir,2);
		terrylib_World.fire[gamecontrol_Use.tx + terrylib_World.vmult[gamecontrol_Use.ty]] = 0;
		haxegon_Music.playsound("shoot");
		break;
	case "pistol":
		var shotdistance1 = 1;
		while(shotdistance1 < Math.max(terrylib_World.mapheight + 1,terrylib_World.mapwidth + 1)) {
			gamecontrol_Use.temp = gamecontrol_Game.checkforenemy(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance1),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance1));
			gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance1),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance1));
			if(gamecontrol_Use.temp == -2) {
				shotdistance1 = Math.max(terrylib_World.mapheight + 1,terrylib_World.mapwidth + 1) | 0;
			}
			if(gamecontrol_Use.temp >= 0) {
				shotdistance1 = 10000;
				gamecontrol_Game.killenemy(gamecontrol_Use.temp);
				gamecontrol_Draw.flashlight = 5;
				gamecontrol_Draw.screenshake = 10;
			}
			++shotdistance1;
		}
		gamecontrol_Game.alertallenemies();
		haxegon_Music.playsound("shoot");
		break;
	case "skateboard":
		var shotdistance2 = 1;
		var hitwall1 = false;
		while(!hitwall1) {
			gamecontrol_Use.temp = gamecontrol_Game.checkforentity(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance2),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance2));
			if(!terrylib_Help.inboxw(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance2),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance2),0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
				gamecontrol_Use.temp = -2;
			}
			if(gamecontrol_Use.temp != -1) {
				hitwall1 = true;
			} else {
				gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance2),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance2));
				if(terrylib_World.at(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance2),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance2)) == gamecontrol_Localworld.DEBRIS) {
					terrylib_World.placetile(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance2),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance2),gamecontrol_Localworld.FLOOR);
				}
			}
			++shotdistance2;
		}
		shotdistance2 -= 2;
		if(shotdistance2 > 0) {
			var player = terrylib_Obj.getplayer();
			terrylib_Obj.entities[player].xp = terrylib_Obj.entities[player].xp + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance2);
			terrylib_Obj.entities[player].yp = terrylib_Obj.entities[player].yp + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance2);
		}
		haxegon_Music.playsound("shoot");
		break;
	case "sniper rifle":
		var shotdistance3 = 1;
		while(shotdistance3 < Math.max(terrylib_World.mapheight + 1,terrylib_World.mapwidth + 1)) {
			gamecontrol_Use.temp = gamecontrol_Game.checkforenemy(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance3),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance3));
			gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance3),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance3));
			if(gamecontrol_Use.temp == -2) {
				shotdistance3 = Math.max(terrylib_World.mapheight + 1,terrylib_World.mapwidth + 1) | 0;
			}
			if(gamecontrol_Use.temp >= 0) {
				shotdistance3 = 10000;
				gamecontrol_Game.killenemy(gamecontrol_Use.temp);
				gamecontrol_Draw.flashlight = 5;
				gamecontrol_Draw.screenshake = 10;
			}
			++shotdistance3;
		}
		haxegon_Music.playsound("shoot");
		break;
	case "sword":
		var shotdistance4 = 1;
		var hitwall2 = false;
		while(shotdistance4 < 100 && !hitwall2) {
			gamecontrol_Use.temp = gamecontrol_Game.checkforenemy(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance4),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance4));
			if(!terrylib_Help.inboxw(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance4),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance4),0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
				gamecontrol_Use.temp = -2;
			}
			gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance4),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance4));
			if(terrylib_World.at(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance4),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance4)) == gamecontrol_Localworld.DEBRIS) {
				terrylib_World.placetile(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance4),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance4),gamecontrol_Localworld.FLOOR);
			}
			if(gamecontrol_Use.temp == -2) {
				hitwall2 = true;
			}
			if(gamecontrol_Use.temp >= 0) {
				gamecontrol_Game.killenemy(gamecontrol_Use.temp);
				gamecontrol_Draw.flashlight = 5;
				gamecontrol_Draw.screenshake = 10;
			}
			++shotdistance4;
		}
		shotdistance4 -= 2;
		if(shotdistance4 > 0) {
			var player1 = terrylib_Obj.getplayer();
			terrylib_Obj.entities[player1].xp = terrylib_Obj.entities[player1].xp + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance4);
			terrylib_Obj.entities[player1].yp = terrylib_Obj.entities[player1].yp + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance4);
		}
		haxegon_Music.playsound("shoot");
		break;
	case "tazer":
		var shotdistance5 = 1;
		while(shotdistance5 < 6) {
			gamecontrol_Use.temp = gamecontrol_Game.checkforenemy(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance5),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance5));
			gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance5),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance5));
			if(gamecontrol_Use.temp == -2) {
				shotdistance5 = 6;
			}
			if(gamecontrol_Use.temp >= 0) {
				shotdistance5 = 10;
				gamecontrol_Game.stunenemy(gamecontrol_Use.temp,30);
				gamecontrol_Draw.flashlight = 5;
				gamecontrol_Draw.screenshake = 10;
			}
			++shotdistance5;
		}
		haxegon_Music.playsound("shoot");
		break;
	case "teleporter":
		modernversion_Modern.playerjustteleported = true;
		var player2 = terrylib_Obj.getplayer();
		gamecontrol_Use.tx = terrylib_Obj.entities[player2].xp | 0;
		gamecontrol_Use.ty = terrylib_Obj.entities[player2].yp | 0;
		gamecontrol_Use.tx = terrylib_Obj.entities[player2].xp | 0;
		gamecontrol_Use.ty = terrylib_Obj.entities[player2].yp | 0;
		gamecontrol_Use.tx2 = -1;
		var attempts = 1000;
		while(attempts > 0 && (gamecontrol_Use.tx2 == -1 || terrylib_World.at(gamecontrol_Use.tx2,gamecontrol_Use.ty2) != gamecontrol_Localworld.FLOOR || Math.abs(gamecontrol_Use.tx - gamecontrol_Use.tx2) < 4 || Math.abs(gamecontrol_Use.ty - gamecontrol_Use.ty2) < 4)) {
			gamecontrol_Use.tx2 = Math.floor((terrylib_World.mapwidth + 1) * terrylib_Rand.prandom());
			gamecontrol_Use.ty2 = Math.floor((terrylib_World.mapheight + 1) * terrylib_Rand.prandom());
			--attempts;
		}
		if(attempts > 0) {
			var _g3 = -2;
			while(_g3 < 3) {
				var j2 = _g3++;
				var _g12 = -2;
				while(_g12 < 3) {
					var i2 = _g12++;
					if(Math.abs(i2) < 3 && Math.abs(j2) < 3) {
						if(gamecontrol_Game.checkforenemy(gamecontrol_Use.tx2 + i2,gamecontrol_Use.ty2 + j2) > 0) {
							gamecontrol_Game.stunenemy(gamecontrol_Game.checkforenemy(gamecontrol_Use.tx2 + i2,gamecontrol_Use.ty2 + j2),30);
						}
					}
				}
			}
			terrylib_Obj.entities[player2].xp = gamecontrol_Use.tx2;
			terrylib_Obj.entities[player2].yp = gamecontrol_Use.ty2;
		} else {
			terrylib_Obj.randomwalk(player2,12);
		}
		gamecontrol_Use.tx = terrylib_Obj.entities[player2].xp | 0;
		gamecontrol_Use.ty = terrylib_Obj.entities[player2].yp | 0;
		var _g4 = -2;
		while(_g4 < 3) {
			var j3 = _g4++;
			var _g13 = -2;
			while(_g13 < 3) {
				var i3 = _g13++;
				if(Math.abs(i3) < 3 && Math.abs(j3) < 3) {
					gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + i3,gamecontrol_Use.ty + j3);
				}
			}
		}
		gamecontrol_Localworld.updatelighting();
		haxegon_Music.playsound("shoot");
		break;
	case "tranquilizer":
		var shotdistance6 = 1;
		while(shotdistance6 < Math.max(terrylib_World.mapheight + 1,terrylib_World.mapwidth + 1)) {
			gamecontrol_Use.temp = gamecontrol_Game.checkforenemy(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance6),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance6));
			gamecontrol_Localworld.highlightpoint(gamecontrol_Use.tx + gamecontrol_Localworld.xstep(gamecontrol_Use.tdir,shotdistance6),gamecontrol_Use.ty + gamecontrol_Localworld.ystep(gamecontrol_Use.tdir,shotdistance6));
			if(gamecontrol_Use.temp == -2) {
				shotdistance6 = Math.max(terrylib_World.mapheight + 1,terrylib_World.mapwidth + 1) | 0;
			}
			if(gamecontrol_Use.temp >= 0) {
				shotdistance6 = 10000;
				if(!terrylib_Obj.entities[gamecontrol_Use.temp].isarobot) {
					gamecontrol_Game.stunenemy(gamecontrol_Use.temp,30);
					gamecontrol_Draw.flashlight = 5;
					gamecontrol_Draw.screenshake = 10;
				}
			}
			++shotdistance6;
		}
		haxegon_Music.playsound("shoot");
		break;
	}
};
gamecontrol_Use.interactwith = function(target,source) {
	if(terrylib_Obj.entities[source].rule == "player") {
		if(terrylib_Obj.entities[target].rule == "enemy") {
			if(terrylib_Obj.entities[target].state != 2) {
				gamecontrol_Game.stunenemy(target,30);
				gamecontrol_Game.cloaked = 0;
				gamecontrol_Game.timestop = 0;
			}
		} else if(terrylib_Obj.entities[target].rule == "npc") {
			modernversion_Modern.shopkeepcol = terrylib_Obj.entities[target].col;
			haxegon_Music.playsound("talk");
			if(terrylib_Obj.entities[target].name.toLowerCase() == "key") {
				modernversion_Modern.popup("shopkeeper",modernversion_Modern.currentitem);
			} else if(terrylib_Obj.entities[target].name.toLowerCase() == "sold out") {
				modernversion_Modern.popup("soldoutshopkeeper",modernversion_Modern.currentitem);
			} else {
				modernversion_Modern.currentitem = modernversion_Itemstats.get(terrylib_Obj.entities[target].name);
				modernversion_Modern.popup("itemshopkeeper",modernversion_Modern.currentitem);
				modernversion_Modern.currentshopkeeper = target;
			}
			modernversion_Modern.updatekeygemrate();
		} else if(terrylib_Obj.entities[target].rule == "treasure") {
			haxegon_Music.playsound("collectgem");
			terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Found GEM","cash",40);
			gamecontrol_Game.cash += terrylib_Obj.entities[target].life;
			modernversion_Modern.gemflash = modernversion_Modern.flashtime;
			terrylib_Obj.entities[target].active = false;
		} else if(terrylib_Obj.entities[target].rule == "item") {
			modernversion_Modern.pickupitem(terrylib_Obj.entities[target]);
			terrylib_Obj.entities[target].active = false;
		}
	}
};
gamecontrol_Use.interactwithblock = function(target,x,y,source) {
	if(terrylib_Obj.entities[source].rule == "enemy") {
		if(target == gamecontrol_Localworld.DOOR) {
			terrylib_World.placetile(x,y,gamecontrol_Localworld.OPENDOOR);
			haxegon_Music.playsound("opendoor");
		}
	}
	if(terrylib_Obj.entities[source].rule == "player") {
		if(target == gamecontrol_Localworld.DOOR) {
			terrylib_World.placetile(x,y,gamecontrol_Localworld.OPENDOOR);
			haxegon_Music.playsound("opendoor");
		} else if(target == gamecontrol_Localworld.LOCKEDDOOR) {
			if(gamecontrol_Game.keys > 0) {
				terrylib_World.placetile(x,y,gamecontrol_Localworld.OPENDOOR);
				gamecontrol_Game.keys--;
				modernversion_Modern.keyflash = modernversion_Modern.flashtime;
				modernversion_AIDirector.onthisrun_keysused++;
				haxegon_Music.playsound("unlock");
			} else if(!gamecontrol_Use.doorknockcheck) {
				terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("It's locked...","player");
				terrylib_Obj.entities[terrylib_Obj.getplayer()].actionset = true;
				terrylib_Obj.entities[terrylib_Obj.getplayer()].action = "nothing";
				haxegon_Music.playsound("lockeddoor");
				gamecontrol_Use.doorknockcheck = true;
			}
		} else if(target == gamecontrol_Localworld.KEY) {
			terrylib_World.placetile(x,y,gamecontrol_Localworld.FLOOR);
			gamecontrol_Game.keys++;
			modernversion_Modern.keyflash = modernversion_Modern.flashtime;
			terrylib_Obj.entities[terrylib_Obj.getplayer()].setmessage("Found KEY","key",40);
			haxegon_Music.playsound("collectkey");
		} else if(target == gamecontrol_Localworld.STAIRS) {
			if(gamecontrol_Openworld.inside) {
				modernversion_Modern.usestairs();
			} else {
				terrylib_Rand.setseed(gamecontrol_Openworld.getroomseed(gamecontrol_Openworld.worldx,gamecontrol_Openworld.worldy));
				gamecontrol_Game.generatetowerblock("intro");
				gamecontrol_Game.floor = 1;
				gamecontrol_Game.changeroom("inside");
			}
		}
	}
};
var gamecontrol_misc_Line = function(_x1,_y1,_x2,_y2) {
	if(_y2 == null) {
		_y2 = 0;
	}
	if(_x2 == null) {
		_x2 = 0;
	}
	if(_y1 == null) {
		_y1 = 0;
	}
	if(_x1 == null) {
		_x1 = 0;
	}
	this.x1 = _x1;
	this.y1 = _y1;
	this.x2 = _x2;
	this.y2 = _y2;
};
$hxClasses["gamecontrol.misc.Line"] = gamecontrol_misc_Line;
gamecontrol_misc_Line.__name__ = ["gamecontrol","misc","Line"];
gamecontrol_misc_Line.prototype = {
	setto: function(_x1,_y1,_x2,_y2) {
		if(_y2 == null) {
			_y2 = 0;
		}
		if(_x2 == null) {
			_x2 = 0;
		}
		if(_y1 == null) {
			_y1 = 0;
		}
		if(_x1 == null) {
			_x1 = 0;
		}
		this.x1 = _x1;
		this.y1 = _y1;
		this.x2 = _x2;
		this.y2 = _y2;
	}
	,tostring: function() {
		return "(" + Std.string(this.x1) + "," + Std.string(this.y1) + ") - (" + Std.string(this.x2) + "," + Std.string(this.y2) + ")";
	}
	,x1: null
	,y1: null
	,x2: null
	,y2: null
	,__class__: gamecontrol_misc_Line
};
var gamecontrol_misc_Placementclass = function(_name) {
	this.odds = [];
	this.contents = [];
	this.list = [];
	this.name = _name;
	var _g = 0;
	while(_g < 50) {
		++_g;
		this.list.push(new openfl_geom_Point());
		this.contents.push("");
		this.odds.push(0);
	}
	this.length = 0;
};
$hxClasses["gamecontrol.misc.Placementclass"] = gamecontrol_misc_Placementclass;
gamecontrol_misc_Placementclass.__name__ = ["gamecontrol","misc","Placementclass"];
gamecontrol_misc_Placementclass.prototype = {
	add: function(tx,ty,_contents,_odds) {
		this.list[this.length].setTo(tx,ty);
		this.odds[this.length] = _odds;
		this.contents[this.length] = _contents;
		this.length++;
	}
	,getodds: function(t) {
		return this.odds[t] | 0;
	}
	,x: function(t) {
		return this.list[t].x | 0;
	}
	,y: function(t) {
		return this.list[t].y | 0;
	}
	,pick: function(thing) {
		if(thing == null) {
			thing = "";
		}
		if(this.length > 0) {
			this.selection = Math.floor((this.length - 1 + 1) * terrylib_Rand.prandom());
		} else {
			this.selection = -1;
		}
	}
	,remove: function() {
		var _g1 = this.selection;
		var _g = this.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i].setTo(this.list[i + 1].x,this.list[i + 1].y);
			this.contents[i] = this.contents[i + 1];
			this.odds[i] = this.odds[i + 1];
		}
		this.length--;
	}
	,shift: function(t,xoff,yoff) {
		this.list[t].x += xoff;
		this.list[t].y += yoff;
	}
	,clear: function() {
		this.length = 0;
	}
	,name: null
	,list: null
	,contents: null
	,odds: null
	,length: null
	,selection: null
	,__class__: gamecontrol_misc_Placementclass
};
var gamecontrol_misc_Roomconnection = function() {
	this.clear();
};
$hxClasses["gamecontrol.misc.Roomconnection"] = gamecontrol_misc_Roomconnection;
gamecontrol_misc_Roomconnection.__name__ = ["gamecontrol","misc","Roomconnection"];
gamecontrol_misc_Roomconnection.prototype = {
	clear: function() {
		this.x = 0;
		this.y = 0;
		this.inuse = false;
		this.dir = terrylib_Help.NODIRECTION;
	}
	,set: function(_x,_y,_dir) {
		this.inuse = true;
		this.x = _x;
		this.y = _y;
		this.dir = _dir;
	}
	,'use': function() {
		this.inuse = false;
	}
	,x: null
	,y: null
	,inuse: null
	,dir: null
	,__class__: gamecontrol_misc_Roomconnection
};
var gamecontrol_misc_Worldblockclass = function() {
};
$hxClasses["gamecontrol.misc.Worldblockclass"] = gamecontrol_misc_Worldblockclass;
gamecontrol_misc_Worldblockclass.__name__ = ["gamecontrol","misc","Worldblockclass"];
gamecontrol_misc_Worldblockclass.prototype = {
	set: function(_charcode_lit,_charcode_fog,_front_lit,_front_fog,_back_lit,_back_fog) {
		if(_back_fog == null) {
			_back_fog = 1124677;
		}
		if(_back_lit == null) {
			_back_lit = 1130361;
		}
		this.charcode_lit = _charcode_lit;
		this.charcode_fog = _charcode_fog;
		this.front_lit = _front_lit;
		this.front_fog = _front_fog;
		this.back_lit = _back_lit;
		this.back_fog = _back_fog;
		this.flamable = 30;
	}
	,setcol: function(_front_lit,_front_fog,_back_lit,_back_fog) {
		if(_back_fog == null) {
			_back_fog = 1124677;
		}
		if(_back_lit == null) {
			_back_lit = 1130361;
		}
		this.front_lit = _front_lit;
		this.front_fog = _front_fog;
		this.back_lit = _back_lit;
		this.back_fog = _back_fog;
		this.flamable = 30;
	}
	,charcode_lit: null
	,charcode_fog: null
	,front_lit: null
	,front_fog: null
	,back_lit: null
	,back_fog: null
	,flamable: null
	,__class__: gamecontrol_misc_Worldblockclass
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null?"null":"" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null?"null":"" + file;
		b.b += " line ";
		b.b += line == null?"null":"" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null?"null":"" + cname;
		b.b += ".";
		b.b += meth == null?"null":"" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null?"null":"" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null?_this.getReserved(s):_this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null?"null":"" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null?"null":"" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null?"null":"" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null?"null":"" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0?"m":"p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null?"null":"" + v2;
			}
			break;
		case 3:
			this.buf.b += v?"t":"f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v.length;
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null?"null":"" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null?"null":"" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					this.serialize(val);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var tmp = v4.keys();
				while(tmp.hasNext()) {
					var k = tmp.next();
					this.buf.b += ":";
					this.buf.b += k == null?"null":"" + k;
					this.serialize(v4.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var tmp1 = v5.keys();
				while(tmp1.hasNext()) {
					var k1 = tmp1.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1.__id__ = id;
					this.serialize(v5.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var tmp2 = v6.keys();
				while(tmp2.hasNext()) {
					var k2 = tmp2.next();
					this.serializeString(k2);
					this.serialize(__map_reserved[k2] != null?v6.getReserved(k2):v6.h[k2]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i1 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					b64 = new Array(length);
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i2 = _g11++;
						b64[i2] = HxOverrides.cca(haxe_Serializer.BASE64,i2);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i1 < max) {
					var b1 = v7.b[i1++];
					var b2 = v7.b[i1++];
					var b3 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i1 == max) {
					var b11 = v7.b[i1++];
					var b21 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i1 == max + 1) {
					var b12 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex?"j":"w");
			this.serializeString(Type.getEnumName(_g[2]));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v.length;
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) this.serialize(v[_g12++]);
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		var x = HxOverrides.substr(this.buf,p1,this.pos - p1);
		return parseFloat(x);
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s] != null) {
					h1.setReserved(s,value);
				} else {
					h1.h[s] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s1 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s1 = decodeURIComponent(s1.split("+").join(" "));
			this.scache.push(s1);
			return s1;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g1 = 0;
		while(_g1 < len) {
			++_g1;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var _g1 = 0;
		var _g = this.length < other.length?this.length:other.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		return new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var _g1 = 0;
		var _g = "0123456789abcdef".length;
		while(_g1 < _g) chars.push(HxOverrides.cca("0123456789abcdef",_g1++));
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var c = this.b[_g11++];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0?0:1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.setLoop(k,v,node.right));
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null?0:l._height;
		var hr = r == null?0:r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var tmp = _this == null?0:_this._height;
			var _this1 = l.right;
			if(tmp >= (_this1 == null?0:_this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var tmp1 = _this2 == null?0:_this2._height;
			var _this3 = r.left;
			if(tmp1 > (_this3 == null?0:_this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var tmp1 = _this == null?0:_this._height;
		var _this1 = this.right;
		if(tmp1 > (_this1 == null?0:_this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0?-f:f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0?-v:v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		i64.low = sig | 0;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | (sig / 4294967296.0 | 0);
	}
	return i64;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var c = xml.charCodeAt(_g1++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					buf.b += String.fromCharCode(s.charCodeAt(1) == 120?Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)):Std.parseInt(HxOverrides.substr(s,1,s.length - 1)));
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null?_this.existsReserved(s):_this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null?_this1.getReserved(s):_this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxegon_Col = function() { };
$hxClasses["haxegon.Col"] = haxegon_Col;
haxegon_Col.__name__ = ["haxegon","Col"];
haxegon_Col.getred = function(c) {
	return c >> 16 & 255;
};
haxegon_Col.getgreen = function(c) {
	return c >> 8 & 255;
};
haxegon_Col.getblue = function(c) {
	return c & 255;
};
haxegon_Col.gethue = function(c) {
	var r = (c >> 16 & 255) / 255;
	var g = (c >> 8 & 255) / 255;
	var b = (c & 255) / 255;
	var max = Math.max(Math.max(r,g),b);
	var min = Math.min(Math.min(r,g),b);
	var h = (max + min) / 2;
	if(max != min) {
		var d = max - min;
		if(max == r) {
			h = (g - b) / d + (g < b?6:0);
		} else if(max == g) {
			h = (b - r) / d + 2;
		} else if(max == b) {
			h = (r - g) / d + 4;
		}
		h /= 6;
	}
	return h * 360 | 0;
};
haxegon_Col.getsaturation = function(c) {
	var r = (c >> 16 & 255) / 255;
	var g = (c >> 8 & 255) / 255;
	var b = (c & 255) / 255;
	var max = Math.max(Math.max(r,g),b);
	var min = Math.min(Math.min(r,g),b);
	var s = (max + min) / 2;
	var l = s;
	if(max == min) {
		s = 0;
	} else {
		var d = max - min;
		if(l > 0.5) {
			s = d / (2 - max - min);
		} else {
			s = d / (max + min);
		}
	}
	return s;
};
haxegon_Col.getlightness = function(c) {
	var r = (c >> 16 & 255) / 255;
	var g = (c >> 8 & 255) / 255;
	var b = (c & 255) / 255;
	return (Math.max(Math.max(r,g),b) + Math.min(Math.min(r,g),b)) / 2;
};
haxegon_Col.rgb = function(red,green,blue) {
	return blue | green << 8 | red << 16;
};
haxegon_Col.hsl = function(hue,saturation,lightness) {
	var q = lightness < 0.5?lightness * (1 + saturation):lightness + saturation - lightness * saturation;
	var p = 2 * lightness - q;
	var hk = hue % 360 / 360;
	haxegon_Col.hslval[0] = hk + 0.33333333333333331;
	haxegon_Col.hslval[1] = hk;
	haxegon_Col.hslval[2] = hk - 0.33333333333333331;
	var _g = 0;
	while(_g < 3) {
		var n = _g++;
		if(haxegon_Col.hslval[n] < 0) {
			haxegon_Col.hslval[n] += 1;
		}
		if(haxegon_Col.hslval[n] > 1) {
			haxegon_Col.hslval[n] -= 1;
		}
		haxegon_Col.hslval[n] = haxegon_Col.hslval[n] < 0.16666666666666666?p + (q - p) * 6 * haxegon_Col.hslval[n]:haxegon_Col.hslval[n] < 0.5?q:haxegon_Col.hslval[n] < 0.66666666666666663?p + (q - p) * 6 * (0.66666666666666663 - haxegon_Col.hslval[n]):p;
	}
	return haxegon_Col.rgb(haxegon_Col.hslval[0] * 255 | 0,haxegon_Col.hslval[1] * 255 | 0,haxegon_Col.hslval[2] * 255 | 0);
};
var haxegon_Convert = function() { };
$hxClasses["haxegon.Convert"] = haxegon_Convert;
haxegon_Convert.__name__ = ["haxegon","Convert"];
haxegon_Convert.tostring = function(value) {
	return Std.string(value);
};
haxegon_Convert.toint = function(value) {
	return Std.parseInt(Std.string(value));
};
haxegon_Convert.tofloat = function(value) {
	return parseFloat(value);
};
var starling_events_EventDispatcher = function() {
};
$hxClasses["starling.events.EventDispatcher"] = starling_events_EventDispatcher;
starling_events_EventDispatcher.__name__ = ["starling","events","EventDispatcher"];
starling_events_EventDispatcher.prototype = {
	mEventListeners: null
	,addEventListener: function(type,listener) {
		if(this.mEventListeners == null) {
			this.mEventListeners = new haxe_ds_StringMap();
		}
		var _this = this.mEventListeners;
		var listeners = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
		if(listeners == null) {
			var v = openfl__$Vector_Vector_$Impl_$.toFunctionVector(null);
			var _this1 = this.mEventListeners;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,v);
			} else {
				_this1.h[type] = v;
			}
			var _this2 = this.mEventListeners;
			(__map_reserved[type] != null?_this2.getReserved(type):_this2.h[type]).push(listener);
		} else {
			var _g1 = 0;
			var _g = listeners.get_length();
			while(_g1 < _g) if(Reflect.compareMethods(listeners.get(_g1++),listener)) {
				return;
			}
			listeners.set(listeners.get_length(),listener);
		}
	}
	,removeEventListener: function(type,listener) {
		if(this.mEventListeners != null) {
			var _this = this.mEventListeners;
			var listeners = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
			var numListeners = listeners != null?listeners.get_length():0;
			if(numListeners > 0) {
				var index = listeners.indexOf(listener,0);
				if(index != -1) {
					var restListeners = listeners.slice(0,index);
					var _g1 = index + 1;
					var _g = numListeners;
					while(_g1 < _g) {
						var i = _g1++;
						restListeners.set(i - 1,listeners.get(i));
					}
					var _this1 = this.mEventListeners;
					if(__map_reserved[type] != null) {
						_this1.setReserved(type,restListeners);
					} else {
						_this1.h[type] = restListeners;
					}
				}
			}
		}
	}
	,removeEventListeners: function(type) {
		if(type != null && this.mEventListeners != null) {
			this.mEventListeners.remove(type);
		} else {
			this.mEventListeners = null;
		}
	}
	,dispatchEvent: function(event) {
		var bubbles = event.bubbles;
		var tmp;
		if(!bubbles) {
			if(this.mEventListeners != null) {
				var _this = this.mEventListeners;
				var key = event.type;
				tmp = !(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key));
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return;
		}
		var previousTarget = event.target;
		event.setTarget(this);
		if(bubbles && js_Boot.__instanceof(this,starling_display_DisplayObject)) {
			this.bubbleEvent(event);
		} else {
			this.invokeEvent(event);
		}
		if(previousTarget != null) {
			event.setTarget(previousTarget);
		}
	}
	,invokeEvent: function(event) {
		var listeners;
		if(this.mEventListeners != null) {
			var _this = this.mEventListeners;
			var key = event.type;
			listeners = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		} else {
			listeners = null;
		}
		var numListeners = listeners == null?0:listeners.get_length();
		if(numListeners != 0) {
			event.setCurrentTarget(this);
			var _g1 = 0;
			var _g = numListeners;
			while(_g1 < _g) {
				var listener = listeners.get(_g1++);
				if(listener == null) {
					continue;
				}
				listener(event,event.data);
				if(event.stopsImmediatePropagation) {
					return true;
				}
			}
			return event.stopsPropagation;
		} else {
			return false;
		}
	}
	,bubbleEvent: function(event) {
		var chain;
		var element = js_Boot.__cast(this , starling_display_DisplayObject);
		var length = 1;
		if(starling_events_EventDispatcher.sBubbleChains.length > 0) {
			chain = starling_events_EventDispatcher.sBubbleChains.pop();
			chain.set(0,element);
		} else {
			var a = [element];
			var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
			chain = vector;
		}
		while(true) {
			element = element.get_parent();
			if(!(element != null)) {
				break;
			}
			chain.set(length++,element);
		}
		var _g11 = 0;
		var _g2 = length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(chain.get(i1) == null) {
				continue;
			}
			if(chain.get(i1).invokeEvent(event)) {
				break;
			}
		}
		chain.set_length(0);
		starling_events_EventDispatcher.sBubbleChains[starling_events_EventDispatcher.sBubbleChains.length] = chain;
	}
	,dispatchEventWith: function(type,bubbles,data) {
		if(bubbles == null) {
			bubbles = false;
		}
		if(bubbles || this.hasEventListener(type)) {
			var event = starling_events_Event.fromPool(type,bubbles,data);
			this.dispatchEvent(event);
			starling_events_Event.toPool(event);
		}
	}
	,hasEventListener: function(type) {
		var listeners;
		if(this.mEventListeners != null) {
			var _this = this.mEventListeners;
			listeners = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
		} else {
			listeners = null;
		}
		if(listeners != null) {
			return listeners.get_length() != 0;
		} else {
			return false;
		}
	}
	,__class__: starling_events_EventDispatcher
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"}
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	return this1.concat(a);
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return this1.copy();
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	return this1.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.push(x);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	this1.reverse();
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return this1.slice(pos,end);
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return this1.splice(pos,len);
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return this1.toString();
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed) {
	return new openfl__$Vector_BoolVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed) {
	return new openfl__$Vector_IntVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed) {
	return new openfl__$Vector_FloatVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed) {
	return new openfl__$Vector_FunctionVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed) {
	return new openfl__$Vector_ObjectVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.fromBoolVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromIntVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFloatVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFunctionVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromObjectVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.set_length(value);
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		if(Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c) {
			return this.d == Matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			this.__array = new Float32Array(9);
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v;
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a1.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a1[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var tmp = (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent;
		m.rawData.set(i,thisMat.rawData.get(i) + tmp);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.set(0,c + a1.x * a1.x * t);
	m.rawData.set(5,c + a1.y * a1.y * t);
	m.rawData.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.set(4,tmp1 + tmp2);
	m.rawData.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.set(8,tmp1 - tmp2);
	m.rawData.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.set(9,tmp1 + tmp2);
	m.rawData.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.append(new openfl_geom_Matrix3D(vector));
	}
	,appendTranslation: function(x,y,z) {
		this.rawData.set(12,this.rawData.get(12) + x);
		this.rawData.set(13,this.rawData.get(13) + y);
		this.rawData.set(14,this.rawData.get(14) + z);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(this.rawData.copy());
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(1,vector3D.y);
			this.rawData.set(2,vector3D.z);
			this.rawData.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.set(4,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(6,vector3D.z);
			this.rawData.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.set(8,vector3D.x);
			this.rawData.set(9,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.set(12,vector3D.x);
			this.rawData.set(13,vector3D.y);
			this.rawData.set(14,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(1);
			vector3D.z = this.rawData.get(2);
			vector3D.w = this.rawData.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.get(4);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(6);
			vector3D.w = this.rawData.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.get(8);
			vector3D.y = this.rawData.get(9);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.get(12);
			vector3D.y = this.rawData.get(13);
			vector3D.z = this.rawData.get(14);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = other.rawData.copy();
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.get_length() - index;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g1 = 0;
		var _g = this.rawData.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i + index,this.rawData.get(i));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(4,vector3D.y);
			this.rawData.set(8,vector3D.z);
			this.rawData.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.set(1,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(9,vector3D.z);
			this.rawData.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.set(2,vector3D.x);
			this.rawData.set(6,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.set(3,vector3D.x);
			this.rawData.set(7,vector3D.y);
			this.rawData.set(11,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(4);
			vector3D.z = this.rawData.get(8);
			vector3D.w = this.rawData.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.get(1);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(9);
			vector3D.w = this.rawData.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.get(2);
			vector3D.y = this.rawData.get(6);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.get(3);
			vector3D.y = this.rawData.get(7);
			vector3D.z = this.rawData.get(11);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = this.rawData.copy();
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var mr = this.clone().rawData.copy();
		var pos = new openfl_geom_Vector3D(mr.get(12),mr.get(13),mr.get(14));
		mr.set(12,0);
		mr.set(13,0);
		mr.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2));
		scale.y = Math.sqrt(mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6));
		scale.z = Math.sqrt(mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10));
		var tmp = mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9);
		var tmp1 = mr.get(0) * tmp;
		var tmp2 = mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8);
		var tmp3 = tmp1 - mr.get(1) * tmp2;
		var tmp4 = mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8);
		if(tmp3 + mr.get(2) * tmp4 < 0) {
			scale.z = -scale.z;
		}
		mr.set(0,mr.get(0) / scale.x);
		mr.set(1,mr.get(1) / scale.x);
		mr.set(2,mr.get(2) / scale.x);
		mr.set(4,mr.get(4) / scale.y);
		mr.set(5,mr.get(5) / scale.y);
		mr.set(6,mr.get(6) / scale.y);
		mr.set(8,mr.get(8) / scale.z);
		mr.set(9,mr.get(9) / scale.z);
		mr.set(10,mr.get(10) / scale.z);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
			var len = Math.sqrt((mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) + (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) + (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4)));
			if(len != 0) {
				rot.x = (mr.get(6) - mr.get(9)) / len;
				rot.y = (mr.get(8) - mr.get(2)) / len;
				rot.z = (mr.get(1) - mr.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.get(2));
			if(mr.get(2) != 1 && mr.get(2) != -1) {
				rot.x = Math.atan2(mr.get(6),mr.get(10));
				rot.z = Math.atan2(mr.get(1),mr.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.get(4),mr.get(5));
			}
			break;
		case 2:
			var tr = mr.get(0) + mr.get(5) + mr.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
				rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
				rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
			} else if(mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
				rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
				rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
				rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
				rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
			} else if(mr.get(5) > mr.get(10)) {
				rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
				rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
				rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
				rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
				rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
				rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
				rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.push(pos);
		vec.push(rot);
		vec.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(3),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(7),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var tmp = (toMat.rawData.get(i) - this.rawData.get(i)) * percent;
			this.rawData.set(i,this.rawData.get(i) + tmp);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.get(0);
			var m21 = this.rawData.get(4);
			var m31 = this.rawData.get(8);
			var m41 = this.rawData.get(12);
			var m12 = this.rawData.get(1);
			var m22 = this.rawData.get(5);
			var m32 = this.rawData.get(9);
			var m42 = this.rawData.get(13);
			var m13 = this.rawData.get(2);
			var m23 = this.rawData.get(6);
			var m33 = this.rawData.get(10);
			var m43 = this.rawData.get(14);
			var m14 = this.rawData.get(3);
			var m24 = this.rawData.get(7);
			var m34 = this.rawData.get(11);
			var m44 = this.rawData.get(15);
			this.rawData.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.set(0,right.x);
		this.rawData.set(4,right.y);
		this.rawData.set(8,right.z);
		this.rawData.set(12,0.0);
		this.rawData.set(1,vup.x);
		this.rawData.set(5,vup.y);
		this.rawData.set(9,vup.z);
		this.rawData.set(13,0.0);
		this.rawData.set(2,dir.x);
		this.rawData.set(6,dir.y);
		this.rawData.set(10,dir.z);
		this.rawData.set(14,0.0);
		this.rawData.set(3,pos.x);
		this.rawData.set(7,pos.y);
		this.rawData.set(11,pos.z);
		this.rawData.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.get(0);
		var m121 = rhs.rawData.get(4);
		var m131 = rhs.rawData.get(8);
		var m141 = rhs.rawData.get(12);
		var m112 = rhs.rawData.get(1);
		var m122 = rhs.rawData.get(5);
		var m132 = rhs.rawData.get(9);
		var m142 = rhs.rawData.get(13);
		var m113 = rhs.rawData.get(2);
		var m123 = rhs.rawData.get(6);
		var m133 = rhs.rawData.get(10);
		var m143 = rhs.rawData.get(14);
		var m114 = rhs.rawData.get(3);
		var m124 = rhs.rawData.get(7);
		var m134 = rhs.rawData.get(11);
		var m144 = rhs.rawData.get(15);
		var m211 = this.rawData.get(0);
		var m221 = this.rawData.get(4);
		var m231 = this.rawData.get(8);
		var m241 = this.rawData.get(12);
		var m212 = this.rawData.get(1);
		var m222 = this.rawData.get(5);
		var m232 = this.rawData.get(9);
		var m242 = this.rawData.get(13);
		var m213 = this.rawData.get(2);
		var m223 = this.rawData.get(6);
		var m233 = this.rawData.get(10);
		var m243 = this.rawData.get(14);
		var m214 = this.rawData.get(3);
		var m224 = this.rawData.get(7);
		var m234 = this.rawData.get(11);
		var m244 = this.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.prepend(new openfl_geom_Matrix3D(vector));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.get_length() < 3 || components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).z == 0) {
			return false;
		}
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.get(2).x;
		scale[4] = scale[5] = scale[6] = components.get(2).y;
		scale[8] = scale[9] = scale[10] = components.get(2).z;
		if(orientationStyle == null) {
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else if(orientationStyle == 1) {
			var cx = Math.cos(components.get(1).x);
			var cy = Math.cos(components.get(1).y);
			var cz = Math.cos(components.get(1).z);
			var sx = Math.sin(components.get(1).x);
			var sy = Math.sin(components.get(1).y);
			var sz = Math.sin(components.get(1).z);
			this.rawData.set(0,cy * cz * scale[0]);
			this.rawData.set(1,cy * sz * scale[1]);
			this.rawData.set(2,-sy * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.set(6,sx * cy * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.set(10,cx * cy * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else {
			var x1 = components.get(1).x;
			var y1 = components.get(1).y;
			var z1 = components.get(1).z;
			var w1 = components.get(1).w;
			if(orientationStyle == 0) {
				x1 *= Math.sin(w1 / 2);
				y1 *= Math.sin(w1 / 2);
				z1 *= Math.sin(w1 / 2);
				w1 = Math.cos(w1 / 2);
			}
			this.rawData.set(0,(1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0]);
			this.rawData.set(1,(2 * x1 * y1 + 2 * w1 * z1) * scale[1]);
			this.rawData.set(2,(2 * x1 * z1 - 2 * w1 * y1) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x1 * y1 - 2 * w1 * z1) * scale[4]);
			this.rawData.set(5,(1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5]);
			this.rawData.set(6,(2 * y1 * z1 + 2 * w1 * x1) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x1 * z1 + 2 * w1 * y1) * scale[8]);
			this.rawData.set(9,(2 * y1 * z1 - 2 * w1 * x1) * scale[9]);
			this.rawData.set(10,(1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		}
		if(components.get(2).x == 0) {
			this.rawData.set(0,1e-15);
		}
		if(components.get(2).y == 0) {
			this.rawData.set(5,1e-15);
		}
		if(components.get(2).z == 0) {
			this.rawData.set(10,1e-15);
		}
		return !(components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11) + this.rawData.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.get_length()) {
			x = vin.get(i);
			y = vin.get(i + 1);
			z = vin.get(i + 2);
			vout.set(i,x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12));
			vout.set(i + 1,x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13));
			vout.set(i + 2,x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14));
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,get_determinant: function() {
		return (this.rawData.get(0) * this.rawData.get(5) - this.rawData.get(4) * this.rawData.get(1)) * (this.rawData.get(10) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(11)) - (this.rawData.get(0) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(7)) + (this.rawData.get(0) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(7)) + (this.rawData.get(4) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(3)) - (this.rawData.get(4) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(3)) + (this.rawData.get(8) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(9)) * (this.rawData.get(2) * this.rawData.get(7) - this.rawData.get(6) * this.rawData.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.get(12),this.rawData.get(13),this.rawData.get(14));
	}
	,set_position: function(val) {
		this.rawData.set(12,val.x);
		this.rawData.set(13,val.y);
		this.rawData.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		if((this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right()) <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		return (this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom()) > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x?toUnion.x:this.x;
		var x1 = this.get_right() < toUnion.get_right()?toUnion.get_right():this.get_right();
		var y0 = this.y > toUnion.y?toUnion.y:this.y;
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,(this.get_bottom() < toUnion.get_bottom()?toUnion.get_bottom():this.get_bottom()) - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var starling_display_DisplayObject = function() {
	starling_events_EventDispatcher.call(this);
	this.mX = this.mY = this.mPivotX = this.mPivotY = this.mRotation = this.mSkewX = this.mSkewY = 0.0;
	this.mScaleX = this.mScaleY = this.mAlpha = 1.0;
	this.mVisible = this.mTouchable = true;
	this.mBlendMode = "auto";
	this.mTransformationMatrix = new openfl_geom_Matrix();
	this.mOrientationChanged = this.mUseHandCursor = false;
};
$hxClasses["starling.display.DisplayObject"] = starling_display_DisplayObject;
starling_display_DisplayObject.__name__ = ["starling","display","DisplayObject"];
starling_display_DisplayObject.__super__ = starling_events_EventDispatcher;
starling_display_DisplayObject.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mX: null
	,mY: null
	,mPivotX: null
	,mPivotY: null
	,mScaleX: null
	,mScaleY: null
	,mSkewX: null
	,mSkewY: null
	,mRotation: null
	,mAlpha: null
	,mVisible: null
	,mTouchable: null
	,mBlendMode: null
	,mName: null
	,mUseHandCursor: null
	,mParent: null
	,mTransformationMatrix: null
	,mTransformationMatrix3D: null
	,mOrientationChanged: null
	,mFilter: null
	,mIs3D: null
	,mMask: null
	,mIsMask: null
	,dispose: function() {
		if(this.mFilter != null) {
			this.mFilter.dispose();
		}
		if(this.mMask != null) {
			this.mMask.dispose();
		}
		this.removeEventListeners();
		this.set_mask(null);
	}
	,removeFromParent: function(dispose) {
		if(dispose == null) {
			dispose = false;
		}
		if(this.mParent != null) {
			this.mParent.removeChild(this,dispose);
		} else if(dispose) {
			this.dispose();
		}
	}
	,getTransformationMatrix: function(targetSpace,resultMatrix) {
		var commonParent;
		var currentObject;
		if(resultMatrix != null) {
			resultMatrix.identity();
		} else {
			resultMatrix = new openfl_geom_Matrix();
		}
		if(targetSpace == this) {
			return resultMatrix;
		} else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.concat(currentObject.get_transformationMatrix());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		commonParent = this.findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) {
			return resultMatrix;
		}
		starling_display_DisplayObject.sHelperMatrix.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling_display_DisplayObject.sHelperMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		starling_display_DisplayObject.sHelperMatrix.invert();
		resultMatrix.concat(starling_display_DisplayObject.sHelperMatrix);
		return resultMatrix;
	}
	,getBounds: function(targetSpace,resultRect) {
		throw new js__$Boot_HaxeError(new starling_errors_AbstractMethodError());
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.mVisible || !this.mTouchable)) {
			return null;
		}
		if(this.mMask != null && !this.hitTestMask(localPoint)) {
			return null;
		}
		if(this.getBounds(this,starling_display_DisplayObject.sHelperRect).containsPoint(localPoint)) {
			return this;
		} else {
			return null;
		}
	}
	,hitTestMask: function(localPoint) {
		if(this.mMask != null) {
			if(this.mMask.get_stage() != null) {
				this.getTransformationMatrix(this.mMask,starling_display_DisplayObject.sHelperMatrixAlt);
			} else {
				starling_display_DisplayObject.sHelperMatrixAlt.copyFrom(this.mMask.get_transformationMatrix());
				starling_display_DisplayObject.sHelperMatrixAlt.invert();
			}
			var helperPoint = localPoint == starling_display_DisplayObject.sHelperPoint?new openfl_geom_Point():starling_display_DisplayObject.sHelperPoint;
			starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,localPoint,helperPoint);
			return this.mMask.hitTest(helperPoint,true) != null;
		} else {
			return true;
		}
	}
	,localToGlobal: function(localPoint,resultPoint) {
		if(this.get_is3D()) {
			starling_display_DisplayObject.sHelperPoint3D.setTo(localPoint.x,localPoint.y,0);
			return this.local3DToGlobal(starling_display_DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling_display_DisplayObject.sHelperMatrixAlt);
			return starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,localPoint,resultPoint);
		}
	}
	,globalToLocal: function(globalPoint,resultPoint) {
		if(this.get_is3D()) {
			this.globalToLocal3D(globalPoint,starling_display_DisplayObject.sHelperPoint3D);
			this.get_stage().getCameraPosition(this,starling_display_DisplayObject.sHelperPointAlt3D);
			return starling_utils_MathUtil.intersectLineWithXYPlane(starling_display_DisplayObject.sHelperPointAlt3D,starling_display_DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling_display_DisplayObject.sHelperMatrixAlt);
			starling_display_DisplayObject.sHelperMatrixAlt.invert();
			return starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,globalPoint,resultPoint);
		}
	}
	,render: function(support,parentAlpha) {
		throw new js__$Boot_HaxeError(new starling_errors_AbstractMethodError());
	}
	,get_hasVisibleArea: function() {
		if(this.mAlpha != 0.0 && this.mVisible && !this.mIsMask && this.mScaleX != 0.0) {
			return this.mScaleY != 0.0;
		} else {
			return false;
		}
	}
	,alignPivot: function(hAlign,vAlign) {
		if(vAlign == null) {
			vAlign = "center";
		}
		if(hAlign == null) {
			hAlign = "center";
		}
		var bounds = this.getBounds(this,starling_display_DisplayObject.sHelperRect);
		this.mOrientationChanged = true;
		if(hAlign == "left") {
			this.mPivotX = bounds.x;
		} else if(hAlign == "center") {
			this.mPivotX = bounds.x + bounds.width / 2.0;
		} else if(hAlign == "right") {
			this.mPivotX = bounds.x + bounds.width;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid horizontal alignment: " + hAlign));
		}
		if(vAlign == "top") {
			this.mPivotY = bounds.y;
		} else if(vAlign == "center") {
			this.mPivotY = bounds.y + bounds.height / 2.0;
		} else if(vAlign == "bottom") {
			this.mPivotY = bounds.y + bounds.height;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid vertical alignment: " + vAlign));
		}
	}
	,getTransformationMatrix3D: function(targetSpace,resultMatrix) {
		var commonParent;
		var currentObject;
		if(resultMatrix != null) {
			resultMatrix.identity();
		} else {
			resultMatrix = new openfl_geom_Matrix3D();
		}
		if(targetSpace == this) {
			return resultMatrix;
		} else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix3D());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.append(currentObject.get_transformationMatrix3D());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix3D(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		commonParent = this.findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) {
			return resultMatrix;
		}
		starling_display_DisplayObject.sHelperMatrix3D.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling_display_DisplayObject.sHelperMatrix3D.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		starling_display_DisplayObject.sHelperMatrix3D.invert();
		resultMatrix.append(starling_display_DisplayObject.sHelperMatrix3D);
		return resultMatrix;
	}
	,local3DToGlobal: function(localPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Object not connected to stage"));
		}
		this.getTransformationMatrix3D(stage,starling_display_DisplayObject.sHelperMatrixAlt3D);
		starling_utils_MatrixUtil.transformPoint3D(starling_display_DisplayObject.sHelperMatrixAlt3D,localPoint,starling_display_DisplayObject.sHelperPoint3D);
		return starling_utils_MathUtil.intersectLineWithXYPlane(stage.get_cameraPosition(),starling_display_DisplayObject.sHelperPoint3D,resultPoint);
	}
	,globalToLocal3D: function(globalPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Object not connected to stage"));
		}
		this.getTransformationMatrix3D(stage,starling_display_DisplayObject.sHelperMatrixAlt3D);
		starling_display_DisplayObject.sHelperMatrixAlt3D.invert();
		return starling_utils_MatrixUtil.transformCoords3D(starling_display_DisplayObject.sHelperMatrixAlt3D,globalPoint.x,globalPoint.y,0,resultPoint);
	}
	,setParent: function(value) {
		var ancestor = value;
		while(ancestor != this && ancestor != null) ancestor = ancestor.mParent;
		if(ancestor == this) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("An object cannot be added as a child to itself or one " + "of its children (or children's children, etc.)"));
		} else {
			this.mParent = value;
		}
	}
	,setIs3D: function(value) {
		this.mIs3D = value;
	}
	,get_isMask: function() {
		return this.mIsMask;
	}
	,isEquivalent: function(a,b,epsilon) {
		if(epsilon == null) {
			epsilon = 0.0001;
		}
		if(a - epsilon < b) {
			return a + epsilon > b;
		} else {
			return false;
		}
	}
	,findCommonParent: function(object1,object2) {
		var currentObject = object1;
		while(currentObject != null) {
			starling_display_DisplayObject.sAncestors.set(starling_display_DisplayObject.sAncestors.get_length(),currentObject);
			currentObject = currentObject.mParent;
		}
		currentObject = object2;
		while(currentObject != null && starling_display_DisplayObject.sAncestors.indexOf(currentObject,0) == -1) currentObject = currentObject.mParent;
		starling_display_DisplayObject.sAncestors.set_length(0);
		if(currentObject != null) {
			return currentObject;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Object not connected to target"));
		}
	}
	,dispatchEvent: function(event) {
		if(event.type == "removedFromStage" && this.get_stage() == null) {
			return;
		} else {
			starling_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
		}
	}
	,addEventListener: function(type,listener) {
		if(type == "enterFrame" && !this.hasEventListener(type)) {
			this.addEventListener("addedToStage",$bind(this,this.addEnterFrameListenerToStage));
			this.addEventListener("removedFromStage",$bind(this,this.removeEnterFrameListenerFromStage));
			if(this.get_stage() != null) {
				this.addEnterFrameListenerToStage();
			}
		}
		starling_events_EventDispatcher.prototype.addEventListener.call(this,type,listener);
	}
	,removeEventListener: function(type,listener) {
		starling_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener);
		if(type == "enterFrame" && !this.hasEventListener(type)) {
			this.removeEventListener("addedToStage",$bind(this,this.addEnterFrameListenerToStage));
			this.removeEventListener("removedFromStage",$bind(this,this.removeEnterFrameListenerFromStage));
			this.removeEnterFrameListenerFromStage();
		}
	}
	,removeEventListeners: function(type) {
		if((type == null || type == "enterFrame") && this.hasEventListener("enterFrame")) {
			this.removeEventListener("addedToStage",$bind(this,this.addEnterFrameListenerToStage));
			this.removeEventListener("removedFromStage",$bind(this,this.removeEnterFrameListenerFromStage));
			this.removeEnterFrameListenerFromStage();
		}
		starling_events_EventDispatcher.prototype.removeEventListeners.call(this,type);
	}
	,addEnterFrameListenerToStage: function(e) {
		starling_core_Starling.get_current().get_stage().addEnterFrameListener(this);
	}
	,removeEnterFrameListenerFromStage: function(e) {
		starling_core_Starling.get_current().get_stage().removeEnterFrameListener(this);
	}
	,get_transformationMatrix: function() {
		if(this.mOrientationChanged) {
			this.mOrientationChanged = false;
			if(this.mSkewX == 0.0 && this.mSkewY == 0.0) {
				if(this.mRotation == 0.0) {
					this.mTransformationMatrix.setTo(this.mScaleX,0.0,0.0,this.mScaleY,this.mX - this.mPivotX * this.mScaleX,this.mY - this.mPivotY * this.mScaleY);
				} else {
					var cos = Math.cos(this.mRotation);
					var sin = Math.sin(this.mRotation);
					var a = this.mScaleX * cos;
					var b = this.mScaleX * sin;
					var c = this.mScaleY * -sin;
					var d = this.mScaleY * cos;
					this.mTransformationMatrix.setTo(a,b,c,d,this.mX - this.mPivotX * a - this.mPivotY * c,this.mY - this.mPivotX * b - this.mPivotY * d);
				}
			} else {
				this.mTransformationMatrix.identity();
				this.mTransformationMatrix.scale(this.mScaleX,this.mScaleY);
				starling_utils_MatrixUtil.skew(this.mTransformationMatrix,this.mSkewX,this.mSkewY);
				this.mTransformationMatrix.rotate(this.mRotation);
				this.mTransformationMatrix.translate(this.mX,this.mY);
				if(this.mPivotX != 0.0 || this.mPivotY != 0.0) {
					this.mTransformationMatrix.tx = this.mX - this.mTransformationMatrix.a * this.mPivotX - this.mTransformationMatrix.c * this.mPivotY;
					this.mTransformationMatrix.ty = this.mY - this.mTransformationMatrix.b * this.mPivotX - this.mTransformationMatrix.d * this.mPivotY;
				}
			}
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(matrix) {
		var PI_Q = Math.PI / 4.0;
		this.mOrientationChanged = false;
		this.mTransformationMatrix.copyFrom(matrix);
		this.mPivotX = this.mPivotY = 0;
		this.mX = matrix.tx;
		this.mY = matrix.ty;
		this.mSkewX = Math.atan(-matrix.c / matrix.d);
		this.mSkewY = Math.atan(matrix.b / matrix.a);
		if(this.mSkewX != this.mSkewX) {
			this.mSkewX = 0.0;
		}
		if(this.mSkewY != this.mSkewY) {
			this.mSkewY = 0.0;
		}
		this.mScaleY = this.mSkewX > -PI_Q && this.mSkewX < PI_Q?matrix.d / Math.cos(this.mSkewX):-matrix.c / Math.sin(this.mSkewX);
		this.mScaleX = this.mSkewY > -PI_Q && this.mSkewY < PI_Q?matrix.a / Math.cos(this.mSkewY):matrix.b / Math.sin(this.mSkewY);
		if(this.isEquivalent(this.mSkewX,this.mSkewY)) {
			this.mRotation = this.mSkewX;
			this.mSkewX = this.mSkewY = 0;
		} else {
			this.mRotation = 0;
		}
		return this.mTransformationMatrix;
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationMatrix3D == null) {
			this.mTransformationMatrix3D = new openfl_geom_Matrix3D();
		}
		return starling_utils_MatrixUtil.convertTo3D(this.get_transformationMatrix(),this.mTransformationMatrix3D);
	}
	,get_is3D: function() {
		return this.mIs3D;
	}
	,get_useHandCursor: function() {
		return this.mUseHandCursor;
	}
	,set_useHandCursor: function(value) {
		if(value == this.mUseHandCursor) {
			return this.mUseHandCursor;
		}
		this.mUseHandCursor = value;
		if(this.mUseHandCursor) {
			this.addEventListener("touch",$bind(this,this.onTouch));
		} else {
			this.removeEventListener("touch",$bind(this,this.onTouch));
		}
		return this.mUseHandCursor;
	}
	,onTouch: function(event) {
		openfl_ui_Mouse.set_cursor(event.interactsWith(this)?"button":"auto");
	}
	,get_bounds: function() {
		return this.getBounds(this.mParent);
	}
	,get_width: function() {
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).width;
	}
	,set_width: function(value) {
		this.set_scaleX(1.0);
		var actualWidth = this.get_width();
		if(actualWidth != 0.0) {
			this.set_scaleX(value / actualWidth);
		}
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).width;
	}
	,get_height: function() {
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).height;
	}
	,set_height: function(value) {
		this.set_scaleY(1.0);
		var actualHeight = this.get_height();
		if(actualHeight != 0.0) {
			this.set_scaleY(value / actualHeight);
		}
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).height;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		if(this.mX != value) {
			this.mX = value;
			this.mOrientationChanged = true;
		}
		return this.mX;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		if(this.mY != value) {
			this.mY = value;
			this.mOrientationChanged = true;
		}
		return this.mY;
	}
	,get_pivotX: function() {
		return this.mPivotX;
	}
	,set_pivotX: function(value) {
		if(this.mPivotX != value) {
			this.mPivotX = value;
			this.mOrientationChanged = true;
		}
		return this.mPivotX;
	}
	,get_pivotY: function() {
		return this.mPivotY;
	}
	,set_pivotY: function(value) {
		if(this.mPivotY != value) {
			this.mPivotY = value;
			this.mOrientationChanged = true;
		}
		return this.mPivotY;
	}
	,get_scaleX: function() {
		return this.mScaleX;
	}
	,set_scaleX: function(value) {
		if(this.mScaleX != value) {
			this.mScaleX = value;
			this.mOrientationChanged = true;
		}
		return this.mScaleX;
	}
	,get_scaleY: function() {
		return this.mScaleY;
	}
	,set_scaleY: function(value) {
		if(this.mScaleY != value) {
			this.mScaleY = value;
			this.mOrientationChanged = true;
		}
		return this.mScaleY;
	}
	,get_scale: function() {
		return this.get_scaleX();
	}
	,set_scale: function(value) {
		return this.set_scaleX(this.set_scaleY(value));
	}
	,get_skewX: function() {
		return this.mSkewX;
	}
	,set_skewX: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mSkewX != value) {
			this.mSkewX = value;
			this.mOrientationChanged = true;
		}
		return this.mSkewX;
	}
	,get_skewY: function() {
		return this.mSkewY;
	}
	,set_skewY: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mSkewY != value) {
			this.mSkewY = value;
			this.mOrientationChanged = true;
		}
		return this.mSkewY;
	}
	,get_rotation: function() {
		return this.mRotation;
	}
	,set_rotation: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mRotation != value) {
			this.mRotation = value;
			this.mOrientationChanged = true;
		}
		return this.mRotation;
	}
	,get_alpha: function() {
		return this.mAlpha;
	}
	,set_alpha: function(value) {
		this.mAlpha = value < 0.0?0.0:value > 1.0?1.0:value;
		return this.mAlpha;
	}
	,get_visible: function() {
		return this.mVisible;
	}
	,set_visible: function(value) {
		return this.mVisible = value;
	}
	,get_touchable: function() {
		return this.mTouchable;
	}
	,set_touchable: function(value) {
		return this.mTouchable = value;
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		return this.mBlendMode = value;
	}
	,get_name: function() {
		return this.mName;
	}
	,set_name: function(value) {
		return this.mName = value;
	}
	,get_filter: function() {
		return this.mFilter;
	}
	,set_filter: function(value) {
		return this.mFilter = value;
	}
	,get_mask: function() {
		return this.mMask;
	}
	,set_mask: function(value) {
		if(this.mMask != value) {
			if(this.mMask != null) {
				this.mMask.mIsMask = false;
			}
			if(value != null) {
				value.mIsMask = true;
			}
			this.mMask = value;
		}
		return this.mMask;
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_base: function() {
		var currentObject = this;
		while(currentObject.mParent != null) currentObject = currentObject.mParent;
		return currentObject;
	}
	,get_root: function() {
		var currentObject = this;
		while(currentObject.mParent != null) if(js_Boot.__instanceof(currentObject.mParent,starling_display_Stage)) {
			return currentObject;
		} else {
			currentObject = currentObject.get_parent();
		}
		return null;
	}
	,get_stage: function() {
		if(js_Boot.__instanceof(this.get_base(),starling_display_Stage)) {
			return this.get_base();
		} else {
			return null;
		}
	}
	,__class__: starling_display_DisplayObject
	,__properties__: {get_stage:"get_stage",get_root:"get_root",get_base:"get_base",get_parent:"get_parent",set_mask:"set_mask",get_mask:"get_mask",set_filter:"set_filter",get_filter:"get_filter",set_name:"set_name",get_name:"get_name",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_touchable:"set_touchable",get_touchable:"get_touchable",set_visible:"set_visible",get_visible:"get_visible",set_alpha:"set_alpha",get_alpha:"get_alpha",set_rotation:"set_rotation",get_rotation:"get_rotation",set_skewY:"set_skewY",get_skewY:"get_skewY",set_skewX:"set_skewX",get_skewX:"get_skewX",set_scale:"set_scale",get_scale:"get_scale",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_bounds:"get_bounds",set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",get_is3D:"get_is3D",get_transformationMatrix3D:"get_transformationMatrix3D",set_transformationMatrix:"set_transformationMatrix",get_transformationMatrix:"get_transformationMatrix",get_isMask:"get_isMask",get_hasVisibleArea:"get_hasVisibleArea"}
});
var starling_display_DisplayObjectContainer = function() {
	starling_display_DisplayObject.call(this);
	this.mChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.display.DisplayObjectContainer"] = starling_display_DisplayObjectContainer;
starling_display_DisplayObjectContainer.__name__ = ["starling","display","DisplayObjectContainer"];
starling_display_DisplayObjectContainer.mergeSort = function(input,compareFunc,startIndex,length,buffer) {
	if(length <= 1) {
		return;
	} else {
		var endIndex = startIndex + length;
		var halfLength = length / 2 | 0;
		var l = startIndex;
		var r = startIndex + halfLength;
		starling_display_DisplayObjectContainer.mergeSort(input,compareFunc,startIndex,halfLength,buffer);
		starling_display_DisplayObjectContainer.mergeSort(input,compareFunc,startIndex + halfLength,length - halfLength,buffer);
		var _g1 = 0;
		while(_g1 < length) {
			var i = _g1++;
			if(l < startIndex + halfLength && (r == endIndex || compareFunc(input.get(l),input.get(r)) <= 0)) {
				buffer.set(i,input.get(l));
				++l;
			} else {
				buffer.set(i,input.get(r));
				++r;
			}
		}
		var _g11 = startIndex;
		while(_g11 < endIndex) {
			var i1 = _g11++;
			input.set(i1,buffer.get(i1 - startIndex));
		}
	}
};
starling_display_DisplayObjectContainer.__super__ = starling_display_DisplayObject;
starling_display_DisplayObjectContainer.prototype = $extend(starling_display_DisplayObject.prototype,{
	mChildren: null
	,mTouchGroup: null
	,dispose: function() {
		var i = this.mChildren.get_length() - 1;
		while(i >= 0) {
			this.mChildren.get(i).dispose();
			--i;
		}
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,addChild: function(child) {
		return this.addChildAt(child,this.mChildren.get_length());
	}
	,addChildAt: function(child,index) {
		var numChildren = this.mChildren.get_length();
		if(index >= 0 && index <= numChildren) {
			if(child.get_parent() == this) {
				this.setChildIndex(child,index);
			} else {
				child.removeFromParent();
				if(index == numChildren) {
					this.mChildren.set(numChildren,child);
				} else {
					this.spliceChildren(index,0,child);
				}
				child.setParent(this);
				child.dispatchEventWith("added",true);
				if(this.get_stage() != null) {
					var container = js_Boot.__instanceof(child,starling_display_DisplayObjectContainer)?child:null;
					if(container != null) {
						container.broadcastEventWith("addedToStage");
					} else {
						child.dispatchEventWith("addedToStage");
					}
				}
			}
			return child;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
		}
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) {
			dispose = false;
		}
		var childIndex = this.getChildIndex(child);
		if(childIndex != -1) {
			this.removeChildAt(childIndex,dispose);
		}
		return child;
	}
	,removeChildAt: function(index,dispose) {
		if(dispose == null) {
			dispose = false;
		}
		if(index >= 0 && index < this.mChildren.get_length()) {
			var child = this.mChildren.get(index);
			child.dispatchEventWith("removed",true);
			if(this.get_stage() != null) {
				var container = js_Boot.__instanceof(child,starling_display_DisplayObjectContainer)?child:null;
				if(container != null) {
					container.broadcastEventWith("removedFromStage");
				} else {
					child.dispatchEventWith("removedFromStage");
				}
			}
			child.setParent(null);
			index = this.mChildren.indexOf(child,0);
			if(index >= 0) {
				this.spliceChildren(index,1);
			}
			if(dispose) {
				child.dispose();
			}
			return child;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
		}
	}
	,removeChildren: function(beginIndex,endIndex,dispose) {
		if(dispose == null) {
			dispose = false;
		}
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex < 0 || endIndex >= this.get_numChildren()) {
			endIndex = this.get_numChildren() - 1;
		}
		var i = beginIndex;
		while(i <= endIndex) {
			this.removeChildAt(beginIndex,dispose);
			++i;
		}
	}
	,getChildAt: function(index) {
		var numChildren = this.mChildren.get_length();
		if(index < 0) {
			index = numChildren + index;
		}
		if(index >= 0 && index < numChildren) {
			return this.mChildren.get(index);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
		}
	}
	,getChildByName: function(name) {
		var numChildren = this.mChildren.get_length();
		var _g1 = 0;
		while(_g1 < numChildren) {
			var i = _g1++;
			if(this.mChildren.get(i).get_name() == name) {
				return this.mChildren.get(i);
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		return this.mChildren.indexOf(child,0);
	}
	,setChildIndex: function(child,index) {
		var oldIndex = this.getChildIndex(child);
		if(oldIndex == index) {
			return;
		}
		if(oldIndex == -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not a child of this container"));
		}
		this.spliceChildren(oldIndex,1);
		this.spliceChildren(index,0,child);
	}
	,swapChildren: function(child1,child2) {
		var index1 = this.getChildIndex(child1);
		var index2 = this.getChildIndex(child2);
		if(index1 == -1 || index2 == -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not a child of this container"));
		}
		this.swapChildrenAt(index1,index2);
	}
	,swapChildrenAt: function(index1,index2) {
		var child1 = this.getChildAt(index1);
		this.mChildren.set(index1,this.getChildAt(index2));
		this.mChildren.set(index2,child1);
	}
	,sortChildren: function(compareFunction) {
		starling_display_DisplayObjectContainer.sSortBuffer.set_length(this.mChildren.get_length());
		starling_display_DisplayObjectContainer.mergeSort(this.mChildren,compareFunction,0,this.mChildren.get_length(),starling_display_DisplayObjectContainer.sSortBuffer);
		starling_display_DisplayObjectContainer.sSortBuffer.set_length(0);
	}
	,contains: function(child) {
		while(child != null) if(child == this) {
			return true;
		} else {
			child = child.get_parent();
		}
		return false;
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		var numChildren = this.mChildren.get_length();
		if(numChildren == 0) {
			this.getTransformationMatrix(targetSpace,starling_display_DisplayObjectContainer.sHelperMatrix);
			starling_utils_MatrixUtil.transformCoords(starling_display_DisplayObjectContainer.sHelperMatrix,0.0,0.0,starling_display_DisplayObjectContainer.sHelperPoint);
			resultRect.setTo(starling_display_DisplayObjectContainer.sHelperPoint.x,starling_display_DisplayObjectContainer.sHelperPoint.y,0,0);
		} else if(numChildren == 1) {
			this.mChildren.get(0).getBounds(targetSpace,resultRect);
		} else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var _g1 = 0;
			while(_g1 < numChildren) {
				this.mChildren.get(_g1++).getBounds(targetSpace,resultRect);
				if(minX > resultRect.x) {
					minX = resultRect.x;
				}
				if(maxX < resultRect.get_right()) {
					maxX = resultRect.get_right();
				}
				if(minY > resultRect.y) {
					minY = resultRect.y;
				}
				if(maxY < resultRect.get_bottom()) {
					maxY = resultRect.get_bottom();
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.get_visible() || !this.get_touchable())) {
			return null;
		}
		if(!this.hitTestMask(localPoint)) {
			return null;
		}
		var target = null;
		var localX = localPoint.x;
		var localY = localPoint.y;
		var i = this.mChildren.get_length() - 1;
		while(i >= 0) {
			var child = this.mChildren.get(i);
			if(child.get_isMask()) {
				continue;
			}
			starling_display_DisplayObjectContainer.sHelperMatrix.copyFrom(child.get_transformationMatrix());
			starling_display_DisplayObjectContainer.sHelperMatrix.invert();
			starling_utils_MatrixUtil.transformCoords(starling_display_DisplayObjectContainer.sHelperMatrix,localX,localY,starling_display_DisplayObjectContainer.sHelperPoint);
			target = child.hitTest(starling_display_DisplayObjectContainer.sHelperPoint,forTouch);
			if(target != null) {
				if(forTouch && this.mTouchGroup) {
					return this;
				} else {
					return target;
				}
			}
			--i;
		}
		return null;
	}
	,render: function(support,parentAlpha) {
		var alpha = parentAlpha * this.get_alpha();
		var numChildren = this.mChildren.get_length();
		var blendMode = support.get_blendMode();
		var _g1 = 0;
		while(_g1 < numChildren) {
			var child = this.mChildren.get(_g1++);
			if(child.get_hasVisibleArea()) {
				var filter = child.get_filter();
				var mask = child.get_mask();
				support.pushMatrix();
				support.transformMatrix(child);
				support.set_blendMode(child.get_blendMode());
				if(mask != null) {
					support.pushMask(mask);
				}
				if(filter != null) {
					filter.render(child,support,alpha);
				} else {
					child.render(support,alpha);
				}
				if(mask != null) {
					support.popMask();
				}
				support.set_blendMode(blendMode);
				support.popMatrix();
			}
		}
	}
	,broadcastEvent: function(event) {
		if(event.bubbles) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Broadcast of bubbling events is prohibited"));
		}
		var fromIndex = starling_display_DisplayObjectContainer.sBroadcastListeners.get_length();
		this.getChildEventListeners(this,event.type,starling_display_DisplayObjectContainer.sBroadcastListeners);
		var toIndex = starling_display_DisplayObjectContainer.sBroadcastListeners.get_length();
		var _g1 = fromIndex;
		while(_g1 < toIndex) starling_display_DisplayObjectContainer.sBroadcastListeners.get(_g1++).dispatchEvent(event);
		starling_display_DisplayObjectContainer.sBroadcastListeners.set_length(fromIndex);
	}
	,broadcastEventWith: function(type,data) {
		var event = starling_events_Event.fromPool(type,false,data);
		this.broadcastEvent(event);
		starling_events_Event.toPool(event);
	}
	,get_numChildren: function() {
		return this.mChildren.get_length();
	}
	,get_touchGroup: function() {
		return this.mTouchGroup;
	}
	,set_touchGroup: function(value) {
		return this.mTouchGroup = value;
	}
	,spliceChildren: function(startIndex,deleteCount,insertee) {
		if(deleteCount == null) {
			deleteCount = 2147483647;
		}
		var vector = this.mChildren;
		var oldLength = vector.get_length();
		if(startIndex < 0) {
			startIndex += oldLength;
		}
		if(startIndex < 0) {
			startIndex = 0;
		} else if(startIndex > oldLength) {
			startIndex = oldLength;
		}
		if(startIndex + deleteCount > oldLength) {
			deleteCount = oldLength - startIndex;
		}
		var i;
		var insertCount = insertee != null?1:0;
		var deltaLength = insertCount - deleteCount;
		var newLength = oldLength + deltaLength;
		var shiftCount = oldLength - startIndex - deleteCount;
		if(deltaLength < 0) {
			i = startIndex + insertCount;
			while(shiftCount != 0) {
				vector.set(i,vector.get(i - deltaLength));
				--shiftCount;
				++i;
			}
			vector.set_length(newLength);
		} else if(deltaLength > 0) {
			i = 1;
			while(shiftCount != 0) {
				vector.set(newLength - i,vector.get(oldLength - i));
				--shiftCount;
				++i;
			}
			vector.set_length(newLength);
		}
		if(insertee != null) {
			vector.set(startIndex,insertee);
		}
	}
	,getChildEventListeners: function(object,eventType,listeners) {
		var container = js_Boot.__instanceof(object,starling_display_DisplayObjectContainer)?object:null;
		if(object.hasEventListener(eventType)) {
			listeners.set(listeners.get_length(),object);
		}
		if(container != null) {
			var children = container.mChildren;
			var numChildren = children.get_length();
			var _g1 = 0;
			while(_g1 < numChildren) this.getChildEventListeners(children.get(_g1++),eventType,listeners);
		}
	}
	,__class__: starling_display_DisplayObjectContainer
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{set_touchGroup:"set_touchGroup",get_touchGroup:"get_touchGroup",get_numChildren:"get_numChildren"})
});
var starling_display_Sprite = function() {
	starling_display_DisplayObjectContainer.call(this);
};
$hxClasses["starling.display.Sprite"] = starling_display_Sprite;
starling_display_Sprite.__name__ = ["starling","display","Sprite"];
starling_display_Sprite.__super__ = starling_display_DisplayObjectContainer;
starling_display_Sprite.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mFlattenedContents: null
	,mFlattenRequested: null
	,mFlattenOptimized: null
	,mClipRect: null
	,dispose: function() {
		this.disposeFlattenedContents();
		starling_display_DisplayObjectContainer.prototype.dispose.call(this);
	}
	,disposeFlattenedContents: function() {
		if(this.mFlattenedContents != null) {
			var _g1 = 0;
			var _g = this.mFlattenedContents.get_length();
			while(_g1 < _g) this.mFlattenedContents.get(_g1++).dispose();
			this.mFlattenedContents = null;
		}
	}
	,flatten: function(ignoreChildOrder) {
		if(ignoreChildOrder == null) {
			ignoreChildOrder = false;
		}
		this.mFlattenRequested = true;
		this.mFlattenOptimized = ignoreChildOrder;
		this.broadcastEventWith("flatten");
	}
	,unflatten: function() {
		this.mFlattenRequested = false;
		this.disposeFlattenedContents();
	}
	,get_isFlattened: function() {
		if(this.mFlattenedContents == null) {
			return this.mFlattenRequested;
		} else {
			return true;
		}
	}
	,get_clipRect: function() {
		return this.mClipRect;
	}
	,set_clipRect: function(value) {
		if(this.mClipRect != null && value != null) {
			this.mClipRect.copyFrom(value);
		} else {
			this.mClipRect = value != null?value.clone():null;
		}
		return this.mClipRect;
	}
	,getClipRect: function(targetSpace,resultRect) {
		if(this.mClipRect == null) {
			return null;
		}
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		var x = 0.0;
		var y = 0.0;
		var minX = 1.79e+308;
		var maxX = -1.79e+308;
		var minY = 1.79e+308;
		var maxY = -1.79e+308;
		var transMatrix = this.getTransformationMatrix(targetSpace,starling_display_Sprite.sHelperMatrix);
		var _g = 0;
		while(_g < 4) {
			switch(_g++) {
			case 0:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_top();
				break;
			case 1:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_bottom();
				break;
			case 2:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_top();
				break;
			case 3:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_bottom();
				break;
			}
			var transformedPoint = starling_utils_MatrixUtil.transformCoords(transMatrix,x,y,starling_display_Sprite.sHelperPoint);
			if(minX > transformedPoint.x) {
				minX = transformedPoint.x;
			}
			if(maxX < transformedPoint.x) {
				maxX = transformedPoint.x;
			}
			if(minY > transformedPoint.y) {
				minY = transformedPoint.y;
			}
			if(maxY < transformedPoint.y) {
				maxY = transformedPoint.y;
			}
		}
		resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		return resultRect;
	}
	,getBounds: function(targetSpace,resultRect) {
		var bounds = starling_display_DisplayObjectContainer.prototype.getBounds.call(this,targetSpace,resultRect);
		if(this.mClipRect != null) {
			starling_utils_RectangleUtil.intersect(bounds,this.getClipRect(targetSpace,starling_display_Sprite.sHelperRect),bounds);
		}
		return bounds;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(this.mClipRect != null && !this.mClipRect.containsPoint(localPoint)) {
			return null;
		} else {
			return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		}
	}
	,render: function(support,parentAlpha) {
		if(this.mClipRect != null) {
			if(support.pushClipRect(this.getClipRect(this.get_stage(),starling_display_Sprite.sHelperRect)).isEmpty()) {
				support.popClipRect();
				return;
			}
		}
		if(this.mFlattenedContents != null || this.mFlattenRequested) {
			if(this.mFlattenedContents == null) {
				this.mFlattenedContents = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			}
			if(this.mFlattenRequested) {
				starling_display_QuadBatch.compile(this,this.mFlattenedContents);
				if(this.mFlattenOptimized) {
					starling_display_QuadBatch.optimize(this.mFlattenedContents);
				}
				support.applyClipRect();
				this.mFlattenRequested = false;
			}
			var alpha = parentAlpha * this.get_alpha();
			var numBatches = this.mFlattenedContents.get_length();
			var mvpMatrix = support.get_mvpMatrix3D();
			support.finishQuadBatch();
			support.raiseDrawCount(numBatches);
			var _g1 = 0;
			while(_g1 < numBatches) {
				var quadBatch = this.mFlattenedContents.get(_g1++);
				quadBatch.renderCustom(mvpMatrix,alpha,quadBatch.get_blendMode() == "auto"?support.get_blendMode():quadBatch.get_blendMode());
			}
		} else {
			starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
		}
		if(this.mClipRect != null) {
			support.popClipRect();
		}
	}
	,__class__: starling_display_Sprite
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_clipRect:"set_clipRect",get_clipRect:"get_clipRect",get_isFlattened:"get_isFlattened"})
});
var haxegon_Core = function() {
	starling_display_Sprite.call(this);
	this.addEventListener("addedToStage",$bind(this,this.addedtostage));
};
$hxClasses["haxegon.Core"] = haxegon_Core;
haxegon_Core.__name__ = ["haxegon","Core"];
haxegon_Core.__properties__ = {set_showstats:"set_showstats",get_showstats:"get_showstats",set_time:"set_time",get_time:"get_time",set_fps:"set_fps",get_fps:"get_fps"}
haxegon_Core.callfunctionstartframe = function(f) {
	if(f == null) {
		haxegon_Core.startframeextended = false;
		haxegon_Core.extendedstartframefunction = null;
	} else {
		haxegon_Core.startframeextended = true;
		haxegon_Core.extendedstartframefunction = f;
	}
};
haxegon_Core.callfunctionafterupdate = function(f) {
	if(f == null) {
		haxegon_Core.updateextended = false;
		haxegon_Core.extendedupdatefunction = null;
	} else {
		haxegon_Core.updateextended = true;
		haxegon_Core.extendedupdatefunction = f;
	}
};
haxegon_Core.callfunctionafterrender = function(f) {
	if(f == null) {
		haxegon_Core.renderextended = false;
		haxegon_Core.extendedrenderfunction = null;
	} else {
		haxegon_Core.renderextended = true;
		haxegon_Core.extendedrenderfunction = f;
	}
};
haxegon_Core.get_fps = function() {
	return haxegon_Core._fps;
};
haxegon_Core.set_fps = function(_newfps) {
	starling_core_Starling.get_current().get_nativeStage().set_frameRate(_newfps);
	return _newfps;
};
haxegon_Core.get_time = function() {
	return (openfl_Lib.getTimer() - haxegon_Core.starttime) / 1000;
};
haxegon_Core.set_time = function(t) {
	haxegon_Core.starttime = openfl_Lib.getTimer() - t * 1000 | 0;
	return openfl_Lib.getTimer() - haxegon_Core.starttime;
};
haxegon_Core.get_showstats = function() {
	return haxegon_Core._showstats;
};
haxegon_Core.set_showstats = function(_b) {
	if(haxegon_Gfx.gfxinit) {
		if(_b) {
			haxegon_Core.statsdisplay = new starling_core_StatsDisplay();
			haxegon_Gfx.starstage.addChild(haxegon_Core.statsdisplay);
		} else if(haxegon_Core.statsdisplay != null) {
			haxegon_Gfx.starstage.removeChild(haxegon_Core.statsdisplay);
		}
	}
	haxegon_Core._showstats = _b;
	return haxegon_Core._showstats;
};
haxegon_Core.__super__ = starling_display_Sprite;
haxegon_Core.prototype = $extend(starling_display_Sprite.prototype,{
	addedtostage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.addedtostage));
		this.loaded();
	}
	,loaded: function() {
		haxegon_Random.setseed(Math.random() * 233280 | 0);
		haxegon_Input.init(this.get_stage(),starling_core_Starling.get_current().get_nativeStage());
		haxegon_Mouse.init(this.get_stage(),starling_core_Starling.get_current().get_nativeStage());
		haxegon_Data.initassets();
		haxegon_Gfx.init(this.get_stage(),starling_core_Starling.get_current().get_nativeStage());
		haxegon_Text.defaultfont();
		haxegon_Music.init();
		haxegon_Gfx.screenwidth = Std.parseInt("1152");
		haxegon_Gfx.screenheight = Std.parseInt("720");
		haxegon_Gfx.screenwidthmid = haxegon_Gfx.screenwidth / 2 | 0;
		haxegon_Gfx.screenheightmid = haxegon_Gfx.screenheight / 2 | 0;
		haxegon_Scene.init();
		if(!haxegon_Gfx.gfxinit) {
			haxegon_Gfx.resizescreen(Std.parseInt("1152"),Std.parseInt("720"));
			if(haxegon_Gfx.get_fullscreen()) {
				haxegon_Gfx.set_fullscreen(true);
			} else {
				haxegon_Gfx.set_fullscreen(false);
			}
		} else if(haxegon_Gfx.get_fullscreen()) {
			haxegon_Gfx.set_fullscreen(true);
		} else {
			haxegon_Gfx.set_fullscreen(false);
		}
		haxegon_Core._rate3 = Math.round(100.);
		haxegon_Core._target3 = 3 * openfl_Lib.getTimer() + haxegon_Core._rate3;
		haxegon_Core.starttime = openfl_Lib.getTimer();
		this.get_stage().addEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,onEnterFrame: function(e) {
		if(!haxegon_Scene.hasseperaterenderfunction) {
			this.doupdate(0,1);
			return;
		}
		var _time3 = 3 * openfl_Lib.getTimer();
		if(_time3 < haxegon_Core._target3 - 0.5 * haxegon_Core._rate3) {
			return;
		}
		if(haxegon_Core.startframeextended) {
			haxegon_Core.extendedstartframefunction();
		}
		var frameupdates = Math.ceil(Math.max(1.0,(_time3 - haxegon_Core._target3 + 0.5 * haxegon_Core._rate3) / haxegon_Core._rate3));
		if(frameupdates > 4) {
			haxegon_Core._target3 += haxegon_Core._rate3 * (frameupdates - 4);
			frameupdates = 4;
		}
		if(frameupdates == 1) {
			if(haxegon_Core._target3 - _time3 > 0.1 * haxegon_Core._rate3) {
				haxegon_Core._target3 -= 1;
			} else if(haxegon_Core._target3 - _time3 < -0.1 * haxegon_Core._rate3) {
				haxegon_Core._target3 += 1;
			}
		}
		var _g1 = 0;
		var _g = frameupdates;
		while(_g1 < _g) {
			var upd = _g1++;
			haxegon_Core._target3 += haxegon_Core._rate3;
			this.doupdate(upd,frameupdates);
		}
		this.dorender();
	}
	,doupdate: function(updateindex,updatecount) {
		haxegon_Mouse.update(haxegon_Gfx.getscreenx(openfl_Lib.current.get_mouseX()),haxegon_Gfx.getscreeny(openfl_Lib.current.get_mouseY()),updateindex == 0);
		haxegon_Input.update();
		if(!haxegon_Scene.hasseperaterenderfunction) {
			haxegon_Gfx.drawto.bundlelock();
			if(haxegon_Gfx.clearcolor != haxegon_Col.TRANSPARENT) {
				haxegon_Gfx.clearscreen(haxegon_Gfx.clearcolor);
			}
			haxegon_Scene.update();
			haxegon_Text.drawstringinput();
			haxegon_Debug.showlog();
			if(haxegon_Core.updateextended) {
				haxegon_Core.extendedupdatefunction(updateindex,updatecount);
			}
			haxegon_Gfx.drawto.bundleunlock();
		} else {
			haxegon_Scene.update();
			if(haxegon_Core.updateextended) {
				haxegon_Core.extendedupdatefunction(updateindex,updatecount);
			}
		}
		haxegon_Music.processmusic();
	}
	,dorender: function() {
		haxegon_Gfx.drawto.bundlelock();
		if(haxegon_Gfx.clearcolor != haxegon_Col.TRANSPARENT) {
			haxegon_Gfx.clearscreen(haxegon_Gfx.clearcolor);
		}
		haxegon_Scene.render();
		haxegon_Text.drawstringinput();
		haxegon_Debug.showlog();
		if(haxegon_Core.renderextended) {
			haxegon_Core.extendedrenderfunction();
		}
		haxegon_Gfx.drawto.bundleunlock();
	}
	,__class__: haxegon_Core
});
var haxegon_Data = function() { };
$hxClasses["haxegon.Data"] = haxegon_Data;
haxegon_Data.__name__ = ["haxegon","Data"];
haxegon_Data.__properties__ = {set_savefile:"set_savefile",get_savefile:"get_savefile"}
haxegon_Data.loadtext = function(textfile) {
	if(openfl_Assets.exists("data/text/" + textfile + ".txt")) {
		haxegon_Data.tempstring = openfl_Assets.getText("data/text/" + textfile + ".txt");
	} else {
		haxegon_Debug.log("ERROR: In loadtext, cannot find \"data/text/" + textfile + ".txt\".");
		return [""];
	}
	haxegon_Data.tempstring = haxegon_S.replacechar(haxegon_Data.tempstring,"\r","");
	return haxegon_Data.tempstring.split("\n");
};
haxegon_Data.blank2darray = function(width,height) {
	var _g = [];
	var _g2 = 0;
	while(_g2 < width) {
		++_g2;
		var _g3 = [];
		var _g5 = 0;
		while(_g5 < height) {
			++_g5;
			_g3.push(0);
		}
		_g.push(_g3);
	}
	return _g;
};
haxegon_Data.get_savefile = function() {
	return haxegon_Data._savefile;
};
haxegon_Data.set_savefile = function(newsavefile) {
	if(haxegon_Data.get_savefile() != newsavefile) {
		haxegon_Data.changesavefile(newsavefile);
	}
	return haxegon_Data._savefile;
};
haxegon_Data.changesavefile = function(name) {
	haxegon_Data._savefile = name;
	haxegon_Data.so = openfl_net_SharedObject.getLocal(haxegon_Data._savefile);
};
haxegon_Data.save = function(key,value) {
	if(haxegon_Data.so == null) {
		haxegon_Data.changesavefile("haxegongame");
	}
	haxegon_Data.so.data[key] = value;
	try {
		haxegon_Data.so.flush();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		haxegon_Debug.log("Error: Unable to save \"" + key + "\".");
	}
};
haxegon_Data.load = function(key) {
	if(haxegon_Data.so == null) {
		haxegon_Data.changesavefile("haxegongame");
	}
	var returnval = Reflect.field(haxegon_Data.so.data,key);
	if(returnval == null) {
		if(haxegon_Data._savefile == "haxegongame") {
			haxegon_Debug.log("Error: There is no value stored for \"" + key + "\"");
		} else {
			haxegon_Debug.log("Error: Savefile + \"" + haxegon_Data._savefile + "\" has no value stored for \"" + key + "\"");
		}
	}
	return returnval;
};
haxegon_Data.deletesave = function(name) {
	if(name == null) {
		name = "haxegongame";
	}
	if(haxegon_Data._savefile != name) {
		openfl_net_SharedObject.getLocal(name).clear();
	} else {
		haxegon_Data.so.clear();
	}
};
haxegon_Data.initassets = function() {
	haxegon_Data.embeddedassets_original = openfl_Assets.list();
	haxegon_Data.embeddedassets = [];
	var _g1 = 0;
	var _g = haxegon_Data.embeddedassets_original.length;
	while(_g1 < _g) haxegon_Data.embeddedassets.push(haxegon_Data.embeddedassets_original[_g1++].toLowerCase());
};
haxegon_Data.assetexists = function(filename) {
	filename = filename.toLowerCase();
	return haxegon_Data.embeddedassets.indexOf(filename) >= 0;
};
haxegon_Data.assetexists_infolder = function(folder,filename) {
	filename = filename.toLowerCase();
	folder = folder.toLowerCase();
	var folderlength = folder.length;
	var filenamelength = filename.length;
	var _g1 = 0;
	var _g = haxegon_Data.embeddedassets.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(haxegon_S.left(haxegon_Data.embeddedassets[i],folderlength) == folder) {
			if(haxegon_S.right(haxegon_Data.embeddedassets[i],filenamelength) == filename) {
				return true;
			}
		}
	}
	return false;
};
haxegon_Data.getsoundasset = function(filename) {
	filename = filename.toLowerCase();
	return openfl_Assets.getSound(haxegon_Data.embeddedassets_original[haxegon_Data.embeddedassets.indexOf(filename)]);
};
haxegon_Data.getgraphicsasset = function(filename) {
	filename = filename.toLowerCase();
	return openfl_Assets.getBitmapData(haxegon_Data.embeddedassets_original[haxegon_Data.embeddedassets.indexOf(filename)]);
};
haxegon_Data.getfontasset = function(filename) {
	filename = filename.toLowerCase();
	return openfl_Assets.getFont(haxegon_Data.embeddedassets_original[haxegon_Data.embeddedassets.indexOf(filename)]);
};
haxegon_Data.gettextasset = function(filename) {
	filename = filename.toLowerCase();
	return openfl_Assets.getText(haxegon_Data.embeddedassets_original[haxegon_Data.embeddedassets.indexOf(filename)]);
};
var haxegon_Debug = function() { };
$hxClasses["haxegon.Debug"] = haxegon_Debug;
haxegon_Debug.__name__ = ["haxegon","Debug"];
haxegon_Debug.clearlog = function() {
	haxegon_Debug.debuglog = [];
};
haxegon_Debug.log = function(t) {
	haxe_Log.trace(t,{ fileName : "Debug.hx", lineNumber : 20, className : "haxegon.Debug", methodName : "log"});
	haxegon_Debug.debuglog.push(haxegon_Convert.tostring(t));
	haxegon_Debug.showtest = true;
	if(haxegon_Debug.debuglog.length > 20) {
		haxegon_Debug.debuglog.reverse();
		haxegon_Debug.debuglog.pop();
		haxegon_Debug.debuglog.reverse();
	}
};
haxegon_Debug.test = function(t) {
	haxegon_Debug.debuglog[0] = haxegon_Convert.tostring(t);
	haxegon_Debug.showtest = true;
};
haxegon_Debug.showlog = function() {
	if(haxegon_Debug.showtest) {
		var _g1 = 0;
		var _g = haxegon_Debug.debuglog.length;
		while(_g1 < _g) {
			var k = _g1++;
			var _g2 = -1;
			while(_g2 < 2) {
				var j = _g2++;
				var _g3 = -1;
				while(_g3 < 2) haxegon_Text.display(2 + _g3++,j + (2 + (haxegon_Debug.debuglog.length - 1 - k) * (haxegon_Text.height(haxegon_Debug.debuglog[k]) + 2) | 0),haxegon_Debug.debuglog[k],haxegon_Col.rgb(0,0,0));
			}
			haxegon_Text.display(2,2 + (haxegon_Debug.debuglog.length - 1 - k) * (haxegon_Text.height(haxegon_Debug.debuglog[k]) + 2) | 0,haxegon_Debug.debuglog[k],haxegon_Col.rgb(255,255,255));
		}
	}
};
var haxegon_HaxegonTileset = function(n,w,h) {
	this.name = n;
	this.width = w;
	this.height = h;
	this.tiles = [];
};
$hxClasses["haxegon.HaxegonTileset"] = haxegon_HaxegonTileset;
haxegon_HaxegonTileset.__name__ = ["haxegon","HaxegonTileset"];
haxegon_HaxegonTileset.prototype = {
	tiles: null
	,name: null
	,width: null
	,height: null
	,__class__: haxegon_HaxegonTileset
};
var starling_display_Quad = function(width,height,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	if(color == null) {
		color = 16777215;
	}
	starling_display_DisplayObject.call(this);
	if(width == 0.0 || height == 0.0) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid size: width and height must not be zero"));
	}
	this.mTinted = color != 16777215;
	this.mVertexData = new starling_utils_VertexData(4,premultipliedAlpha);
	this.mVertexData.setPosition(0,0.0,0.0);
	this.mVertexData.setPosition(1,width,0.0);
	this.mVertexData.setPosition(2,0.0,height);
	this.mVertexData.setPosition(3,width,height);
	this.mVertexData.setUniformColor(color);
	this.onVertexDataChanged();
};
$hxClasses["starling.display.Quad"] = starling_display_Quad;
starling_display_Quad.__name__ = ["starling","display","Quad"];
starling_display_Quad.__super__ = starling_display_DisplayObject;
starling_display_Quad.prototype = $extend(starling_display_DisplayObject.prototype,{
	mTinted: null
	,mVertexData: null
	,onVertexDataChanged: function() {
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		if(targetSpace == this) {
			this.mVertexData.getPosition(3,starling_display_Quad.sHelperPoint);
			resultRect.setTo(0.0,0.0,starling_display_Quad.sHelperPoint.x,starling_display_Quad.sHelperPoint.y);
		} else if(targetSpace == this.get_parent() && this.get_rotation() == 0.0) {
			var scaleX = this.get_scaleX();
			var scaleY = this.get_scaleY();
			this.mVertexData.getPosition(3,starling_display_Quad.sHelperPoint);
			resultRect.setTo(this.get_x() - this.get_pivotX() * scaleX,this.get_y() - this.get_pivotY() * scaleY,starling_display_Quad.sHelperPoint.x * scaleX,starling_display_Quad.sHelperPoint.y * scaleY);
			if(scaleX < 0) {
				resultRect.width *= -1;
				resultRect.x -= resultRect.width;
			}
			if(scaleY < 0) {
				resultRect.height *= -1;
				resultRect.y -= resultRect.height;
			}
		} else if(this.get_is3D() && this.get_stage() != null) {
			this.get_stage().getCameraPosition(targetSpace,starling_display_Quad.sHelperPoint3D);
			this.getTransformationMatrix3D(targetSpace,starling_display_Quad.sHelperMatrix3D);
			this.mVertexData.getBoundsProjected(starling_display_Quad.sHelperMatrix3D,starling_display_Quad.sHelperPoint3D,0,4,resultRect);
		} else {
			this.getTransformationMatrix(targetSpace,starling_display_Quad.sHelperMatrix);
			this.mVertexData.getBounds(starling_display_Quad.sHelperMatrix,0,4,resultRect);
		}
		return resultRect;
	}
	,getVertexColor: function(vertexID) {
		return this.mVertexData.getColor(vertexID);
	}
	,setVertexColor: function(vertexID,color) {
		this.mVertexData.setColor(vertexID,color);
		this.onVertexDataChanged();
		if(color != 16777215) {
			this.mTinted = true;
		} else {
			this.mTinted = this.mVertexData.get_tinted();
		}
	}
	,getVertexAlpha: function(vertexID) {
		return this.mVertexData.getAlpha(vertexID);
	}
	,setVertexAlpha: function(vertexID,alpha) {
		this.mVertexData.setAlpha(vertexID,alpha);
		this.onVertexDataChanged();
		if(alpha != 1.0) {
			this.mTinted = true;
		} else {
			this.mTinted = this.mVertexData.get_tinted();
		}
	}
	,get_color: function() {
		return this.mVertexData.getColor(0);
	}
	,set_color: function(value) {
		this.mVertexData.setUniformColor(value);
		this.onVertexDataChanged();
		if(value != 16777215 || this.get_alpha() != 1.0) {
			this.mTinted = true;
		} else {
			this.mTinted = this.mVertexData.get_tinted();
		}
		return this.mVertexData.getColor(0);
	}
	,set_alpha: function(value) {
		starling_display_DisplayObject.prototype.set_alpha.call(this,value);
		if(value < 1.0) {
			this.mTinted = true;
		} else {
			this.mTinted = this.mVertexData.get_tinted();
		}
		return this.mAlpha;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		this.mVertexData.copyTo(targetData,targetVertexID);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		this.mVertexData.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha);
	}
	,get_tinted: function() {
		return this.mTinted;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,__class__: starling_display_Quad
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted",set_color:"set_color",get_color:"get_color"})
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var starling_utils_VertexData = function(numVertices,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = false;
	}
	var a = [];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	this.mRawData = vector;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.mNumVertices = 0;
	this.set_numVertices(numVertices);
};
$hxClasses["starling.utils.VertexData"] = starling_utils_VertexData;
starling_utils_VertexData.__name__ = ["starling","utils","VertexData"];
starling_utils_VertexData.prototype = {
	mRawData: null
	,mPremultipliedAlpha: null
	,mNumVertices: null
	,clone: function(vertexID,numVertices) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		var clone = new starling_utils_VertexData(0,this.mPremultipliedAlpha);
		clone.mNumVertices = numVertices;
		clone.mRawData = this.mRawData.slice(vertexID * 8,numVertices * 8);
		clone.mRawData.fixed = true;
		return clone;
	}
	,copyTo: function(targetData,targetVertexID,vertexID,numVertices) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		this.copyTransformedTo(targetData,targetVertexID,null,vertexID,numVertices);
	}
	,copyTransformedTo: function(targetData,targetVertexID,matrix,vertexID,numVertices) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		var x;
		var y;
		var targetRawData = targetData.mRawData;
		var targetIndex = targetVertexID * 8;
		var sourceIndex = vertexID * 8;
		var sourceEnd = (vertexID + numVertices) * 8;
		if(matrix != null) {
			while(sourceIndex < sourceEnd) {
				x = this.mRawData.get(sourceIndex++);
				y = this.mRawData.get(sourceIndex++);
				targetRawData.set(targetIndex++,matrix.a * x + matrix.c * y + matrix.tx);
				targetRawData.set(targetIndex++,matrix.d * y + matrix.b * x + matrix.ty);
				targetRawData.set(targetIndex++,this.mRawData.get(sourceIndex++));
				targetRawData.set(targetIndex++,this.mRawData.get(sourceIndex++));
				targetRawData.set(targetIndex++,this.mRawData.get(sourceIndex++));
				targetRawData.set(targetIndex++,this.mRawData.get(sourceIndex++));
				targetRawData.set(targetIndex++,this.mRawData.get(sourceIndex++));
				targetRawData.set(targetIndex++,this.mRawData.get(sourceIndex++));
			}
		} else {
			while(sourceIndex < sourceEnd) targetRawData.set(targetIndex++,this.mRawData.get(sourceIndex++));
		}
	}
	,append: function(data) {
		var targetIndex = this.mRawData.get_length();
		var rawData = data.mRawData;
		var rawDataLength = rawData.get_length();
		var _g1 = 0;
		while(_g1 < rawDataLength) this.mRawData.set(targetIndex++,rawData.get(_g1++));
		this.mNumVertices += data.get_numVertices();
		this.mRawData.fixed = true;
	}
	,setPosition: function(vertexID,x,y) {
		var offset = vertexID * 8;
		this.mRawData.set(offset,x);
		this.mRawData.set(offset + 1,y);
	}
	,getPosition: function(vertexID,position) {
		var offset = vertexID * 8;
		position.x = this.mRawData.get(offset);
		position.y = this.mRawData.get(offset + 1);
	}
	,setColorAndAlpha: function(vertexID,color,alpha) {
		if(alpha < 0.001) {
			alpha = 0.001;
		} else if(alpha > 1.0) {
			alpha = 1.0;
		}
		var offset = vertexID * 8 + 2;
		var multiplier = this.mPremultipliedAlpha?alpha:1.0;
		this.mRawData.set(offset,_$UInt_UInt_$Impl_$.toFloat(color >>> 16 & 255) / 255.0 * multiplier);
		this.mRawData.set(offset + 1,_$UInt_UInt_$Impl_$.toFloat(color >>> 8 & 255) / 255.0 * multiplier);
		this.mRawData.set(offset + 2,_$UInt_UInt_$Impl_$.toFloat(color & 255) / 255.0 * multiplier);
		this.mRawData.set(offset + 3,alpha);
	}
	,setColor: function(vertexID,color) {
		var offset = vertexID * 8 + 2;
		var multiplier = this.mPremultipliedAlpha?this.mRawData.get(offset + 3):1.0;
		this.mRawData.set(offset,_$UInt_UInt_$Impl_$.toFloat(color >>> 16 & 255) / 255.0 * multiplier);
		this.mRawData.set(offset + 1,_$UInt_UInt_$Impl_$.toFloat(color >>> 8 & 255) / 255.0 * multiplier);
		this.mRawData.set(offset + 2,_$UInt_UInt_$Impl_$.toFloat(color & 255) / 255.0 * multiplier);
	}
	,getColor: function(vertexID) {
		var offset = vertexID * 8 + 2;
		var divisor = this.mPremultipliedAlpha?this.mRawData.get(offset + 3):1.0;
		if(divisor == 0) {
			return 0;
		} else {
			return (this.mRawData.get(offset) / divisor * 255 | 0) << 16 | (this.mRawData.get(offset + 1) / divisor * 255 | 0) << 8 | (this.mRawData.get(offset + 2) / divisor * 255 | 0);
		}
	}
	,setAlpha: function(vertexID,alpha) {
		if(this.mPremultipliedAlpha) {
			this.setColorAndAlpha(vertexID,this.getColor(vertexID),alpha);
		} else {
			this.mRawData.set(vertexID * 8 + 2 + 3,alpha);
		}
	}
	,getAlpha: function(vertexID) {
		return this.mRawData.get(vertexID * 8 + 2 + 3);
	}
	,setTexCoords: function(vertexID,u,v) {
		var offset = vertexID * 8 + 6;
		this.mRawData.set(offset,u);
		this.mRawData.set(offset + 1,v);
	}
	,getTexCoords: function(vertexID,texCoords) {
		var offset = vertexID * 8 + 6;
		texCoords.x = this.mRawData.get(offset);
		texCoords.y = this.mRawData.get(offset + 1);
	}
	,translateVertex: function(vertexID,deltaX,deltaY) {
		var offset = vertexID * 8;
		this.mRawData.set(offset,this.mRawData.get(offset) + deltaX);
		this.mRawData.set(offset + 1,this.mRawData.get(offset + 1) + deltaY);
	}
	,transformVertex: function(vertexID,matrix,numVertices) {
		if(numVertices == null) {
			numVertices = 1;
		}
		var x;
		var y;
		var offset = vertexID * 8;
		var _g1 = 0;
		while(_g1 < numVertices) {
			++_g1;
			x = this.mRawData.get(offset);
			y = this.mRawData.get(offset + 1);
			this.mRawData.set(offset,matrix.a * x + matrix.c * y + matrix.tx);
			this.mRawData.set(offset + 1,matrix.d * y + matrix.b * x + matrix.ty);
			offset += 8;
		}
	}
	,setUniformColor: function(color) {
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) this.setColor(_g1++,color);
	}
	,setUniformAlpha: function(alpha) {
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) this.setAlpha(_g1++,alpha);
	}
	,scaleAlpha: function(vertexID,factor,numVertices) {
		if(numVertices == null) {
			numVertices = 1;
		}
		if(factor == 1.0) {
			return;
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		if(this.mPremultipliedAlpha) {
			var _g1 = 0;
			var _g = numVertices;
			while(_g1 < _g) {
				var i = _g1++;
				this.setAlpha(vertexID + i,this.getAlpha(vertexID + i) * factor);
			}
		} else {
			var offset = vertexID * 8 + 2 + 3;
			var _g11 = 0;
			var _g2 = numVertices;
			while(_g11 < _g2) {
				var idx = offset + _g11++ * 8 | 0;
				this.mRawData.set(idx,this.mRawData.get(idx) * factor);
			}
		}
	}
	,getBounds: function(transformationMatrix,vertexID,numVertices,resultRect) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		if(numVertices == 0) {
			if(transformationMatrix == null) {
				resultRect.setEmpty();
			} else {
				starling_utils_MatrixUtil.transformCoords(transformationMatrix,0,0,starling_utils_VertexData.sHelperPoint);
				resultRect.setTo(starling_utils_VertexData.sHelperPoint.x,starling_utils_VertexData.sHelperPoint.y,0,0);
			}
		} else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var offset = vertexID * 8;
			var x;
			var y;
			if(transformationMatrix == null) {
				var _g1 = 0;
				var _g = numVertices;
				while(_g1 < _g) {
					++_g1;
					x = this.mRawData.get(offset);
					y = this.mRawData.get(offset + 1);
					offset += 8;
					if(minX > x) {
						minX = x;
					}
					if(maxX < x) {
						maxX = x;
					}
					if(minY > y) {
						minY = y;
					}
					if(maxY < y) {
						maxY = y;
					}
				}
			} else {
				var _g11 = 0;
				var _g2 = numVertices;
				while(_g11 < _g2) {
					++_g11;
					x = this.mRawData.get(offset);
					y = this.mRawData.get(offset + 1);
					offset += 8;
					starling_utils_MatrixUtil.transformCoords(transformationMatrix,x,y,starling_utils_VertexData.sHelperPoint);
					if(minX > starling_utils_VertexData.sHelperPoint.x) {
						minX = starling_utils_VertexData.sHelperPoint.x;
					}
					if(maxX < starling_utils_VertexData.sHelperPoint.x) {
						maxX = starling_utils_VertexData.sHelperPoint.x;
					}
					if(minY > starling_utils_VertexData.sHelperPoint.y) {
						minY = starling_utils_VertexData.sHelperPoint.y;
					}
					if(maxY < starling_utils_VertexData.sHelperPoint.y) {
						maxY = starling_utils_VertexData.sHelperPoint.y;
					}
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,getBoundsProjected: function(transformationMatrix,camPos,vertexID,numVertices,resultRect) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(camPos == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("camPos must not be null"));
		}
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		if(numVertices == 0) {
			if(transformationMatrix != null) {
				starling_utils_MatrixUtil.transformCoords3D(transformationMatrix,0,0,0,starling_utils_VertexData.sHelperPoint3D);
			} else {
				starling_utils_VertexData.sHelperPoint3D.setTo(0,0,0);
			}
			starling_utils_MathUtil.intersectLineWithXYPlane(camPos,starling_utils_VertexData.sHelperPoint3D,starling_utils_VertexData.sHelperPoint);
			resultRect.setTo(starling_utils_VertexData.sHelperPoint.x,starling_utils_VertexData.sHelperPoint.y,0,0);
		} else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var offset = vertexID * 8;
			var x;
			var y;
			var _g1 = 0;
			var _g = numVertices;
			while(_g1 < _g) {
				++_g1;
				x = this.mRawData.get(offset);
				y = this.mRawData.get(offset + 1);
				offset += 8;
				if(transformationMatrix != null) {
					starling_utils_MatrixUtil.transformCoords3D(transformationMatrix,x,y,0,starling_utils_VertexData.sHelperPoint3D);
				} else {
					starling_utils_VertexData.sHelperPoint3D.setTo(x,y,0);
				}
				starling_utils_MathUtil.intersectLineWithXYPlane(camPos,starling_utils_VertexData.sHelperPoint3D,starling_utils_VertexData.sHelperPoint);
				if(minX > starling_utils_VertexData.sHelperPoint.x) {
					minX = starling_utils_VertexData.sHelperPoint.x;
				}
				if(maxX < starling_utils_VertexData.sHelperPoint.x) {
					maxX = starling_utils_VertexData.sHelperPoint.x;
				}
				if(minY > starling_utils_VertexData.sHelperPoint.y) {
					minY = starling_utils_VertexData.sHelperPoint.y;
				}
				if(maxY < starling_utils_VertexData.sHelperPoint.y) {
					maxY = starling_utils_VertexData.sHelperPoint.y;
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,toString: function() {
		var result = "[VertexData \n";
		var position = new openfl_geom_Point();
		var texCoords = new openfl_geom_Point();
		var _g1 = 0;
		var _g = this.get_numVertices();
		while(_g1 < _g) {
			var i = _g1++;
			this.getPosition(i,position);
			this.getTexCoords(i,texCoords);
			result += "  [Vertex " + i + ": " + "x=" + (position.x == null?"null":"" + position.x) + ", " + "y=" + (position.y == null?"null":"" + position.y) + ", " + "rgb=" + StringTools.hex(this.getColor(i)) + ", " + "a=" + Std.string(this.getAlpha(i)) + ", " + "u=" + (texCoords.x == null?"null":"" + texCoords.x) + ", " + "v=" + (texCoords.y == null?"null":"" + texCoords.y) + "]" + (i == this.get_numVertices() - 1?"\n":",\n");
		}
		return result + "]";
	}
	,get_tinted: function() {
		var offset = 2;
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			++_g1;
			var _g2 = 0;
			while(_g2 < 4) if(this.mRawData.get(offset + _g2++) != 1.0) {
				return true;
			}
			offset += 8;
		}
		return false;
	}
	,setPremultipliedAlpha: function(value,updateData) {
		if(updateData == null) {
			updateData = true;
		}
		if(value == this.mPremultipliedAlpha) {
			return;
		}
		if(updateData) {
			var dataLength = this.mNumVertices * 8;
			var i = 2;
			while(i < dataLength) {
				var alpha = this.mRawData.get(i + 3);
				var divisor = this.mPremultipliedAlpha?alpha:1.0;
				var multiplier = value?alpha:1.0;
				if(divisor != 0) {
					this.mRawData.set(i,this.mRawData.get(i) / divisor * multiplier);
					this.mRawData.set(i + 1,this.mRawData.get(i + 1) / divisor * multiplier);
					this.mRawData.set(i + 2,this.mRawData.get(i + 2) / divisor * multiplier);
				}
				i += 8;
			}
		}
		this.mPremultipliedAlpha = value;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,set_premultipliedAlpha: function(value) {
		this.setPremultipliedAlpha(value);
		return this.mPremultipliedAlpha;
	}
	,get_numVertices: function() {
		return this.mNumVertices;
	}
	,set_numVertices: function(value) {
		this.mRawData.fixed = false;
		this.mRawData.set_length(value * 8);
		var startIndex = this.mNumVertices * 8 + 2 + 3;
		var endIndex = value * 8;
		var i = startIndex;
		while(i < endIndex) {
			this.mRawData.set(i,1.0);
			i += 8;
		}
		this.mNumVertices = value;
		this.mRawData.fixed = true;
		return this.mNumVertices;
	}
	,get_rawData: function() {
		return this.mRawData;
	}
	,__class__: starling_utils_VertexData
	,__properties__: {get_rawData:"get_rawData",set_numVertices:"set_numVertices",get_numVertices:"get_numVertices",set_premultipliedAlpha:"set_premultipliedAlpha",get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted"}
};
var haxegon_Gfx = function() { };
$hxClasses["haxegon.Gfx"] = haxegon_Gfx;
haxegon_Gfx.__name__ = ["haxegon","Gfx"];
haxegon_Gfx.__properties__ = {set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_linethickness:"set_linethickness",get_linethickness:"get_linethickness"}
haxegon_Gfx.reset = function() {
	haxegon_Gfx.transform = false;
	haxegon_Gfx.imagerotate = 0;
	haxegon_Gfx.imagerotatexpivot = 0;
	haxegon_Gfx.imagerotateypivot = 0;
	haxegon_Gfx.imagexscale = 1.0;
	haxegon_Gfx.imageyscale = 1.0;
	haxegon_Gfx.imagescalexpivot = 0;
	haxegon_Gfx.imagescaleypivot = 0;
	haxegon_Gfx.coltransform = false;
	haxegon_Gfx.imagealphamult = 1.0;
	haxegon_Gfx.imagecolormult = 16777215;
};
haxegon_Gfx.reset_ifclear = function() {
	if(haxegon_Gfx.imagerotate == 0) {
		if(haxegon_Gfx.imagexscale == 1.0) {
			if(haxegon_Gfx.imageyscale == 1.0) {
				haxegon_Gfx.transform = false;
			}
		}
	}
	if(haxegon_Gfx.imagealphamult == 1.0) {
		if(haxegon_Gfx.imagecolormult == 16777215) {
			haxegon_Gfx.coltransform = false;
		}
	}
};
haxegon_Gfx.rotation = function(angle,xpivot,ypivot) {
	if(ypivot == null) {
		ypivot = -15000;
	}
	if(xpivot == null) {
		xpivot = -15000;
	}
	haxegon_Gfx.imagerotate = angle;
	haxegon_Gfx.imagerotatexpivot = xpivot;
	haxegon_Gfx.imagerotateypivot = ypivot;
	haxegon_Gfx.transform = true;
	haxegon_Gfx.reset_ifclear();
};
haxegon_Gfx.scale = function(xscale,yscale,xpivot,ypivot) {
	if(ypivot == null) {
		ypivot = -10000;
	}
	if(xpivot == null) {
		xpivot = -10000;
	}
	haxegon_Gfx.imagexscale = xscale;
	haxegon_Gfx.imageyscale = yscale;
	haxegon_Gfx.imagescalexpivot = xpivot;
	haxegon_Gfx.imagescaleypivot = ypivot;
	haxegon_Gfx.transform = true;
	haxegon_Gfx.reset_ifclear();
};
haxegon_Gfx.imagealpha = function(alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	haxegon_Gfx.imagealphamult = alpha;
	haxegon_Gfx.coltransform = true;
	haxegon_Gfx.reset_ifclear();
};
haxegon_Gfx.imagecolor = function(color) {
	if(color == null) {
		color = 16777215;
	}
	haxegon_Gfx.imagecolormult = color;
	haxegon_Gfx.coltransform = true;
	haxegon_Gfx.reset_ifclear();
};
haxegon_Gfx.numberoftiles = function(tileset) {
	haxegon_Gfx.changetileset(tileset);
	return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length;
};
haxegon_Gfx.changetileset = function(tilesetname) {
	if(haxegon_Gfx.currenttilesetname != tilesetname) {
		var _this = haxegon_Gfx.tilesetindex;
		if(__map_reserved[tilesetname] != null?_this.existsReserved(tilesetname):_this.h.hasOwnProperty(tilesetname)) {
			var _this1 = haxegon_Gfx.tilesetindex;
			haxegon_Gfx.currenttileset = __map_reserved[tilesetname] != null?_this1.getReserved(tilesetname):_this1.h[tilesetname];
			haxegon_Gfx.currenttilesetname = tilesetname;
		} else {
			haxegon_Debug.log("ERROR: Cannot change to tileset \"" + tilesetname + "\", no tileset with that name found.");
		}
	}
};
haxegon_Gfx.loadtiles = function(imagename,width,height) {
	var tex;
	var _this = haxegon_Gfx.imageindex;
	if(__map_reserved[imagename] != null?_this.existsReserved(imagename):_this.h.hasOwnProperty(imagename)) {
		haxegon_Gfx.getassetpackedtexture(imagename);
	} else {
		if(haxegon_Data.assetexists("data/graphics/" + imagename + ".png")) {
			tex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/" + imagename + ".png"),false);
		} else if(haxegon_Data.assetexists("data/graphics/" + imagename + ".jpg")) {
			tex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/" + imagename + ".jpg"),false);
		} else {
			haxegon_Debug.log("ERROR: In loadtiles, cannot find \"data/graphics/" + imagename + ".png\" or \"data/graphics/" + imagename + ".jpg\"");
			return;
		}
		haxegon_Gfx.starlingassets.addTexture(imagename,tex);
	}
	var spritesheet = haxegon_Gfx.starlingassets.getTexture(imagename);
	new openfl_geom_Rectangle(0,0,width,height);
	haxegon_Gfx.tiles.push(new haxegon_HaxegonTileset(imagename,width,height));
	var value = haxegon_Gfx.tiles.length - 1;
	var _this1 = haxegon_Gfx.tilesetindex;
	if(__map_reserved[imagename] != null) {
		_this1.setReserved(imagename,value);
	} else {
		_this1.h[imagename] = value;
	}
	haxegon_Gfx.currenttileset = haxegon_Gfx.tiles.length - 1;
	var tilerows;
	var tilecolumns = (spritesheet.get_width() - spritesheet.get_width() % width) / width | 0;
	tilerows = (spritesheet.get_height() - spritesheet.get_height() % height) / height | 0;
	var framex = 0;
	var framey = 0;
	if(spritesheet.get_frame() != null) {
		framex = spritesheet.get_frame().get_left() | 0;
		framey = spritesheet.get_frame().get_top() | 0;
	}
	var _g1 = 0;
	while(_g1 < tilerows) {
		var j = _g1++;
		var _g3 = 0;
		while(_g3 < tilecolumns) {
			var newtex = starling_textures_Texture.fromTexture(spritesheet,new openfl_geom_Rectangle(framex + _g3++ * width,framey + j * height,width,height));
			haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.push(new starling_display_Image(newtex));
			haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length - 1].set_smoothing("none");
		}
	}
};
haxegon_Gfx.addblanktiles = function(tilesetname,num) {
	var tileset = 0;
	var _this = haxegon_Gfx.tilesetindex;
	if(__map_reserved[tilesetname] != null?_this.existsReserved(tilesetname):_this.h.hasOwnProperty(tilesetname)) {
		var _this1 = haxegon_Gfx.tilesetindex;
		tileset = __map_reserved[tilesetname] != null?_this1.getReserved(tilesetname):_this1.h[tilesetname];
	} else {
		haxegon_Debug.log("ERROR: Cannot add blank tiles to tileset \"" + tilesetname + "\", no tileset with that name found.");
	}
	var w = haxegon_Gfx.tiles[tileset].tiles[0].get_width() | 0;
	var h = haxegon_Gfx.tiles[tileset].tiles[0].get_height() | 0;
	var _g1 = 0;
	while(_g1 < num) {
		++_g1;
		var img = new starling_display_Image(starling_textures_Texture.fromBitmapData(new openfl_display_BitmapData(w,h,true,0),false));
		img.set_touchable(false);
		haxegon_Gfx.tiles[tileset].tiles.push(img);
	}
};
haxegon_Gfx.createtiles = function(tilesetname,width,height,amount) {
	var _this = haxegon_Gfx.tilesetindex;
	if((__map_reserved[tilesetname] != null?_this.getReserved(tilesetname):_this.h[tilesetname]) == null) {
		haxegon_Gfx.tiles.push(new haxegon_HaxegonTileset(tilesetname,width | 0,height | 0));
		var value = haxegon_Gfx.tiles.length - 1;
		var _this1 = haxegon_Gfx.tilesetindex;
		if(__map_reserved[tilesetname] != null) {
			_this1.setReserved(tilesetname,value);
		} else {
			_this1.h[tilesetname] = value;
		}
		haxegon_Gfx.currenttileset = haxegon_Gfx.tiles.length - 1;
		var _g1 = 0;
		while(_g1 < amount) {
			++_g1;
			var img = new starling_display_Image(starling_textures_Texture.fromBitmapData(new openfl_display_BitmapData(Math.floor(width),Math.floor(height),true,0),false));
			img.set_touchable(false);
			haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.push(img);
		}
		haxegon_Gfx.changetileset(tilesetname);
	} else {
		haxegon_Gfx.changetileset(tilesetname);
		var purge = haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width != Math.floor(width) || haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height != Math.floor(height);
		haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width = Math.floor(width);
		haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height = Math.floor(height);
		while(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length > (purge?0:amount)) {
			var extile = haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.pop();
			extile.set_touchable(false);
			extile.get_texture().dispose();
			extile.dispose();
		}
		var _g11 = 0;
		while(_g11 < amount) {
			var i = _g11++;
			if(i < haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length && !purge && js_Boot.__instanceof(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i].get_texture(),starling_textures_RenderTexture)) {
				(js_Boot.__cast(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i].get_texture() , starling_textures_RenderTexture)).clear();
			} else {
				var img1 = new starling_display_Image(starling_textures_Texture.fromBitmapData(new openfl_display_BitmapData(Math.floor(width),Math.floor(height),true,0),false));
				img1.set_touchable(false);
				if(i < haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length) {
					haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i].get_texture().dispose();
					haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i].dispose();
					haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i] = img1;
				} else {
					haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.push(img1);
				}
			}
		}
	}
};
haxegon_Gfx.tilewidth = function(tilesetname) {
	haxegon_Gfx.changetileset(tilesetname);
	return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width;
};
haxegon_Gfx.tileheight = function(tilesetname) {
	haxegon_Gfx.changetileset(tilesetname);
	return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height;
};
haxegon_Gfx.getassetpackedtexture = function(imagename) {
	var bd = null;
	try {
		bd = haxegon_Gfx.starlingassets.getTexture(imagename);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		haxegon_Debug.log("ERROR: Cannot find " + imagename + ".png in packed textures.");
	}
	return bd;
};
haxegon_Gfx.loadimagefrompackedtexture = function(imagename,tex) {
	var value = haxegon_Gfx.images.length;
	var _this = haxegon_Gfx.imageindex;
	if(__map_reserved[imagename] != null) {
		_this.setReserved(imagename,value);
	} else {
		_this.h[imagename] = value;
	}
	haxegon_Gfx.images.push(new starling_display_Image(tex));
	haxegon_Gfx.images[haxegon_Gfx.images.length - 1].set_smoothing("none");
};
haxegon_Gfx.loadimage = function(imagename) {
	var _this = haxegon_Gfx.imageindex;
	if(__map_reserved[imagename] != null?_this.existsReserved(imagename):_this.h.hasOwnProperty(imagename)) {
		return;
	}
	var tex;
	if(haxegon_Data.assetexists("data/graphics/" + imagename + ".png")) {
		tex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/" + imagename + ".png"),false);
	} else if(haxegon_Data.assetexists("data/graphics/" + imagename + ".jpg")) {
		tex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/" + imagename + ".jpg"),false);
	} else {
		haxegon_Debug.log("ERROR: In loadimage, cannot find \"data/graphics/" + imagename + ".png\" or \"data/graphics/" + imagename + ".jpg\"");
		return;
	}
	haxegon_Gfx.starlingassets.addTexture(imagename,tex);
	var value = haxegon_Gfx.images.length;
	var _this1 = haxegon_Gfx.imageindex;
	if(__map_reserved[imagename] != null) {
		_this1.setReserved(imagename,value);
	} else {
		_this1.h[imagename] = value;
	}
	haxegon_Gfx.images.push(new starling_display_Image(haxegon_Gfx.starlingassets.getTexture(imagename)));
	haxegon_Gfx.images[haxegon_Gfx.images.length - 1].set_smoothing("none");
};
haxegon_Gfx.createimage = function(imagename,width,height) {
	var img = new starling_display_Image(starling_textures_Texture.fromBitmapData(new openfl_display_BitmapData(Math.floor(width),Math.floor(height),true,0),false));
	img.set_touchable(false);
	img.set_smoothing("none");
	var _this = haxegon_Gfx.imageindex;
	var exindex = __map_reserved[imagename] != null?_this.getReserved(imagename):_this.h[imagename];
	if(exindex == null) {
		var value = haxegon_Gfx.images.length;
		var _this1 = haxegon_Gfx.imageindex;
		if(__map_reserved[imagename] != null) {
			_this1.setReserved(imagename,value);
		} else {
			_this1.h[imagename] = value;
		}
		haxegon_Gfx.images.push(img);
	} else {
		haxegon_Gfx.images[exindex].get_texture().dispose();
		haxegon_Gfx.images[exindex].dispose();
		haxegon_Gfx.images[exindex] = img;
	}
};
haxegon_Gfx.imagewidth = function(imagename) {
	var _this = haxegon_Gfx.imageindex;
	if(!(__map_reserved[imagename] != null?_this.existsReserved(imagename):_this.h.hasOwnProperty(imagename))) {
		haxegon_Gfx.loadimage(imagename);
	}
	var _this1 = haxegon_Gfx.imageindex;
	return haxegon_Gfx.images[__map_reserved[imagename] != null?_this1.getReserved(imagename):_this1.h[imagename]].get_width() | 0;
};
haxegon_Gfx.imageheight = function(imagename) {
	var _this = haxegon_Gfx.imageindex;
	if(!(__map_reserved[imagename] != null?_this.existsReserved(imagename):_this.h.hasOwnProperty(imagename))) {
		haxegon_Gfx.loadimage(imagename);
	}
	var _this1 = haxegon_Gfx.imageindex;
	return haxegon_Gfx.images[__map_reserved[imagename] != null?_this1.getReserved(imagename):_this1.h[imagename]].get_height() | 0;
};
haxegon_Gfx.promotetorendertarget = function(image) {
	if(!js_Boot.__instanceof(image.get_texture(),starling_textures_RenderTexture)) {
		var newtexture = new starling_textures_RenderTexture(image.get_texture().get_width() | 0,image.get_texture().get_height() | 0);
		haxegon_Gfx.shapematrix.identity();
		newtexture.draw(image,haxegon_Gfx.shapematrix);
		image.get_texture().dispose();
		image.set_texture(newtexture);
	}
};
haxegon_Gfx.drawtoscreen = function() {
	if(haxegon_Gfx.drawto != null) {
		haxegon_Gfx.drawto.bundleunlock();
	}
	haxegon_Gfx.drawto = haxegon_Gfx.backbuffer;
	if(haxegon_Gfx.drawto != null) {
		haxegon_Gfx.drawto.bundlelock();
	}
};
haxegon_Gfx.drawtoimage = function(imagename) {
	var _this = haxegon_Gfx.imageindex;
	if(!(__map_reserved[imagename] != null?_this.existsReserved(imagename):_this.h.hasOwnProperty(imagename))) {
		haxegon_Debug.log("ERROR: In drawtoimage, cannot find image \"" + imagename + "\".");
		return;
	}
	if(haxegon_Gfx.drawto != null) {
		haxegon_Gfx.drawto.bundleunlock();
	}
	var _this1 = haxegon_Gfx.imageindex;
	var imagenum = __map_reserved[imagename] != null?_this1.getReserved(imagename):_this1.h[imagename];
	haxegon_Gfx.promotetorendertarget(haxegon_Gfx.images[imagenum]);
	haxegon_Gfx.drawto = js_Boot.__cast(haxegon_Gfx.images[imagenum].get_texture() , starling_textures_RenderTexture);
	if(haxegon_Gfx.drawto != null) {
		haxegon_Gfx.drawto.bundlelock();
	}
};
haxegon_Gfx.drawtotile = function(tilesetname,tilenum) {
	var tileset = 0;
	var _this = haxegon_Gfx.tilesetindex;
	if(__map_reserved[tilesetname] != null?_this.existsReserved(tilesetname):_this.h.hasOwnProperty(tilesetname)) {
		var _this1 = haxegon_Gfx.tilesetindex;
		tileset = __map_reserved[tilesetname] != null?_this1.getReserved(tilesetname):_this1.h[tilesetname];
	} else {
		haxegon_Debug.log("ERROR: Cannot change to tileset \"" + tilesetname + "\", no tileset with that name found.");
	}
	if(tilenum >= haxegon_Gfx.numberoftiles(tilesetname)) {
		if(tilenum == haxegon_Gfx.numberoftiles(tilesetname)) {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\". (Because this includes tile number 0, " + (tilenum == null?"null":"" + tilenum) + " is not a valid tile.)");
		} else {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\".");
		}
	}
	if(haxegon_Gfx.drawto != null) {
		haxegon_Gfx.drawto.bundleunlock();
	}
	haxegon_Gfx.promotetorendertarget(haxegon_Gfx.tiles[tileset].tiles[tilenum]);
	haxegon_Gfx.drawto = js_Boot.__cast(haxegon_Gfx.tiles[tileset].tiles[tilenum].get_texture() , starling_textures_RenderTexture);
	if(haxegon_Gfx.drawto != null) {
		haxegon_Gfx.drawto.bundlelock();
	}
};
haxegon_Gfx.imagealignx = function(image,x) {
	if(x <= -5000) {
		haxegon_Gfx.t1 = x - haxegon_Gfx.CENTER;
		haxegon_Gfx.t2 = x - haxegon_Gfx.LEFT;
		haxegon_Gfx.t3 = x - haxegon_Gfx.RIGHT;
		if(haxegon_Gfx.t1 == 0 || Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t2) && Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t3)) {
			return haxegon_Gfx.t1 + haxegon_Gfx.screenwidthmid - (image.get_width() / 2 | 0);
		} else if(haxegon_Gfx.t2 == 0 || Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t1) && Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t3)) {
			return haxegon_Gfx.t2;
		} else {
			return haxegon_Gfx.t3 + image.get_width();
		}
	}
	return x;
};
haxegon_Gfx.imagealigny = function(image,y) {
	if(y <= -5000) {
		haxegon_Gfx.t1 = y - haxegon_Gfx.CENTER;
		haxegon_Gfx.t2 = y - haxegon_Gfx.TOP;
		haxegon_Gfx.t3 = y - haxegon_Gfx.BOTTOM;
		if(haxegon_Gfx.t1 == 0 || Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t2) && Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t3)) {
			return haxegon_Gfx.t1 + haxegon_Gfx.screenheightmid - (image.get_height() / 2 | 0);
		} else if(haxegon_Gfx.t2 == 0 || Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t1) && Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t3)) {
			return haxegon_Gfx.t2;
		} else {
			return haxegon_Gfx.t3 + image.get_height();
		}
	}
	return y;
};
haxegon_Gfx.imagealignonimagex = function(image,x) {
	if(x <= -5000) {
		haxegon_Gfx.t1 = x - haxegon_Gfx.CENTER;
		haxegon_Gfx.t2 = x - haxegon_Gfx.LEFT;
		haxegon_Gfx.t3 = x - haxegon_Gfx.RIGHT;
		if(haxegon_Gfx.t1 == 0 || Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t2) && Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t3)) {
			return haxegon_Gfx.t1 + (image.get_width() / 2 | 0);
		} else if(haxegon_Gfx.t2 == 0 || Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t1) && Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t3)) {
			return haxegon_Gfx.t2;
		} else {
			return haxegon_Gfx.t3 + image.get_width();
		}
	}
	return x;
};
haxegon_Gfx.imagealignonimagey = function(image,y) {
	if(y <= -5000) {
		haxegon_Gfx.t1 = y - haxegon_Gfx.CENTER;
		haxegon_Gfx.t2 = y - haxegon_Gfx.TOP;
		haxegon_Gfx.t3 = y - haxegon_Gfx.BOTTOM;
		if(haxegon_Gfx.t1 == 0 || Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t2) && Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t3)) {
			return haxegon_Gfx.t1 + (image.get_height() / 2 | 0);
		} else if(haxegon_Gfx.t2 == 0 || Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t1) && Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t3)) {
			return haxegon_Gfx.t2;
		} else {
			return haxegon_Gfx.t3 + image.get_height();
		}
	}
	return y;
};
haxegon_Gfx.internaldrawimage = function(x,y,image) {
	if(!haxegon_Gfx.transform && !haxegon_Gfx.coltransform) {
		haxegon_Gfx.shapematrix.identity();
		haxegon_Gfx.shapematrix.translate(x | 0,y | 0);
		haxegon_Gfx.drawto.draw(image,haxegon_Gfx.shapematrix);
	} else {
		haxegon_Gfx.tempxalign = 0;
		haxegon_Gfx.tempyalign = 0;
		haxegon_Gfx.shapematrix.identity();
		if(haxegon_Gfx.imagexscale != 1.0 || haxegon_Gfx.imageyscale != 1.0) {
			if(haxegon_Gfx.imagescalexpivot != 0.0) {
				haxegon_Gfx.tempxalign = haxegon_Gfx.imagealignonimagex(image,haxegon_Gfx.imagescalexpivot);
			}
			if(haxegon_Gfx.imagescaleypivot != 0.0) {
				haxegon_Gfx.tempyalign = haxegon_Gfx.imagealignonimagey(image,haxegon_Gfx.imagescaleypivot);
			}
			haxegon_Gfx.shapematrix.translate(-haxegon_Gfx.tempxalign,-haxegon_Gfx.tempyalign);
			haxegon_Gfx.shapematrix.scale(haxegon_Gfx.imagexscale,haxegon_Gfx.imageyscale);
			haxegon_Gfx.shapematrix.translate(haxegon_Gfx.tempxalign,haxegon_Gfx.tempyalign);
		}
		if(haxegon_Gfx.imagerotate != 0) {
			if(haxegon_Gfx.imagerotatexpivot != 0.0) {
				haxegon_Gfx.tempxalign = haxegon_Gfx.imagealignonimagex(image,haxegon_Gfx.imagerotatexpivot);
			}
			if(haxegon_Gfx.imagerotateypivot != 0.0) {
				haxegon_Gfx.tempyalign = haxegon_Gfx.imagealignonimagey(image,haxegon_Gfx.imagerotateypivot);
			}
			haxegon_Gfx.shapematrix.translate(-haxegon_Gfx.tempxalign,-haxegon_Gfx.tempyalign);
			haxegon_Gfx.shapematrix.rotate(haxegon_Gfx.imagerotate * 3.1415 / 180);
			haxegon_Gfx.shapematrix.translate(haxegon_Gfx.tempxalign,haxegon_Gfx.tempyalign);
		}
		haxegon_Gfx.shapematrix.translate(x,y);
		if(haxegon_Gfx.coltransform) {
			image.set_color(haxegon_Gfx.imagecolormult);
			haxegon_Gfx.drawto.draw(image,haxegon_Gfx.shapematrix,haxegon_Gfx.imagealphamult);
			image.set_color(haxegon_Col.WHITE);
		} else {
			haxegon_Gfx.drawto.draw(image,haxegon_Gfx.shapematrix);
		}
	}
};
haxegon_Gfx.drawimage = function(x,y,imagename) {
	var _this = haxegon_Gfx.imageindex;
	if(!(__map_reserved[imagename] != null?_this.existsReserved(imagename):_this.h.hasOwnProperty(imagename))) {
		haxegon_Gfx.loadimage(imagename);
	}
	var _this1 = haxegon_Gfx.imageindex;
	var image = haxegon_Gfx.images[__map_reserved[imagename] != null?_this1.getReserved(imagename):_this1.h[imagename]];
	x = haxegon_Gfx.imagealignx(image,x);
	y = haxegon_Gfx.imagealigny(image,y);
	haxegon_Gfx.internaldrawimage(x,y,image);
};
haxegon_Gfx.drawsubimage = function(x,y,x1,y1,w1,h1,imagename) {
	var _this = haxegon_Gfx.imageindex;
	if(!(__map_reserved[imagename] != null?_this.existsReserved(imagename):_this.h.hasOwnProperty(imagename))) {
		haxegon_Debug.log("ERROR: In drawsubimage, cannot find image \"" + imagename + "\".");
		return;
	}
	var _this1 = haxegon_Gfx.imageindex;
	var image = haxegon_Gfx.images[__map_reserved[imagename] != null?_this1.getReserved(imagename):_this1.h[imagename]];
	x = haxegon_Gfx.imagealignx(image,x);
	y = haxegon_Gfx.imagealigny(image,y);
	haxegon_Gfx.trect.x = x1;
	haxegon_Gfx.trect.y = y1;
	haxegon_Gfx.trect.width = w1;
	haxegon_Gfx.trect.height = h1;
	var subtex = starling_textures_Texture.fromTexture(image.get_texture(),haxegon_Gfx.trect);
	var subimage = new starling_display_Image(subtex);
	subimage.set_touchable(false);
	haxegon_Gfx.internaldrawimage(x,y,subimage);
	subtex.dispose();
	subimage.dispose();
};
haxegon_Gfx.grabtilefromscreen = function(tilesetname,tilenumber,screenx,screeny) {
	haxe_Log.trace("warning: Gfx.grabtilefromscreen is not implemented",{ fileName : "Gfx.hx", lineNumber : 569, className : "haxegon.Gfx", methodName : "grabtilefromscreen"});
};
haxegon_Gfx.grabtilefromimage = function(tilesetname,tilenumber,imagename,imagex,imagey) {
	haxe_Log.trace("warning: Gfx.grabtilefromimage is not implemented",{ fileName : "Gfx.hx", lineNumber : 573, className : "haxegon.Gfx", methodName : "grabtilefromimage"});
};
haxegon_Gfx.grabimagefromscreen = function(imagename,screenx,screeny) {
	haxe_Log.trace("warning: Gfx.grabimagefromscreen is not implemented",{ fileName : "Gfx.hx", lineNumber : 577, className : "haxegon.Gfx", methodName : "grabimagefromscreen"});
};
haxegon_Gfx.grabimagefromimage = function(imagetocopyto,sourceimage,sourceimagex,sourceimagey) {
	haxe_Log.trace("warning: Gfx.grabimagefromimage is not implemented",{ fileName : "Gfx.hx", lineNumber : 581, className : "haxegon.Gfx", methodName : "grabimagefromimage"});
};
haxegon_Gfx.copytile = function(totileset,totilenumber,fromtileset,fromtilenumber) {
	haxe_Log.trace("warning: Gfx.copytile is not implemented",{ fileName : "Gfx.hx", lineNumber : 585, className : "haxegon.Gfx", methodName : "copytile"});
};
haxegon_Gfx.drawsubtile = function(x,y,tilesetname,tilenum,x1,y1,w,h) {
	haxegon_Gfx.changetileset(tilesetname);
	if(tilenum >= haxegon_Gfx.numberoftiles(tilesetname)) {
		if(tilenum == haxegon_Gfx.numberoftiles(tilesetname)) {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\". (Because this includes tile number 0, " + (tilenum == null?"null":"" + tilenum) + " is not a valid tile.)");
			return;
		} else {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\".");
			return;
		}
	}
	x = haxegon_Gfx.tilealignx(x);
	y = haxegon_Gfx.tilealigny(y);
	haxegon_Gfx.trect.x = x1;
	haxegon_Gfx.trect.y = y1;
	haxegon_Gfx.trect.width = w;
	haxegon_Gfx.trect.height = h;
	var subtex = starling_textures_Texture.fromTexture(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[tilenum].get_texture(),haxegon_Gfx.trect);
	var subimage = new starling_display_Image(subtex);
	subimage.set_touchable(false);
	haxegon_Gfx.internaldrawimage(x,y,subimage);
	subtex.dispose();
	subimage.dispose();
};
haxegon_Gfx.drawtile = function(x,y,tilesetname,tilenum) {
	haxegon_Gfx.changetileset(tilesetname);
	if(tilenum >= haxegon_Gfx.numberoftiles(tilesetname)) {
		if(tilenum == haxegon_Gfx.numberoftiles(tilesetname)) {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\". (Because this includes tile number 0, " + (tilenum == null?"null":"" + tilenum) + " is not a valid tile.)");
			return;
		} else {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\".");
			return;
		}
	}
	x = haxegon_Gfx.tilealignx(x);
	y = haxegon_Gfx.tilealigny(y);
	haxegon_Gfx.internaldrawimage(x,y,haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[tilenum]);
};
haxegon_Gfx.tilealignx = function(x) {
	if(x == haxegon_Gfx.CENTER) {
		return haxegon_Gfx.screenwidthmid - (haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width / 2 | 0);
	}
	if(x == haxegon_Gfx.LEFT || x == haxegon_Gfx.TOP) {
		return 0;
	}
	if(x == haxegon_Gfx.RIGHT || x == haxegon_Gfx.BOTTOM) {
		return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width;
	}
	return x;
};
haxegon_Gfx.tilealigny = function(y) {
	if(y == haxegon_Gfx.CENTER) {
		return haxegon_Gfx.screenheightmid - (haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height / 2 | 0);
	}
	if(y == haxegon_Gfx.LEFT || y == haxegon_Gfx.TOP) {
		return 0;
	}
	if(y == haxegon_Gfx.RIGHT || y == haxegon_Gfx.BOTTOM) {
		return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height;
	}
	return y;
};
haxegon_Gfx.tilealignontilex = function(x) {
	if(x == haxegon_Gfx.CENTER) {
		return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width / 2 | 0;
	}
	if(x == haxegon_Gfx.LEFT || x == haxegon_Gfx.TOP) {
		return 0;
	}
	if(x == haxegon_Gfx.RIGHT || x == haxegon_Gfx.BOTTOM) {
		return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width;
	}
	return x;
};
haxegon_Gfx.tilealignontiley = function(y) {
	if(y == haxegon_Gfx.CENTER) {
		return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height / 2 | 0;
	}
	if(y == haxegon_Gfx.LEFT || y == haxegon_Gfx.TOP) {
		return 0;
	}
	if(y == haxegon_Gfx.RIGHT || y == haxegon_Gfx.BOTTOM) {
		return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height;
	}
	return y;
};
haxegon_Gfx.drawline = function(x1,y1,x2,y2,color,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) {
		return;
	}
	haxegon_Gfx.templine = new starling_display_Line(x1,y1,x2,y2,haxegon_Gfx.get_linethickness(),color);
	haxegon_Gfx.templine.set_alpha(alpha);
	haxegon_Gfx.drawto.draw(haxegon_Gfx.templine);
};
haxegon_Gfx.drawhexagon = function(x,y,radius,angle,color,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) {
		return;
	}
	var tempring = new starling_display_Ring(radius - haxegon_Gfx.get_linethickness(),radius,color,true,6,angle);
	tempring.set_alpha(alpha);
	haxegon_Gfx.shapematrix.identity();
	haxegon_Gfx.shapematrix.translate(x - radius,y - radius);
	haxegon_Gfx.drawto.draw(tempring,haxegon_Gfx.shapematrix);
};
haxegon_Gfx.fillhexagon = function(x,y,radius,angle,color,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) {
		return;
	}
	var tempring = new starling_display_Disk(radius,color,true,6,angle);
	tempring.set_alpha(alpha);
	haxegon_Gfx.shapematrix.identity();
	haxegon_Gfx.shapematrix.translate(x - radius,y - radius);
	haxegon_Gfx.drawto.draw(tempring,haxegon_Gfx.shapematrix);
};
haxegon_Gfx.drawcircle = function(x,y,radius,color,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) {
		return;
	}
	var tempring = new starling_display_Ring(radius - haxegon_Gfx.get_linethickness(),radius,color);
	tempring.set_alpha(alpha);
	haxegon_Gfx.shapematrix.identity();
	haxegon_Gfx.shapematrix.translate(x - radius,y - radius);
	haxegon_Gfx.drawto.draw(tempring,haxegon_Gfx.shapematrix);
};
haxegon_Gfx.fillcircle = function(x,y,radius,col,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(col == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) {
		return;
	}
	var tempring = new starling_display_Disk(radius,col);
	tempring.set_alpha(alpha);
	haxegon_Gfx.shapematrix.identity();
	haxegon_Gfx.shapematrix.translate(x - radius,y - radius);
	haxegon_Gfx.drawto.draw(tempring,haxegon_Gfx.shapematrix);
};
haxegon_Gfx.drawtri = function(x1,y1,x2,y2,x3,y3,color,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) {
		return;
	}
	haxegon_Gfx.drawline(x1,y1,x2,y2,color,alpha);
	haxegon_Gfx.drawline(x1,y1,x3,y3,color,alpha);
	haxegon_Gfx.drawline(x2,y2,x3,y3,color,alpha);
};
haxegon_Gfx.filltri = function(x1,y1,x2,y2,x3,y3,color,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) {
		return;
	}
	haxegon_Gfx.temppoly4 = new starling_display_Poly4(x1,y1,x2,y2,x3,y3,x3,y3,color);
	haxegon_Gfx.temppoly4.set_alpha(alpha);
	haxegon_Gfx.drawto.draw(haxegon_Gfx.temppoly4);
};
haxegon_Gfx.drawbox = function(x,y,width,height,color,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == haxegon_Col.TRANSPARENT) {
		return;
	}
	if(width < 0) {
		width = -width;
		x -= width;
	}
	if(height < 0) {
		height = -height;
		y -= height;
	}
	haxegon_Gfx.fillbox(x,y,width,1,color,alpha);
	haxegon_Gfx.fillbox(x,y + height - 1,width - 1,1,color,alpha);
	haxegon_Gfx.fillbox(x,y + 1,1,height - 1,color,alpha);
	haxegon_Gfx.fillbox(x + width - 1,y + 1,1,height - 1,color,alpha);
};
haxegon_Gfx.fillbox = function(x,y,width,height,col,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(col == haxegon_Col.TRANSPARENT) {
		return;
	}
	haxegon_Gfx.tempquad.set_x(x);
	haxegon_Gfx.tempquad.set_y(y);
	haxegon_Gfx.tempquad.set_width(width);
	haxegon_Gfx.tempquad.set_height(height);
	haxegon_Gfx.tempquad.set_color(col);
	haxegon_Gfx.tempquad.set_alpha(alpha);
	haxegon_Gfx.drawto.draw(haxegon_Gfx.tempquad);
};
haxegon_Gfx.get_linethickness = function() {
	return haxegon_Gfx._linethickness;
};
haxegon_Gfx.set_linethickness = function(size) {
	haxegon_Gfx._linethickness = size;
	if(haxegon_Gfx._linethickness < 1) {
		haxegon_Gfx._linethickness = 1;
	}
	if(haxegon_Gfx._linethickness > 255) {
		haxegon_Gfx._linethickness = 255;
	}
	return haxegon_Gfx._linethickness;
};
haxegon_Gfx.clearscreen = function(color) {
	if(color == null) {
		color = 0;
	}
	if(color == haxegon_Col.TRANSPARENT && haxegon_Gfx.drawto != null) {
		return;
	}
	haxegon_Gfx.drawto.clear(color,1.0);
};
haxegon_Gfx.setpixel = function(x,y,color,alpha) {
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == haxegon_Col.TRANSPARENT && haxegon_Gfx.drawto != null) {
		return;
	}
	haxegon_Gfx.fillbox(x,y,1,1,color,alpha);
};
haxegon_Gfx.updategraphicsmode = function(windowwidth,windowheight) {
	if(!haxegon_Gfx._fullscreen) {
		if(haxegon_Gfx.flashstage.get_displayState() == 1 || haxegon_Gfx.flashstage.get_displayState() == 0) {
			haxegon_Gfx.flashstage.set_displayState(2);
		}
	} else if(haxegon_Gfx.flashstage.get_displayState() == 2) {
		try {
			haxegon_Gfx.flashstage.set_displayState(1);
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
	}
	if(windowwidth == 0 && windowheight == 0) {
		return;
	}
	haxegon_Gfx.starstage.set_stageWidth(haxegon_Gfx.screenwidth);
	haxegon_Gfx.starstage.set_stageHeight(haxegon_Gfx.screenheight);
	var stretchscalex = (windowwidth | 0) / haxegon_Gfx.screenwidth | 0;
	var stretchscaley = (windowheight | 0) / haxegon_Gfx.screenheight | 0;
	var stretchscale = Math.min(stretchscalex,stretchscaley);
	var viewPortRectangle = new openfl_geom_Rectangle();
	viewPortRectangle.width = haxegon_Gfx.screenwidth * stretchscale;
	viewPortRectangle.height = haxegon_Gfx.screenheight * stretchscale;
	viewPortRectangle.x = (windowwidth - (haxegon_Gfx.screenwidth * stretchscale | 0)) / 2 | 0;
	viewPortRectangle.y = (windowheight - (haxegon_Gfx.screenheight * stretchscale | 0)) / 2 | 0;
	starling_core_Starling.get_current().set_viewPort(viewPortRectangle);
};
haxegon_Gfx.getscreenx = function(_x) {
	return Math.floor((_x - starling_core_Starling.get_current().get_viewPort().x) * haxegon_Gfx.screenwidth / starling_core_Starling.get_current().get_viewPort().width);
};
haxegon_Gfx.getscreeny = function(_y) {
	return Math.floor((_y - starling_core_Starling.get_current().get_viewPort().y) * haxegon_Gfx.screenheight / starling_core_Starling.get_current().get_viewPort().height);
};
haxegon_Gfx.resizescreen = function(width,height) {
	haxegon_Gfx.initgfx(width | 0,height | 0);
	haxegon_Text.init(haxegon_Gfx.starstage);
	haxegon_Gfx.updategraphicsmode(haxegon_Gfx.starstage.get_stageWidth(),haxegon_Gfx.starstage.get_stageHeight());
};
haxegon_Gfx.get_fullscreen = function() {
	return haxegon_Gfx._fullscreen;
};
haxegon_Gfx.set_fullscreen = function(fs) {
	haxegon_Gfx._fullscreen = fs;
	if(fs) {
		haxegon_Debug.log("Warning: HTML5 target does not currently support fullscreen. Check again in a later version!");
	}
	return fs;
};
haxegon_Gfx.init = function(_starlingstage,_flashstage) {
	haxegon_Gfx.starstage = _starlingstage;
	haxegon_Gfx.flashstage = _flashstage;
	haxegon_Gfx.starstage.addEventListener("resize",haxegon_Gfx.onresize);
	haxegon_Gfx.set_linethickness(1);
	haxegon_Gfx.loadpackedtextures();
	haxegon_Gfx.reset();
};
haxegon_Gfx.onresize = function(e) {
	haxegon_Gfx.updategraphicsmode(e.get_width(),e.get_height());
};
haxegon_Gfx.loadpackedtextures = function() {
	if(!haxegon_Gfx.gfxinit) {
		haxegon_Gfx.starlingassets = new starling_utils_AssetManager();
		haxegon_Gfx.starlingassets.set_verbose(false);
		var atlasnum = 0;
		var _g = 0;
		var _g1 = openfl_Assets.list("TEXT");
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(haxegon_S.getlastbranch(t,".") == "xml") {
				var xml = Xml.parse(openfl_Assets.getText(t)).firstElement();
				if(xml.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
				}
				if(xml.nodeName == "TextureAtlas") {
					var texturepackedimage = starling_textures_Texture.fromBitmapData(openfl_Assets.getBitmapData("data/graphics/" + xml.get("imagePath")),false);
					haxegon_Gfx.starlingassets.addTexture("atlas" + atlasnum,texturepackedimage);
					haxegon_Gfx.starlingassets.addTextureAtlas("atlas" + atlasnum,new starling_textures_TextureAtlas(texturepackedimage,xml));
					++atlasnum;
					var tmp = xml.elementsNamed("SubTexture");
					while(tmp.hasNext()) {
						var i = tmp.next();
						haxegon_Gfx.loadimagefrompackedtexture(i.get("name"),haxegon_Gfx.getassetpackedtexture(i.get("name")));
					}
				}
			}
		}
	}
};
haxegon_Gfx.initgfx = function(width,height) {
	haxegon_Gfx.screenwidth = width;
	haxegon_Gfx.screenheight = height;
	haxegon_Gfx.screenwidthmid = haxegon_Gfx.screenwidth / 2 | 0;
	haxegon_Gfx.screenheightmid = haxegon_Gfx.screenheight / 2 | 0;
	haxegon_Gfx.devicexres = openfl_system_Capabilities.get_screenResolutionX() | 0;
	haxegon_Gfx.deviceyres = openfl_system_Capabilities.get_screenResolutionY() | 0;
	haxegon_Gfx.tempquad.set_touchable(false);
	if(!haxegon_Gfx.gfxinit) {
		haxegon_Gfx.backbuffer = new starling_textures_RenderTexture(width,height,true);
		haxegon_Gfx.drawto = haxegon_Gfx.backbuffer;
		haxegon_Gfx.screen = new starling_display_Image(haxegon_Gfx.backbuffer);
		haxegon_Gfx.screen.set_touchable(false);
		haxegon_Gfx.screen.set_scale(1);
		haxegon_Gfx.screen.set_smoothing("none");
		haxegon_Gfx.starstage.addChild(haxegon_Gfx.screen);
		if(haxegon_Core.get_showstats()) {
			haxegon_Core.statsdisplay = new starling_core_StatsDisplay();
			haxegon_Gfx.starstage.addChild(haxegon_Core.statsdisplay);
		} else if(haxegon_Core.statsdisplay != null) {
			haxegon_Gfx.starstage.removeChild(haxegon_Core.statsdisplay);
		}
	}
	haxegon_Gfx.gfxinit = true;
};
haxegon_Gfx.settrect = function(x,y,w,h) {
	haxegon_Gfx.trect.x = x;
	haxegon_Gfx.trect.y = y;
	haxegon_Gfx.trect.width = w;
	haxegon_Gfx.trect.height = h;
};
var haxegon_Keystate = $hxClasses["haxegon.Keystate"] = { __ename__ : ["haxegon","Keystate"], __constructs__ : ["justreleased","notpressed","pressed","justpressed","forcerelease"] };
haxegon_Keystate.justreleased = ["justreleased",0];
haxegon_Keystate.justreleased.toString = $estr;
haxegon_Keystate.justreleased.__enum__ = haxegon_Keystate;
haxegon_Keystate.notpressed = ["notpressed",1];
haxegon_Keystate.notpressed.toString = $estr;
haxegon_Keystate.notpressed.__enum__ = haxegon_Keystate;
haxegon_Keystate.pressed = ["pressed",2];
haxegon_Keystate.pressed.toString = $estr;
haxegon_Keystate.pressed.__enum__ = haxegon_Keystate;
haxegon_Keystate.justpressed = ["justpressed",3];
haxegon_Keystate.justpressed.toString = $estr;
haxegon_Keystate.justpressed.__enum__ = haxegon_Keystate;
haxegon_Keystate.forcerelease = ["forcerelease",4];
haxegon_Keystate.forcerelease.toString = $estr;
haxegon_Keystate.forcerelease.__enum__ = haxegon_Keystate;
var haxegon_Input = function() { };
$hxClasses["haxegon.Input"] = haxegon_Input;
haxegon_Input.__name__ = ["haxegon","Input"];
haxegon_Input.pressed = function(k) {
	return haxegon_Input.keyheld[haxegon_Input.keymap.get(k)] >= 0;
};
haxegon_Input.justpressed = function(k) {
	if(haxegon_Input.current[haxegon_Input.keymap.get(k)] == haxegon_Keystate.justpressed) {
		return true;
	} else {
		return false;
	}
};
haxegon_Input.justreleased = function(k) {
	if(haxegon_Input.current[haxegon_Input.keymap.get(k)] == haxegon_Keystate.justreleased) {
		haxegon_Input.current[haxegon_Input.keymap.get(k)] = haxegon_Keystate.notpressed;
		return true;
	} else {
		return false;
	}
};
haxegon_Input.forcerelease = function(k) {
	haxegon_Input.keycode = haxegon_Input.keymap.get(k);
	if(haxegon_Input.keyheld[haxegon_Input.keycode] >= 0) {
		haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.forcerelease;
		haxegon_Input.last[haxegon_Input.keycode] = haxegon_Keystate.forcerelease;
		haxegon_Input.keyheld[haxegon_Input.keycode] = -1;
	}
};
haxegon_Input.pressheldtime = function(k) {
	haxegon_Input.keycode = haxegon_Input.keymap.get(k);
	return haxegon_Input.keyheld[haxegon_Input.keycode];
};
haxegon_Input.delaypressed = function(k,delay) {
	haxegon_Input.keycode = haxegon_Input.keymap.get(k);
	if(haxegon_Input.keyheld[haxegon_Input.keycode] >= 1) {
		if(haxegon_Input.keyheld[haxegon_Input.keycode] <= 1) {
			return true;
		} else if(haxegon_Input.keyheld[haxegon_Input.keycode] % delay == 0) {
			return true;
		}
	}
	return false;
};
haxegon_Input.init = function(_starlingstage,_flashstage) {
	haxegon_Input.starstage = _starlingstage;
	haxegon_Input.flashstage = _flashstage;
	haxegon_Input.starstage.addEventListener("keyDown",haxegon_Input.handlekeydown);
	haxegon_Input.starstage.addEventListener("keyUp",haxegon_Input.handlekeyup);
	haxegon_Input.clipboardbuffer = [""];
	haxegon_Input.cut = false;
	haxegon_Input.paste = false;
	haxegon_Input.selectall = false;
	haxegon_Input.undo = false;
	haxegon_Input.redo = false;
	haxegon_Input.resetKeys();
};
haxegon_Input.unload = function() {
	haxegon_Input.starstage.removeEventListener("keyDown",haxegon_Input.handlekeydown);
	haxegon_Input.starstage.removeEventListener("keyUp",haxegon_Input.handlekeyup);
	haxegon_Input.flashstage.removeEventListener("deactivate",haxegon_Input.handledeactivate);
};
haxegon_Input.update = function() {
	if(haxegon_Input.lastcharcode == -1) {
		haxegon_Input.lastcharcode = haxegon_Input.charcode;
	} else if(haxegon_Input.charcode == haxegon_Input.lastcharcode) {
		haxegon_Input.lastcharcode = -1;
		haxegon_Input.charcode = -1;
	} else {
		haxegon_Input.lastcharcode = haxegon_Input.charcode;
	}
	var _g1 = 0;
	var _g = haxegon_Input.numletters;
	while(_g1 < _g) {
		var i = _g1++;
		if(haxegon_Input.lookup.h.hasOwnProperty(i)) {
			if(haxegon_Input.last[i] == haxegon_Keystate.justreleased && haxegon_Input.current[i] == haxegon_Keystate.justreleased) {
				haxegon_Input.current[i] = haxegon_Keystate.notpressed;
			} else if(haxegon_Input.last[i] == haxegon_Keystate.justpressed && haxegon_Input.current[i] == haxegon_Keystate.justpressed) {
				haxegon_Input.current[i] = haxegon_Keystate.pressed;
			}
			haxegon_Input.last[i] = haxegon_Input.current[i];
			if(haxegon_Input.current[i] == haxegon_Keystate.justpressed || haxegon_Input.current[i] == haxegon_Keystate.pressed) {
				++haxegon_Input.keyheld[i];
			}
		}
	}
};
haxegon_Input.reset = function() {
	var _g1 = 0;
	var _g = haxegon_Input.numletters;
	while(_g1 < _g) {
		var i = _g1++;
		if(haxegon_Input.lookup.h.hasOwnProperty(i)) {
			haxegon_Input.current[i] = haxegon_Keystate.notpressed;
			haxegon_Input.last[i] = haxegon_Keystate.notpressed;
			haxegon_Input.keyheld[i] = -1;
		}
	}
};
haxegon_Input.iskeycodeheld = function(k) {
	if(k == haxegon_Keystate.justpressed || k == haxegon_Keystate.pressed) {
		return true;
	}
	return false;
};
haxegon_Input.handlecut = function(event) {
	haxegon_Input.handlecopy(event);
	haxegon_Input.cut = true;
};
haxegon_Input.handlecopy = function(event) {
	haxegon_Input.current[haxegon_Input.keymap.get(haxegon_Key.CONTROL)] = haxegon_Keystate.notpressed;
	haxegon_Input.keyheld[haxegon_Input.keymap.get(haxegon_Key.CONTROL)] = -1;
};
haxegon_Input.handlepaste = function(event) {
	haxegon_Input.current[haxegon_Input.keymap.get(haxegon_Key.CONTROL)] = haxegon_Keystate.notpressed;
	haxegon_Input.keyheld[haxegon_Input.keymap.get(haxegon_Key.CONTROL)] = -1;
};
haxegon_Input.handleselectall = function(event) {
	haxegon_Input.selectall = true;
};
haxegon_Input.handlekeydown = function(event) {
	if(document.activeElement.nodeName!="BODY") {
		return;
	}
	haxegon_Input.charcode = event.get_charCode();
	if(haxegon_Input.charcode == 91 || haxegon_Input.charcode == 93 || haxegon_Input.charcode == 224 || haxegon_Input.charcode == 17) {
		var _g1 = 0;
		var _g = haxegon_Input.numletters;
		while(_g1 < _g) {
			var keycode = _g1++;
			if(haxegon_Input.iskeycodeheld(haxegon_Input.current[keycode])) {
				haxegon_Input.current[keycode] = haxegon_Keystate.justreleased;
			} else {
				haxegon_Input.current[keycode] = haxegon_Keystate.notpressed;
			}
			haxegon_Input.keyheld[keycode] = -1;
		}
	}
	haxegon_Input.charcode = event.get_charCode();
	haxegon_Input.keycode = event.get_keyCode();
	if(haxegon_Input.iskeycodeheld(haxegon_Input.current[haxegon_Input.keymap.get(haxegon_Key.CONTROL)])) {
		if(haxegon_Input.keycode == 90) {
			haxegon_Input.undo = true;
			return;
		} else if(haxegon_Input.keycode == 89) {
			haxegon_Input.redo = true;
			return;
		}
	}
	if(haxegon_Input.lookup.h.hasOwnProperty(haxegon_Input.keycode) && haxegon_Input.current[haxegon_Input.keycode] != haxegon_Keystate.forcerelease) {
		if(haxegon_Input.iskeycodeheld(haxegon_Input.current[haxegon_Input.keycode])) {
			haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.pressed;
		} else {
			haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.justpressed;
			haxegon_Input.keyheld[haxegon_Input.keycode] = 0;
		}
	}
	if(haxegon_Input.keycode == 8) {
		if(haxegon_Input.keybuffer.length > 0) {
			haxegon_Input.keybuffer = HxOverrides.substr(haxegon_Input.keybuffer,0,haxegon_Input.keybuffer.length - 1);
		}
	} else if(haxegon_Input.charcode >= 32 && haxegon_Input.charcode <= 126) {
		if(haxegon_Input.keybuffer.length < haxegon_Text.inputmaxlength) {
			haxegon_Input.keybuffer += String.fromCharCode(haxegon_Input.charcode);
		}
	}
};
haxegon_Input.handledeactivate = function(e) {
	var _g1 = 0;
	var _g = haxegon_Input.numletters;
	while(_g1 < _g) {
		var keycode = _g1++;
		haxegon_Input.current[keycode] = haxegon_Keystate.notpressed;
		haxegon_Input.keyheld[keycode] = -1;
	}
};
haxegon_Input.getchar = function() {
	if(haxegon_Input.lastcharcode == -1) {
		return "";
	}
	return String.fromCharCode(haxegon_Input.lastcharcode);
};
haxegon_Input.handlekeyup = function(event) {
	haxegon_Input.keycode = event.get_keyCode();
	if(haxegon_Input.lookup.h.hasOwnProperty(haxegon_Input.keycode)) {
		if(haxegon_Input.iskeycodeheld(haxegon_Input.current[haxegon_Input.keycode])) {
			haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.justreleased;
		} else {
			haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.notpressed;
		}
		haxegon_Input.keyheld[haxegon_Input.keycode] = -1;
	}
};
haxegon_Input.addkey = function(KeyName,KeyCode) {
	haxegon_Input.keymap.set(KeyName,KeyCode);
	haxegon_Input.lookup.h[KeyCode] = KeyName;
	haxegon_Input.current[KeyCode] = haxegon_Keystate.notpressed;
	haxegon_Input.last[KeyCode] = haxegon_Keystate.notpressed;
	haxegon_Input.keyheld[KeyCode] = -1;
};
haxegon_Input.resetKeys = function() {
	haxegon_Input.keymap = new haxe_ds_EnumValueMap();
	haxegon_Input.lookup = new haxe_ds_IntMap();
	haxegon_Input.current = [];
	haxegon_Input.last = [];
	haxegon_Input.keyheld = [];
	haxegon_Input.lastcharcode = -1;
	var _g1 = 0;
	var _g = haxegon_Input.numletters;
	while(_g1 < _g) {
		++_g1;
		haxegon_Input.current.push(haxegon_Keystate.notpressed);
		haxegon_Input.last.push(haxegon_Keystate.notpressed);
		haxegon_Input.keyheld.push(-1);
	}
	haxegon_Input.addkey(haxegon_Key.A,65);
	haxegon_Input.addkey(haxegon_Key.B,66);
	haxegon_Input.addkey(haxegon_Key.C,67);
	haxegon_Input.addkey(haxegon_Key.D,68);
	haxegon_Input.addkey(haxegon_Key.E,69);
	haxegon_Input.addkey(haxegon_Key.F,70);
	haxegon_Input.addkey(haxegon_Key.G,71);
	haxegon_Input.addkey(haxegon_Key.H,72);
	haxegon_Input.addkey(haxegon_Key.I,73);
	haxegon_Input.addkey(haxegon_Key.J,74);
	haxegon_Input.addkey(haxegon_Key.K,75);
	haxegon_Input.addkey(haxegon_Key.L,76);
	haxegon_Input.addkey(haxegon_Key.M,77);
	haxegon_Input.addkey(haxegon_Key.N,78);
	haxegon_Input.addkey(haxegon_Key.O,79);
	haxegon_Input.addkey(haxegon_Key.P,80);
	haxegon_Input.addkey(haxegon_Key.Q,81);
	haxegon_Input.addkey(haxegon_Key.R,82);
	haxegon_Input.addkey(haxegon_Key.S,83);
	haxegon_Input.addkey(haxegon_Key.T,84);
	haxegon_Input.addkey(haxegon_Key.U,85);
	haxegon_Input.addkey(haxegon_Key.V,86);
	haxegon_Input.addkey(haxegon_Key.W,87);
	haxegon_Input.addkey(haxegon_Key.X,88);
	haxegon_Input.addkey(haxegon_Key.Y,89);
	haxegon_Input.addkey(haxegon_Key.Z,90);
	haxegon_Input.addkey(haxegon_Key.ZERO,48);
	haxegon_Input.addkey(haxegon_Key.ONE,49);
	haxegon_Input.addkey(haxegon_Key.TWO,50);
	haxegon_Input.addkey(haxegon_Key.THREE,51);
	haxegon_Input.addkey(haxegon_Key.FOUR,52);
	haxegon_Input.addkey(haxegon_Key.FIVE,53);
	haxegon_Input.addkey(haxegon_Key.SIX,54);
	haxegon_Input.addkey(haxegon_Key.SEVEN,55);
	haxegon_Input.addkey(haxegon_Key.EIGHT,56);
	haxegon_Input.addkey(haxegon_Key.NINE,57);
	haxegon_Input.addkey(haxegon_Key.F1,112);
	haxegon_Input.addkey(haxegon_Key.F2,113);
	haxegon_Input.addkey(haxegon_Key.F3,114);
	haxegon_Input.addkey(haxegon_Key.F4,115);
	haxegon_Input.addkey(haxegon_Key.F5,116);
	haxegon_Input.addkey(haxegon_Key.F6,117);
	haxegon_Input.addkey(haxegon_Key.F7,118);
	haxegon_Input.addkey(haxegon_Key.F8,119);
	haxegon_Input.addkey(haxegon_Key.F9,120);
	haxegon_Input.addkey(haxegon_Key.F10,121);
	haxegon_Input.addkey(haxegon_Key.F11,122);
	haxegon_Input.addkey(haxegon_Key.F12,123);
	haxegon_Input.addkey(haxegon_Key.ESCAPE,27);
	haxegon_Input.addkey(haxegon_Key.MINUS,189);
	haxegon_Input.addkey(haxegon_Key.PLUS,187);
	haxegon_Input.addkey(haxegon_Key.DELETE,46);
	haxegon_Input.addkey(haxegon_Key.BACKSPACE,8);
	haxegon_Input.addkey(haxegon_Key.LBRACKET,219);
	haxegon_Input.addkey(haxegon_Key.RBRACKET,221);
	haxegon_Input.addkey(haxegon_Key.BACKSLASH,220);
	haxegon_Input.addkey(haxegon_Key.CAPSLOCK,20);
	haxegon_Input.addkey(haxegon_Key.SEMICOLON,186);
	haxegon_Input.addkey(haxegon_Key.QUOTE,222);
	haxegon_Input.addkey(haxegon_Key.ENTER,13);
	haxegon_Input.addkey(haxegon_Key.SHIFT,16);
	haxegon_Input.addkey(haxegon_Key.COMMA,188);
	haxegon_Input.addkey(haxegon_Key.PERIOD,190);
	haxegon_Input.addkey(haxegon_Key.SLASH,191);
	haxegon_Input.addkey(haxegon_Key.CONTROL,17);
	haxegon_Input.addkey(haxegon_Key.ALT,18);
	haxegon_Input.addkey(haxegon_Key.SPACE,32);
	haxegon_Input.addkey(haxegon_Key.UP,38);
	haxegon_Input.addkey(haxegon_Key.DOWN,40);
	haxegon_Input.addkey(haxegon_Key.LEFT,37);
	haxegon_Input.addkey(haxegon_Key.RIGHT,39);
	haxegon_Input.addkey(haxegon_Key.TAB,9);
	haxegon_Input.addkey(haxegon_Key.HOME,36);
	haxegon_Input.addkey(haxegon_Key.END,35);
	haxegon_Input.addkey(haxegon_Key.PAGEUP,33);
	haxegon_Input.addkey(haxegon_Key.PAGEDOWN,34);
};
haxegon_Input.keyname = function(k) {
	switch(k[1]) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "C";
	case 3:
		return "D";
	case 4:
		return "E";
	case 5:
		return "F";
	case 6:
		return "G";
	case 7:
		return "H";
	case 8:
		return "I";
	case 9:
		return "J";
	case 10:
		return "K";
	case 11:
		return "L";
	case 12:
		return "M";
	case 13:
		return "N";
	case 14:
		return "O";
	case 15:
		return "P";
	case 16:
		return "Q";
	case 17:
		return "R";
	case 18:
		return "S";
	case 19:
		return "T";
	case 20:
		return "U";
	case 21:
		return "V";
	case 22:
		return "W";
	case 23:
		return "X";
	case 24:
		return "Y";
	case 25:
		return "Z";
	case 26:
		return "0";
	case 27:
		return "1";
	case 28:
		return "2";
	case 29:
		return "3";
	case 30:
		return "4";
	case 31:
		return "5";
	case 32:
		return "6";
	case 33:
		return "7";
	case 34:
		return "8";
	case 35:
		return "9";
	case 36:
		return "F1";
	case 37:
		return "F2";
	case 38:
		return "F3";
	case 39:
		return "F4";
	case 40:
		return "F5";
	case 41:
		return "F6";
	case 42:
		return "F7";
	case 43:
		return "F8";
	case 44:
		return "F9";
	case 45:
		return "F10";
	case 46:
		return "F11";
	case 47:
		return "F12";
	case 48:
		return "Esc";
	case 49:
		return "-";
	case 50:
		return "+";
	case 51:
		return "Del";
	case 52:
		return "Backspace";
	case 53:
		return "[";
	case 54:
		return "]";
	case 55:
		return "\\";
	case 56:
		return "Caps Lock";
	case 57:
		return ";";
	case 58:
		return "'";
	case 59:
		return "Enter";
	case 60:
		return "Shift";
	case 61:
		return ",";
	case 62:
		return ".";
	case 63:
		return "/";
	case 64:
		return "Ctrl";
	case 65:
		return "Alt";
	case 66:
		return "Space";
	case 67:
		return "Up";
	case 68:
		return "Down";
	case 69:
		return "Left";
	case 70:
		return "Right";
	case 71:
		return "Tab";
	case 72:
		return "Home";
	case 73:
		return "End";
	case 74:
		return "Page Up";
	case 75:
		return "Page Down";
	}
};
var haxegon_Key = $hxClasses["haxegon.Key"] = { __ename__ : ["haxegon","Key"], __constructs__ : ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZERO","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","ESCAPE","MINUS","PLUS","DELETE","BACKSPACE","LBRACKET","RBRACKET","BACKSLASH","CAPSLOCK","SEMICOLON","QUOTE","ENTER","SHIFT","COMMA","PERIOD","SLASH","CONTROL","ALT","SPACE","UP","DOWN","LEFT","RIGHT","TAB","HOME","END","PAGEUP","PAGEDOWN"] };
haxegon_Key.A = ["A",0];
haxegon_Key.A.toString = $estr;
haxegon_Key.A.__enum__ = haxegon_Key;
haxegon_Key.B = ["B",1];
haxegon_Key.B.toString = $estr;
haxegon_Key.B.__enum__ = haxegon_Key;
haxegon_Key.C = ["C",2];
haxegon_Key.C.toString = $estr;
haxegon_Key.C.__enum__ = haxegon_Key;
haxegon_Key.D = ["D",3];
haxegon_Key.D.toString = $estr;
haxegon_Key.D.__enum__ = haxegon_Key;
haxegon_Key.E = ["E",4];
haxegon_Key.E.toString = $estr;
haxegon_Key.E.__enum__ = haxegon_Key;
haxegon_Key.F = ["F",5];
haxegon_Key.F.toString = $estr;
haxegon_Key.F.__enum__ = haxegon_Key;
haxegon_Key.G = ["G",6];
haxegon_Key.G.toString = $estr;
haxegon_Key.G.__enum__ = haxegon_Key;
haxegon_Key.H = ["H",7];
haxegon_Key.H.toString = $estr;
haxegon_Key.H.__enum__ = haxegon_Key;
haxegon_Key.I = ["I",8];
haxegon_Key.I.toString = $estr;
haxegon_Key.I.__enum__ = haxegon_Key;
haxegon_Key.J = ["J",9];
haxegon_Key.J.toString = $estr;
haxegon_Key.J.__enum__ = haxegon_Key;
haxegon_Key.K = ["K",10];
haxegon_Key.K.toString = $estr;
haxegon_Key.K.__enum__ = haxegon_Key;
haxegon_Key.L = ["L",11];
haxegon_Key.L.toString = $estr;
haxegon_Key.L.__enum__ = haxegon_Key;
haxegon_Key.M = ["M",12];
haxegon_Key.M.toString = $estr;
haxegon_Key.M.__enum__ = haxegon_Key;
haxegon_Key.N = ["N",13];
haxegon_Key.N.toString = $estr;
haxegon_Key.N.__enum__ = haxegon_Key;
haxegon_Key.O = ["O",14];
haxegon_Key.O.toString = $estr;
haxegon_Key.O.__enum__ = haxegon_Key;
haxegon_Key.P = ["P",15];
haxegon_Key.P.toString = $estr;
haxegon_Key.P.__enum__ = haxegon_Key;
haxegon_Key.Q = ["Q",16];
haxegon_Key.Q.toString = $estr;
haxegon_Key.Q.__enum__ = haxegon_Key;
haxegon_Key.R = ["R",17];
haxegon_Key.R.toString = $estr;
haxegon_Key.R.__enum__ = haxegon_Key;
haxegon_Key.S = ["S",18];
haxegon_Key.S.toString = $estr;
haxegon_Key.S.__enum__ = haxegon_Key;
haxegon_Key.T = ["T",19];
haxegon_Key.T.toString = $estr;
haxegon_Key.T.__enum__ = haxegon_Key;
haxegon_Key.U = ["U",20];
haxegon_Key.U.toString = $estr;
haxegon_Key.U.__enum__ = haxegon_Key;
haxegon_Key.V = ["V",21];
haxegon_Key.V.toString = $estr;
haxegon_Key.V.__enum__ = haxegon_Key;
haxegon_Key.W = ["W",22];
haxegon_Key.W.toString = $estr;
haxegon_Key.W.__enum__ = haxegon_Key;
haxegon_Key.X = ["X",23];
haxegon_Key.X.toString = $estr;
haxegon_Key.X.__enum__ = haxegon_Key;
haxegon_Key.Y = ["Y",24];
haxegon_Key.Y.toString = $estr;
haxegon_Key.Y.__enum__ = haxegon_Key;
haxegon_Key.Z = ["Z",25];
haxegon_Key.Z.toString = $estr;
haxegon_Key.Z.__enum__ = haxegon_Key;
haxegon_Key.ZERO = ["ZERO",26];
haxegon_Key.ZERO.toString = $estr;
haxegon_Key.ZERO.__enum__ = haxegon_Key;
haxegon_Key.ONE = ["ONE",27];
haxegon_Key.ONE.toString = $estr;
haxegon_Key.ONE.__enum__ = haxegon_Key;
haxegon_Key.TWO = ["TWO",28];
haxegon_Key.TWO.toString = $estr;
haxegon_Key.TWO.__enum__ = haxegon_Key;
haxegon_Key.THREE = ["THREE",29];
haxegon_Key.THREE.toString = $estr;
haxegon_Key.THREE.__enum__ = haxegon_Key;
haxegon_Key.FOUR = ["FOUR",30];
haxegon_Key.FOUR.toString = $estr;
haxegon_Key.FOUR.__enum__ = haxegon_Key;
haxegon_Key.FIVE = ["FIVE",31];
haxegon_Key.FIVE.toString = $estr;
haxegon_Key.FIVE.__enum__ = haxegon_Key;
haxegon_Key.SIX = ["SIX",32];
haxegon_Key.SIX.toString = $estr;
haxegon_Key.SIX.__enum__ = haxegon_Key;
haxegon_Key.SEVEN = ["SEVEN",33];
haxegon_Key.SEVEN.toString = $estr;
haxegon_Key.SEVEN.__enum__ = haxegon_Key;
haxegon_Key.EIGHT = ["EIGHT",34];
haxegon_Key.EIGHT.toString = $estr;
haxegon_Key.EIGHT.__enum__ = haxegon_Key;
haxegon_Key.NINE = ["NINE",35];
haxegon_Key.NINE.toString = $estr;
haxegon_Key.NINE.__enum__ = haxegon_Key;
haxegon_Key.F1 = ["F1",36];
haxegon_Key.F1.toString = $estr;
haxegon_Key.F1.__enum__ = haxegon_Key;
haxegon_Key.F2 = ["F2",37];
haxegon_Key.F2.toString = $estr;
haxegon_Key.F2.__enum__ = haxegon_Key;
haxegon_Key.F3 = ["F3",38];
haxegon_Key.F3.toString = $estr;
haxegon_Key.F3.__enum__ = haxegon_Key;
haxegon_Key.F4 = ["F4",39];
haxegon_Key.F4.toString = $estr;
haxegon_Key.F4.__enum__ = haxegon_Key;
haxegon_Key.F5 = ["F5",40];
haxegon_Key.F5.toString = $estr;
haxegon_Key.F5.__enum__ = haxegon_Key;
haxegon_Key.F6 = ["F6",41];
haxegon_Key.F6.toString = $estr;
haxegon_Key.F6.__enum__ = haxegon_Key;
haxegon_Key.F7 = ["F7",42];
haxegon_Key.F7.toString = $estr;
haxegon_Key.F7.__enum__ = haxegon_Key;
haxegon_Key.F8 = ["F8",43];
haxegon_Key.F8.toString = $estr;
haxegon_Key.F8.__enum__ = haxegon_Key;
haxegon_Key.F9 = ["F9",44];
haxegon_Key.F9.toString = $estr;
haxegon_Key.F9.__enum__ = haxegon_Key;
haxegon_Key.F10 = ["F10",45];
haxegon_Key.F10.toString = $estr;
haxegon_Key.F10.__enum__ = haxegon_Key;
haxegon_Key.F11 = ["F11",46];
haxegon_Key.F11.toString = $estr;
haxegon_Key.F11.__enum__ = haxegon_Key;
haxegon_Key.F12 = ["F12",47];
haxegon_Key.F12.toString = $estr;
haxegon_Key.F12.__enum__ = haxegon_Key;
haxegon_Key.ESCAPE = ["ESCAPE",48];
haxegon_Key.ESCAPE.toString = $estr;
haxegon_Key.ESCAPE.__enum__ = haxegon_Key;
haxegon_Key.MINUS = ["MINUS",49];
haxegon_Key.MINUS.toString = $estr;
haxegon_Key.MINUS.__enum__ = haxegon_Key;
haxegon_Key.PLUS = ["PLUS",50];
haxegon_Key.PLUS.toString = $estr;
haxegon_Key.PLUS.__enum__ = haxegon_Key;
haxegon_Key.DELETE = ["DELETE",51];
haxegon_Key.DELETE.toString = $estr;
haxegon_Key.DELETE.__enum__ = haxegon_Key;
haxegon_Key.BACKSPACE = ["BACKSPACE",52];
haxegon_Key.BACKSPACE.toString = $estr;
haxegon_Key.BACKSPACE.__enum__ = haxegon_Key;
haxegon_Key.LBRACKET = ["LBRACKET",53];
haxegon_Key.LBRACKET.toString = $estr;
haxegon_Key.LBRACKET.__enum__ = haxegon_Key;
haxegon_Key.RBRACKET = ["RBRACKET",54];
haxegon_Key.RBRACKET.toString = $estr;
haxegon_Key.RBRACKET.__enum__ = haxegon_Key;
haxegon_Key.BACKSLASH = ["BACKSLASH",55];
haxegon_Key.BACKSLASH.toString = $estr;
haxegon_Key.BACKSLASH.__enum__ = haxegon_Key;
haxegon_Key.CAPSLOCK = ["CAPSLOCK",56];
haxegon_Key.CAPSLOCK.toString = $estr;
haxegon_Key.CAPSLOCK.__enum__ = haxegon_Key;
haxegon_Key.SEMICOLON = ["SEMICOLON",57];
haxegon_Key.SEMICOLON.toString = $estr;
haxegon_Key.SEMICOLON.__enum__ = haxegon_Key;
haxegon_Key.QUOTE = ["QUOTE",58];
haxegon_Key.QUOTE.toString = $estr;
haxegon_Key.QUOTE.__enum__ = haxegon_Key;
haxegon_Key.ENTER = ["ENTER",59];
haxegon_Key.ENTER.toString = $estr;
haxegon_Key.ENTER.__enum__ = haxegon_Key;
haxegon_Key.SHIFT = ["SHIFT",60];
haxegon_Key.SHIFT.toString = $estr;
haxegon_Key.SHIFT.__enum__ = haxegon_Key;
haxegon_Key.COMMA = ["COMMA",61];
haxegon_Key.COMMA.toString = $estr;
haxegon_Key.COMMA.__enum__ = haxegon_Key;
haxegon_Key.PERIOD = ["PERIOD",62];
haxegon_Key.PERIOD.toString = $estr;
haxegon_Key.PERIOD.__enum__ = haxegon_Key;
haxegon_Key.SLASH = ["SLASH",63];
haxegon_Key.SLASH.toString = $estr;
haxegon_Key.SLASH.__enum__ = haxegon_Key;
haxegon_Key.CONTROL = ["CONTROL",64];
haxegon_Key.CONTROL.toString = $estr;
haxegon_Key.CONTROL.__enum__ = haxegon_Key;
haxegon_Key.ALT = ["ALT",65];
haxegon_Key.ALT.toString = $estr;
haxegon_Key.ALT.__enum__ = haxegon_Key;
haxegon_Key.SPACE = ["SPACE",66];
haxegon_Key.SPACE.toString = $estr;
haxegon_Key.SPACE.__enum__ = haxegon_Key;
haxegon_Key.UP = ["UP",67];
haxegon_Key.UP.toString = $estr;
haxegon_Key.UP.__enum__ = haxegon_Key;
haxegon_Key.DOWN = ["DOWN",68];
haxegon_Key.DOWN.toString = $estr;
haxegon_Key.DOWN.__enum__ = haxegon_Key;
haxegon_Key.LEFT = ["LEFT",69];
haxegon_Key.LEFT.toString = $estr;
haxegon_Key.LEFT.__enum__ = haxegon_Key;
haxegon_Key.RIGHT = ["RIGHT",70];
haxegon_Key.RIGHT.toString = $estr;
haxegon_Key.RIGHT.__enum__ = haxegon_Key;
haxegon_Key.TAB = ["TAB",71];
haxegon_Key.TAB.toString = $estr;
haxegon_Key.TAB.__enum__ = haxegon_Key;
haxegon_Key.HOME = ["HOME",72];
haxegon_Key.HOME.toString = $estr;
haxegon_Key.HOME.__enum__ = haxegon_Key;
haxegon_Key.END = ["END",73];
haxegon_Key.END.toString = $estr;
haxegon_Key.END.__enum__ = haxegon_Key;
haxegon_Key.PAGEUP = ["PAGEUP",74];
haxegon_Key.PAGEUP.toString = $estr;
haxegon_Key.PAGEUP.__enum__ = haxegon_Key;
haxegon_Key.PAGEDOWN = ["PAGEDOWN",75];
haxegon_Key.PAGEDOWN.toString = $estr;
haxegon_Key.PAGEDOWN.__enum__ = haxegon_Key;
var haxegon_Mouse = function() { };
$hxClasses["haxegon.Mouse"] = haxegon_Mouse;
haxegon_Mouse.__name__ = ["haxegon","Mouse"];
haxegon_Mouse.mouseoffstage = function() {
	return haxegon_Mouse._mouseoffstage;
};
haxegon_Mouse.cursormoved = function() {
	return haxegon_Mouse._cursormoved;
};
haxegon_Mouse.leftheld = function() {
	return haxegon_Mouse._current > 0;
};
haxegon_Mouse.leftclick = function() {
	return haxegon_Mouse._current == 2;
};
haxegon_Mouse.leftreleased = function() {
	return haxegon_Mouse._current == -1;
};
haxegon_Mouse.leftforcerelease = function() {
	haxegon_Mouse._current = -1;
};
haxegon_Mouse.leftheldpresstime = function() {
	return haxegon_Mouse._held;
};
haxegon_Mouse.rightheld = function() {
	return haxegon_Mouse._rightcurrent > 0;
};
haxegon_Mouse.rightclick = function() {
	return haxegon_Mouse._rightcurrent == 2;
};
haxegon_Mouse.rightreleased = function() {
	return haxegon_Mouse._rightcurrent == -1;
};
haxegon_Mouse.rightforcerelease = function() {
	haxegon_Mouse._rightcurrent = -1;
};
haxegon_Mouse.rightheldpresstime = function() {
	return haxegon_Mouse._rightheld;
};
haxegon_Mouse.middleheld = function() {
	return haxegon_Mouse._middlecurrent > 0;
};
haxegon_Mouse.middleclick = function() {
	return haxegon_Mouse._middlecurrent == 2;
};
haxegon_Mouse.middlereleased = function() {
	return haxegon_Mouse._middlecurrent == -1;
};
haxegon_Mouse.middleforcerelease = function() {
	haxegon_Mouse._middlecurrent = -1;
};
haxegon_Mouse.middleheldpresstime = function() {
	return haxegon_Mouse._middleheld;
};
haxegon_Mouse.leftdelaypressed = function(delay) {
	if(haxegon_Mouse._held >= 1) {
		if(haxegon_Mouse._held == 1) {
			return true;
		} else if(haxegon_Mouse._held % delay == 0) {
			return true;
		}
	}
	return false;
};
haxegon_Mouse.rightdelaypressed = function(delay) {
	if(haxegon_Mouse._rightheld >= 1) {
		if(haxegon_Mouse._rightheld == 1) {
			return true;
		} else if(haxegon_Mouse._rightheld % delay == 0) {
			return true;
		}
	}
	return false;
};
haxegon_Mouse.middledelaypressed = function(delay) {
	if(haxegon_Mouse._middleheld >= 1) {
		if(haxegon_Mouse._middleheld == 1) {
			return true;
		} else if(haxegon_Mouse._middleheld % delay == 0) {
			return true;
		}
	}
	return false;
};
haxegon_Mouse.init = function(_starlingstage,_flashstage) {
	haxegon_Mouse.x = 0;
	haxegon_Mouse.y = 0;
	haxegon_Mouse.previousx = 0;
	haxegon_Mouse.previousy = 0;
	haxegon_Mouse._cursormoved = false;
	haxegon_Mouse._current = 0;
	haxegon_Mouse._held = 0;
	haxegon_Mouse._last = 0;
	haxegon_Mouse._rightcurrent = 0;
	haxegon_Mouse._rightheld = 0;
	haxegon_Mouse._rightlast = 0;
	haxegon_Mouse._middlecurrent = 0;
	haxegon_Mouse._middleheld = 0;
	haxegon_Mouse._middlelast = 0;
	haxegon_Mouse.starstage = _starlingstage;
	haxegon_Mouse.flashstage = _flashstage;
	haxegon_Mouse.starstage.addEventListener("touch",haxegon_Mouse.ontouch);
	haxegon_Mouse.flashstage.addEventListener("rightMouseDown",haxegon_Mouse.handleRightMouseDown);
	haxegon_Mouse.flashstage.addEventListener("rightMouseUp",haxegon_Mouse.handleRightMouseUp);
	haxegon_Mouse.flashstage.addEventListener("middleMouseDown",haxegon_Mouse.handleMiddleMouseDown);
	haxegon_Mouse.flashstage.addEventListener("middleMouseUp",haxegon_Mouse.handleMiddleMouseUp);
	haxegon_Mouse.flashstage.addEventListener("mouseWheel",haxegon_Mouse.handleMouseWheel);
};
haxegon_Mouse.unload = function(_starlingstage,_flashstage) {
	_starlingstage.removeEventListener("touch",haxegon_Mouse.ontouch);
	_flashstage.removeEventListener("rightMouseDown",haxegon_Mouse.handleRightMouseDown);
	_flashstage.removeEventListener("rightMouseUp",haxegon_Mouse.handleRightMouseUp);
	_flashstage.removeEventListener("middleMouseDown",haxegon_Mouse.handleMiddleMouseDown);
	_flashstage.removeEventListener("middleMouseUp",haxegon_Mouse.handleMiddleMouseUp);
	_flashstage.removeEventListener("mouseWheel",haxegon_Mouse.handleMouseWheel);
};
haxegon_Mouse.show = function() {
	openfl_ui_Mouse.show();
};
haxegon_Mouse.hide = function() {
	openfl_ui_Mouse.hide();
};
haxegon_Mouse.ontouch = function(e) {
	var touch = e.getTouch(haxegon_Mouse.starstage);
	if(touch != null) {
		if(touch.get_phase() == "began") {
			if(haxegon_Input.pressed(haxegon_Key.CONTROL)) {
				if(haxegon_Mouse._rightcurrent > 0) {
					haxegon_Mouse._rightcurrent = 1;
				} else {
					haxegon_Mouse._rightcurrent = 2;
				}
				haxegon_Mouse._rightheld = 0;
			} else {
				if(haxegon_Mouse._current > 0) {
					haxegon_Mouse._current = 1;
				} else {
					haxegon_Mouse._current = 2;
				}
				haxegon_Mouse._held = 0;
			}
		} else if(touch.get_phase() == "ended") {
			if(haxegon_Mouse._rightcurrent > 0) {
				haxegon_Mouse._rightcurrent = -1;
			} else {
				haxegon_Mouse._rightcurrent = 0;
			}
			if(haxegon_Mouse._current > 0) {
				haxegon_Mouse._current = -1;
			} else {
				haxegon_Mouse._current = 0;
			}
			haxegon_Mouse._held = 0;
			haxegon_Mouse._rightheld = 0;
		} else {
			var tmp = touch.get_phase() == "moved";
		}
	}
};
haxegon_Mouse.handleRightMouseDown = function(event) {
	if(haxegon_Mouse._rightcurrent > 0) {
		haxegon_Mouse._rightcurrent = 1;
	} else {
		haxegon_Mouse._rightcurrent = 2;
	}
};
haxegon_Mouse.handleRightMouseUp = function(event) {
	if(haxegon_Mouse._rightcurrent > 0) {
		haxegon_Mouse._rightcurrent = -1;
	} else {
		haxegon_Mouse._rightcurrent = 0;
	}
};
haxegon_Mouse.handleMiddleMouseDown = function(event) {
	if(haxegon_Mouse._middlecurrent > 0) {
		haxegon_Mouse._middlecurrent = 1;
	} else {
		haxegon_Mouse._middlecurrent = 2;
	}
};
haxegon_Mouse.handleMiddleMouseUp = function(event) {
	if(haxegon_Mouse._middlecurrent > 0) {
		haxegon_Mouse._middlecurrent = -1;
		haxegon_Mouse._middleheld = 0;
	} else {
		haxegon_Mouse._middlecurrent = 0;
	}
};
haxegon_Mouse.handleMouseWheel = function(event) {
	haxegon_Mouse.mousewheel = event.delta > 0?2:-2;
};
haxegon_Mouse.update = function(X,Y,firstframe) {
	haxegon_Mouse.x = X;
	haxegon_Mouse.y = Y;
	if(haxegon_Mouse.x == haxegon_Mouse.previousx && haxegon_Mouse.y == haxegon_Mouse.previousy) {
		haxegon_Mouse._cursormoved = false;
	} else {
		haxegon_Mouse.previousx = haxegon_Mouse.x;
		haxegon_Mouse.previousy = haxegon_Mouse.y;
		haxegon_Mouse._cursormoved = true;
	}
	if(haxegon_Mouse._last == -1 && haxegon_Mouse._current == -1) {
		haxegon_Mouse._current = 0;
	} else if(haxegon_Mouse._last == 2 && haxegon_Mouse._current == 2) {
		haxegon_Mouse._current = 1;
	}
	haxegon_Mouse._last = haxegon_Mouse._current;
	if(haxegon_Mouse._current > 0) {
		++haxegon_Mouse._held;
	}
	if(haxegon_Mouse._rightlast == -1 && haxegon_Mouse._rightcurrent == -1) {
		haxegon_Mouse._rightcurrent = 0;
	} else if(haxegon_Mouse._rightlast == 2 && haxegon_Mouse._rightcurrent == 2) {
		haxegon_Mouse._rightcurrent = 1;
	}
	haxegon_Mouse._rightlast = haxegon_Mouse._rightcurrent;
	if(haxegon_Mouse._rightcurrent > 0) {
		++haxegon_Mouse._rightheld;
	}
	if(haxegon_Mouse._middlelast == -1 && haxegon_Mouse._middlecurrent == -1) {
		haxegon_Mouse._middlecurrent = 0;
	} else if(haxegon_Mouse._middlelast == 2 && haxegon_Mouse._middlecurrent == 2) {
		haxegon_Mouse._middlecurrent = 1;
	}
	haxegon_Mouse._middlelast = haxegon_Mouse._middlecurrent;
	if(haxegon_Mouse._middlecurrent > 0) {
		++haxegon_Mouse._middleheld;
	}
	if(firstframe) {
		if(haxegon_Mouse.mousewheel == -2) {
			haxegon_Mouse.mousewheel = -1;
		} else if(haxegon_Mouse.mousewheel == 2) {
			haxegon_Mouse.mousewheel = 1;
		} else {
			haxegon_Mouse.mousewheel = 0;
		}
	}
};
haxegon_Mouse.reset = function() {
	haxegon_Mouse._current = 0;
	haxegon_Mouse._last = 0;
	haxegon_Mouse._held = 0;
	haxegon_Mouse._rightcurrent = 0;
	haxegon_Mouse._rightlast = 0;
	haxegon_Mouse._rightheld = 0;
	haxegon_Mouse._middlecurrent = 0;
	haxegon_Mouse._middlelast = 0;
	haxegon_Mouse._middleheld = 0;
};
var haxegon_Music = function() { };
$hxClasses["haxegon.Music"] = haxegon_Music;
haxegon_Music.__name__ = ["haxegon","Music"];
haxegon_Music.playsound = function(soundname,volume,offset) {
	if(offset == null) {
		offset = 0.0;
	}
	if(volume == null) {
		volume = 1.0;
	}
	var _this = haxegon_Music.effectindex;
	if(!(__map_reserved[soundname] != null?_this.existsReserved(soundname):_this.h.hasOwnProperty(soundname))) {
		if(!haxegon_Music.loadsound(soundname)) {
			return;
		}
	}
	var _this1 = haxegon_Music.effectindex;
	haxegon_Music.temptransform = new openfl_media_SoundTransform(haxegon_Music.volumelevels[(__map_reserved[soundname] != null?_this1.getReserved(soundname):_this1.h[soundname]) | 0] * volume * haxegon_Music.globalsound);
	var tmp = haxegon_Music.currentefchan;
	var _this2 = haxegon_Music.effectindex;
	haxegon_Music.efchannel[tmp] = haxegon_Music.efchan[(__map_reserved[soundname] != null?_this2.getReserved(soundname):_this2.h[soundname]) | 0].play(offset * 1000);
	haxegon_Music.efchannel[haxegon_Music.currentefchan].set_soundTransform(haxegon_Music.temptransform);
	haxegon_Music.currentefchan++;
	if(haxegon_Music.currentefchan > 15) {
		haxegon_Music.currentefchan -= 16;
	}
};
haxegon_Music.stopsound = function() {
	haxegon_Music.temptransform = new openfl_media_SoundTransform(0);
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(haxegon_Music.efchannel[i] != null) {
			haxegon_Music.efchannel[i].set_soundTransform(haxegon_Music.temptransform);
		}
	}
};
haxegon_Music.loadsound = function(soundname,volumelevel) {
	if(volumelevel == null) {
		volumelevel = 1.0;
	}
	if(haxegon_Data.assetexists("data/sounds/" + soundname + ".ogg")) {
		haxegon_Music.efchan.push(haxegon_Data.getsoundasset("data/sounds/" + soundname + ".ogg"));
	} else {
		haxegon_Debug.log("ERROR: In loadsound, cannot find \"data/sounds/ogg/" + soundname + ".ogg\". (.ogg files are required on this platform.)");
		return false;
	}
	var value = haxegon_Music.numeffects;
	var _this = haxegon_Music.effectindex;
	if(__map_reserved[soundname] != null) {
		_this.setReserved(soundname,value);
	} else {
		_this.h[soundname] = value;
	}
	haxegon_Music.volumelevels.push(volumelevel);
	haxegon_Music.numeffects++;
	return true;
};
haxegon_Music.loadsong = function(songname,volumelevel) {
	if(volumelevel == null) {
		volumelevel = 1.0;
	}
	if(haxegon_Data.assetexists("data/sounds/" + songname + ".ogg")) {
		haxegon_Music.musicchan.push(haxegon_Data.getsoundasset("data/sounds/" + songname + ".ogg"));
	} else {
		haxegon_Debug.log("ERROR: In loadsong, cannot find \"data/sounds/ogg/" + songname + ".ogg\". (.ogg files are required on this platform.)");
		return false;
	}
	var value = haxegon_Music.numsongs;
	var _this = haxegon_Music.songindex;
	if(__map_reserved[songname] != null) {
		_this.setReserved(songname,value);
	} else {
		_this.h[songname] = value;
	}
	haxegon_Music.songvolumelevels.push(volumelevel);
	haxegon_Music.numsongs++;
	return true;
};
haxegon_Music.playsong = function(songname,time,loop) {
	if(loop == null) {
		loop = true;
	}
	if(time == null) {
		time = 0.0;
	}
	var _this = haxegon_Music.songindex;
	if(!(__map_reserved[songname] != null?_this.existsReserved(songname):_this.h.hasOwnProperty(songname))) {
		if(!haxegon_Music.loadsong(songname)) {
			return;
		}
	}
	if(haxegon_Music.currentsong != songname) {
		if(haxegon_Music.currentsong != "nothing") {
			haxegon_Music.musicchannel.stop();
			haxegon_Music.musicchannel.removeEventListener("soundComplete",haxegon_Music.loopmusic);
		}
		haxegon_Music.musicfade = 0;
		haxegon_Music.musicfadein = 0;
		if(songname != "nothing") {
			haxegon_Music.currentsong = songname;
			if(loop) {
				if(time == 0) {
					var _this1 = haxegon_Music.songindex;
					haxegon_Music.musicchannel = haxegon_Music.musicchan[(__map_reserved[songname] != null?_this1.getReserved(songname):_this1.h[songname]) | 0].play(0,999999);
				} else {
					var _this2 = haxegon_Music.songindex;
					var tmp = haxegon_Music.musicchan[(__map_reserved[songname] != null?_this2.getReserved(songname):_this2.h[songname]) | 0];
					var tmp1 = time * 1000;
					var _this3 = haxegon_Music.songindex;
					haxegon_Music.musicchannel = tmp.play(tmp1 % haxegon_Music.musicchan[(__map_reserved[songname] != null?_this3.getReserved(songname):_this3.h[songname]) | 0].get_length());
					haxegon_Music.musicchannel.addEventListener("soundComplete",haxegon_Music.loopmusic);
				}
			} else {
				var _this4 = haxegon_Music.songindex;
				var tmp2 = haxegon_Music.musicchan[(__map_reserved[songname] != null?_this4.getReserved(songname):_this4.h[songname]) | 0];
				var tmp3 = time * 1000;
				var _this5 = haxegon_Music.songindex;
				haxegon_Music.musicchannel = tmp2.play(tmp3 % haxegon_Music.musicchan[(__map_reserved[songname] != null?_this5.getReserved(songname):_this5.h[songname]) | 0].get_length());
			}
			var _this6 = haxegon_Music.songindex;
			haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.songvolumelevels[(__map_reserved[songname] != null?_this6.getReserved(songname):_this6.h[songname]) | 0] * haxegon_Music.globalsound));
		} else {
			haxegon_Music.currentsong = "nothing";
		}
	}
};
haxegon_Music.stopsong = function() {
	if(haxegon_Music.musicchannel != null) {
		haxegon_Music.musicchannel.removeEventListener("soundComplete",haxegon_Music.stopmusic);
		haxegon_Music.musicchannel.stop();
	}
	haxegon_Music.currentsong = "nothing";
};
haxegon_Music.fadeout = function() {
	if(haxegon_Music.musicfade == 0) {
		haxegon_Music.musicfade = 31;
	}
};
haxegon_Music.init = function() {
	haxegon_Music.currentsong = "nothing";
	haxegon_Music.musicfade = 0;
	haxegon_Music.currentefchan = 0;
	haxegon_Music.usingtickertext = false;
	haxegon_Music.globalsound = 1;
	haxegon_Music.muted = false;
	haxegon_Music.numplays = 0;
	haxegon_Music.numeffects = 0;
	haxegon_Music.numsongs = 0;
};
haxegon_Music.loopmusic = function(e) {
	haxegon_Music.musicchannel.removeEventListener("soundComplete",haxegon_Music.loopmusic);
	if(haxegon_Music.currentsong != "nothing") {
		var _this = haxegon_Music.songindex;
		var key = haxegon_Music.currentsong;
		haxegon_Music.musicchannel = haxegon_Music.musicchan[(__map_reserved[key] != null?_this.getReserved(key):_this.h[key]) | 0].play(0,999999);
		var _this1 = haxegon_Music.songindex;
		var key1 = haxegon_Music.currentsong;
		haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.songvolumelevels[(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]) | 0] * haxegon_Music.globalsound));
	}
};
haxegon_Music.stopmusic = function(e) {
	haxegon_Music.musicchannel.removeEventListener("soundComplete",haxegon_Music.stopmusic);
	haxegon_Music.musicchannel.stop();
	haxegon_Music.currentsong = "nothing";
};
haxegon_Music.processmusicfade = function() {
	haxegon_Music.musicfade--;
	if(haxegon_Music.musicchannel != null) {
		if(haxegon_Music.musicfade > 0) {
			haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.musicfade / 30 * haxegon_Music.globalsound));
		} else {
			haxegon_Music.musicchannel.stop();
			haxegon_Music.currentsong = "nothing";
		}
	}
};
haxegon_Music.processmusicfadein = function() {
	haxegon_Music.musicfadein--;
	if(haxegon_Music.musicchannel != null) {
		if(haxegon_Music.musicfadein > 0) {
			haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform((60 - haxegon_Music.musicfadein) / 60 * haxegon_Music.globalsound));
		} else {
			haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.globalsound));
		}
	}
};
haxegon_Music.processmusic = function() {
	if(haxegon_Music.musicfade > 0) {
		haxegon_Music.processmusicfade();
	}
	if(haxegon_Music.musicfadein > 0) {
		haxegon_Music.processmusicfadein();
	}
};
haxegon_Music.updateallvolumes = function() {
	if(haxegon_Music.currentsong != "nothing") {
		var _this = haxegon_Music.songindex;
		var key = haxegon_Music.currentsong;
		haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.songvolumelevels[(__map_reserved[key] != null?_this.getReserved(key):_this.h[key]) | 0] * haxegon_Music.globalsound));
	}
};
haxegon_Music.processmute = function() {
	if(haxegon_Text.input_show == 0) {
		if(haxegon_Input.justpressed(haxegon_Key.M) && haxegon_Music.mutebutton <= 0) {
			haxegon_Music.mutebutton = 2;
			if(haxegon_Music.muted) {
				haxegon_Music.muted = false;
			} else {
				haxegon_Music.muted = true;
			}
		}
		if(haxegon_Music.mutebutton > 0 && !haxegon_Input.pressed(haxegon_Key.M)) {
			haxegon_Music.mutebutton--;
		}
	}
	if(haxegon_Music.muted) {
		if(haxegon_Music.globalsound == 1) {
			haxegon_Music.globalsound = 0;
			haxegon_Music.updateallvolumes();
		}
	}
	if(!haxegon_Music.muted && haxegon_Music.globalsound < 1) {
		haxegon_Music.globalsound += 0.05;
		if(haxegon_Music.globalsound > 1.0) {
			haxegon_Music.globalsound = 1.0;
		}
		haxegon_Music.updateallvolumes();
	}
};
var haxegon_Random = function() { };
$hxClasses["haxegon.Random"] = haxegon_Random;
haxegon_Random.__name__ = ["haxegon","Random"];
haxegon_Random.shufflearray_String = function(arr) {
	var tmp;
	var j;
	var i = arr.length;
	while(--i > 0) {
		j = haxegon_Random["int"](0,i);
		tmp = arr[i];
		arr[i] = arr[j];
		arr[j] = tmp;
	}
};
haxegon_Random.bool = function() {
	return haxegon_Random.random() < 0.5;
};
haxegon_Random.occasional = function() {
	return haxegon_Random.random() < 0.2;
};
haxegon_Random.rare = function() {
	return haxegon_Random.random() < 0.05;
};
haxegon_Random.chance = function(n) {
	return haxegon_Random["int"](0,100) <= n;
};
haxegon_Random["int"] = function(from,to) {
	return from + Math.floor((to - from + 1) * haxegon_Random.random());
};
haxegon_Random["float"] = function(from,to) {
	return from + (to - from) * haxegon_Random.random();
};
haxegon_Random.string = function(length,charactersToUse) {
	if(charactersToUse == null) {
		charactersToUse = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	}
	var str = "";
	var _g1 = 0;
	while(_g1 < length) {
		++_g1;
		str += charactersToUse.charAt(haxegon_Random["int"](0,charactersToUse.length - 1));
	}
	return str;
};
haxegon_Random.pickstring = function(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12) {
	haxegon_Random.temp = 2;
	if(s3 != null) {
		haxegon_Random.temp = 3;
	}
	if(s4 != null) {
		haxegon_Random.temp = 4;
	}
	if(s5 != null) {
		haxegon_Random.temp = 5;
	}
	if(s6 != null) {
		haxegon_Random.temp = 6;
	}
	if(s7 != null) {
		haxegon_Random.temp = 7;
	}
	if(s8 != null) {
		haxegon_Random.temp = 8;
	}
	if(s9 != null) {
		haxegon_Random.temp = 9;
	}
	if(s10 != null) {
		haxegon_Random.temp = 10;
	}
	if(s11 != null) {
		haxegon_Random.temp = 11;
	}
	if(s12 != null) {
		haxegon_Random.temp = 12;
	}
	switch(haxegon_Random["int"](1,haxegon_Random.temp)) {
	case 1:
		return s1;
	case 2:
		return s2;
	case 3:
		return s3;
	case 4:
		return s4;
	case 5:
		return s5;
	case 6:
		return s6;
	case 7:
		return s7;
	case 8:
		return s8;
	case 9:
		return s9;
	case 10:
		return s10;
	case 11:
		return s11;
	case 12:
		return s12;
	}
	return s1;
};
haxegon_Random.pickint = function(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12) {
	if(s12 == null) {
		s12 = -10000;
	}
	if(s11 == null) {
		s11 = -10000;
	}
	if(s10 == null) {
		s10 = -10000;
	}
	if(s9 == null) {
		s9 = -10000;
	}
	if(s8 == null) {
		s8 = -10000;
	}
	if(s7 == null) {
		s7 = -10000;
	}
	if(s6 == null) {
		s6 = -10000;
	}
	if(s5 == null) {
		s5 = -10000;
	}
	if(s4 == null) {
		s4 = -10000;
	}
	if(s3 == null) {
		s3 = -10000;
	}
	haxegon_Random.temp = 2;
	if(s3 != -10000) {
		haxegon_Random.temp = 3;
	}
	if(s4 != -10000) {
		haxegon_Random.temp = 4;
	}
	if(s5 != -10000) {
		haxegon_Random.temp = 5;
	}
	if(s6 != -10000) {
		haxegon_Random.temp = 6;
	}
	if(s7 != -10000) {
		haxegon_Random.temp = 7;
	}
	if(s8 != -10000) {
		haxegon_Random.temp = 8;
	}
	if(s9 != -10000) {
		haxegon_Random.temp = 9;
	}
	if(s10 != -10000) {
		haxegon_Random.temp = 10;
	}
	if(s11 != -10000) {
		haxegon_Random.temp = 11;
	}
	if(s12 != -10000) {
		haxegon_Random.temp = 12;
	}
	switch(haxegon_Random["int"](1,haxegon_Random.temp)) {
	case 1:
		return s1;
	case 2:
		return s2;
	case 3:
		return s3;
	case 4:
		return s4;
	case 5:
		return s5;
	case 6:
		return s6;
	case 7:
		return s7;
	case 8:
		return s8;
	case 9:
		return s9;
	case 10:
		return s10;
	case 11:
		return s11;
	case 12:
		return s12;
	}
	return s1;
};
haxegon_Random.pickfloat = function(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12) {
	if(s12 == null) {
		s12 = -10000;
	}
	if(s11 == null) {
		s11 = -10000;
	}
	if(s10 == null) {
		s10 = -10000;
	}
	if(s9 == null) {
		s9 = -10000;
	}
	if(s8 == null) {
		s8 = -10000;
	}
	if(s7 == null) {
		s7 = -10000;
	}
	if(s6 == null) {
		s6 = -10000;
	}
	if(s5 == null) {
		s5 = -10000;
	}
	if(s4 == null) {
		s4 = -10000;
	}
	if(s3 == null) {
		s3 = -10000;
	}
	haxegon_Random.temp = 2;
	if(s3 != -10000) {
		haxegon_Random.temp = 3;
	}
	if(s4 != -10000) {
		haxegon_Random.temp = 4;
	}
	if(s5 != -10000) {
		haxegon_Random.temp = 5;
	}
	if(s6 != -10000) {
		haxegon_Random.temp = 6;
	}
	if(s7 != -10000) {
		haxegon_Random.temp = 7;
	}
	if(s8 != -10000) {
		haxegon_Random.temp = 8;
	}
	if(s9 != -10000) {
		haxegon_Random.temp = 9;
	}
	if(s10 != -10000) {
		haxegon_Random.temp = 10;
	}
	if(s11 != -10000) {
		haxegon_Random.temp = 11;
	}
	if(s12 != -10000) {
		haxegon_Random.temp = 12;
	}
	switch(haxegon_Random["int"](1,haxegon_Random.temp)) {
	case 1:
		return s1;
	case 2:
		return s2;
	case 3:
		return s3;
	case 4:
		return s4;
	case 5:
		return s5;
	case 6:
		return s6;
	case 7:
		return s7;
	case 8:
		return s8;
	case 9:
		return s9;
	case 10:
		return s10;
	case 11:
		return s11;
	case 12:
		return s12;
	}
	return s1;
};
haxegon_Random.pick = function(arr) {
	return arr[haxegon_Random["int"](0,arr.length - 1)];
};
haxegon_Random.random = function() {
	haxegon_Random.seed = haxegon_Random.seed * 16807 % 2147483647;
	return Math.abs(haxegon_Random.seed / 2147483647);
};
haxegon_Random.setseed = function(s) {
	haxegon_Random.seed = Math.abs(s % 2147483647) | 0;
	Math.random();
};
var haxegon_S = function() { };
$hxClasses["haxegon.S"] = haxegon_S;
haxegon_S.__name__ = ["haxegon","S"];
haxegon_S.asciicode = function(character) {
	return HxOverrides.cca(character,0);
};
haxegon_S.fromascii = function(asciicode) {
	return String.fromCharCode(asciicode);
};
haxegon_S.join = function(array,seperator) {
	return array.join(seperator);
};
haxegon_S.seperate = function(currentstring,delimiter) {
	return currentstring.split(delimiter);
};
haxegon_S.uppercase = function(currentstring) {
	return currentstring.toUpperCase();
};
haxegon_S.lowercase = function(currentstring) {
	return currentstring.toLowerCase();
};
haxegon_S.split = function(currentstring,delimiter) {
	return currentstring.split(delimiter);
};
haxegon_S.removefromstring = function(fullstring,substring) {
	if(haxegon_S.positioninstring(fullstring,substring) == -1) {
		return fullstring;
	} else {
		return haxegon_S.removefromstring(haxegon_S.getroot(fullstring,substring) + haxegon_S.getbranch(fullstring,substring),substring);
	}
};
haxegon_S.isinstring = function(fullstring,stringtocheck) {
	if(haxegon_S.positioninstring(fullstring,stringtocheck) != -1) {
		return true;
	}
	return false;
};
haxegon_S.positioninstring = function(fullstring,substring,start) {
	if(start == null) {
		start = 0;
	}
	return fullstring.indexOf(substring,start);
};
haxegon_S.letterat = function(currentstring,position) {
	if(position == null) {
		position = 0;
	}
	return HxOverrides.substr(currentstring,position,1);
};
haxegon_S.mid = function(currentstring,start,length) {
	if(length == null) {
		length = 1;
	}
	if(start == null) {
		start = 0;
	}
	return HxOverrides.substr(currentstring,start,length);
};
haxegon_S.left = function(currentstring,length) {
	if(length == null) {
		length = 1;
	}
	return HxOverrides.substr(currentstring,0,length);
};
haxegon_S.right = function(currentstring,length) {
	if(length == null) {
		length = 1;
	}
	return HxOverrides.substr(currentstring,currentstring.length - length,length);
};
haxegon_S.removefromleft = function(currentstring,length) {
	if(length == null) {
		length = 1;
	}
	return haxegon_S.right(currentstring,currentstring.length - length);
};
haxegon_S.removefromright = function(currentstring,length) {
	if(length == null) {
		length = 1;
	}
	return haxegon_S.left(currentstring,currentstring.length - length);
};
haxegon_S.reversetext = function(currentstring) {
	var reversedstring = "";
	var _g1 = 0;
	var _g = currentstring.length;
	while(_g1 < _g) reversedstring += HxOverrides.substr(currentstring,currentstring.length - _g1++ - 1,1);
	return reversedstring;
};
haxegon_S.replacechar = function(currentstring,ch,ch2) {
	if(ch2 == null) {
		ch2 = "";
	}
	if(ch == null) {
		ch = "|";
	}
	var fixedstring = "";
	var _g1 = 0;
	var _g = currentstring.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(haxegon_S.mid(currentstring,i) == ch) {
			fixedstring += ch2;
		} else {
			fixedstring += haxegon_S.mid(currentstring,i);
		}
	}
	return fixedstring;
};
haxegon_S.getlastbranch = function(currentstring,ch) {
	var i = currentstring.length - 1;
	while(i >= 0) {
		if(haxegon_S.mid(currentstring,i,1) == ch) {
			return haxegon_S.mid(currentstring,i + 1,currentstring.length - i - 1);
		}
		--i;
	}
	return currentstring;
};
haxegon_S.getroot = function(currentstring,ch) {
	var _g1 = 0;
	var _g = currentstring.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(haxegon_S.mid(currentstring,i,1) == ch) {
			return haxegon_S.mid(currentstring,0,i);
		}
	}
	return currentstring;
};
haxegon_S.getbranch = function(currentstring,ch) {
	var _g1 = 0;
	var _g = currentstring.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(haxegon_S.mid(currentstring,i,1) == ch) {
			return haxegon_S.mid(currentstring,i + 1,currentstring.length - i - 1);
		}
	}
	return currentstring;
};
haxegon_S.getbetweenbrackets = function(currentstring) {
	while(haxegon_S.mid(currentstring,0,1) != "(" && currentstring.length > 0) currentstring = haxegon_S.mid(currentstring,1,currentstring.length - 1);
	while(haxegon_S.mid(currentstring,currentstring.length - 1,1) != ")" && currentstring.length > 0) currentstring = haxegon_S.mid(currentstring,0,currentstring.length - 1);
	if(currentstring.length <= 0) {
		return "";
	}
	return haxegon_S.mid(currentstring,1,currentstring.length - 2);
};
haxegon_S.trimspaces = function(currentstring) {
	while(haxegon_S.mid(currentstring,0,1) == " " && currentstring.length > 0) currentstring = haxegon_S.mid(currentstring,1,currentstring.length - 1);
	while(haxegon_S.mid(currentstring,currentstring.length - 1,1) == " " && currentstring.length > 0) currentstring = haxegon_S.mid(currentstring,0,currentstring.length - 1);
	while(haxegon_S.mid(currentstring,0,1) == "\t" && currentstring.length > 0) currentstring = haxegon_S.mid(currentstring,1,currentstring.length - 1);
	while(haxegon_S.mid(currentstring,currentstring.length - 1,1) == "\t" && currentstring.length > 0) currentstring = haxegon_S.mid(currentstring,0,currentstring.length - 1);
	if(currentstring.length <= 0) {
		return "";
	}
	return currentstring;
};
haxegon_S.isnumber = function(currentstring) {
	var f = parseFloat(currentstring);
	if(isNaN(f)) {
		return false;
	} else {
		return true;
	}
};
var haxegon_Scene = function() { };
$hxClasses["haxegon.Scene"] = haxegon_Scene;
haxegon_Scene.__name__ = ["haxegon","Scene"];
haxegon_Scene.init = function() {
	haxegon_Scene.scenelist = [];
	haxegon_Scene.currentscene = 0;
	haxegon_Scene.scenelist.push(Type.createInstance(Main,[]));
	haxegon_Scene.checkforrenderfunction();
};
haxegon_Scene.checkforrenderfunction = function() {
	haxegon_Scene.hasseperaterenderfunction = Reflect.field(haxegon_Scene.scenelist[haxegon_Scene.currentscene],"render") != null;
	if(!haxegon_Scene.hasseperaterenderfunction) {
		var o = haxegon_Scene.scenelist[haxegon_Scene.currentscene];
		haxegon_Scene.hasseperaterenderfunction = Reflect.field(o == null?null:js_Boot.getClass(o),"render") != null;
	}
};
haxegon_Scene.update = function() {
	haxegon_Scene.callscenemethod(haxegon_Scene.scenelist[haxegon_Scene.currentscene],"update");
};
haxegon_Scene.render = function() {
	haxegon_Scene.callscenemethod(haxegon_Scene.scenelist[haxegon_Scene.currentscene],"render");
};
haxegon_Scene.callscenemethod = function(scene,method) {
	var instanceFunc = Reflect.field(haxegon_Scene.scenelist[haxegon_Scene.currentscene],method);
	if(instanceFunc != null && Reflect.isFunction(instanceFunc)) {
		try {
			instanceFunc.apply(haxegon_Scene.scenelist[haxegon_Scene.currentscene],[]);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_ArgumentError) ) {
				throw new js__$Boot_HaxeError("ERROR: Couldn't call " + Type.getClassName(scene) + "." + method + "() without any arguments.");
			} else throw(e);
		}
		return;
	}
	var o = haxegon_Scene.scenelist[haxegon_Scene.currentscene];
	var classFunc = Reflect.field(o == null?null:js_Boot.getClass(o),method);
	if(classFunc != null && Reflect.isFunction(classFunc)) {
		try {
			classFunc.apply(haxegon_Scene.scenelist[haxegon_Scene.currentscene],[]);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_ArgumentError) ) {
				throw new js__$Boot_HaxeError("ERROR: Couldn't call " + Type.getClassName(scene) + "." + method + "() without any arguments.");
			} else throw(e1);
		}
		return;
	}
};
haxegon_Scene.findscene = function(findscene) {
	var _g1 = 0;
	var _g = haxegon_Scene.scenelist.length;
	while(_g1 < _g) {
		var i = _g1++;
		var o = haxegon_Scene.scenelist[i];
		if(findscene == (o == null?null:js_Boot.getClass(o))) {
			return i;
		}
	}
	haxegon_Scene.scenelist.push(Type.createInstance(findscene,[]));
	return haxegon_Scene.scenelist.length - 1;
};
haxegon_Scene.change = function(newscene) {
	haxegon_Scene.currentscene = haxegon_Scene.findscene(newscene);
	haxegon_Scene.callscenemethod(haxegon_Scene.scenelist[haxegon_Scene.currentscene],"reset");
	haxegon_Scene.checkforrenderfunction();
	return haxegon_Scene.scenelist[haxegon_Scene.currentscene];
};
haxegon_Scene.get = function(requiredscene) {
	return haxegon_Scene.scenelist[haxegon_Scene.findscene(requiredscene)];
};
haxegon_Scene.$name = function(requiredscene) {
	var o = haxegon_Scene.scenelist[haxegon_Scene.findscene(requiredscene)];
	return Type.getClassName(o == null?null:js_Boot.getClass(o));
};
haxegon_Scene.getcurrentsceneclass = function() {
	return haxegon_Scene.scenelist[haxegon_Scene.currentscene];
};
var haxegon_Fontclass = function(_name,_size) {
	this.autosize = true;
	var _this = haxegon_Text.fontfileindex;
	this.type = haxegon_Text.fontfile[__map_reserved[_name] != null?_this.getReserved(_name):_this.h[_name]].type;
	if(this.type == "bitmap") {
		this.loadbitmapfont(_name,_size);
	} else if(this.type == "ttf") {
		this.loadbitmapfont(_name,_size);
	}
};
$hxClasses["haxegon.Fontclass"] = haxegon_Fontclass;
haxegon_Fontclass.__name__ = ["haxegon","Fontclass"];
haxegon_Fontclass.prototype = {
	loadbitmapfont: function(_name,_size) {
		this.name = _name;
		this.size = _size;
		var _this = haxegon_Text.fontfileindex;
		this.fontfile = haxegon_Text.fontfile[__map_reserved[_name] != null?_this.getReserved(_name):_this.h[_name]];
		this.tf = new starling_text_TextField(haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight,"???",this.fontfile.typename,this.fontfile.sizescale * this.size);
		this.tf.set_vAlign("top");
		this.tf.set_hAlign("left");
		this.tf.set_autoSize("bothDirections");
	}
	,updatewidth: function(v) {
		this.autosize = v;
		if(v) {
			this.tf.set_autoSize("bothDirections");
		} else {
			this.tf.set_autoSize("vertical");
			this.tf.set_width(haxegon_Text.wordwrapwidth);
		}
	}
	,get_width: function() {
		if(this.autosize) {
			this.tf.set_autoSize("bothDirections");
		} else {
			this.tf.set_autoSize("vertical");
			this.tf.set_width(haxegon_Text.wordwrapwidth);
		}
		return this.tf.get_width() | 0;
	}
	,get_height: function() {
		if(this.autosize) {
			this.tf.set_autoSize("bothDirections");
		} else {
			this.tf.set_autoSize("vertical");
			this.tf.set_width(haxegon_Text.wordwrapwidth);
		}
		return this.tf.get_height() | 0;
	}
	,tf: null
	,fontfile: null
	,name: null
	,type: null
	,size: null
	,autosize: null
	,__class__: haxegon_Fontclass
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxegon_Fontfile = function(_file) {
	if(_file == null) {
		this.type = "ttf";
		this.filename = "";
		this.typename = "Verdana";
		this.sizescale = 1;
	} else if(haxegon_Data.assetexists("data/graphics/fonts/" + _file + "/" + _file + ".fnt")) {
		this.type = "bitmap";
		var fontdata = haxegon_Data.gettextasset("data/graphics/fonts/" + _file + "/" + _file + ".fnt");
		this.fontxml = Xml.parse(fontdata).firstElement();
		this.typename = this.fontxml.elementsNamed("info").next().get("face");
		this.pngname = Xml.parse(fontdata).firstElement().elementsNamed("pages").next().elementsNamed("page").next().get("file");
		if(this.pngname == null) {
			haxegon_Debug.log("ERROR: Bitmap font XML file \"" + _file + ".fnt\" does not reference a .png file.");
		}
		if(haxegon_S.right(this.pngname,4) == ".png") {
			this.pngname = haxegon_S.left(this.pngname,this.pngname.length - 4);
		}
		this.sizescale = Std.parseInt(this.fontxml.elementsNamed("info").next().get("size"));
		var _this = haxegon_Gfx.imageindex;
		var key = "fonts/" + _file + "/" + this.pngname;
		if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
			this.fonttex = haxegon_Gfx.starlingassets.getTexture("fonts/" + _file + "/" + this.pngname);
		} else {
			this.fonttex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/fonts/" + _file + "/" + this.pngname + ".png"),false);
		}
		this.bitmapfont = new starling_text_BitmapFont(this.fonttex,this.fontxml);
		starling_text_TextField.registerBitmapFont(this.bitmapfont);
	} else {
		this.type = "ttf";
		this.filename = "data/graphics/fonts/" + _file + "/" + _file + ".ttf";
		try {
			this.font = haxegon_Data.getfontasset(this.filename);
			this.typename = this.font.name;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxegon_Debug.log("ERROR: Cannot set font to \"" + _file + "\", no TTF or Bitmap Font found.");
		}
		this.sizescale = 1;
	}
};
$hxClasses["haxegon.Fontfile"] = haxegon_Fontfile;
haxegon_Fontfile.__name__ = ["haxegon","Fontfile"];
haxegon_Fontfile.prototype = {
	typename: null
	,bitmapfont: null
	,fontxml: null
	,fonttex: null
	,pngname: null
	,sizescale: null
	,font: null
	,filename: null
	,type: null
	,__class__: haxegon_Fontfile
};
var haxegon_Text = function() { };
$hxClasses["haxegon.Text"] = haxegon_Text;
haxegon_Text.__name__ = ["haxegon","Text"];
haxegon_Text.__properties__ = {set_size:"set_size",get_size:"get_size",set_font:"set_font",get_font:"get_font"}
haxegon_Text.init = function(stage) {
	haxegon_Text.gfxstage = stage;
	haxegon_Text.input_cursorglow = 0;
	haxegon_Text.inputmaxlength = 40;
	haxegon_Text.wordwrapwidth = 0;
};
haxegon_Text.align = function(a) {
	haxegon_Text.textalign = a;
};
haxegon_Text.rotation = function(a,xpivot,ypivot) {
	if(ypivot == null) {
		ypivot = -15000;
	}
	if(xpivot == null) {
		xpivot = -15000;
	}
	haxegon_Text.textrotate = a;
	haxegon_Text.textrotatexpivot = xpivot;
	haxegon_Text.textrotateypivot = ypivot;
};
haxegon_Text.input_checkfortext = function() {
	haxegon_Text.inputtext = haxegon_Input.keybuffer;
};
haxegon_Text.input = function(x,y,prompt,questioncolor,answercolor) {
	if(answercolor == null) {
		answercolor = 13421772;
	}
	if(questioncolor == null) {
		questioncolor = 16777215;
	}
	haxegon_Text.input_show = 2;
	haxegon_Text.input_font = haxegon_Text.currentfont;
	haxegon_Text.input_textsize = haxegon_Text.currentsize;
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(prompt + haxegon_Text.inputtext);
	x = haxegon_Text.alignx(x);
	y = haxegon_Text.aligny(y);
	haxegon_Text.input_textxp = x;
	haxegon_Text.input_textyp = y;
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(prompt);
	haxegon_Text.input_responsexp = haxegon_Text.input_textxp + Math.floor(haxegon_Text.typeface[haxegon_Text.currentindex].get_width());
	haxegon_Text.input_responseyp = y;
	haxegon_Text.input_text = prompt;
	haxegon_Text.input_response = haxegon_Text.inputtext;
	haxegon_Text.input_textcol = questioncolor;
	haxegon_Text.input_responsecol = answercolor;
	haxegon_Text.input_checkfortext();
	if(haxegon_Input.justpressed(haxegon_Key.ENTER) && haxegon_Text.inputtext != "") {
		return true;
	}
	return false;
};
haxegon_Text.getinput = function() {
	var response = haxegon_Text.inputtext;
	haxegon_Text.lastentry = haxegon_Text.inputtext;
	haxegon_Text.inputtext = "";
	haxegon_Input.keybuffer = "";
	haxegon_Text.input_show = 0;
	return response;
};
haxegon_Text.drawstringinput = function() {
	if(haxegon_Text.input_show > 0) {
		haxegon_Text.setfont(haxegon_Text.input_font,haxegon_Text.input_textsize);
		haxegon_Text.input_cursorglow++;
		if(haxegon_Text.input_cursorglow >= 96) {
			haxegon_Text.input_cursorglow = 0;
		}
		haxegon_Text.display(haxegon_Text.input_textxp,haxegon_Text.input_textyp,haxegon_Text.input_text,haxegon_Text.input_textcol);
		if(haxegon_Text.input_text.length < haxegon_Text.inputmaxlength) {
			if(haxegon_Text.input_cursorglow % 48 < 24) {
				haxegon_Text.display(haxegon_Text.input_responsexp,haxegon_Text.input_responseyp,haxegon_Text.input_response,haxegon_Text.input_responsecol);
			} else {
				haxegon_Text.display(haxegon_Text.input_responsexp,haxegon_Text.input_responseyp,haxegon_Text.input_response + "_",haxegon_Text.input_responsecol);
			}
		} else {
			haxegon_Text.display(haxegon_Text.input_responsexp,haxegon_Text.input_responseyp,haxegon_Text.input_response,haxegon_Text.input_responsecol);
		}
	}
	haxegon_Text.input_show--;
	if(haxegon_Text.input_show < 0) {
		haxegon_Text.input_show = 0;
	}
};
haxegon_Text.wordwrap = function(textwidth) {
	if(textwidth == null) {
		haxegon_Text.wordwrapwidth = 0;
	} else if(textwidth < 0) {
		haxegon_Debug.log("Error: Word wrap width must be a number greater than 0.");
		haxegon_Text.wordwrapwidth = 0;
	} else {
		haxegon_Text.wordwrapwidth = textwidth;
	}
};
haxegon_Text.currentwidth = function() {
	return haxegon_Text.typeface[haxegon_Text.currentindex].get_width();
};
haxegon_Text.currentheight = function() {
	return haxegon_Text.typeface[haxegon_Text.currentindex].get_height();
};
haxegon_Text.width = function(text) {
	if(haxegon_Text.wordwrapwidth > 0) {
		haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(false);
	} else {
		haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(true);
	}
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(text);
	return haxegon_Text.typeface[haxegon_Text.currentindex].get_width();
};
haxegon_Text.height = function(text) {
	if(text == null) {
		text = "?";
	}
	if(haxegon_Text.wordwrapwidth > 0) {
		haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(false);
	} else {
		haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(true);
	}
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(text);
	return haxegon_Text.typeface[haxegon_Text.currentindex].get_height();
};
haxegon_Text.alignx = function(x) {
	if(x <= -5000) {
		haxegon_Text.t1 = x - haxegon_Text.CENTER;
		haxegon_Text.t2 = x - haxegon_Text.LEFT;
		haxegon_Text.t3 = x - haxegon_Text.RIGHT;
		if(haxegon_Text.t1 == 0 || Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t2) && Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t3)) {
			return haxegon_Text.t1 + Math.floor(haxegon_Gfx.screenwidthmid - haxegon_Text.currentwidth() / 2);
		} else if(haxegon_Text.t2 == 0 || Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t1) && Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t3)) {
			return haxegon_Text.t2;
		} else {
			return haxegon_Text.t3 + Math.floor(haxegon_Gfx.screenwidth - haxegon_Text.currentwidth());
		}
	}
	return Math.floor(x);
};
haxegon_Text.aligny = function(y) {
	if(y <= -5000) {
		haxegon_Text.t1 = y - haxegon_Text.CENTER;
		haxegon_Text.t2 = y - haxegon_Text.TOP;
		haxegon_Text.t3 = y - haxegon_Text.BOTTOM;
		if(haxegon_Text.t1 == 0 || Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t2) && Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t3)) {
			return haxegon_Text.t1 + Math.floor(haxegon_Gfx.screenheightmid - haxegon_Text.currentheight() / 2);
		} else if(haxegon_Text.t2 == 0 || Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t1) && Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t3)) {
			return haxegon_Text.t2;
		} else {
			return haxegon_Text.t3 + Math.floor(haxegon_Gfx.screenheight - haxegon_Text.currentheight());
		}
	}
	return Math.floor(y);
};
haxegon_Text.aligntextx = function(t,x) {
	if(x <= -5000) {
		haxegon_Text.t1 = x - haxegon_Text.CENTER;
		haxegon_Text.t2 = x - haxegon_Text.LEFT;
		haxegon_Text.t3 = x - haxegon_Text.RIGHT;
		if(haxegon_Text.t1 == 0 || Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t2) && Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t3)) {
			return haxegon_Text.t1 + Math.floor(haxegon_Text.width(t) / 2);
		} else if(haxegon_Text.t2 == 0 || Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t1) && Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t3)) {
			return haxegon_Text.t2;
		} else {
			return haxegon_Text.t3 + haxegon_Text.width(t);
		}
	}
	return x;
};
haxegon_Text.aligntexty = function(t,y) {
	haxe_Log.trace("warning: unimplemented function aligntexty",{ fileName : "Text.hx", lineNumber : 326, className : "haxegon.Text", methodName : "aligntexty"});
	return 0;
};
haxegon_Text.display = function(x,y,text,color) {
	if(color == null) {
		color = 16777215;
	}
	if(text == "") {
		return;
	}
	if(haxegon_Text.typeface.length == 0) {
		haxegon_Text.defaultfont();
	}
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_color(color);
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(text);
	if(haxegon_Text.textalign == haxegon_Text.LEFT) {
		haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_hAlign("left");
	}
	if(haxegon_Text.textalign == haxegon_Text.CENTER) {
		haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_hAlign("center");
	}
	if(haxegon_Text.textalign == haxegon_Text.RIGHT) {
		haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_hAlign("right");
	}
	if(haxegon_Text.wordwrapwidth > 0) {
		haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(false);
	} else {
		haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(true);
	}
	x = haxegon_Text.alignx(x);
	y = haxegon_Text.aligny(y);
	x -= haxegon_Text.aligntextx(text,haxegon_Text.textalign);
	haxegon_Text.fontmatrix.identity();
	if(haxegon_Text.textrotate != 0) {
		if(haxegon_Text.textrotatexpivot != 0.0) {
			haxegon_Text.tempxpivot = haxegon_Text.aligntextx(text,haxegon_Text.textrotatexpivot);
		}
		if(haxegon_Text.textrotateypivot != 0.0) {
			haxegon_Text.tempypivot = haxegon_Text.aligntexty(text,haxegon_Text.textrotateypivot);
		}
		haxegon_Text.fontmatrix.translate(-haxegon_Text.tempxpivot,-haxegon_Text.tempypivot);
		haxegon_Text.fontmatrix.rotate(haxegon_Text.textrotate * 3.1415 / 180);
		haxegon_Text.fontmatrix.translate(haxegon_Text.tempxpivot,haxegon_Text.tempypivot);
	}
	haxegon_Text.fontmatrix.translate(x,y);
	haxegon_Gfx.drawto.draw(haxegon_Text.typeface[haxegon_Text.currentindex].tf,haxegon_Text.fontmatrix);
	if(haxegon_Text.typeface[haxegon_Text.currentindex].type == "ttf") {
		haxegon_Gfx.fillbox(-1,-1,1,1,haxegon_Col.RED);
	}
};
haxegon_Text.defaultfont = function() {
	haxegon_Text.addfont(null,24);
	haxegon_Text.setfont("Verdana",24);
};
haxegon_Text.setfont = function(fontname,size) {
	if(size == null) {
		size = 1;
	}
	var _this = haxegon_Text.fontfileindex;
	if(!(__map_reserved[fontname] != null?_this.existsReserved(fontname):_this.h.hasOwnProperty(fontname))) {
		haxegon_Text.addfont(fontname,size);
	}
	if(fontname != haxegon_Text.currentfont) {
		haxegon_Text.currentfont = fontname;
		var key = haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize);
		var _this1 = haxegon_Text.typefaceindex;
		if(__map_reserved[key] != null?_this1.existsReserved(key):_this1.h.hasOwnProperty(key)) {
			var key1 = haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize);
			var _this2 = haxegon_Text.typefaceindex;
			haxegon_Text.currentindex = __map_reserved[key1] != null?_this2.getReserved(key1):_this2.h[key1];
		} else {
			haxegon_Text.addtypeface(haxegon_Text.currentfont,haxegon_Text.currentsize);
			var key2 = haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize);
			var _this3 = haxegon_Text.typefaceindex;
			haxegon_Text.currentindex = __map_reserved[key2] != null?_this3.getReserved(key2):_this3.h[key2];
		}
	}
	haxegon_Text.changesize(size);
};
haxegon_Text.changesize = function(t) {
	if(t != haxegon_Text.currentsize) {
		haxegon_Text.currentsize = t;
		if(haxegon_Text.currentfont != "null") {
			var key = haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize);
			var _this = haxegon_Text.typefaceindex;
			if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
				var key1 = haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize);
				var _this1 = haxegon_Text.typefaceindex;
				haxegon_Text.currentindex = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
			} else {
				haxegon_Text.addtypeface(haxegon_Text.currentfont,haxegon_Text.currentsize);
				var key2 = haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize);
				var _this2 = haxegon_Text.typefaceindex;
				haxegon_Text.currentindex = __map_reserved[key2] != null?_this2.getReserved(key2):_this2.h[key2];
			}
		} else {
			haxegon_Text.addfont(null,t);
			haxegon_Text.setfont("Verdana",t);
		}
	}
};
haxegon_Text.addfont = function(fontname,defaultsize) {
	if(defaultsize == null) {
		defaultsize = 1;
	}
	haxegon_Text.fontfile.push(new haxegon_Fontfile(fontname));
	if(fontname == null) {
		fontname = "Verdana";
	}
	var value = haxegon_Text.fontfile.length - 1;
	var _this = haxegon_Text.fontfileindex;
	if(__map_reserved[fontname] != null) {
		_this.setReserved(fontname,value);
	} else {
		_this.h[fontname] = value;
	}
	haxegon_Text.changesize(defaultsize);
};
haxegon_Text.addtypeface = function(_name,_size) {
	haxegon_Text.typeface.push(new haxegon_Fontclass(_name,_size));
	var value = haxegon_Text.typeface.length - 1;
	var _this = haxegon_Text.typefaceindex;
	var key = _name + "_" + (_size == null?"null":"" + _size);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
};
haxegon_Text.get_font = function() {
	return haxegon_Text.currentfont;
};
haxegon_Text.set_font = function(fontname) {
	if(fontname == "" || fontname.toLowerCase() == "verdana") {
		fontname = "Verdana";
	}
	if(fontname == haxegon_Text.currentfont) {
		return haxegon_Text.currentfont;
	}
	haxegon_Text.setfont(fontname,1);
	return haxegon_Text.currentfont;
};
haxegon_Text.get_size = function() {
	return haxegon_Text.currentsize;
};
haxegon_Text.set_size = function(fontsize) {
	if(haxegon_Text.currentsize != fontsize) {
		haxegon_Text.changesize(fontsize);
	}
	return haxegon_Text.currentsize;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null?0:byteOffset;
	this.length = byteLength == null?buffer.byteLength - this.offset:byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0?value + 128 & 255:value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) {
			return 60;
		} else if(this.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.framePeriod;
		}
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.__renderers[0] != null) {
				this.parent.__renderers[0].onRender.dispatch();
				this.parent.__renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				this.parent.__windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.__windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			switch(event.type) {
			case "beforeunload":
				this.parent.__windows[0].onClose.dispatch();
				break;
			case "blur":
				this.parent.__windows[0].onFocusOut.dispatch();
				this.parent.__windows[0].onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__windows[0].onFocusIn.dispatch();
				this.parent.__windows[0].onActivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.__windows[0].__width;
				var cacheHeight = this.parent.__windows[0].__height;
				this.parent.__windows[0].backend.handleResize();
				if(this.parent.__windows[0].__width != cacheWidth || this.parent.__windows[0].__height != cacheHeight) {
					this.parent.__windows[0].onResize.dispatch(this.parent.__windows[0].__width,this.parent.__windows[0].__height);
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			data = devices[i];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(i)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = i;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) cache.buttons.push(data.buttons[_g3++].value);
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) cache.axes.push(data.axes[_g31++]);
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[i] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(i);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(i);
					}
				}
			}
			cache = this.gameDeviceCache.h[i];
			joystick = lime_ui_Joystick.devices.h[i];
			gamepad = lime_ui_Gamepad.devices.h[i];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i1 = _g32++;
					value = data.buttons[i1].value;
					if(value != cache.buttons[i1]) {
						if(i1 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i1 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i1);
							} else {
								joystick.onButtonUp.dispatch(i1);
							}
							if(gamepad != null) {
								switch(i1) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i1] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i2 = _g33++;
					if(data.axes[i2] != cache.axes[i2]) {
						joystick.onAxisMove.dispatch(i2,data.axes[i2]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i2,data.axes[i2]);
						}
						cache.axes[i2] = data.axes[i2];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(i);
				lime_ui_Gamepad.__disconnect(i);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
lime__$backend_html5_HTML5AudioSource.__name__ = ["lime","_backend","html5","HTML5AudioSource"];
lime__$backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		this.id = this.parent.buffer.__srcHowl.play();
		this.setGain(this.parent.get_gain());
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		this.parent.buffer.__srcHowl.pause(this.id);
	}
	,stop: function() {
		this.playing = false;
		this.parent.buffer.__srcHowl.stop(this.id);
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.completed) {
			return this.getLength();
		} else {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		return this.position;
	}
	,__class__: lime__$backend_html5_HTML5AudioSource
};
var lime__$backend_html5_HTML5HTTPRequest = function() {
};
$hxClasses["lime._backend.html5.HTML5HTTPRequest"] = lime__$backend_html5_HTML5HTTPRequest;
lime__$backend_html5_HTML5HTTPRequest.__name__ = ["lime","_backend","html5","HTML5HTTPRequest"];
lime__$backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		this.request.addEventListener("progress",progress,false);
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var tmp = this.parent.formData.keys();
			while(tmp.hasNext()) {
				var key = tmp.next();
				if(query.length > 0) {
					query += "&";
				}
				var tmp1 = encodeURIComponent(key) + "=";
				var _this = this.parent.formData;
				var s = Std.string(__map_reserved[key] != null?_this.getReserved(key):_this.h[key]);
				query += tmp1 + encodeURIComponent(s);
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var hasContentType = false;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				hasContentType = true;
			}
			this.request.setRequestHeader(header.name,header.value);
		}
		if(!hasContentType) {
			this.request.setRequestHeader("Content-Type",this.parent.contentType);
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && _gthis.request.status >= 200 && _gthis.request.status <= 400) {
				var bytes = _gthis.request.responseType == ""?haxe_io_Bytes.ofString(_gthis.request.responseText):haxe_io_Bytes.ofData(_gthis.request.response);
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
		return promise.future;
	}
	,loadText: function(uri) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && _gthis.request.status >= 200 && _gthis.request.status <= 400) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__class__: lime__$backend_html5_HTML5HTTPRequest
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) {
		return lime_ui_MouseCursor.DEFAULT;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				$window.backend.element.style.cursor = tmp;
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		if(this.parent.context[1] == 0) {
			this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
			this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(!Object.prototype.hasOwnProperty.call(this.parent.window.config,"hardware") || this.parent.window.config.hardware) {
				var options = { alpha : Object.prototype.hasOwnProperty.call(this.parent.window.config,"background") && this.parent.window.config.background == null, antialias : Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing") && this.parent.window.config.antialiasing > 0, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer")?this.parent.window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer") && this.parent.window.config.stencilBuffer, preserveDrawingBuffer : false};
				var _g = 0;
				var _g1 = ["webgl2","webgl","experimental-webgl"];
				while(_g < _g1.length) {
					var name = _g1[_g];
					++_g;
					webgl = this.parent.window.backend.canvas.getContext(name,options);
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,readPixels: function(rect) {
		if(this.parent.window.backend.canvas != null) {
			if(rect == null) {
				rect = new lime_math_Rectangle(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			} else {
				rect.__contract(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas = window.document.createElement("canvas");
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				var context = canvas.getContext("2d");
				context.drawImage(this.parent.window.backend.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas);
			}
		}
		return null;
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) {
		this.element = parent.config.element;
	}
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"allowHighDPI") && parent.config.allowHighDPI) {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,cacheMouseX: null
	,cacheMouseY: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			js_Browser.alert(message);
		}
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) {
			this.canvas = this.element;
		} else {
			this.canvas = window.document.createElement("canvas");
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = Math.round(this.parent.__width * this.scale);
			this.canvas.height = Math.round(this.parent.__height * this.scale);
			this.canvas.style.width = this.parent.__width + "px";
			this.canvas.style.height = this.parent.__height + "px";
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) {
					this.element.appendChild(this.canvas);
				}
			} else {
				this.element.appendChild(this.div);
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled) {
			event.preventDefault();
		}
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) {
			haxe_Timer.delay(function() {
				lime__$backend_html5_HTML5Window.textInput.focus();
			},20);
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		event.preventDefault();
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = lime_system_Clipboard.set_text(event.clipboardData.getData("text/plain"));
			this.parent.onTextInput.dispatch(text);
			event.preventDefault();
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != lime__$backend_html5_HTML5Window.dummyCharacter) {
			if(lime__$backend_html5_HTML5Window.textInput.value.charAt(0) == lime__$backend_html5_HTML5Window.dummyCharacter) {
				this.parent.onTextInput.dispatch(HxOverrides.substr(lime__$backend_html5_HTML5Window.textInput.value,1,null));
			} else {
				this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			}
			lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if(this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
			if(this.parent.onMouseWheel.canceled) {
				event.preventDefault();
			}
		}
	}
	,handleResize: function() {
		this.primaryTouch = null;
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = Math.round(this.element.clientWidth * this.scale);
							this.canvas.height = Math.round(this.element.clientHeight * this.scale);
							this.canvas.style.width = this.element.clientWidth + "px";
							this.canvas.style.height = this.element.clientHeight + "px";
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.setWidth != 0?this.element.clientWidth / this.setWidth:1;
				var scaleY = this.setHeight != 0?this.element.clientHeight / this.setHeight:1;
				var targetWidth = this.element.clientWidth;
				var targetHeight = this.element.clientHeight;
				var marginLeft = 0;
				var marginTop = 0;
				if(scaleX < scaleY) {
					targetHeight = Math.floor(this.setHeight * scaleX);
					marginTop = Math.floor((this.element.clientHeight - targetHeight) / 2);
				} else {
					targetWidth = Math.floor(this.setWidth * scaleY);
					marginLeft = Math.floor((this.element.clientWidth - targetWidth) / 2);
				}
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = targetWidth + "px";
						this.canvas.style.height = targetHeight + "px";
						this.canvas.style.marginLeft = marginLeft + "px";
						this.canvas.style.marginTop = marginTop + "px";
					}
				} else {
					this.div.style.width = targetWidth + "px";
					this.div.style.height = targetHeight + "px";
					this.div.style.marginLeft = marginLeft + "px";
					this.div.style.marginTop = marginTop + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			switch(event.type) {
			case "touchend":
				var touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					var cacheX = touch.x;
					var cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch);
					if(touch == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX1 = touch1.x;
					var cacheY1 = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX1;
					touch1.dy = touch1.y - cacheY1;
					touch1.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseMove.dispatch(x,y);
					}
				}
				break;
			case "touchstart":
				var touch2 = this.unusedTouchesPool.pop();
				if(touch2 == null) {
					touch2 = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.id = data.identifier;
					touch2.dx = 0;
					touch2.dy = 0;
					touch2.pressure = data.force;
					touch2.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch2;
				lime_ui_Touch.onStart.dispatch(touch2);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch2;
				}
				if(touch2 == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
			lime__$backend_html5_HTML5Window.textInput.select();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setResizable: function(value) {
		return value;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime__$macros_AssetsMacro = function() { };
$hxClasses["lime._macros.AssetsMacro"] = lime__$macros_AssetsMacro;
lime__$macros_AssetsMacro.__name__ = ["lime","_macros","AssetsMacro"];
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	addRenderer: null
	,addWindow: null
	,registerModule: null
	,removeRenderer: null
	,removeWindow: null
	,setPreloader: null
	,unregisterModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
	this.__renderers = [];
	this.__windows = [];
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__application: null
	,__preloader: null
	,__renderers: null
	,__windows: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		renderer.onRender.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		renderer.onContextLost.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		renderer.onContextRestored.add(function(a2) {
			f2(a12,a2);
		});
		this.__renderers.push(renderer);
	}
	,addWindow: function(window) {
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		window.onActivate.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.__onWindowClose);
		var a11 = window;
		window.onClose.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		window.onCreate.add(function() {
			f2(a12);
		});
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		window.onDeactivate.add(function() {
			f3(a13);
		});
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		window.onDropFile.add(function(a2) {
			f4(a14,a2);
		});
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		window.onEnter.add(function() {
			f5(a15);
		});
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		window.onFocusIn.add(function() {
			f6(a16);
		});
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		window.onFocusOut.add(function() {
			f7(a17);
		});
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		window.onFullscreen.add(function() {
			f8(a18);
		});
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		window.onKeyDown.add(function(a21,a3) {
			f9(a19,a21,a3);
		});
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		window.onKeyUp.add(function(a22,a31) {
			f10(a110,a22,a31);
		});
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		window.onLeave.add(function() {
			f11(a111);
		});
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		window.onMinimize.add(function() {
			f12(a112);
		});
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		window.onMouseDown.add(function(x,y,a23) {
			f13(a113,x,y,a23);
		});
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		window.onMouseMove.add(function(x1,y1) {
			f14(a114,x1,y1);
		});
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		window.onMouseMoveRelative.add(function(x2,y2) {
			f15(a115,x2,y2);
		});
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		window.onMouseUp.add(function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		});
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		window.onMouseWheel.add(function(a25,a32) {
			f17(a117,a25,a32);
		});
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		window.onMove.add(function(x4,y4) {
			f18(a118,x4,y4);
		});
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		window.onResize.add(function(a26,a33) {
			f19(a119,a26,a33);
		});
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		window.onRestore.add(function() {
			f20(a120);
		});
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		window.onTextEdit.add(function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		});
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		window.onTextInput.add(function(a28) {
			f22(a122,a28);
		});
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
		this.__windows.push(window);
	}
	,registerModule: function(application) {
		this.__application = application;
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var tmp = lime_ui_Gamepad.devices.iterator();
		while(tmp.hasNext()) this.__onGamepadConnect(tmp.next());
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var tmp1 = lime_ui_Joystick.devices.iterator();
		while(tmp1.hasNext()) this.__onJoystickConnect(tmp1.next());
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && this.__renderers.indexOf(renderer) > -1) {
			HxOverrides.remove(this.__renderers,renderer);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.__windows.indexOf(window) > -1) {
			HxOverrides.remove(this.__windows,window);
		}
	}
	,setPreloader: function(preloader) {
		if(this.__preloader != null) {
			this.__preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.__preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.__preloader = preloader;
		if(preloader == null || preloader.complete) {
			this.onPreloadComplete();
		} else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,unregisterModule: function(application) {
		this.__application.onExit.remove($bind(this,this.onModuleExit));
		this.__application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		gamepad.onAxisMove.add(function(a2,a3) {
			f(a1,a2,a3);
		});
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		gamepad.onButtonDown.add(function(a21) {
			f1(a11,a21);
		});
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		gamepad.onButtonUp.add(function(a22) {
			f2(a12,a22);
		});
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		gamepad.onDisconnect.add(function() {
			f3(a13);
		});
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		joystick.onAxisMove.add(function(a2,a3) {
			f(a1,a2,a3);
		});
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		joystick.onButtonDown.add(function(a21) {
			f1(a11,a21);
		});
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		joystick.onButtonUp.add(function(a22) {
			f2(a12,a22);
		});
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		joystick.onDisconnect.add(function() {
			f3(a13);
		});
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		joystick.onHatMove.add(function(a23,a31) {
			f4(a14,a23,a31);
		});
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		joystick.onTrackballMove.add(function(a24,a32) {
			f5(a15,a24,a32);
		});
	}
	,__onWindowClose: function(window) {
		this.onWindowClose(window);
		HxOverrides.remove(this.__windows,window);
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.modules = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.registerModule(this);
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		module.registerModule(this);
		this.modules.push(module);
		if(this.__renderers.length > 0) {
			var _g = 0;
			var _g1 = this.__renderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				module.addRenderer(renderer);
			}
		}
		if(this.__windows.length > 0) {
			var _g2 = 0;
			var _g11 = this.__windows;
			while(_g2 < _g11.length) {
				var $window = _g11[_g2];
				++_g2;
				module.addWindow($window);
			}
		}
		module.setPreloader(this.__preloader);
	}
	,addRenderer: function(renderer) {
		lime_app_Module.prototype.addRenderer.call(this,renderer);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addRenderer(renderer);
		}
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new lime_ui_Window(_g1[0]));
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.setPreloader(this.__preloader);
				var _g = 0;
				var _g11 = this.modules;
				while(_g < _g11.length) {
					++_g;
					this.setPreloader(this.__preloader);
				}
			}
		}
	}
	,createWindow: function(window) {
		lime_app_Module.prototype.addWindow.call(this,window);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addWindow(window);
		}
		if(window.renderer == null) {
			this.addRenderer(new lime_graphics_Renderer(window));
		}
		window.create(this);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onModuleExit: function(code) {
		this.backend.exit();
	}
	,onWindowClose: function(window) {
		this.removeWindow(window);
	}
	,removeModule: function(module) {
		if(module != null) {
			module.unregisterModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.__windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(window.renderer != null) {
				this.removeRenderer(window.renderer);
			}
			if(this.__windows[0] == window) {
				this.window = null;
			}
		}
	}
	,setPreloader: function(preloader) {
		lime_app_Module.prototype.setPreloader.call(this,preloader);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.setPreloader(preloader);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_renderer: function() {
		return this.__renderers[0];
	}
	,get_renderers: function() {
		return this.__renderers;
	}
	,get_window: function() {
		return this.__windows[0];
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_renderers:"get_renderers",get_renderer:"get_renderer",get_preloader:"get_preloader",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "Future.hx", lineNumber : 157, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Preloader = function() {
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.libraries = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,libraries: null
	,loadedLibraries: null
	,loadedStage: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,create: function(config) {
	}
	,load: function() {
		var _gthis = this;
		this.loadedLibraries = -1;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			library.load().onComplete(function(_) {
				_gthis.loadedLibraries++;
				_gthis.updateProgress();
			});
		}
		this.loadedLibraries++;
		this.updateProgress();
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		this.update(this.loadedLibraries,this.libraries.length);
		if(this.loadedLibraries == this.libraries.length) {
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = ["lime","app","_Event_Dynamic_Void"];
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = ["lime","app","_Event_ofEvents_T_Void"];
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_audio_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_audio_openal_ALC.resumeDevice(device);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path]});
	return audioBuffer;
};
lime_audio_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths});
	return audioBuffer;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [url]});
	audioBuffer.__srcHowl.on("load",function() {
		handler(audioBuffer);
	});
	audioBuffer.__srcHowl.on("loaderror",function() {
		handler(null);
	});
	audioBuffer.__srcHowl.load();
};
lime_audio_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_audio_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function() {
				promise.error(null);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_audio_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_audio_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_audio_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcFMODSound: null
	,__srcHowl: null
	,__srcSound: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_audio_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
			}
		} else {
			lime_audio_AudioManager.context = context;
		}
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				alc.resumeDevice(alc.getContextsDevice(currentContext));
				alc.processContext(currentContext);
			}
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				alc.suspendContext(currentContext);
				alc.pauseDevice(alc.getContextsDevice(currentContext));
			}
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.backend = new lime__$backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,backend: null
	,dispose: function() {
		this.backend.dispose();
	}
	,init: function() {
		this.backend.init();
	}
	,play: function() {
		this.backend.play();
	}
	,pause: function() {
		this.backend.pause();
	}
	,stop: function() {
		this.backend.stop();
	}
	,get_currentTime: function() {
		return this.backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.backend.getGain();
	}
	,set_gain: function(value) {
		return this.backend.setGain(value);
	}
	,get_length: function() {
		return this.backend.getLength();
	}
	,set_length: function(value) {
		return this.backend.setLength(value);
	}
	,get_loops: function() {
		return this.backend.getLoops();
	}
	,set_loops: function(value) {
		return this.backend.setLoops(value);
	}
	,get_position: function() {
		return this.backend.getPosition();
	}
	,set_position: function(value) {
		return this.backend.setPosition(value);
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
			return;
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
			return;
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
			return;
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return null;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return null;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	switch(lime_audio_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALBuffer.ALBuffer_Impl_"] = lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = ["lime","audio","openal","_ALBuffer","ALBuffer_Impl_"];
lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	switch(lime_audio_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.pauseDevice = function(device) {
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.resumeDevice = function(device) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALSource.ALSource_Impl_"] = lime_audio_openal__$ALSource_ALSource_$Impl_$;
lime_audio_openal__$ALSource_ALSource_$Impl_$.__name__ = ["lime","audio","openal","_ALSource","ALSource_Impl_"];
lime_audio_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) {
			farPlane = 1.0;
		}
		if(nearPlane == null) {
			nearPlane = 0.0;
		}
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.__renderers[0] != null) {
			var _g = lime_app_Application.current.__renderers[0].context;
			var tmp;
			switch(_g[1]) {
			case 1:case 2:
				tmp = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				tmp = lime_graphics_ImageType.FLASH;
				break;
			default:
				tmp = lime_graphics_ImageType.DATA;
			}
			this.type = tmp;
		} else {
			this.type = lime_graphics_ImageType.DATA;
		}
	} else {
		this.type = type;
	}
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				this.buffer = new lime_graphics_ImageBuffer(elements != null?new Uint8Array(elements):null,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromBase64(base64,type,function(image) {
		promise.complete(image);
	});
	return promise.future;
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromBytes(bytes,function(image) {
		promise.complete(image);
	});
	return promise.future;
};
lime_graphics_Image.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromFile(path,function(image) {
		promise.complete(image);
	},function() {
		promise.error("");
	});
	return promise.future;
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	switch(bytes.length % 3) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes.b[0] == 255) {
		return bytes.b[1] == 216;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		if(b == 55 || b == 57) {
			return bytes.b[5] == 97;
		} else {
			return false;
		}
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this) {
			sourceImage = this.clone();
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			format = "png";
		}
		switch(format) {
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		case "jpeg":case "jpg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "png":
			return lime_graphics_format_PNG.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return bgra;
				default:
					var this3 = 0;
					var rgba1 = this3;
					rgba1 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return bgra;
				default:
					var this3 = 0;
					var rgba1 = this3;
					rgba1 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytes,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytes,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb1 = this2;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb2 = this3;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var this4 = 0;
				var argb3 = this4;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >>> 24 & 255 & 255) << 16 | (rgba2 >>> 16 & 255 & 255) << 8 | rgba2 >>> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var this5 = 0;
					var argb4 = this5;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >>> 8 & 255 & 255) << 16 | (bgra1 >>> 16 & 255 & 255) << 8 | bgra1 >>> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var this6 = 0;
					var argb5 = this6;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >>> 24 & 255 & 255) << 16 | (rgba3 >>> 16 & 255 & 255) << 8 | rgba3 >>> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		image.addEventListener("load",function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		},false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			switch(this.type[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type[1]) {
			case 0:case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null?0:format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			buffer.data = elements != null?new Uint8Array(elements):null;
			var view = this.data;
			buffer.data.set(view != null?new Uint8Array(view):null);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			buffer.__srcImageData.data.set(new Uint8ClampedArray(this.__srcImageData.data));
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app__$Event_$Void_$Void();
	this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app__$Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,readPixels: function(rect) {
		return this.backend.readPixels(rect);
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = ["lime","graphics","cairo","CairoGlyph"];
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime_graphics_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type[1]) {
		case 0:
			pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		position = 1;
		data.b[0] = 66;
		position = 2;
		data.b[1] = 77;
		data.setInt32(2,data.length);
		position = 6;
		data.setUInt16(6,0);
		position = 8;
		data.setUInt16(8,0);
		position = 10;
		data.setInt32(10,fileHeaderLength + infoHeaderLength);
		position = 14;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB?24:32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD?3:0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			++_g;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type[1]) {
		case 0:
			var _g1 = 0;
			var _g2 = image.height;
			while(_g1 < _g2) {
				readPosition = (image.height - 1 - _g1++) * 4 * image.width;
				var _g3 = 0;
				var _g21 = image.width;
				while(_g3 < _g21) {
					++_g3;
					++readPosition;
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g31 = 0;
				var _g22 = image.width * 3 % 4;
				while(_g31 < _g22) {
					++_g31;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g11 = 0;
			var _g4 = image.height;
			while(_g11 < _g4) {
				readPosition = (image.height - 1 - _g11++) * 4 * image.width;
				var _g32 = 0;
				var _g23 = image.width;
				while(_g32 < _g23) {
					++_g32;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g12 = 0;
			var _g5 = image.height;
			while(_g12 < _g5) {
				readPosition = (image.height - 1 - _g12++) * 4 * image.width;
				var _g33 = 0;
				var _g24 = image.width;
				while(_g33 < _g24) {
					++_g33;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_opengl_ExtensionPackedDepthStencil = function() { };
$hxClasses["lime.graphics.opengl.ExtensionPackedDepthStencil"] = lime_graphics_opengl_ExtensionPackedDepthStencil;
lime_graphics_opengl_ExtensionPackedDepthStencil.__name__ = ["lime","graphics","opengl","ExtensionPackedDepthStencil"];
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.__currentProgram = program;
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			buffer.data = elements != null?new Uint8Array(elements):null;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		buffer.data = elements != null?new Uint8Array(elements):null;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytes,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytes,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,clear);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			offset = row + _g3++ * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				++_g3;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) {
							sourcePixel = 0;
						}
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = sourcePixel >>> 24 & 255;
					destData[destPosition + 1] = sourcePixel >>> 16 & 255;
					destData[destPosition + 2] = sourcePixel >>> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >>> 24 & 255;
					destData[destPosition + 2] = sourcePixel >>> 16 & 255;
					destData[destPosition + 3] = sourcePixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = sourcePixel >>> 8 & 255;
					destData[destPosition + 1] = sourcePixel >>> 16 & 255;
					destData[destPosition + 2] = sourcePixel >>> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					++_g31;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >>> 24 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >>> 24 & 255;
						destData[destPosition + 2] = destPixel >>> 16 & 255;
						destData[destPosition + 3] = destPixel >>> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >>> 8 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					++_g32;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							alphaPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >>> 24 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >>> 24 & 255;
						destData[destPosition + 2] = destPixel >>> 16 & 255;
						destData[destPosition + 3] = destPixel >>> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >>> 8 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var offset = row + _g3++ * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				switch(format1) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) {
		findColor = true;
	}
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		break;
	case 2:
		var bgra = color;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba2;
		var bgra1 = mask;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba3;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			pixel = image.getPixel32(x,_g3++,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		ix = image.width - 1 - _g11++;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			pixel = image.getPixel32(ix,_g31++,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			pixel = image.getPixel32(_g32++,y,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		iy = image.height - 1 - _g13++;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			pixel = image.getPixel32(_g33++,iy,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer((rect.width * rect.height | 0) * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		position = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			destPixel = ((((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0) & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | ((((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0) & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | ((((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0) & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | (((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0) & 255;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var newBuffer = new lime_graphics_ImageBuffer(elements != null?new Uint8Array(elements):null,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g1 = 0;
	while(_g1 < newHeight) {
		var y = _g1++;
		var _g3 = 0;
		while(_g3 < newWidth) {
			var x = _g3++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) {
				sourceIndexX = sourceIndex + 4;
			} else {
				sourceIndexX = sourceIndex;
			}
			if(sourceY < imageHeight - 1) {
				sourceIndexY = sourceIndex + imageWidth * 4;
			} else {
				sourceIndexY = sourceIndex;
			}
			if(sourceIndexX != sourceIndex) {
				sourceIndexXY = sourceIndexY + 4;
			} else {
				sourceIndexXY = sourceIndexY;
			}
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var newData = elements != null?new Uint8Array(elements):null;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	while(_g2 < length) {
		index = _g2++ * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var this3 = 0;
	var source = this3;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | source & 255 & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format2 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format2) {
	case 0:
		data1[offset1] = pixel >>> 24 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >>> 24 & 255;
		data1[offset1 + 2] = pixel >>> 16 & 255;
		data1[offset1 + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >>> 8 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format1) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var dataPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var this5 = 0;
		var rgba4 = this5;
		rgba4 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var this6 = 0;
		var rgba5 = this6;
		rgba5 = (bgra2 >>> 8 & 255 & 255) << 24 | (bgra2 >>> 16 & 255 & 255) << 16 | (bgra2 >>> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1;
			var tmp2;
			tmp1 = pixelMask >>> 24 & 255;
			tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					value = 1;
				} else {
					value = -1;
				}
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						value = 1;
					} else {
						value = -1;
					}
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
							value = 1;
						} else {
							value = -1;
						}
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						if(tmp1 != tmp2) {
							if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
								value = 1;
							} else {
								value = -1;
							}
						} else {
							value = 0;
						}
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				if(value != 0) {
					test = value == -1;
				} else {
					test = true;
				}
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				if(value != 0) {
					test = value == 1;
				} else {
					test = true;
				}
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >>> 24 & 255;
	tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,image: null
	,offset: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		this1 = array != null?new Float32Array(array):null;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this1 != null?new Float32Array(this1):null);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = new Uint8Array(256);
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		this1 = array != null?new Float32Array(array):null;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,pivotPoint.x,pivotPoint.y,pivotPoint.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1 != null?new Float32Array(this1):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var l = array.length - index;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		this1[c] = array[c + index];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		array[c + index] = this1[c];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,-1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,-1,0);
	}
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l1 != 0) {
		vup.x /= l1;
		vup.y /= l1;
		vup.z /= l1;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l2 != 0) {
			vup.x /= l2;
			vup.y /= l2;
			vup.z /= l2;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	var l3 = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l3 != 0) {
		right.x /= l3;
		right.y /= l3;
		right.z /= l3;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,pivotPoint.x,pivotPoint.y,pivotPoint.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis = this1 != null?new Float32Array(this1):null;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
		if(x1 <= x0) {
			return new lime_math_Rectangle();
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
		if(y1 <= y0) {
			return new lime_math_Rectangle();
		}
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		if((this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right()) <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		return (this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom()) > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x?toUnion.x:this.x;
		var x1 = this.get_right() < toUnion.get_right()?toUnion.get_right():this.get_right();
		var y0 = this.y > toUnion.y?toUnion.y:this.y;
		return new lime_math_Rectangle(x0,y0,x1 - x0,(this.get_bottom() < toUnion.get_bottom()?toUnion.get_bottom():this.get_bottom()) - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
		}
		if(this.y > y) {
			this.y = y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l1 != 0) {
		b0.x /= l1;
		b0.y /= l1;
		b0.z /= l1;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.backend = new lime__$backend_html5_HTML5HTTPRequest();
	this.backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,backend: null
	,cancel: function() {
		this.backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	canceled: null
	,completed: null
	,doWork: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,__runMessage: null
	,cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.completed = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		this.completed = true;
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) {
			this.onProgress.dispatch(message);
		}
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	return null;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	lime_system_Clipboard._text = value;
	if(window.document.queryCommandEnabled("copy")) {
		window.document.execCommand("copy");
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_JNI = function() { };
$hxClasses["lime.system.JNI"] = lime_system_JNI;
lime_system_JNI.__name__ = ["lime","system","JNI"];
lime_system_JNI.callMember = function(method,jobject,a) {
	switch(a.length) {
	case 0:
		return method(jobject);
	case 1:
		return method(jobject,a[0]);
	case 2:
		return method(jobject,a[0],a[1]);
	case 3:
		return method(jobject,a[0],a[1],a[2]);
	case 4:
		return method(jobject,a[0],a[1],a[2],a[3]);
	case 5:
		return method(jobject,a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.callStatic = function(method,a) {
	switch(a.length) {
	case 0:
		return method();
	case 1:
		return method(a[0]);
	case 2:
		return method(a[0],a[1]);
	case 3:
		return method(a[0],a[1],a[2]);
	case 4:
		return method(a[0],a[1],a[2],a[3]);
	case 5:
		return method(a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.createMemberField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createMemberMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) {
		quietFail = false;
	}
	if(useArray == null) {
		useArray = false;
	}
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) {
		quietFail = false;
	}
	if(useArray == null) {
		useArray = false;
	}
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.getEnv = function() {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.init = function() {
	if(!lime_system_JNI.initialized) {
		lime_system_JNI.initialized = true;
	}
};
lime_system_JNI.onCallback = function(object,method,args) {
	var field = Reflect.field(object,method);
	if(field != null) {
		return field.apply(object,args);
	}
	haxe_Log.trace("onCallback - unknown field " + Std.string(method),{ fileName : "JNI.hx", lineNumber : 182, className : "lime.system.JNI", methodName : "onCallback"});
	return null;
};
lime_system_JNI.postUICallback = function(callback) {
	callback();
};
var lime_system_JNIMemberField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIMemberField"] = lime_system_JNIMemberField;
lime_system_JNIMemberField.__name__ = ["lime","system","JNIMemberField"];
lime_system_JNIMemberField.prototype = {
	field: null
	,get: function(jobject) {
		return null;
	}
	,set: function(jobject,value) {
		return value;
	}
	,__class__: lime_system_JNIMemberField
};
var lime_system_JNIStaticField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIStaticField"] = lime_system_JNIStaticField;
lime_system_JNIStaticField.__name__ = ["lime","system","JNIStaticField"];
lime_system_JNIStaticField.prototype = {
	field: null
	,get: function() {
		return null;
	}
	,set: function(value) {
		return value;
	}
	,__class__: lime_system_JNIStaticField
};
var lime_system_JNIMethod = function(method) {
	this.method = method;
};
$hxClasses["lime.system.JNIMethod"] = lime_system_JNIMethod;
lime_system_JNIMethod.__name__ = ["lime","system","JNIMethod"];
lime_system_JNIMethod.prototype = {
	method: null
	,callMember: function(args) {
		return null;
	}
	,callStatic: function(args) {
		return null;
	}
	,getMemberMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callMember);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callMember));
		}
	}
	,getStaticMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callStatic);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callStatic));
		}
	}
	,__class__: lime_system_JNIMethod
};
var lime_system__$Locale_Locale_$Impl_$ = {};
$hxClasses["lime.system._Locale.Locale_Impl_"] = lime_system__$Locale_Locale_$Impl_$;
lime_system__$Locale_Locale_$Impl_$.__name__ = ["lime","system","_Locale","Locale_Impl_"];
lime_system__$Locale_Locale_$Impl_$.__properties__ = {get_region:"get_region",get_language:"get_language",get_systemLocale:"get_systemLocale",set_currentLocale:"set_currentLocale",get_currentLocale:"get_currentLocale"}
lime_system__$Locale_Locale_$Impl_$._new = function(value) {
	return value;
};
lime_system__$Locale_Locale_$Impl_$.equals = function(a,b) {
	var language = lime_system__$Locale_Locale_$Impl_$.get_language(a);
	var region = lime_system__$Locale_Locale_$Impl_$.get_region(a);
	var language2 = lime_system__$Locale_Locale_$Impl_$.get_language(b);
	var region2 = lime_system__$Locale_Locale_$Impl_$.get_region(b);
	var languageMatch = language == language2;
	var regionMatch = region == region2;
	if(!languageMatch && language != null && language2 != null) {
		languageMatch = language.toLowerCase() == language2.toLowerCase();
	}
	if(!regionMatch && region != null && region2 != null) {
		regionMatch = region.toLowerCase() == region2.toLowerCase();
	}
	if(languageMatch) {
		return regionMatch;
	} else {
		return false;
	}
};
lime_system__$Locale_Locale_$Impl_$.__init = function() {
	if(lime_system__$Locale_Locale_$Impl_$.__systemLocale == null) {
		var locale = null;
		locale = navigator.language;
		if(locale != null) {
			lime_system__$Locale_Locale_$Impl_$.__systemLocale = locale;
		} else {
			lime_system__$Locale_Locale_$Impl_$.__systemLocale = "en-US";
		}
		lime_system__$Locale_Locale_$Impl_$.set_currentLocale(lime_system__$Locale_Locale_$Impl_$.__systemLocale);
	}
};
lime_system__$Locale_Locale_$Impl_$.get_language = function(this1) {
	if(this1 != null) {
		var index = this1.indexOf("_");
		if(index > -1) {
			return this1.substring(0,index);
		}
		index = this1.indexOf("-");
		if(index > -1) {
			return this1.substring(0,index);
		}
	}
	return this1;
};
lime_system__$Locale_Locale_$Impl_$.get_region = function(this1) {
	if(this1 != null) {
		var underscoreIndex = this1.indexOf("_");
		var dotIndex = this1.indexOf(".");
		var dashIndex = this1.indexOf("-");
		if(underscoreIndex > -1) {
			if(dotIndex > -1) {
				return this1.substring(underscoreIndex + 1,dotIndex);
			} else {
				return this1.substring(underscoreIndex + 1);
			}
		} else if(dashIndex > -1) {
			if(dotIndex > -1) {
				return this1.substring(dashIndex + 1,dotIndex);
			} else {
				return this1.substring(dashIndex + 1);
			}
		}
	}
	return null;
};
lime_system__$Locale_Locale_$Impl_$.get_currentLocale = function() {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.currentLocale;
};
lime_system__$Locale_Locale_$Impl_$.set_currentLocale = function(value) {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.currentLocale = value;
};
lime_system__$Locale_Locale_$Impl_$.get_systemLocale = function() {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.__systemLocale;
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return lime_system_System.__getDirectory(0);
};
lime_system_System.get_applicationStorageDirectory = function() {
	return lime_system_System.__getDirectory(1);
};
lime_system_System.get_desktopDirectory = function() {
	return lime_system_System.__getDirectory(2);
};
lime_system_System.get_documentsDirectory = function() {
	return lime_system_System.__getDirectory(3);
};
lime_system_System.get_fontsDirectory = function() {
	return lime_system_System.__getDirectory(4);
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return lime_system_System.__getDirectory(5);
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	return lime_app_Future.withValue(lime_text_Font.fromFile(path));
};
lime_text_Font.loadFromName = function(path) {
	return new lime_text_Font().__loadFromName(path);
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var font = name;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) {
			window.document.fonts.load("1em '" + font + "'").then(function(_) {
				promise.complete(_gthis);
			});
		} else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					if(interval != null) {
						window.clearInterval(interval);
					}
					node.parentNode.removeChild(node);
					node = null;
					promise.complete(_gthis);
					return true;
				}
				return false;
			};
			if(!checkFont()) {
				interval = window.setInterval(checkFont,50);
			}
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 ^= 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_name: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_name: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_numAxes: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].axes.length;
	}
	,get_numButtons: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435451;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435447;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435453;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435454;
	}
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268434687;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268427263;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435263;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268432383;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268431359;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435452;
	}
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onCreate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) {
			this.__width = config.width;
		}
		if(Object.prototype.hasOwnProperty.call(config,"height")) {
			this.__height = config.height;
		}
		if(Object.prototype.hasOwnProperty.call(config,"x")) {
			this.__x = config.x;
		}
		if(Object.prototype.hasOwnProperty.call(config,"y")) {
			this.__y = config.y;
		}
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) {
			this.__fullscreen = config.fullscreen;
		}
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) {
			this.__borderless = config.borderless;
		}
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) {
			this.__resizable = config.resizable;
		}
		if(Object.prototype.hasOwnProperty.call(config,"title")) {
			this.__title = config.title;
		}
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) {
			this.renderer.create();
		}
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.backend.setBorderless(value);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 732095;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null?_this1.existsReserved(id):_this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			var _this = this.font;
			if(__map_reserved[id] != null) {
				_this.setReserved(id,asset);
			} else {
				_this.h[id] = asset;
			}
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			var _this1 = this.image;
			var value = asset;
			if(__map_reserved[id] != null) {
				_this1.setReserved(id,value);
			} else {
				_this1.h[id] = value;
			}
			break;
		case "MUSIC":case "SOUND":
			if(!js_Boot.__instanceof(asset,lime_audio_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			var _this2 = this.audio;
			var value1 = asset;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,value1);
			} else {
				_this2.h[id] = value1;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.audio.remove(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.font.remove(key1);
				}
			}
			var keys2 = this.image.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.image.remove(key2);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 1;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length));
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path) {
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
lime_utils_AssetManifest.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes));
};
lime_utils_AssetManifest.loadFromFile = function(path) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes));
	});
};
lime_utils_AssetManifest.parse = function(data) {
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(manifestData.version == 1) {
		manifest.name = manifestData.name;
		manifest.libraryType = manifestData.libraryType;
		manifest.libraryArgs = manifestData.libraryArgs;
		manifest.assets = haxe_Unserializer.run(manifestData.assets);
	}
	return manifest;
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var _this = lime_utils_Assets.cache.font;
			var font = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var _this1 = lime_utils_Assets.cache.image;
			var image = __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = lime_utils_Assets.cache.audio;
			var audio = __map_reserved[id] != null?_this2.getReserved(id):_this2.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		}
	}
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.info(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 145, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.info("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 151, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + symbol_libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 157, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
};
lime_utils_Assets.getPath = function(id) {
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.info("There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 253, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + symbol_libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 259, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var _this = lime_utils_Assets.libraries;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) {
		var libraryItems = tmp.next().list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var _this = lime_utils_Assets.cache.font;
			var font = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var _this1 = lime_utils_Assets.cache.image;
			var image = __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = lime_utils_Assets.cache.audio;
			var audio = __map_reserved[id] != null?_this2.getReserved(id):_this2.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		}
	}
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("[Assets] There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError("[Assets] There is no asset library named \"" + symbol_libraryName + "\"");
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(name) {
	var promise = new lime_app_Promise();
	var data = lime_utils_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var library = lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.parse(data));
		var _this = lime_utils_Assets.libraries;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,library);
		} else {
			_this.h[name] = library;
		}
		library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else {
		promise.error("[Assets] There is no asset library named \"" + name + "\"");
	}
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	var promise = new lime_app_Promise();
	var colonIndex = id.indexOf(":");
	var symbol_libraryName = id.substring(0,colonIndex);
	var symbol_symbolName = id.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,"TEXT")) {
			promise.completeWith(symbol_library.loadText(symbol_symbolName));
		} else {
			promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + symbol_libraryName + "\"");
	}
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = ["lime","utils","_Assets","LibrarySymbol"];
lime_utils__$Assets_LibrarySymbol.prototype = {
	libraryName: null
	,symbolName: null
	,library: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	return new haxe_io_Bytes(bytesData);
};
lime_utils__$Bytes_Bytes_$Impl_$.alloc = function(length) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes));
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	return new lime_net__$HTTPRequest_$lime_$utils_$Bytes().load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_get_data_pointer = function(data) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_read_file = function(path,bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_read_file(path,bytes);
};
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) {
		var message;
		switch(type) {
		case 35632:
			message = "Error compiling fragment shader";
			break;
		case 35633:
			message = "Error compiling vertex shader";
			break;
		default:
			message = "Error compiling unknown shader type";
		}
		message += "\n" + lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 35, className : "lime.utils.GLUtils", methodName : "compileShader"});
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) {
		lime_utils_Log.error("Unable to initialize the shader program",{ fileName : "GLUtils.hx", lineNumber : 56, className : "lime.utils.GLUtils", methodName : "createProgram"});
	}
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		console.log("[" + info.className + "] ERROR: " + message);
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.log("[" + info.className + "] WARNING: " + message);
	}
};
var lime_utils__$Log_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._Log.LogLevel_Impl_"] = lime_utils__$Log_LogLevel_$Impl_$;
lime_utils__$Log_LogLevel_$Impl_$.__name__ = ["lime","utils","_Log","LogLevel_Impl_"];
lime_utils__$Log_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$Log_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$Log_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$Log_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_compress_Deflate = function() { };
$hxClasses["lime.utils.compress.Deflate"] = lime_utils_compress_Deflate;
lime_utils_compress_Deflate.__name__ = ["lime","utils","compress","Deflate"];
lime_utils_compress_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime_utils_compress_LZMA = function() { };
$hxClasses["lime.utils.compress.LZMA"] = lime_utils_compress_LZMA;
lime_utils_compress_LZMA.__name__ = ["lime","utils","compress","LZMA"];
lime_utils_compress_LZMA.compress = function(bytes) {
	return null;
};
lime_utils_compress_LZMA.decompress = function(bytes) {
	return null;
};
var lime_utils_compress_Zlib = function() { };
$hxClasses["lime.utils.compress.Zlib"] = lime_utils_compress_Zlib;
lime_utils_compress_Zlib.__name__ = ["lime","utils","compress","Zlib"];
lime_utils_compress_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var modernversion_Roomstyle = $hxClasses["modernversion.Roomstyle"] = { __ename__ : ["modernversion","Roomstyle"], __constructs__ : ["intro","high","robot","executive","shopkeeper","rooftop","error","outside"] };
modernversion_Roomstyle.intro = ["intro",0];
modernversion_Roomstyle.intro.toString = $estr;
modernversion_Roomstyle.intro.__enum__ = modernversion_Roomstyle;
modernversion_Roomstyle.high = ["high",1];
modernversion_Roomstyle.high.toString = $estr;
modernversion_Roomstyle.high.__enum__ = modernversion_Roomstyle;
modernversion_Roomstyle.robot = ["robot",2];
modernversion_Roomstyle.robot.toString = $estr;
modernversion_Roomstyle.robot.__enum__ = modernversion_Roomstyle;
modernversion_Roomstyle.executive = ["executive",3];
modernversion_Roomstyle.executive.toString = $estr;
modernversion_Roomstyle.executive.__enum__ = modernversion_Roomstyle;
modernversion_Roomstyle.shopkeeper = ["shopkeeper",4];
modernversion_Roomstyle.shopkeeper.toString = $estr;
modernversion_Roomstyle.shopkeeper.__enum__ = modernversion_Roomstyle;
modernversion_Roomstyle.rooftop = ["rooftop",5];
modernversion_Roomstyle.rooftop.toString = $estr;
modernversion_Roomstyle.rooftop.__enum__ = modernversion_Roomstyle;
modernversion_Roomstyle.error = ["error",6];
modernversion_Roomstyle.error.toString = $estr;
modernversion_Roomstyle.error.__enum__ = modernversion_Roomstyle;
modernversion_Roomstyle.outside = ["outside",7];
modernversion_Roomstyle.outside.toString = $estr;
modernversion_Roomstyle.outside.__enum__ = modernversion_Roomstyle;
var modernversion_AIDirector = function() { };
$hxClasses["modernversion.AIDirector"] = modernversion_AIDirector;
modernversion_AIDirector.__name__ = ["modernversion","AIDirector"];
modernversion_AIDirector.restart = function() {
	modernversion_AIDirector.itemsgiven_intro = 0;
	modernversion_AIDirector.itemsgiven_high = 0;
	modernversion_AIDirector.donethedoorjoke = false;
	modernversion_AIDirector.placedfirstshopkeeper = false;
	modernversion_AIDirector.placedsecondshopkeeper = false;
	modernversion_AIDirector.placedthirdshopkeeper = false;
	modernversion_AIDirector.startingitems = [];
	modernversion_Modern.keygemratelevel = 0;
	modernversion_Modern.newrecord = false;
	modernversion_AIDirector.outside = false;
	modernversion_AIDirector.glitchmode = false;
	modernversion_AIDirector.onthisrun_keys = 0;
	modernversion_AIDirector.onthisrun_keysused = 0;
	modernversion_AIDirector.onthisrun_gems = 0;
	modernversion_AIDirector.onthisrun_items = 0;
	modernversion_AIDirector.onthisrun_treasurelist = [];
	modernversion_AIDirector.givestartingitems();
	modernversion_AIDirector.floor = 1;
};
modernversion_AIDirector.designfloor = function() {
	modernversion_AIDirector.roomlit = false;
	modernversion_AIDirector.darkroom = false;
	modernversion_AIDirector.blueprint = [];
	modernversion_AIDirector.enemylist = [];
	modernversion_AIDirector.weaponlist = [];
	modernversion_AIDirector.itemlist = [];
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].charcode_lit = HxOverrides.cca("-",0);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.ENTRANCE].charcode_fog = HxOverrides.cca("-",0);
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.STAIRS].charcode_fog = 44;
	modernversion_AIDirector.reinforcements = ["guard"];
	modernversion_AIDirector.reinforcementtime = [60];
	modernversion_AIDirector.reinforcementdelay = 15;
	modernversion_AIDirector.gems = 0;
	modernversion_AIDirector.keys = 0;
	modernversion_AIDirector.lockedexit = false;
	modernversion_AIDirector.extralockeddoors = 0;
	if(modernversion_AIDirector.floor > modernversion_Modern.highestfloor) {
		modernversion_Modern.highestfloor = modernversion_AIDirector.floor;
		modernversion_Modern.newrecord = true;
	}
	switch(modernversion_AIDirector.floor) {
	case 1:
		modernversion_AIDirector.style = modernversion_Roomstyle.intro;
		modernversion_AIDirector.roomlit = true;
		modernversion_AIDirector.gems = 1;
		modernversion_AIDirector.keys = 1;
		modernversion_AIDirector.lockedexit = true;
		modernversion_AIDirector.blueprint = ["intro_firstfloor"];
		modernversion_AIDirector.reinforcements = ["guard"];
		modernversion_AIDirector.reinforcementtime = [60];
		modernversion_AIDirector.enemylist = ["guard","camera"];
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("guard","dog","camera"));
		}
		modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("lightbulb","signal jammer","banana"));
		break;
	case 2:case 3:case 4:
		modernversion_AIDirector.style = modernversion_Roomstyle.intro;
		modernversion_AIDirector.blueprint = ["intro_small","intro_small2","intro_small3"];
		modernversion_AIDirector.gems = 1;
		if(terrylib_Rand.prandom() < 0.5) {
			modernversion_AIDirector.keys = 1;
			modernversion_AIDirector.lockedexit = true;
		} else {
			modernversion_AIDirector.keys = 0;
			modernversion_AIDirector.lockedexit = false;
		}
		modernversion_AIDirector.reinforcements = ["guard"];
		modernversion_AIDirector.reinforcementtime = [60];
		modernversion_AIDirector.enemylist = ["guard","guard","camera"];
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("guard","dog","camera"));
		}
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("guard","dog","camera"));
		} else if(terrylib_Rand.prandom() < 0.05) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("robot","camera"));
		}
		if(modernversion_AIDirector.floor == 4 && gamecontrol_Game.health <= 1) {
			modernversion_AIDirector.itemlist.push("first aid kit");
		}
		if(modernversion_AIDirector.itemsgiven_intro == 0 && modernversion_AIDirector.floor == 4) {
			modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("pistol","leaf blower","banana","cardboard box","bomb","first aid kit","signal jammer","lightbulb","drill","skateboard"));
			modernversion_AIDirector.itemsgiven_intro++;
		} else if(modernversion_AIDirector.itemsgiven_intro < 2) {
			if(terrylib_Rand.prandom() < 0.05) {
				modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("matchstick","sword","time stopper","skateboard","teleporter"));
				modernversion_AIDirector.itemsgiven_intro++;
			} else if(terrylib_Rand.prandom() < 0.2) {
				modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("pistol","leaf blower","cardboard box","banana","first aid kit","signal jammer","lightbulb","drill","drill","bomb"));
				modernversion_AIDirector.itemsgiven_intro++;
			}
		}
		if(modernversion_AIDirector.itemsgiven_intro == 0 && modernversion_AIDirector.floor == 2) {
			if(terrylib_Rand.prandom() < 0.2) {
				if(terrylib_Rand.prandom() < 0.5) {
					modernversion_AIDirector.itemlist.push("pistol");
					modernversion_AIDirector.itemsgiven_intro += 2;
				} else {
					modernversion_AIDirector.itemlist.push("drill");
					modernversion_AIDirector.itemsgiven_intro += 1;
				}
			}
		}
		break;
	case 5:
		modernversion_AIDirector.blueprint = ["intro_topfloor"];
		modernversion_AIDirector.style = modernversion_Roomstyle.intro;
		modernversion_AIDirector.reinforcements = ["guard","guard","robot"];
		modernversion_AIDirector.reinforcementtime = [60,60,60];
		break;
	case 6:case 7:case 8:case 9:
		if(modernversion_AIDirector.floor == 6 || modernversion_AIDirector.floor == 7) {
			modernversion_AIDirector.blueprint = ["high_medium1","high_medium2","high_medium3"];
		} else {
			modernversion_AIDirector.blueprint = ["high_big3"];
		}
		modernversion_AIDirector.style = modernversion_Roomstyle.high;
		modernversion_AIDirector.gems = 1;
		modernversion_AIDirector.keys = 1;
		modernversion_AIDirector.lockedexit = true;
		modernversion_AIDirector.reinforcements = ["guard","laserguard"];
		modernversion_AIDirector.reinforcementtime = [50,60];
		modernversion_AIDirector.enemylist = ["guard","guard","lasercamera"];
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("guard","dog","camera"));
		}
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("laserguard","lasercamera","laserguard"));
		} else if(terrylib_Rand.prandom() < 0.05) {
			modernversion_AIDirector.enemylist.push("robot");
		}
		if(modernversion_AIDirector.itemsgiven_high < 2) {
			if(terrylib_Rand.prandom() < 0.05) {
				modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("matchstick","sword","time stopper"));
				modernversion_AIDirector.itemsgiven_high++;
			} else if(terrylib_Rand.prandom() < 0.2) {
				if(modernversion_AIDirector.floor == 9 && gamecontrol_Game.health <= 1) {
					modernversion_AIDirector.itemlist.push("first aid kit");
				} else {
					modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("pistol","leaf blower","cardboard box","banana","first aid kit","signal jammer","lightbulb","drill","drill","bomb"));
				}
				modernversion_AIDirector.itemsgiven_high++;
			}
		}
		if(modernversion_AIDirector.itemsgiven_high == 0 && modernversion_AIDirector.floor == 6) {
			if(terrylib_Rand.prandom() < 0.2) {
				if(terrylib_Rand.prandom() < 0.5) {
					modernversion_AIDirector.itemlist.push("pistol");
					modernversion_AIDirector.itemsgiven_high += 2;
				} else {
					modernversion_AIDirector.itemlist.push("drill");
					modernversion_AIDirector.itemsgiven_high += 1;
				}
			}
		}
		break;
	case 10:
		modernversion_AIDirector.blueprint = ["high_topfloor"];
		modernversion_AIDirector.style = modernversion_Roomstyle.high;
		modernversion_AIDirector.reinforcements = ["robot"];
		modernversion_AIDirector.reinforcementtime = [240];
		break;
	case 11:
		modernversion_AIDirector.blueprint = ["floor11"];
		modernversion_AIDirector.style = modernversion_Roomstyle.shopkeeper;
		modernversion_AIDirector.roomlit = true;
		modernversion_AIDirector.reinforcements = [];
		modernversion_AIDirector.reinforcementtime = [];
		var shopitems = ["pistol","leaf blower","skateboard","banana","first aid kit","first aid kit","signal jammer","lightbulb","drill","teleporter"];
		var _g = 0;
		while(_g < 5) {
			++_g;
			terrylib_Rand.pshuffle(shopitems);
			if(shopitems.length > 0) {
				modernversion_AIDirector.itemlist.push(shopitems.pop());
			}
		}
		break;
	case 12:
		modernversion_AIDirector.style = modernversion_Roomstyle.robot;
		modernversion_AIDirector.roomlit = false;
		modernversion_AIDirector.gems = 1;
		modernversion_AIDirector.keys = 0;
		modernversion_AIDirector.lockedexit = false;
		modernversion_AIDirector.blueprint = ["robot_firstfloor"];
		modernversion_AIDirector.reinforcements = ["rook","robot"];
		modernversion_AIDirector.reinforcementtime = [50,50];
		modernversion_AIDirector.enemylist = ["rook","robot"];
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("lasercamera","camera","guard"));
		}
		if(terrylib_Rand.prandom() < 0.5) {
			modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("skateboard","pistol"));
		} else {
			modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("leaf blower","skateboard","drill","pistol","lightbulb","lightbulb"));
		}
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("lightbulb","signal jammer","sword","banana"));
		}
		break;
	case 13:
		modernversion_AIDirector.style = modernversion_Roomstyle.robot;
		modernversion_AIDirector.roomlit = false;
		modernversion_AIDirector.gems = 1;
		modernversion_AIDirector.keys = 0;
		modernversion_AIDirector.lockedexit = false;
		modernversion_AIDirector.blueprint = ["robot_small"];
		modernversion_AIDirector.reinforcements = ["rook","robot"];
		modernversion_AIDirector.reinforcementtime = [50,50];
		modernversion_AIDirector.enemylist = ["rook","robot","rook"];
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("lasercamera","camera","guard","rook"));
		}
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("leaf blower","skateboard","drill","skateboard","lightbulb","lightbulb"));
		}
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("lightbulb","signal jammer","sword"));
		}
		break;
	case 14:
		modernversion_AIDirector.style = modernversion_Roomstyle.robot;
		modernversion_AIDirector.roomlit = false;
		modernversion_AIDirector.gems = 1;
		modernversion_AIDirector.keys = 0;
		modernversion_AIDirector.lockedexit = false;
		modernversion_AIDirector.blueprint = ["robot_large"];
		modernversion_AIDirector.reinforcements = ["rook","robot"];
		modernversion_AIDirector.reinforcementtime = [50,50];
		modernversion_AIDirector.enemylist = ["rook","robot","rook","laserguard","laserguard","lasercamera","lasercamera"];
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.enemylist.push(terrylib_Rand.ppickstring("lasercamera","camera","lasercamera","rook"));
		}
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("leaf blower","skateboard","drill","skateboard","lightbulb","lightbulb"));
		}
		if(terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.itemlist.push(terrylib_Rand.ppickstring("lightbulb","signal jammer","sword"));
		}
		if(gamecontrol_Game.health <= 1 && terrylib_Rand.prandom() < 0.2) {
			modernversion_AIDirector.itemlist.push("first aid kit");
		}
		break;
	case 15:
		modernversion_AIDirector.blueprint = ["robot_topfloor"];
		modernversion_AIDirector.style = modernversion_Roomstyle.robot;
		modernversion_AIDirector.gems = 2;
		modernversion_AIDirector.keys = 1;
		modernversion_AIDirector.lockedexit = false;
		modernversion_AIDirector.reinforcements = ["terminator"];
		modernversion_AIDirector.reinforcementtime = [220];
		break;
	case 16:
		gamecontrol_Localworld.worldblock[gamecontrol_Localworld.STAIRS].charcode_fog = 43;
		modernversion_AIDirector.roomlit = true;
		modernversion_AIDirector.blueprint = ["rooftop"];
		modernversion_AIDirector.style = modernversion_Roomstyle.rooftop;
		modernversion_AIDirector.gems = 0;
		modernversion_AIDirector.keys = 0;
		modernversion_AIDirector.lockedexit = false;
		modernversion_AIDirector.reinforcements = ["terminator"];
		modernversion_AIDirector.reinforcementtime = [200];
		break;
	default:
		modernversion_AIDirector.style = modernversion_Roomstyle.error;
	}
	if(modernversion_AIDirector.glitchmode) {
		modernversion_AIDirector.style = haxegon_Random.pick([modernversion_Roomstyle.robot,modernversion_Roomstyle.high,modernversion_Roomstyle.shopkeeper,modernversion_Roomstyle.intro,modernversion_Roomstyle.rooftop,modernversion_Roomstyle.error,modernversion_Roomstyle.outside]);
	}
};
modernversion_AIDirector.swaptwononplayerentities = function() {
	modernversion_AIDirector.t1 = haxegon_Random["int"](0,terrylib_Obj.nentity);
	modernversion_AIDirector.t2 = haxegon_Random["int"](0,terrylib_Obj.nentity);
	if(terrylib_Obj.entities[modernversion_AIDirector.t1].active && terrylib_Obj.entities[modernversion_AIDirector.t2].active) {
		if(modernversion_AIDirector.t1 != modernversion_AIDirector.t2) {
			if(terrylib_Obj.entities[modernversion_AIDirector.t1].rule != "player" && terrylib_Obj.entities[modernversion_AIDirector.t2].rule != "player") {
				modernversion_AIDirector.tempx = terrylib_Obj.entities[modernversion_AIDirector.t1].xp;
				modernversion_AIDirector.tempy = terrylib_Obj.entities[modernversion_AIDirector.t1].yp;
				terrylib_Obj.entities[modernversion_AIDirector.t1].xp = terrylib_Obj.entities[modernversion_AIDirector.t2].xp;
				terrylib_Obj.entities[modernversion_AIDirector.t1].yp = terrylib_Obj.entities[modernversion_AIDirector.t2].yp;
				terrylib_Obj.entities[modernversion_AIDirector.t2].xp = modernversion_AIDirector.tempx;
				terrylib_Obj.entities[modernversion_AIDirector.t2].yp = modernversion_AIDirector.tempy;
			}
		}
	}
};
modernversion_AIDirector.swaptwoblocks = function() {
	modernversion_AIDirector.tempx = haxegon_Random["int"](0,terrylib_World.mapwidth - 1);
	modernversion_AIDirector.tempy = haxegon_Random["int"](0,terrylib_World.mapheight - 1);
	modernversion_AIDirector.tempx2 = haxegon_Random["int"](0,terrylib_World.mapwidth - 1);
	modernversion_AIDirector.tempy2 = haxegon_Random["int"](0,terrylib_World.mapheight - 1);
	modernversion_AIDirector.t1 = terrylib_Obj.getplayer();
	if(modernversion_AIDirector.t1 > -1) {
		if(Math.abs(terrylib_Obj.entities[modernversion_AIDirector.t1].xp - modernversion_AIDirector.tempx) > 3 || Math.abs(terrylib_Obj.entities[modernversion_AIDirector.t1].yp - modernversion_AIDirector.tempy) > 3) {
			if(Math.abs(terrylib_Obj.entities[modernversion_AIDirector.t1].xp - modernversion_AIDirector.tempx2) > 3 || Math.abs(terrylib_Obj.entities[modernversion_AIDirector.t1].yp - modernversion_AIDirector.tempy2) > 3) {
				modernversion_AIDirector.t2 = terrylib_World.at(modernversion_AIDirector.tempx,modernversion_AIDirector.tempy);
				terrylib_World.placetile(modernversion_AIDirector.tempx,modernversion_AIDirector.tempy,terrylib_World.at(modernversion_AIDirector.tempx2,modernversion_AIDirector.tempy2));
				terrylib_World.placetile(modernversion_AIDirector.tempx2,modernversion_AIDirector.tempy2,modernversion_AIDirector.t2);
			}
		}
	}
};
modernversion_AIDirector.shiftcolumn = function(c) {
	modernversion_AIDirector.t1 = terrylib_Obj.getplayer();
	if(modernversion_AIDirector.t1 > -1) {
		if(terrylib_Obj.entities[modernversion_AIDirector.t1].xp != c) {
			modernversion_AIDirector.t2 = terrylib_World.at(c,0);
			var _g1 = 0;
			var _g = terrylib_World.mapheight - 2;
			while(_g1 < _g) {
				var j = _g1++;
				terrylib_World.placetile(c,j,terrylib_World.at(c,j + 1));
			}
			terrylib_World.placetile(c,terrylib_World.mapheight - 1,modernversion_AIDirector.t2);
			var _g11 = 0;
			var _g2 = terrylib_Obj.nentity;
			while(_g11 < _g2) {
				var j1 = _g11++;
				if(terrylib_Obj.entities[j1].active) {
					if(terrylib_Obj.entities[j1].xp == c) {
						terrylib_Obj.entities[j1].yp--;
						if(terrylib_Obj.entities[j1].yp < 0) {
							terrylib_Obj.entities[j1].yp += terrylib_World.mapheight;
						}
					}
				}
			}
		}
	}
};
modernversion_AIDirector.glitch = function() {
	modernversion_AIDirector.t1 = haxegon_Random["int"](0,100);
	if(modernversion_AIDirector.t1 >= 50) {
		if(modernversion_AIDirector.t1 < 65) {
			modernversion_AIDirector.swaptwononplayerentities();
		} else if(modernversion_AIDirector.t1 < 68) {
			modernversion_AIDirector.shiftcolumn(haxegon_Random["int"](0,terrylib_World.mapwidth));
		} else {
			modernversion_AIDirector.swaptwoblocks();
		}
	}
};
modernversion_AIDirector.glitchoutside = function(level) {
	if(level >= 5) {
		var _g1 = 0;
		var _g = (level - 5) * 4;
		while(_g1 < _g) {
			++_g1;
			modernversion_AIDirector.swaptwoblocks();
		}
	}
};
modernversion_AIDirector.countblocks = function(type) {
	var count = 0;
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) if(terrylib_World.at(_g3++,j) == type) {
			++count;
		}
	}
	return count;
};
modernversion_AIDirector.countgems = function() {
	var count = 0;
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].type == "treasure") {
				++count;
			}
		}
	}
	return count;
};
modernversion_AIDirector.getitemsonthisfloor = function() {
	var itemlist = [];
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].active) {
			if(terrylib_Obj.entities[i].type == "item") {
				itemlist.push(terrylib_Obj.entities[i].name);
			}
		}
	}
	return itemlist;
};
modernversion_AIDirector.copymaptotestbuffer = function(includeentities) {
	if(includeentities == null) {
		includeentities = false;
	}
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			modernversion_AIDirector.testmap[i][j] = terrylib_World.at(i,j);
		}
	}
	if(includeentities) {
		var _g11 = 0;
		var _g4 = terrylib_Obj.nentity;
		while(_g11 < _g4) {
			var i1 = _g11++;
			if(terrylib_Obj.entities[i1].active) {
				modernversion_AIDirector.testmap[terrylib_Obj.entities[i1].xp][terrylib_Obj.entities[i1].yp] = gamecontrol_Localworld.WALL;
			}
		}
	}
};
modernversion_AIDirector.testbufferat = function(xp,yp) {
	if(xp >= 0 && yp >= 0 && xp < terrylib_World.mapwidth && yp < terrylib_World.mapheight) {
		return modernversion_AIDirector.testmap[xp][yp];
	}
	return gamecontrol_Localworld.WALL;
};
modernversion_AIDirector.floodtest_seekenemy_everythingblocks = function(x,y) {
	if(modernversion_AIDirector.testmap[x][y] == gamecontrol_Localworld.BANANAPEEL) {
		return true;
	}
	modernversion_AIDirector.testmap[x][y] = gamecontrol_Localworld.WALL;
	if(y > 0) {
		if(modernversion_AIDirector.testmap[x][y - 1] != gamecontrol_Localworld.WALL) {
			if(modernversion_AIDirector.floodtest_seekenemy_everythingblocks(x,y - 1)) {
				return true;
			}
		}
	}
	if(y < terrylib_World.mapheight - 1) {
		if(modernversion_AIDirector.testmap[x][y + 1] != gamecontrol_Localworld.WALL) {
			if(modernversion_AIDirector.floodtest_seekenemy_everythingblocks(x,y + 1)) {
				return true;
			}
		}
	}
	if(x > 0) {
		if(modernversion_AIDirector.testmap[x - 1][y] != gamecontrol_Localworld.WALL) {
			if(modernversion_AIDirector.floodtest_seekenemy_everythingblocks(x - 1,y)) {
				return true;
			}
		}
	}
	if(x < terrylib_World.mapwidth - 1) {
		if(modernversion_AIDirector.testmap[x + 1][y] != gamecontrol_Localworld.WALL) {
			if(modernversion_AIDirector.floodtest_seekenemy_everythingblocks(x + 1,y)) {
				return true;
			}
		}
	}
	return false;
};
modernversion_AIDirector.floodtest_seekexit_throughlocks = function(x,y) {
	if(modernversion_AIDirector.testmap[x][y] == gamecontrol_Localworld.STAIRS) {
		return true;
	}
	modernversion_AIDirector.testmap[x][y] = gamecontrol_Localworld.WALL;
	if(y > 0) {
		if(modernversion_AIDirector.testmap[x][y - 1] != gamecontrol_Localworld.WALL) {
			if(modernversion_AIDirector.floodtest_seekexit_throughlocks(x,y - 1)) {
				return true;
			}
		}
	}
	if(y < terrylib_World.mapheight - 1) {
		if(modernversion_AIDirector.testmap[x][y + 1] != gamecontrol_Localworld.WALL) {
			if(modernversion_AIDirector.floodtest_seekexit_throughlocks(x,y + 1)) {
				return true;
			}
		}
	}
	if(x > 0) {
		if(modernversion_AIDirector.testmap[x - 1][y] != gamecontrol_Localworld.WALL) {
			if(modernversion_AIDirector.floodtest_seekexit_throughlocks(x - 1,y)) {
				return true;
			}
		}
	}
	if(x < terrylib_World.mapwidth - 1) {
		if(modernversion_AIDirector.testmap[x + 1][y] != gamecontrol_Localworld.WALL) {
			if(modernversion_AIDirector.floodtest_seekexit_throughlocks(x + 1,y)) {
				return true;
			}
		}
	}
	return false;
};
modernversion_AIDirector.floodtest_seekexit_blockedbylockeddoors = function(x,y) {
	if(modernversion_AIDirector.testmap[x][y] == gamecontrol_Localworld.STAIRS) {
		return true;
	}
	modernversion_AIDirector.testmap[x][y] = gamecontrol_Localworld.WALL;
	if(y > 0) {
		if(modernversion_AIDirector.testmap[x][y - 1] != gamecontrol_Localworld.WALL && modernversion_AIDirector.testmap[x][y - 1] != gamecontrol_Localworld.LOCKEDDOOR) {
			if(modernversion_AIDirector.floodtest_seekexit_blockedbylockeddoors(x,y - 1)) {
				return true;
			}
		}
	}
	if(y < terrylib_World.mapheight - 1) {
		if(modernversion_AIDirector.testmap[x][y + 1] != gamecontrol_Localworld.WALL && modernversion_AIDirector.testmap[x][y + 1] != gamecontrol_Localworld.LOCKEDDOOR) {
			if(modernversion_AIDirector.floodtest_seekexit_blockedbylockeddoors(x,y + 1)) {
				return true;
			}
		}
	}
	if(x > 0) {
		if(modernversion_AIDirector.testmap[x - 1][y] != gamecontrol_Localworld.WALL && modernversion_AIDirector.testmap[x - 1][y] != gamecontrol_Localworld.LOCKEDDOOR) {
			if(modernversion_AIDirector.floodtest_seekexit_blockedbylockeddoors(x - 1,y)) {
				return true;
			}
		}
	}
	if(x < terrylib_World.mapwidth - 1) {
		if(modernversion_AIDirector.testmap[x + 1][y] != gamecontrol_Localworld.WALL && modernversion_AIDirector.testmap[x + 1][y] != gamecontrol_Localworld.LOCKEDDOOR) {
			if(modernversion_AIDirector.floodtest_seekexit_blockedbylockeddoors(x + 1,y)) {
				return true;
			}
		}
	}
	return false;
};
modernversion_AIDirector.floodtest_canreachkey = function(x,y) {
	if(modernversion_AIDirector.testmap[x][y] == gamecontrol_Localworld.KEY) {
		return true;
	}
	modernversion_AIDirector.testmap[x][y] = gamecontrol_Localworld.WALL;
	if(y > 0) {
		if(modernversion_AIDirector.testmap[x][y - 1] != gamecontrol_Localworld.WALL && modernversion_AIDirector.testmap[x][y - 1] != gamecontrol_Localworld.LOCKEDDOOR) {
			if(modernversion_AIDirector.floodtest_canreachkey(x,y - 1)) {
				return true;
			}
		}
	}
	if(y < terrylib_World.mapheight - 1) {
		if(modernversion_AIDirector.testmap[x][y + 1] != gamecontrol_Localworld.WALL && modernversion_AIDirector.testmap[x][y + 1] != gamecontrol_Localworld.LOCKEDDOOR) {
			if(modernversion_AIDirector.floodtest_canreachkey(x,y + 1)) {
				return true;
			}
		}
	}
	if(x > 0) {
		if(modernversion_AIDirector.testmap[x - 1][y] != gamecontrol_Localworld.WALL && modernversion_AIDirector.testmap[x - 1][y] != gamecontrol_Localworld.LOCKEDDOOR) {
			if(modernversion_AIDirector.floodtest_canreachkey(x - 1,y)) {
				return true;
			}
		}
	}
	if(x < terrylib_World.mapwidth - 1) {
		if(modernversion_AIDirector.testmap[x + 1][y] != gamecontrol_Localworld.WALL && modernversion_AIDirector.testmap[x + 1][y] != gamecontrol_Localworld.LOCKEDDOOR) {
			if(modernversion_AIDirector.floodtest_canreachkey(x + 1,y)) {
				return true;
			}
		}
	}
	return false;
};
modernversion_AIDirector.floodtest_guardspace = function(x,y,dist) {
	if(dist > modernversion_AIDirector.guardspace) {
		modernversion_AIDirector.guardspace = dist;
	}
	if(dist > 5) {
		return;
	}
	if(modernversion_AIDirector.testmap[x][y] != gamecontrol_Localworld.FLOOR) {
		return;
	}
	modernversion_AIDirector.testmap[x][y] = gamecontrol_Localworld.WALL;
	if(y > 0) {
		if(modernversion_AIDirector.testmap[x][y - 1] == gamecontrol_Localworld.FLOOR) {
			modernversion_AIDirector.floodtest_guardspace(x,y - 1,dist + 1);
		}
	}
	if(y < terrylib_World.mapheight - 1) {
		if(modernversion_AIDirector.testmap[x][y + 1] == gamecontrol_Localworld.FLOOR) {
			modernversion_AIDirector.floodtest_guardspace(x,y + 1,dist + 1);
		}
	}
	if(x > 0) {
		if(modernversion_AIDirector.testmap[x - 1][y] == gamecontrol_Localworld.FLOOR) {
			modernversion_AIDirector.floodtest_guardspace(x - 1,y,dist + 1);
		}
	}
	if(x < terrylib_World.mapwidth - 1) {
		if(modernversion_AIDirector.testmap[x + 1][y] == gamecontrol_Localworld.FLOOR) {
			modernversion_AIDirector.floodtest_guardspace(x + 1,y,dist + 1);
		}
	}
	return;
};
modernversion_AIDirector.findentrance = function() {
	modernversion_AIDirector.entrancex = -1;
	modernversion_AIDirector.entrancey = -1;
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.ENTRANCE) {
				modernversion_AIDirector.entrancex = i;
				modernversion_AIDirector.entrancey = j;
			}
		}
	}
};
modernversion_AIDirector.assessroom = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.LOCKEDDOOR || terrylib_World.at(i,j) == gamecontrol_Localworld.DOOR) {
				var wallcount = 0;
				if(terrylib_World.at(i - 1,j) == gamecontrol_Localworld.WALL) {
					wallcount = 1;
				}
				if(terrylib_World.at(i + 1,j) == gamecontrol_Localworld.WALL) {
					++wallcount;
				}
				if(terrylib_World.at(i,j - 1) == gamecontrol_Localworld.WALL) {
					++wallcount;
				}
				if(terrylib_World.at(i,j + 1) == gamecontrol_Localworld.WALL) {
					++wallcount;
				}
				if(wallcount >= 3) {
					terrylib_World.placetile(i,j,gamecontrol_Localworld.WALL);
				}
			}
		}
	}
	modernversion_AIDirector.findentrance();
	modernversion_AIDirector.copymaptotestbuffer();
	if(modernversion_AIDirector.floodtest_seekexit_throughlocks(modernversion_AIDirector.entrancex,modernversion_AIDirector.entrancey)) {
		modernversion_AIDirector.copymaptotestbuffer();
		if(!modernversion_AIDirector.floodtest_seekexit_blockedbylockeddoors(modernversion_AIDirector.entrancex,modernversion_AIDirector.entrancey)) {
			modernversion_AIDirector.copymaptotestbuffer();
			if(!modernversion_AIDirector.floodtest_canreachkey(modernversion_AIDirector.entrancex,modernversion_AIDirector.entrancey)) {
				return false;
			}
		} else {
			if(modernversion_AIDirector.floor == 1) {
				return false;
			}
			if(modernversion_AIDirector.keys > 0) {
				modernversion_AIDirector.copymaptotestbuffer();
				if(!modernversion_AIDirector.floodtest_canreachkey(modernversion_AIDirector.entrancex,modernversion_AIDirector.entrancey)) {
					return false;
				}
			}
		}
	} else {
		return false;
	}
	if(modernversion_AIDirector.floor >= 1 && modernversion_AIDirector.floor < 15 && modernversion_AIDirector.floor != 5 && modernversion_AIDirector.floor != 11 && modernversion_AIDirector.floor != 10) {
		modernversion_AIDirector.copymaptotestbuffer();
		var _g11 = 0;
		var _g4 = terrylib_World.mapheight;
		while(_g11 < _g4) {
			var j1 = _g11++;
			var _g31 = 0;
			var _g21 = terrylib_World.mapwidth;
			while(_g31 < _g21) {
				var i1 = _g31++;
				if(modernversion_AIDirector.testmap[i1][j1] == gamecontrol_Localworld.DOOR || modernversion_AIDirector.testmap[i1][j1] == gamecontrol_Localworld.OPENDOOR || modernversion_AIDirector.testmap[i1][j1] == gamecontrol_Localworld.LOCKEDDOOR) {
					modernversion_AIDirector.testmap[i1][j1] = gamecontrol_Localworld.WALL;
				}
			}
		}
		var _g12 = 0;
		var _g5 = terrylib_Obj.nentity;
		while(_g12 < _g5) {
			var i2 = _g12++;
			if(terrylib_Obj.entities[i2].active) {
				if(terrylib_Obj.entities[i2].rule == "enemy") {
					modernversion_AIDirector.testmap[terrylib_Obj.entities[i2].xp][terrylib_Obj.entities[i2].yp] = gamecontrol_Localworld.BANANAPEEL;
				}
			}
		}
		if(modernversion_AIDirector.floodtest_seekenemy_everythingblocks(modernversion_AIDirector.entrancex,modernversion_AIDirector.entrancey)) {
			return false;
		}
	}
	if(modernversion_AIDirector.floor == 1) {
		if(modernversion_AIDirector.countblocks(gamecontrol_Localworld.LOCKEDDOOR) > 1) {
			return false;
		}
	}
	var _g13 = 0;
	var _g6 = terrylib_Obj.nentity;
	while(_g13 < _g6) {
		var i3 = _g13++;
		if(terrylib_Obj.entities[i3].active) {
			var _g32 = 0;
			var _g22 = terrylib_Obj.nentity;
			while(_g32 < _g22) {
				var j2 = _g32++;
				if(terrylib_Obj.entities[j2].active) {
					if(i3 != j2) {
						if(terrylib_Obj.entities[i3].xp == terrylib_Obj.entities[j2].xp) {
							if(terrylib_Obj.entities[i3].yp == terrylib_Obj.entities[j2].yp) {
								return false;
							}
						}
					}
				}
			}
		}
	}
	var _g14 = 0;
	var _g7 = terrylib_Obj.nentity;
	while(_g14 < _g7) {
		var i4 = _g14++;
		if(terrylib_Obj.entities[i4].active) {
			if(terrylib_Obj.entities[i4].type != "guard" && terrylib_Obj.entities[i4].type != "laserguard") {
				if(terrylib_World.at(terrylib_Obj.entities[i4].xp,terrylib_Obj.entities[i4].yp) == gamecontrol_Localworld.KEY) {
					return false;
				}
			}
		}
	}
	modernversion_AIDirector.copymaptotestbuffer(true);
	var _g15 = 0;
	var _g8 = terrylib_Obj.nentity;
	while(_g15 < _g8) {
		var i5 = _g15++;
		if(terrylib_Obj.entities[i5].active) {
			if(terrylib_Obj.entities[i5].type == "guard" || terrylib_Obj.entities[i5].type == "laserguard") {
				if(modernversion_AIDirector.testbufferat(terrylib_Obj.entities[i5].xp,terrylib_Obj.entities[i5].yp - 1) != gamecontrol_Localworld.FLOOR && modernversion_AIDirector.testbufferat(terrylib_Obj.entities[i5].xp,terrylib_Obj.entities[i5].yp + 1) != gamecontrol_Localworld.FLOOR || modernversion_AIDirector.testbufferat(terrylib_Obj.entities[i5].xp - 1,terrylib_Obj.entities[i5].yp) != gamecontrol_Localworld.FLOOR && modernversion_AIDirector.testbufferat(terrylib_Obj.entities[i5].xp + 1,terrylib_Obj.entities[i5].yp) != gamecontrol_Localworld.FLOOR) {
					modernversion_AIDirector.testmap[terrylib_Obj.entities[i5].xp][terrylib_Obj.entities[i5].yp] = gamecontrol_Localworld.FLOOR;
					modernversion_AIDirector.guardspace = 0;
					modernversion_AIDirector.floodtest_guardspace(terrylib_Obj.entities[i5].xp,terrylib_Obj.entities[i5].yp,0);
					if(modernversion_AIDirector.guardspace <= 2) {
						terrylib_World.placetile(terrylib_Obj.entities[i5].xp,terrylib_Obj.entities[i5].yp,gamecontrol_Localworld.FLOOR);
						terrylib_Obj.entities[i5].active = false;
					}
					modernversion_AIDirector.copymaptotestbuffer(true);
				}
			}
		}
	}
	if(gamecontrol_Generator.lastblueprint == "intro_topfloor") {
		if(modernversion_Levelgen.countkeys() > modernversion_Levelgen.countlockeddoors()) {
			modernversion_Levelgen.swapkeysforgems(1);
		}
	}
	if(gamecontrol_Generator.lastblueprint == "high_topfloor") {
		if(modernversion_Levelgen.countkeys() > modernversion_Levelgen.countlockeddoors()) {
			modernversion_Levelgen.swapkeysforgems(1);
		}
	}
	if((modernversion_AIDirector.floor == 3 || modernversion_AIDirector.floor == 4) && !modernversion_AIDirector.placedfirstshopkeeper && gamecontrol_Game.cash >= 2) {
		if(terrylib_Rand.prandom() < 0.5 && modernversion_AIDirector.floor == 3 || modernversion_AIDirector.floor == 4) {
			if(gamecontrol_Game.health < 3) {
				modernversion_Levelgen.placeshopkeeper(terrylib_Rand.ppickstring("first aid kit","pistol","banana"));
			} else {
				modernversion_Levelgen.placeshopkeeper(terrylib_Rand.ppickstring("lightbulb","signal jammer","drill","bomb"));
			}
			modernversion_AIDirector.placedfirstshopkeeper = true;
		}
	}
	if((modernversion_AIDirector.floor == 6 || modernversion_AIDirector.floor == 7) && !modernversion_AIDirector.placedsecondshopkeeper && gamecontrol_Game.cash >= 2) {
		if(terrylib_Rand.prandom() < 0.5 && modernversion_AIDirector.floor == 6 || modernversion_AIDirector.floor == 7) {
			if(gamecontrol_Game.health < 3) {
				modernversion_Levelgen.placeshopkeeper(terrylib_Rand.ppickstring("first aid kit","pistol","teleporter","bomb"));
			} else {
				modernversion_Levelgen.placeshopkeeper(terrylib_Rand.ppickstring("pistol","lightbulb","signal jammer","drill","teleporter","bomb"));
			}
			modernversion_AIDirector.placedsecondshopkeeper = true;
		}
	}
	if((modernversion_AIDirector.floor == 13 || modernversion_AIDirector.floor == 14) && !modernversion_AIDirector.placedthirdshopkeeper && gamecontrol_Game.cash >= 2) {
		if(gamecontrol_Game.health < 3) {
			modernversion_Levelgen.placeshopkeeper("first aid kit");
		} else {
			modernversion_Levelgen.placeshopkeeper(terrylib_Rand.ppickstring("pistol","lightbulb","sword","drill"));
		}
		modernversion_AIDirector.placedthirdshopkeeper = true;
	}
	if(modernversion_AIDirector.floor >= 6 && modernversion_AIDirector.floor < 10) {
		if(terrylib_Rand.prandom() < 0.05) {
			if(!modernversion_AIDirector.donethedoorjoke) {
				modernversion_Levelgen.swaprealdoorforfakedoor(1);
				modernversion_AIDirector.donethedoorjoke = true;
			}
		}
	}
	gamecontrol_Localworld.updatelighting();
	modernversion_AIDirector.onthisfloor_lockeddoors = modernversion_AIDirector.countblocks(gamecontrol_Localworld.LOCKEDDOOR);
	modernversion_AIDirector.onthisfloor_keys = modernversion_AIDirector.countblocks(gamecontrol_Localworld.KEY);
	modernversion_AIDirector.onthisfloor_gems = modernversion_AIDirector.countgems();
	var itemlist = modernversion_AIDirector.getitemsonthisfloor();
	modernversion_AIDirector.onthisfloor_items = itemlist.length;
	modernversion_AIDirector.onthisrun_keys += modernversion_AIDirector.onthisfloor_keys;
	modernversion_AIDirector.onthisrun_gems += modernversion_AIDirector.onthisfloor_gems;
	var _g16 = 0;
	var _g9 = itemlist.length;
	while(_g16 < _g9) modernversion_AIDirector.onthisrun_treasurelist.push(itemlist[_g16++]);
	return true;
};
modernversion_AIDirector.givestartingitems = function() {
	var j = 0;
	var _g1 = 0;
	var _g = modernversion_AIDirector.startingitems.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(modernversion_AIDirector.startingitems[i].toLowerCase() == "key") {
			gamecontrol_Game.keys++;
		} else if(modernversion_AIDirector.startingitems[i].toLowerCase() == "gem") {
			gamecontrol_Game.cash++;
		} else if(modernversion_Itemstats.get(modernversion_AIDirector.startingitems[i]).hasmultipleshots) {
			modernversion_Modern.inventory[j] = modernversion_AIDirector.startingitems[i];
			modernversion_Modern.inventory_num[j] = modernversion_Itemstats.get(modernversion_AIDirector.startingitems[i]).typical;
			++j;
		} else {
			modernversion_Modern.inventory[j] = modernversion_AIDirector.startingitems[i];
			++j;
		}
	}
};
var modernversion_Enemy = function() { };
$hxClasses["modernversion.Enemy"] = modernversion_Enemy;
modernversion_Enemy.__name__ = ["modernversion","Enemy"];
var modernversion_Item = function() { };
$hxClasses["modernversion.Item"] = modernversion_Item;
modernversion_Item.__name__ = ["modernversion","Item"];
var modernversion_Itemstats = function() { };
$hxClasses["modernversion.Itemstats"] = modernversion_Itemstats;
modernversion_Itemstats.__name__ = ["modernversion","Itemstats"];
modernversion_Itemstats.init = function() {
	modernversion_Itemstats.itemindex = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < 100) {
		var i = _g++;
		modernversion_Itemstats.encountered.push(0);
		modernversion_Itemstats.itemlist.push(new gamecontrol_Itemclass(i));
		var key = modernversion_Itemstats.itemlist[i].name.toLowerCase();
		var _this = modernversion_Itemstats.itemindex;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,i);
		} else {
			_this.h[key] = i;
		}
	}
};
modernversion_Itemstats.get = function(item) {
	var key = item.toLowerCase();
	var _this = modernversion_Itemstats.itemindex;
	return modernversion_Itemstats.itemlist[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]];
};
modernversion_Itemstats.isthisnew = function(item) {
	var key = item.toLowerCase();
	var _this = modernversion_Itemstats.itemindex;
	if(modernversion_Itemstats.encountered[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]] == 0) {
		return true;
	}
	return false;
};
modernversion_Itemstats.markseen = function(item) {
	var key = item.toLowerCase();
	var _this = modernversion_Itemstats.itemindex;
	modernversion_Itemstats.encountered[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]] = 1;
};
var modernversion_Levelgen = function() { };
$hxClasses["modernversion.Levelgen"] = modernversion_Levelgen;
modernversion_Levelgen.__name__ = ["modernversion","Levelgen"];
modernversion_Levelgen.createroom = function() {
	gamecontrol_Game.clearroom();
	gamecontrol_Game.floor = modernversion_AIDirector.floor;
	modernversion_AIDirector.entrance = "X";
	modernversion_Modern.updatepalette();
	if(gamecontrol_Game.floor == 16) {
		gamecontrol_Game.showmessage("ROOFTOP","white",120);
	} else {
		gamecontrol_Game.showmessage("FLOOR " + Std.string(gamecontrol_Game.floor),"white",120);
	}
	gamecontrol_Generator.generateroom(terrylib_Rand.ppick(modernversion_AIDirector.blueprint));
	if(gamecontrol_Generator.lastblueprint == "intro_topfloor") {
		gamecontrol_Game.changeplacement("stairs");
		gamecontrol_Game.place("entrance","",true);
		gamecontrol_Game.placeatentrance("player");
	} else {
		gamecontrol_Game.changeplacement("stairs");
		gamecontrol_Game.place("entrance");
		gamecontrol_Game.placeatentrance("player");
	}
	gamecontrol_Game.changeplacement("collectable");
	var _g1 = 0;
	var _g = modernversion_AIDirector.gems;
	while(_g1 < _g) {
		++_g1;
		gamecontrol_Game.place("treasure","gem");
	}
	var _g11 = 0;
	var _g2 = modernversion_AIDirector.keys;
	while(_g11 < _g2) {
		++_g11;
		gamecontrol_Game.place("key","");
	}
	var _g12 = 0;
	var _g3 = modernversion_AIDirector.enemylist.length;
	while(_g12 < _g3) gamecontrol_Game.placeatrandom("enemy",modernversion_AIDirector.enemylist[_g12++]);
	gamecontrol_Game.changeplacement("stairs");
	gamecontrol_Game.place("exit");
	var _g13 = 0;
	var _g4 = terrylib_World.mapheight;
	while(_g13 < _g4) {
		var j = _g13++;
		var _g31 = 0;
		var _g21 = terrylib_World.mapwidth;
		while(_g31 < _g21) {
			var i = _g31++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.CONSIDERLOCKEDDOOR) {
				terrylib_World.placetile(i,j,gamecontrol_Localworld.DOOR);
			} else if(terrylib_World.at(i,j) == gamecontrol_Localworld.CONSIDERLOCKEDEXIT_A || terrylib_World.at(i,j) == gamecontrol_Localworld.CONSIDERLOCKEDEXIT_B) {
				if(modernversion_AIDirector.lockedexit) {
					if(modernversion_AIDirector.entrance == "A") {
						if(terrylib_World.at(i,j) == gamecontrol_Localworld.CONSIDERLOCKEDEXIT_B) {
							terrylib_World.placetile(i,j,gamecontrol_Localworld.LOCKEDDOOR);
						} else if(terrylib_World.at(i,j) == gamecontrol_Localworld.CONSIDERLOCKEDEXIT_A) {
							terrylib_World.placetile(i,j,gamecontrol_Localworld.DOOR);
						}
					} else if(modernversion_AIDirector.entrance == "B") {
						if(terrylib_World.at(i,j) == gamecontrol_Localworld.CONSIDERLOCKEDEXIT_A) {
							terrylib_World.placetile(i,j,gamecontrol_Localworld.LOCKEDDOOR);
						} else if(terrylib_World.at(i,j) == gamecontrol_Localworld.CONSIDERLOCKEDEXIT_B) {
							terrylib_World.placetile(i,j,gamecontrol_Localworld.DOOR);
						}
					} else {
						terrylib_World.placetile(i,j,gamecontrol_Localworld.DOOR);
					}
				} else {
					terrylib_World.placetile(i,j,gamecontrol_Localworld.DOOR);
				}
			}
		}
	}
	gamecontrol_Game.changeplacement("collectable");
	var _g14 = 0;
	var _g5 = modernversion_AIDirector.weaponlist.length;
	while(_g14 < _g5) gamecontrol_Game.place("item",modernversion_AIDirector.weaponlist[_g14++]);
	var _g15 = 0;
	var _g6 = modernversion_AIDirector.itemlist.length;
	while(_g15 < _g6) gamecontrol_Game.place("item",modernversion_AIDirector.itemlist[_g15++]);
	gamecontrol_Localworld.setroomfog(modernversion_AIDirector.roomlit?1:0);
	gamecontrol_Localworld.updatelighting();
	gamecontrol_Game.turn = "playermove";
};
modernversion_Levelgen.firebox = function(x,y,w,h) {
	var _g1 = y;
	var _g = y + h;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = x;
		var _g2 = x + w;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_Help.inboxw(i,j,0,0,terrylib_World.mapwidth,terrylib_World.mapheight)) {
				if(i == x || i == x + w - 1 || j == y || j == y + h - 1) {
					if(terrylib_Rand.prandom() < 0.5) {
						gamecontrol_Localworld.startfire(i,j);
					}
				} else {
					gamecontrol_Localworld.startfire(i,j);
				}
			}
		}
	}
};
modernversion_Levelgen.outsidegen = function() {
	gamecontrol_Game.clearroom();
	gamecontrol_Localworld.clearfire();
	modernversion_Modern.updatepalette();
	gamecontrol_Generator.changemapsize(32,19);
	terrylib_Rand.setseed(Math.abs((modernversion_Modern.currentrunseed + modernversion_Modern.worldx * modernversion_Modern.worldy) % 2147483647) | 0);
	var zone = Math.max(Math.abs(modernversion_Modern.worldx - 50),Math.abs(modernversion_Modern.worldy - 50)) | 0;
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(Math.floor(101 * terrylib_Rand.prandom()) > 90) {
				terrylib_World.placetile(i,j,gamecontrol_Localworld.WALL);
			} else if(Math.floor(101 * terrylib_Rand.prandom()) >= 66) {
				terrylib_World.placetile(i,j,gamecontrol_Localworld.DEBRIS);
			} else {
				terrylib_World.placetile(i,j,gamecontrol_Localworld.FLOOR);
			}
		}
	}
	var _g4 = 17;
	while(_g4 < 19) {
		var j1 = _g4++;
		var _g11 = 24;
		while(_g11 < 32) {
			var i1 = _g11++;
			if(Math.floor(101 * terrylib_Rand.prandom()) >= 66) {
				terrylib_World.placetile(i1,j1,gamecontrol_Localworld.DEBRIS);
			} else {
				terrylib_World.placetile(i1,j1,gamecontrol_Localworld.FLOOR);
			}
		}
	}
	if(zone == 0) {
		if(modernversion_Modern.worldx == 50 && modernversion_Modern.worldy == 50) {
			gamecontrol_Generator.placeoutsideroom("heistytower");
		}
	} else if(zone == 1) {
		if(Math.abs(modernversion_Modern.worldx - 50) == Math.abs(modernversion_Modern.worldy - 50)) {
			gamecontrol_Generator.tx1 = 3 + Math.floor((terrylib_World.mapwidth - 1 - 14 - 3 + 1) * terrylib_Rand.prandom());
			gamecontrol_Generator.ty1 = 3 + Math.floor((terrylib_World.mapheight - 1 - 13 - 3 + 1) * terrylib_Rand.prandom());
			gamecontrol_Generator.tx2 = 7 + Math.floor(6 * terrylib_Rand.prandom());
			gamecontrol_Generator.ty2 = 7 + Math.floor(4 * terrylib_Rand.prandom());
			var _g12 = gamecontrol_Generator.ty1 - 1;
			var _g5 = gamecontrol_Generator.ty1 + gamecontrol_Generator.ty2 + 2;
			while(_g12 < _g5) {
				var j2 = _g12++;
				var _g31 = gamecontrol_Generator.tx1 - 1;
				var _g21 = gamecontrol_Generator.tx1 + gamecontrol_Generator.tx2 + 2;
				while(_g31 < _g21) {
					var i2 = _g31++;
					if(Math.floor(101 * terrylib_Rand.prandom()) >= 66) {
						terrylib_World.placetile(i2,j2,gamecontrol_Localworld.DEBRIS);
					} else {
						terrylib_World.placetile(i2,j2,gamecontrol_Localworld.FLOOR);
					}
				}
			}
			gamecontrol_Generator.placeactualroom_nochecks(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
			gamecontrol_Generator.placedoorin(gamecontrol_Generator.tx1,gamecontrol_Generator.ty1,gamecontrol_Generator.tx2,gamecontrol_Generator.ty2);
			gamecontrol_Generator.getrandompointin(gamecontrol_Generator.tx1 + 1,gamecontrol_Generator.ty1 + 1,gamecontrol_Generator.tx2 - 2,gamecontrol_Generator.ty2 - 2);
			if(modernversion_Modern.worldx - 50 == -1 && modernversion_Modern.worldy - 50 == -1) {
				if(modernversion_Modern.itemtopleft != "") {
					terrylib_Obj.createentity(gamecontrol_Generator.tx,gamecontrol_Generator.ty,"item",modernversion_Modern.itemtopleft);
				}
			} else if(modernversion_Modern.worldx - 50 == 1 && modernversion_Modern.worldy - 50 == -1) {
				if(modernversion_Modern.itemtopright != "") {
					terrylib_Obj.createentity(gamecontrol_Generator.tx,gamecontrol_Generator.ty,"item",modernversion_Modern.itemtopright);
				}
			} else if(modernversion_Modern.worldx - 50 == -1 && modernversion_Modern.worldy - 50 == 1) {
				if(modernversion_Modern.itembottomleft != "") {
					terrylib_Obj.createentity(gamecontrol_Generator.tx,gamecontrol_Generator.ty,"item",modernversion_Modern.itembottomleft);
				}
			} else if(modernversion_Modern.worldx - 50 == 1 && modernversion_Modern.worldy - 50 == 1) {
				if(modernversion_Modern.itembottomright != "") {
					terrylib_Obj.createentity(gamecontrol_Generator.tx,gamecontrol_Generator.ty,"item",modernversion_Modern.itembottomright);
				}
			}
		}
	} else if(zone == 2) {
		var xoff = modernversion_Modern.worldx - 50;
		var yoff = modernversion_Modern.worldy - 50;
		if(yoff == -2 && xoff == -2) {
			modernversion_Levelgen.firebox(3,3,terrylib_World.mapwidth + 4,terrylib_World.mapheight - 6);
			modernversion_Levelgen.firebox(3,3,terrylib_World.mapwidth - 6,terrylib_World.mapheight + 4);
		} else if(yoff == -2 && xoff == 2) {
			modernversion_Levelgen.firebox(-2,3,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 6);
			modernversion_Levelgen.firebox(3,3,terrylib_World.mapwidth - 6,terrylib_World.mapheight + 4);
		} else if(yoff == 2 && xoff == -2) {
			modernversion_Levelgen.firebox(3,3,terrylib_World.mapwidth + 4,terrylib_World.mapheight - 6);
			modernversion_Levelgen.firebox(3,-2,terrylib_World.mapwidth - 6,terrylib_World.mapheight - 1);
		} else if(yoff == 2 && xoff == 2) {
			modernversion_Levelgen.firebox(-2,3,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 6);
			modernversion_Levelgen.firebox(3,-2,terrylib_World.mapwidth - 6,terrylib_World.mapheight - 1);
		} else if(yoff == -2 || yoff == 2) {
			modernversion_Levelgen.firebox(-2,3,terrylib_World.mapwidth + 4,terrylib_World.mapheight - 6);
		} else if(xoff == -2 || xoff == 2) {
			modernversion_Levelgen.firebox(3,-2,terrylib_World.mapwidth - 6,terrylib_World.mapheight + 4);
		}
		var numfiremen = 3 + Math.floor(3 * terrylib_Rand.prandom());
		var _g13 = 0;
		while(_g13 < numfiremen) {
			++_g13;
			terrylib_Obj.createentity(2 + Math.floor((terrylib_World.mapwidth - 3 - 2 + 1) * terrylib_Rand.prandom()),2 + Math.floor((terrylib_World.mapheight - 3 - 2 + 1) * terrylib_Rand.prandom()),"enemy","fireman");
		}
	} else if(zone == 3) {
		if(modernversion_Modern.worldx - 50 == -3) {
			var _g14 = 0;
			var _g6 = terrylib_World.mapheight;
			while(_g14 < _g6) {
				var j3 = _g14++;
				gamecontrol_Generator.tx = 3 + Math.floor(3 * terrylib_Rand.prandom());
				var _g32 = 0;
				var _g22 = gamecontrol_Generator.tx;
				while(_g32 < _g22) terrylib_World.placetile(_g32++,j3,gamecontrol_Localworld.WALL);
			}
		} else if(modernversion_Modern.worldx - 50 == 3) {
			var _g15 = 0;
			var _g7 = terrylib_World.mapheight;
			while(_g15 < _g7) {
				var j4 = _g15++;
				gamecontrol_Generator.tx = 3 + Math.floor(3 * terrylib_Rand.prandom());
				var _g33 = 0;
				var _g23 = gamecontrol_Generator.tx;
				while(_g33 < _g23) terrylib_World.placetile(terrylib_World.mapwidth - 1 - _g33++,j4,gamecontrol_Localworld.WALL);
			}
		}
		if(modernversion_Modern.worldy - 50 == -3) {
			var _g16 = 0;
			var _g8 = terrylib_World.mapwidth;
			while(_g16 < _g8) {
				var i3 = _g16++;
				gamecontrol_Generator.ty = 3 + Math.floor(3 * terrylib_Rand.prandom());
				var _g34 = 0;
				var _g24 = gamecontrol_Generator.ty;
				while(_g34 < _g24) terrylib_World.placetile(i3,_g34++,gamecontrol_Localworld.WALL);
			}
		} else if(modernversion_Modern.worldy - 50 == 3) {
			var _g17 = 0;
			var _g9 = terrylib_World.mapwidth;
			while(_g17 < _g9) {
				var i4 = _g17++;
				gamecontrol_Generator.ty = 3 + Math.floor(3 * terrylib_Rand.prandom());
				var _g35 = 0;
				var _g25 = gamecontrol_Generator.ty;
				while(_g35 < _g25) terrylib_World.placetile(i4,terrylib_World.mapheight - 1 - _g35++,gamecontrol_Localworld.WALL);
			}
		}
	} else {
		modernversion_Modern.updatepalette(terrylib_Rand.ppick([modernversion_Roomstyle.robot,modernversion_Roomstyle.high,modernversion_Roomstyle.shopkeeper,modernversion_Roomstyle.intro,modernversion_Roomstyle.rooftop,modernversion_Roomstyle.error,modernversion_Roomstyle.outside]));
		var randomblocks = [gamecontrol_Localworld.FLOOR,gamecontrol_Localworld.BLOOD,gamecontrol_Localworld.WALL,gamecontrol_Localworld.DOOR,gamecontrol_Localworld.OPENDOOR,gamecontrol_Localworld.RUBBLE,gamecontrol_Localworld.EMPTYBACKGROUND,gamecontrol_Localworld.OUTSIDE_GROUND,gamecontrol_Localworld.DEBRIS,gamecontrol_Localworld.ROOFSIDE,gamecontrol_Localworld.ROOFBACKGROUND,gamecontrol_Localworld.ROOFSTARS];
		var _g18 = 0;
		var _g10 = terrylib_World.mapheight;
		while(_g18 < _g10) {
			var j5 = _g18++;
			var _g36 = 0;
			var _g26 = terrylib_World.mapwidth;
			while(_g36 < _g26) {
				var i5 = _g36++;
				terrylib_World.placetile(i5,j5,terrylib_Rand.ppick(randomblocks));
				if(terrylib_Rand.prandom() < 0.05) {
					terrylib_World.placetile(i5,j5,terrylib_Rand.ppick([gamecontrol_Localworld.BANANAPEEL,gamecontrol_Localworld.OUTSIDE_EDGE,gamecontrol_Localworld.ENTRANCE,gamecontrol_Localworld.LOCKEDDOOR]));
					if(terrylib_Rand.prandom() < 0.05 && i5 > 5 && j5 > 5 && i5 < terrylib_World.mapwidth - 5 && j5 < terrylib_World.mapheight - 5) {
						terrylib_World.placetile(i5,j5,gamecontrol_Localworld.STAIRS);
					}
				}
			}
		}
	}
	gamecontrol_Game.turn = "playermove";
};
modernversion_Levelgen.stringseed = function(s) {
	var newseed = 0;
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) newseed += HxOverrides.cca(s,_g1++);
	return newseed;
};
modernversion_Levelgen.swaprealdoorforfakedoor = function(t) {
	var doorlocations = [];
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.DOOR) {
				doorlocations.push(new openfl_geom_Point(i,j));
			}
		}
	}
	terrylib_Rand.pshuffle(doorlocations);
	var _g11 = 0;
	while(_g11 < t) {
		var i1 = _g11++;
		if(i1 < doorlocations.length) {
			terrylib_World.placetile(doorlocations[i1].x | 0,doorlocations[i1].y | 0,gamecontrol_Localworld.FLOOR);
			terrylib_Obj.createentity(doorlocations[i1].x | 0,doorlocations[i1].y | 0,"item","portable door");
		}
	}
};
modernversion_Levelgen.countlockeddoors = function() {
	var lockeddoorcounter = 0;
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) if(terrylib_World.at(_g3++,j) == gamecontrol_Localworld.LOCKEDDOOR) {
			++lockeddoorcounter;
		}
	}
	return lockeddoorcounter;
};
modernversion_Levelgen.countkeys = function() {
	var keycounter = 0;
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) if(terrylib_World.at(_g3++,j) == gamecontrol_Localworld.KEY) {
			++keycounter;
		}
	}
	return keycounter;
};
modernversion_Levelgen.swapkeysforgems = function(t) {
	var keylocations = [];
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.KEY) {
				keylocations.push(new openfl_geom_Point(i,j));
			}
		}
	}
	terrylib_Rand.pshuffle(keylocations);
	var _g11 = 0;
	while(_g11 < t) {
		var i1 = _g11++;
		if(i1 < keylocations.length) {
			terrylib_World.placetile(keylocations[i1].x | 0,keylocations[i1].y | 0,gamecontrol_Localworld.FLOOR);
			terrylib_Obj.createentity(keylocations[i1].x | 0,keylocations[i1].y | 0,"treasure","gem");
		}
	}
};
modernversion_Levelgen.placeshopkeeper = function(sellingitem) {
	var possiblelocations = [];
	var player = terrylib_Obj.getplayer();
	var px = terrylib_Obj.entities[player].xp;
	var py = terrylib_Obj.entities[player].yp;
	var _g = -4;
	while(_g < 5) {
		var j = _g++;
		var _g1 = -4;
		while(_g1 < 5) {
			var i = _g1++;
			if(terrylib_World.at(px + i,py + j) == gamecontrol_Localworld.FLOOR) {
				var pointok = true;
				if(i == -1 && j == 0) {
					pointok = false;
				}
				if(i == 1 && j == 0) {
					pointok = false;
				}
				if(i == 0 && j == -1) {
					pointok = false;
				}
				if(i == 0 && j == 1) {
					pointok = false;
				}
				if(terrylib_World.anydoor(terrylib_World.at(px + i - 1,py + j))) {
					pointok = false;
				}
				if(pointok) {
					var wallcount = 0;
					if(terrylib_World.at(px + i - 1,py + j - 1) != gamecontrol_Localworld.FLOOR) {
						wallcount = 1;
					}
					if(terrylib_World.at(px + i,py + j - 1) != gamecontrol_Localworld.FLOOR) {
						++wallcount;
					}
					if(terrylib_World.at(px + i + 1,py + j - 1) != gamecontrol_Localworld.FLOOR) {
						++wallcount;
					}
					if(terrylib_World.at(px + i - 1,py + j) != gamecontrol_Localworld.FLOOR) {
						++wallcount;
					}
					if(terrylib_World.at(px + i + 1,py + j) != gamecontrol_Localworld.FLOOR) {
						++wallcount;
					}
					if(terrylib_World.at(px + i - 1,py + j + 1) != gamecontrol_Localworld.FLOOR) {
						++wallcount;
					}
					if(terrylib_World.at(px + i,py + j + 1) != gamecontrol_Localworld.FLOOR) {
						++wallcount;
					}
					if(terrylib_World.at(px + i + 1,py + j + 1) != gamecontrol_Localworld.FLOOR) {
						++wallcount;
					}
					if(wallcount > 1) {
						pointok = false;
						if(terrylib_World.at(px + i,py + j - 1) == gamecontrol_Localworld.WALL && terrylib_World.at(px + i - 1,py + j) == gamecontrol_Localworld.WALL) {
							if(terrylib_World.at(px + i + 1,py + j + 1) == gamecontrol_Localworld.FLOOR && terrylib_World.at(px + i + 1,py + j) == gamecontrol_Localworld.FLOOR && terrylib_World.at(px + i,py + j + 1) == gamecontrol_Localworld.FLOOR) {
								pointok = true;
							}
						}
						if(terrylib_World.at(px + i,py + j - 1) == gamecontrol_Localworld.WALL && terrylib_World.at(px + i + 1,py + j) == gamecontrol_Localworld.WALL) {
							if(terrylib_World.at(px + i - 1,py + j + 1) == gamecontrol_Localworld.FLOOR && terrylib_World.at(px + i - 1,py + j) == gamecontrol_Localworld.FLOOR && terrylib_World.at(px + i,py + j + 1) == gamecontrol_Localworld.FLOOR) {
								pointok = true;
							}
						}
						if(terrylib_World.at(px + i,py + j + 1) == gamecontrol_Localworld.WALL && terrylib_World.at(px + i + 1,py + j) == gamecontrol_Localworld.WALL) {
							if(terrylib_World.at(px + i - 1,py + j - 1) == gamecontrol_Localworld.FLOOR && terrylib_World.at(px + i - 1,py + j) == gamecontrol_Localworld.FLOOR && terrylib_World.at(px + i,py + j - 1) == gamecontrol_Localworld.FLOOR) {
								pointok = true;
							}
						}
						if(terrylib_World.at(px + i,py + j + 1) == gamecontrol_Localworld.WALL && terrylib_World.at(px + i - 1,py + j) == gamecontrol_Localworld.WALL) {
							if(terrylib_World.at(px + i + 1,py + j - 1) == gamecontrol_Localworld.FLOOR && terrylib_World.at(px + i + 1,py + j) == gamecontrol_Localworld.FLOOR && terrylib_World.at(px + i,py + j - 1) == gamecontrol_Localworld.FLOOR) {
								pointok = true;
							}
						}
					}
				}
				if(pointok) {
					possiblelocations.push(new openfl_geom_Point(px + i,py + j));
				}
			}
		}
	}
	if(possiblelocations.length > 0) {
		terrylib_Rand.pshuffle(possiblelocations);
		terrylib_Obj.createentity(possiblelocations[0].x | 0,possiblelocations[0].y | 0,"npc",sellingitem);
	}
};
var modernversion_Modern = function() { };
$hxClasses["modernversion.Modern"] = modernversion_Modern;
modernversion_Modern.__name__ = ["modernversion","Modern"];
modernversion_Modern.popup = function(mode,item) {
	modernversion_Modern.popupwindow = true;
	modernversion_Modern.popupmode = mode;
	modernversion_Modern.popuplerp = 0;
	modernversion_Modern.popupstate = 0;
	modernversion_Modern.popupitem = item;
	modernversion_Modern.menuselection = 0;
};
modernversion_Modern.updatekeygemrate = function() {
	if(modernversion_Modern.keygemratelevel == 0) {
		modernversion_Modern.keygemrate = 1;
	} else if(modernversion_Modern.keygemratelevel == 1) {
		modernversion_Modern.keygemrate = 2;
	} else if(modernversion_Modern.keygemratelevel == 2) {
		modernversion_Modern.keygemrate = 3;
	} else if(modernversion_Modern.keygemratelevel == 3) {
		modernversion_Modern.keygemrate = 4;
	} else if(modernversion_Modern.keygemratelevel == 4) {
		modernversion_Modern.keygemrate = 5;
	} else if(modernversion_Modern.keygemratelevel == 5) {
		modernversion_Modern.keygemrate = 5;
	}
};
modernversion_Modern.start = function() {
	modernversion_Modern.inventory = [];
	modernversion_Modern.inventory_num = [];
	modernversion_Modern.initslots = 3;
	var _g1 = 0;
	var _g = modernversion_Modern.initslots + 1;
	while(_g1 < _g) {
		++_g1;
		modernversion_Modern.inventory.push("");
		modernversion_Modern.inventory_num.push(0);
	}
	modernversion_AIDirector.testmap = haxegon_Data.blank2darray(100,100);
	modernversion_AIDirector.seed = "random";
	modernversion_Modern.restart();
};
modernversion_Modern.outsideworld = function() {
	gamecontrol_Game.floor = 0;
	terrylib_Obj.nentity = 0;
	modernversion_Modern.hpflash = 0;
	modernversion_Modern.gemflash = 0;
	modernversion_Modern.keyflash = 0;
	modernversion_Modern.waitflash = 0;
	gamecontrol_Game.reinforcestate = 0;
	modernversion_AIDirector.reinforcements = [];
	modernversion_AIDirector.reinforcementtime = [];
	gamecontrol_Localworld.worldblock[gamecontrol_Localworld.STAIRS].charcode_fog = 44;
	if(!modernversion_AIDirector.outside) {
		modernversion_Modern.worldx = 50;
		modernversion_Modern.worldy = 50;
		var outsideitemlist = ["helix wing"];
		outsideitemlist.push(haxegon_Random.pickstring("time stopper","cardboard box","matchstick","teleporter"));
		outsideitemlist.push("");
		outsideitemlist.push("");
		haxegon_Random.shufflearray_String(outsideitemlist);
		modernversion_Modern.itemtopleft = outsideitemlist.pop();
		modernversion_Modern.itemtopright = outsideitemlist.pop();
		modernversion_Modern.itembottomleft = outsideitemlist.pop();
		modernversion_Modern.itembottomright = outsideitemlist.pop();
	}
	modernversion_AIDirector.glitchmode = false;
	modernversion_AIDirector.outside = true;
	modernversion_AIDirector.style = modernversion_Roomstyle.outside;
	modernversion_AIDirector.floor = gamecontrol_Game.floor;
	modernversion_Levelgen.outsidegen();
	if(modernversion_Modern.lefttowerdir == "left") {
		terrylib_Obj.createentity(9,9,"player");
	} else if(modernversion_Modern.lefttowerdir == "up") {
		terrylib_Obj.createentity(16,2,"player");
	} else if(modernversion_Modern.lefttowerdir == "down") {
		terrylib_Obj.createentity(16,15,"player");
	} else {
		terrylib_Obj.createentity(23,9,"player");
	}
	gamecontrol_Localworld.setroomfog(1);
	gamecontrol_Localworld.updatelighting();
	modernversion_Modern.startfadein();
};
modernversion_Modern.restartfadeout = function() {
	modernversion_Modern.endlevelanimationstate = 1;
	modernversion_Modern.endlevelanimationaction = "restart";
};
modernversion_Modern.restart = function() {
	modernversion_AIDirector.outside = true;
	modernversion_Modern.inventoryslots = modernversion_Modern.initslots;
	gamecontrol_Game.reinforcestate = 0;
	modernversion_Modern.currentslot = 0;
	var _g1 = 0;
	var _g = modernversion_Modern.initslots + 1;
	while(_g1 < _g) {
		var i = _g1++;
		modernversion_Modern.inventory[i] = "";
		modernversion_Modern.inventory_num[i] = 0;
	}
	modernversion_Modern.hpflash = 0;
	modernversion_Modern.gemflash = 0;
	modernversion_Modern.keyflash = 0;
	modernversion_Modern.waitflash = 0;
	gamecontrol_Game.restartgame();
	modernversion_Modern.streakcount = 0;
	modernversion_AIDirector.restart();
	if(modernversion_AIDirector.seed == "random") {
		modernversion_Modern.currentrunseed = Math.random() * 16807 | 0;
		terrylib_Rand.setseed(modernversion_Modern.currentrunseed);
	} else {
		modernversion_Modern.currentrunseed = modernversion_Levelgen.stringseed(modernversion_AIDirector.seed) + gamecontrol_Game.floor;
		terrylib_Rand.setseed(modernversion_Modern.currentrunseed);
	}
	modernversion_AIDirector.designfloor();
	modernversion_Levelgen.createroom();
	while(!modernversion_AIDirector.assessroom()) modernversion_Levelgen.createroom();
	modernversion_Modern.startfadein();
};
modernversion_Modern.updatepalette = function(forcechange) {
	if(forcechange != null) {
		if(forcechange == null) {
			gamecontrol_Localworld.changepalette("darkred",0);
		} else {
			switch(forcechange[1]) {
			case 0:
				gamecontrol_Localworld.changepalette("blue",0);
				break;
			case 1:
				gamecontrol_Localworld.changepalette("purple",1);
				break;
			case 2:
				gamecontrol_Localworld.changepalette("gray",2);
				break;
			case 3:
				gamecontrol_Localworld.changepalette("darkred",0);
				break;
			case 4:
				gamecontrol_Localworld.changepalette("green",3);
				break;
			case 5:
				gamecontrol_Localworld.changepalette("blue",4);
				break;
			case 6:
				gamecontrol_Localworld.changepalette("darkred",0);
				break;
			case 7:
				gamecontrol_Localworld.changepalette("gray",5);
				break;
			}
		}
	} else {
		switch(modernversion_AIDirector.style[1]) {
		case 0:
			gamecontrol_Localworld.changepalette("blue",0);
			break;
		case 1:
			gamecontrol_Localworld.changepalette("purple",1);
			break;
		case 2:
			gamecontrol_Localworld.changepalette("gray",2);
			break;
		case 3:
			gamecontrol_Localworld.changepalette("darkred",0);
			break;
		case 4:
			gamecontrol_Localworld.changepalette("green",3);
			break;
		case 5:
			gamecontrol_Localworld.changepalette("blue",4);
			break;
		case 6:
			gamecontrol_Localworld.changepalette("darkred",0);
			break;
		case 7:
			gamecontrol_Localworld.changepalette("gray",5);
			break;
		}
	}
};
modernversion_Modern.updatepalettealarm = function() {
	switch(modernversion_AIDirector.style[1]) {
	case 0:
		gamecontrol_Localworld.changepalette("red",0);
		break;
	case 1:
		gamecontrol_Localworld.changepalette("red",1);
		break;
	case 2:
		gamecontrol_Localworld.changepalette("red",2);
		break;
	case 3:
		gamecontrol_Localworld.changepalette("red",0);
		break;
	case 4:
		gamecontrol_Localworld.changepalette("red",3);
		break;
	case 6:
		gamecontrol_Localworld.changepalette("red",0);
		break;
	default:
		gamecontrol_Localworld.changepalette("red",0);
	}
};
modernversion_Modern.usestairs = function() {
	haxegon_Music.playsound("nextfloor");
	modernversion_Modern.playeronstairs = true;
	if(modernversion_AIDirector.outside) {
		modernversion_AIDirector.outside = false;
		if((Math.max(Math.abs(modernversion_Modern.worldx - 50),Math.abs(modernversion_Modern.worldy - 50)) | 0) > 0) {
			modernversion_AIDirector.glitchmode = true;
		} else {
			modernversion_Modern.streakcount++;
		}
	}
	modernversion_Modern.endlevelanimationstate = 1;
	if(modernversion_AIDirector.floor >= 16) {
		modernversion_Modern.endlevelanimationaction = "endgame";
	} else {
		modernversion_Modern.endlevelanimationaction = "next";
	}
};
modernversion_Modern.checkfortowerexit = function() {
	if(modernversion_AIDirector.outside) {
		var player = terrylib_Obj.getplayer();
		if(!terrylib_Help.inboxw(terrylib_Obj.entities[player].xp,terrylib_Obj.entities[player].yp,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
			if(terrylib_Obj.entities[player].xp < 0) {
				terrylib_Obj.entities[player].xp += 32;
				modernversion_Modern.worldx--;
			} else if(terrylib_Obj.entities[player].xp >= 32) {
				terrylib_Obj.entities[player].xp -= 32;
				modernversion_Modern.worldx++;
			} else if(terrylib_Obj.entities[player].yp < 0) {
				terrylib_Obj.entities[player].yp += 19;
				modernversion_Modern.worldy--;
			} else if(terrylib_Obj.entities[player].yp >= 19) {
				terrylib_Obj.entities[player].yp -= 19;
				modernversion_Modern.worldy++;
			}
			var px = terrylib_Obj.entities[player].xp;
			var py = terrylib_Obj.entities[player].yp;
			modernversion_Levelgen.outsidegen();
			terrylib_Obj.createentity(px,py,"player");
			if(gamecontrol_Localworld.onfire) {
				gamecontrol_Localworld.extingushfireblock(px,py);
			}
			gamecontrol_Localworld.updatelighting();
		}
	} else {
		var player1 = terrylib_Obj.getplayer();
		if(!terrylib_Help.inboxw(terrylib_Obj.entities[player1].xp,terrylib_Obj.entities[player1].yp,0,0,terrylib_World.mapwidth - 1,terrylib_World.mapheight - 1)) {
			modernversion_Modern.endlevelanimationstate = 1;
			modernversion_Modern.endlevelanimationaction = "leftmap";
			if(terrylib_Obj.entities[player1].xp < 0) {
				modernversion_Modern.lefttowerdir = "left";
			} else if(terrylib_Obj.entities[player1].yp < 0) {
				modernversion_Modern.lefttowerdir = "up";
			} else if(terrylib_Obj.entities[player1].yp > terrylib_World.mapheight - 1) {
				modernversion_Modern.lefttowerdir = "down";
			} else {
				modernversion_Modern.lefttowerdir = "right";
			}
		} else if(gamecontrol_Game.floor == 16) {
			modernversion_Modern.temptile = terrylib_World.at(terrylib_Obj.entities[player1].xp,terrylib_Obj.entities[player1].yp);
			if(modernversion_Modern.temptile == gamecontrol_Localworld.ROOFBACKGROUND || modernversion_Modern.temptile == gamecontrol_Localworld.ROOFSIDE || modernversion_Modern.temptile == gamecontrol_Localworld.ROOFSTARS) {
				modernversion_Modern.endlevelanimationstate = 1;
				modernversion_Modern.endlevelanimationaction = "leftmap";
				if(modernversion_Modern.temptile == gamecontrol_Localworld.ROOFSIDE) {
					modernversion_Modern.lefttowerdir = "down";
				} else if(terrylib_Obj.entities[player1].xp < 7) {
					modernversion_Modern.lefttowerdir = "left";
				} else if(terrylib_Obj.entities[player1].yp < 7) {
					modernversion_Modern.lefttowerdir = "up";
				} else {
					modernversion_Modern.lefttowerdir = "right";
				}
			}
		}
	}
};
modernversion_Modern.usestairs_afteranimation = function() {
	modernversion_Modern.playeronstairs = false;
	modernversion_Modern.playerjustteleported = false;
	modernversion_AIDirector.floor++;
	if(modernversion_AIDirector.seed == "random") {
		terrylib_Rand.setseed(Math.random() * 16807 | 0);
	} else {
		terrylib_Rand.setseed(modernversion_Levelgen.stringseed(modernversion_AIDirector.seed) + gamecontrol_Game.floor);
	}
	modernversion_AIDirector.designfloor();
	modernversion_Levelgen.createroom();
	while(!modernversion_AIDirector.assessroom()) modernversion_Levelgen.createroom();
	if(modernversion_AIDirector.glitchmode) {
		var gempositions = [];
		var _g1 = 0;
		var _g = terrylib_Obj.nentity;
		while(_g1 < _g) {
			var i = _g1++;
			if(terrylib_Obj.entities[i].active) {
				if(terrylib_Obj.entities[i].rule == "treasure") {
					gempositions.push(i);
					terrylib_Obj.entities[i].active = false;
				}
			}
		}
		var _g11 = 0;
		var _g2 = gempositions.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			terrylib_Obj.createentity(terrylib_Obj.entities[gempositions[i1]].xp,terrylib_Obj.entities[gempositions[i1]].yp,"item","error");
		}
	}
	if(modernversion_Modern.streakcount > 0) {
		if(modernversion_Modern.streakcount >= 1) {
			var guardpositions = [];
			var _g12 = 0;
			var _g3 = terrylib_Obj.nentity;
			while(_g12 < _g3) {
				var i2 = _g12++;
				if(terrylib_Obj.entities[i2].active) {
					if(terrylib_Obj.entities[i2].type == "guard") {
						guardpositions.push(i2);
						terrylib_Obj.entities[i2].active = false;
					}
				}
			}
			var _g13 = 0;
			var _g4 = guardpositions.length;
			while(_g13 < _g4) {
				var i3 = _g13++;
				terrylib_Obj.createentity(terrylib_Obj.entities[guardpositions[i3]].xp,terrylib_Obj.entities[guardpositions[i3]].yp,"enemy","laserguard");
			}
			guardpositions = [];
			var _g14 = 0;
			var _g5 = terrylib_Obj.nentity;
			while(_g14 < _g5) {
				var i4 = _g14++;
				if(terrylib_Obj.entities[i4].active) {
					if(terrylib_Obj.entities[i4].type == "camera") {
						guardpositions.push(i4);
						terrylib_Obj.entities[i4].active = false;
					}
				}
			}
			var _g15 = 0;
			var _g6 = guardpositions.length;
			while(_g15 < _g6) {
				var i5 = _g15++;
				terrylib_Obj.createentity(terrylib_Obj.entities[guardpositions[i5]].xp,terrylib_Obj.entities[guardpositions[i5]].yp,"enemy","lasercamera");
			}
			guardpositions = [];
			var _g16 = 0;
			var _g7 = terrylib_Obj.nentity;
			while(_g16 < _g7) {
				var i6 = _g16++;
				if(terrylib_Obj.entities[i6].active) {
					if(terrylib_Obj.entities[i6].type == "sentinal") {
						guardpositions.push(i6);
						terrylib_Obj.entities[i6].active = false;
					}
				}
			}
			var _g17 = 0;
			var _g8 = guardpositions.length;
			while(_g17 < _g8) {
				var i7 = _g17++;
				terrylib_Obj.createentity(terrylib_Obj.entities[guardpositions[i7]].xp,terrylib_Obj.entities[guardpositions[i7]].yp,"enemy","lasersentinal");
			}
		}
		if(modernversion_Modern.streakcount >= 2) {
			var guardpositions1 = [];
			var _g18 = 0;
			var _g9 = terrylib_Obj.nentity;
			while(_g18 < _g9) {
				var i8 = _g18++;
				if(terrylib_Obj.entities[i8].active) {
					if(terrylib_Obj.entities[i8].type == "robot") {
						guardpositions1.push(i8);
						terrylib_Obj.entities[i8].active = false;
					}
				}
			}
			var _g19 = 0;
			var _g10 = guardpositions1.length;
			while(_g19 < _g10) {
				var i9 = _g19++;
				terrylib_Obj.createentity(terrylib_Obj.entities[guardpositions1[i9]].xp,terrylib_Obj.entities[guardpositions1[i9]].yp,"enemy","terminator");
			}
		}
	}
	modernversion_Modern.startfadein();
};
modernversion_Modern.startfadein = function() {
	modernversion_Modern.endlevelanimationstate = -1;
	var player = terrylib_Obj.getplayer();
	modernversion_Modern.endlevelanimationx = terrylib_Obj.entities[player].xp;
	modernversion_Modern.endlevelanimationy = terrylib_Obj.entities[player].yp;
};
modernversion_Modern.drawbubble = function(x,y,w,h,backingcol,bordercol,innercol) {
	gamecontrol_Draw.roundfillrect(x,y,w,h,bordercol);
	gamecontrol_Draw.roundfillrect(x + 1,y + 1,w - 2,h - 2,backingcol);
	gamecontrol_Draw.roundfillrect(x + 2,y + 2,w - 4,h - 4,innercol);
};
modernversion_Modern.useitem = function(e,itemname) {
	modernversion_Modern.currentitem = modernversion_Itemstats.get(itemname);
	if(modernversion_Modern.currentitem.type == gamecontrol_Inventory.USEABLE) {
		gamecontrol_Use.doitemaction(modernversion_Modern.currentitem.index);
		modernversion_Modern.inventory[modernversion_Modern.currentslot] = "";
	} else if(modernversion_Modern.currentitem.type == gamecontrol_Inventory.GADGET) {
		gamecontrol_Use.usegadget(terrylib_Obj.entities.indexOf(e),modernversion_Modern.currentitem.index);
		modernversion_Modern.inventory_num[modernversion_Modern.currentslot]--;
		if(modernversion_Modern.inventory_num[modernversion_Modern.currentslot] <= 0) {
			modernversion_Modern.inventory[modernversion_Modern.currentslot] = "";
		}
	}
	modernversion_Modern.reorderinventory();
};
modernversion_Modern.swapinventory = function(a,b) {
	var temp = modernversion_Modern.inventory[a];
	modernversion_Modern.inventory[a] = modernversion_Modern.inventory[b];
	modernversion_Modern.inventory[b] = temp;
	var temp_amount = modernversion_Modern.inventory_num[a];
	modernversion_Modern.inventory_num[a] = modernversion_Modern.inventory_num[b];
	modernversion_Modern.inventory_num[b] = temp_amount;
};
modernversion_Modern.reorderinventory = function() {
	if(modernversion_Modern.inventory[2] != "" && modernversion_Modern.inventory[1] == "") {
		modernversion_Modern.swapinventory(2,1);
	}
	if(modernversion_Modern.inventory[1] != "" && modernversion_Modern.inventory[0] == "") {
		modernversion_Modern.swapinventory(1,0);
	}
	if(modernversion_Modern.inventory[2] != "" && modernversion_Modern.inventory[1] == "") {
		modernversion_Modern.swapinventory(2,1);
	}
};
modernversion_Modern.slotsfree = function() {
	var s = 0;
	var _g1 = 0;
	var _g = modernversion_Modern.inventoryslots;
	while(_g1 < _g) if(modernversion_Modern.inventory[_g1++] == "") {
		++s;
	}
	return s;
};
modernversion_Modern.pickupitembyitemclass = function(e) {
	if(modernversion_AIDirector.outside) {
		if(modernversion_Modern.worldx - 50 == -1 && modernversion_Modern.worldy - 50 == -1) {
			modernversion_Modern.itemtopleft = "";
		} else if(modernversion_Modern.worldx - 50 == 1 && modernversion_Modern.worldy - 50 == -1) {
			modernversion_Modern.itemtopright = "";
		} else if(modernversion_Modern.worldx - 50 == -1 && modernversion_Modern.worldy - 50 == 1) {
			modernversion_Modern.itembottomleft = "";
		} else if(modernversion_Modern.worldx - 50 == 1 && modernversion_Modern.worldy - 50 == 1) {
			modernversion_Modern.itembottomright = "";
		}
	}
	var freeslot = -1;
	var emptyinventory = true;
	var _g1 = 0;
	var _g = modernversion_Modern.inventoryslots;
	while(_g1 < _g) {
		var i = _g1++;
		if(modernversion_Modern.inventory[i] != "") {
			emptyinventory = false;
		}
		if(freeslot == -1) {
			if(modernversion_Modern.inventory[i] == "") {
				freeslot = i;
			}
		}
	}
	if(freeslot == -1) {
		freeslot = modernversion_Modern.inventoryslots;
		modernversion_Modern.oldcurrentslot = modernversion_Modern.currentslot;
	}
	modernversion_Modern.currentitem = e;
	if(modernversion_Modern.currentitem.type == gamecontrol_Inventory.GADGET || modernversion_Modern.currentitem.type == gamecontrol_Inventory.USEABLE) {
		haxegon_Music.playsound("collectitem");
	}
	modernversion_Modern.inventory[freeslot] = modernversion_Modern.currentitem.name;
	if(modernversion_Modern.currentitem.hasmultipleshots) {
		modernversion_Modern.inventory_num[freeslot] = modernversion_Modern.currentitem.typical;
	} else {
		modernversion_Modern.inventory_num[freeslot] = 1;
	}
	if(emptyinventory) {
		modernversion_Modern.currentslot = freeslot;
	}
	if(freeslot == modernversion_Modern.inventoryslots) {
		modernversion_Modern.popup("newitem_drop",modernversion_Modern.currentitem);
	} else {
		modernversion_Modern.popup("newitem",modernversion_Modern.currentitem);
	}
};
modernversion_Modern.pickupitem = function(e) {
	if(modernversion_AIDirector.outside) {
		if(modernversion_Modern.worldx - 50 == -1 && modernversion_Modern.worldy - 50 == -1) {
			modernversion_Modern.itemtopleft = "";
		} else if(modernversion_Modern.worldx - 50 == 1 && modernversion_Modern.worldy - 50 == -1) {
			modernversion_Modern.itemtopright = "";
		} else if(modernversion_Modern.worldx - 50 == -1 && modernversion_Modern.worldy - 50 == 1) {
			modernversion_Modern.itembottomleft = "";
		} else if(modernversion_Modern.worldx - 50 == 1 && modernversion_Modern.worldy - 50 == 1) {
			modernversion_Modern.itembottomright = "";
		}
	}
	var freeslot = -1;
	var emptyinventory = true;
	var _g1 = 0;
	var _g = modernversion_Modern.inventoryslots;
	while(_g1 < _g) {
		var i = _g1++;
		if(modernversion_Modern.inventory[i] != "") {
			emptyinventory = false;
		}
		if(freeslot == -1) {
			if(modernversion_Modern.inventory[i] == "") {
				freeslot = i;
			}
		}
	}
	if(freeslot == -1) {
		freeslot = modernversion_Modern.inventoryslots;
		modernversion_Modern.oldcurrentslot = modernversion_Modern.currentslot;
	}
	modernversion_Modern.currentitem = modernversion_Itemstats.get(e.name);
	if(modernversion_Modern.currentitem.type == gamecontrol_Inventory.GADGET || modernversion_Modern.currentitem.type == gamecontrol_Inventory.USEABLE) {
		haxegon_Music.playsound("collectitem");
	}
	modernversion_Modern.inventory[freeslot] = modernversion_Modern.currentitem.name;
	if(modernversion_Modern.currentitem.hasmultipleshots) {
		modernversion_Modern.inventory_num[freeslot] = modernversion_Modern.currentitem.typical;
	} else {
		modernversion_Modern.inventory_num[freeslot] = 1;
	}
	if(emptyinventory) {
		modernversion_Modern.currentslot = freeslot;
	}
	if(freeslot == modernversion_Modern.inventoryslots) {
		modernversion_Modern.popup("newitem_drop",modernversion_Modern.currentitem);
	} else {
		modernversion_Modern.popup("newitem",modernversion_Modern.currentitem);
	}
};
modernversion_Modern.showitems = function() {
	var tx = haxegon_Gfx.screenwidth - modernversion_Modern.inventoryslots * 28;
	var ty = haxegon_Gfx.screenheight - 25;
	modernversion_Modern.guibackingcolour = gamecontrol_Game.backgroundcolour;
	if(gamecontrol_Game.messagedelay != 0) {
		modernversion_Modern.guibackingcolour = gamecontrol_Draw.messagecolback(gamecontrol_Game.messagecol);
	}
	var _g1 = 0;
	var _g = modernversion_Modern.inventory.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(modernversion_Modern.inventory[i] != "") {
			gamecontrol_Draw.roundfillrect(tx + i * 28 - 2,ty - 1,26,24,gamecontrol_Localworld.worldblock[gamecontrol_Localworld.WALL].front_fog);
		}
		modernversion_Modern.currentitem = modernversion_Itemstats.get(modernversion_Modern.inventory[i]);
		if(modernversion_Modern.currentitem.hasmultipleshots == true) {
			modernversion_Modern.drawbubble(tx + i * 28,ty,22,22,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b),0.8),0,0);
			haxegon_Gfx.imagecolor(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b));
			haxegon_Gfx.drawtile(tx + i * 28 + 5,ty + 5,"terminal",HxOverrides.cca(modernversion_Modern.currentitem.character,0));
			haxegon_Gfx.imagecolor();
			haxegon_Gfx.fillbox(tx + i * 28 + 14 - 1,ty - 3 - 1,haxegon_Text.width("x" + modernversion_Modern.inventory_num[i]) + 4,12,0);
			haxegon_Gfx.fillbox(tx + i * 28 + 14,ty - 3,haxegon_Text.width("x" + modernversion_Modern.inventory_num[i]) + 2,10,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b),0.8));
			haxegon_Text.display(tx + i * 28 + 15,ty - 5,"x" + modernversion_Modern.inventory_num[i],0);
		} else if(modernversion_Modern.currentitem.type == gamecontrol_Inventory.USEABLE || modernversion_Modern.currentitem.type == gamecontrol_Inventory.GADGET) {
			modernversion_Modern.drawbubble(tx + i * 28,ty,22,22,gamecontrol_Draw.shade(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b),0.8),0,0);
			haxegon_Gfx.imagecolor(haxegon_Col.rgb(modernversion_Modern.currentitem.r,modernversion_Modern.currentitem.g,modernversion_Modern.currentitem.b));
			haxegon_Gfx.drawtile(tx + i * 28 + 5,ty + 5,"terminal",HxOverrides.cca(modernversion_Modern.currentitem.character,0));
			haxegon_Gfx.imagecolor();
		} else {
			modernversion_Modern.drawbubble(tx + i * 28,ty,22,22,4473924,0,0);
		}
		haxegon_Text.display(tx + i * 28 + 18,ty + 12,i + 1 + "",16777215);
	}
	if(gamecontrol_Game.messagedelay == 0) {
		haxegon_Text.align(haxegon_Text.RIGHT);
		var waitcol = haxegon_Col.rgb(220,220,220);
		if(modernversion_Modern.waitflash > 0) {
			var waitflashamount = Math.min(220 + modernversion_Modern.waitflash * 5,255) | 0;
			waitcol = haxegon_Col.rgb(waitflashamount,waitflashamount,waitflashamount);
			modernversion_Modern.waitflash--;
		}
		haxegon_Text.display(haxegon_Gfx.screenwidth - modernversion_Modern.inventoryslots * 26 - 18,haxegon_Gfx.screenheight - 14,"Z - Wait",waitcol);
		haxegon_Text.align(haxegon_Text.LEFT);
	}
};
var modernversion_Weapon = function() { };
$hxClasses["modernversion.Weapon"] = modernversion_Weapon;
modernversion_Weapon.__name__ = ["modernversion","Weapon"];
var terrylib_util_Ent_$generic = function() {
	this.para3_drawframe = [];
	this.para2_drawframe = [];
	this.para1_drawframe = [];
	this.para3 = [];
	this.para2 = [];
	this.para1 = [];
};
$hxClasses["terrylib.util.Ent_generic"] = terrylib_util_Ent_$generic;
terrylib_util_Ent_$generic.__name__ = ["terrylib","util","Ent_generic"];
terrylib_util_Ent_$generic.prototype = {
	create: function(i,xp,yp,para1,para2,para3) {
		if(para3 == null) {
			para3 = "0";
		}
		if(para2 == null) {
			para2 = "0";
		}
		if(para1 == null) {
			para1 = "0";
		}
	}
	,insight: function(i) {
	}
	,dealert: function(i) {
	}
	,alert: function(i) {
	}
	,stun: function(i,time) {
	}
	,kill: function(i) {
	}
	,setupcollision: function(i) {
	}
	,update: function(i) {
	}
	,animate: function(i) {
	}
	,drawentity: function(i) {
	}
	,drawinit: function(i,xoff,yoff,frame) {
	}
	,collision: function(i,j) {
	}
	,addpara1: function(t,f) {
		if(f == null) {
			f = -1;
		}
		this.para1.push(t);
		if(f == -1) {
			this.para1_drawframe.push(this.init_drawframe);
		} else {
			this.para1_drawframe.push(f);
		}
	}
	,addpara2: function(t,f) {
		if(f == null) {
			f = -1;
		}
		this.para2.push(t);
		if(f == -1) {
			this.para2_drawframe.push(this.init_drawframe);
		} else {
			this.para2_drawframe.push(f);
		}
	}
	,addpara3: function(t,f) {
		if(f == null) {
			f = -1;
		}
		this.para3.push(t);
		if(f == -1) {
			this.para3_drawframe.push(this.init_drawframe);
		} else {
			this.para3_drawframe.push(f);
		}
	}
	,setpara1selection: function(t) {
		var _g1 = 0;
		var _g = this.para1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(terrylib_Obj.initentities[t].para1 == this.para1[i]) {
				terrylib_Obj.initentities[t].para1_selection = i;
			}
		}
	}
	,setpara2selection: function(t) {
		var _g1 = 0;
		var _g = this.para2.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(terrylib_Obj.initentities[t].para2 == this.para2[i]) {
				terrylib_Obj.initentities[t].para2_selection = i;
			}
		}
	}
	,setpara3selection: function(t) {
		var _g1 = 0;
		var _g = this.para3.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(terrylib_Obj.initentities[t].para3 == this.para3[i]) {
				terrylib_Obj.initentities[t].para3_selection = i;
			}
		}
	}
	,getinsights_thisframe: function(t) {
		return false;
	}
	,setinsights_thisframe: function(t) {
	}
	,getalerted_thisframe: function(t) {
		return false;
	}
	,setalerted_thisframe: function(t) {
	}
	,name: null
	,init_drawframe: null
	,para1: null
	,para2: null
	,para3: null
	,para1_name: null
	,para2_name: null
	,para3_name: null
	,para1_drawframe: null
	,para2_drawframe: null
	,para3_drawframe: null
	,__class__: terrylib_util_Ent_$generic
};
var objs_Ent_$enemy = function() {
	terrylib_util_Ent_$generic.call(this);
	this.name = "enemy";
	this.init_drawframe = 1;
	this.addpara1("guard",0);
};
$hxClasses["objs.Ent_enemy"] = objs_Ent_$enemy;
objs_Ent_$enemy.__name__ = ["objs","Ent_enemy"];
objs_Ent_$enemy.__super__ = terrylib_util_Ent_$generic;
objs_Ent_$enemy.prototype = $extend(terrylib_util_Ent_$generic.prototype,{
	create: function(i,xp,yp,para1,para2,para3) {
		if(para3 == null) {
			para3 = "0";
		}
		if(para2 == null) {
			para2 = "0";
		}
		if(para1 == null) {
			para1 = "0";
		}
		terrylib_Obj.entities[i].rule = "enemy";
		terrylib_Obj.entities[i].tileset = "terminal";
		terrylib_Obj.entities[i].name = para1;
		terrylib_Obj.entities[i].type = para1;
		this.setupcollision(i);
		switch(terrylib_Obj.entities[i].type) {
		case "bombbot":
			terrylib_Obj.entities[i].tile = 206;
			terrylib_Obj.entities[i].ai = "none";
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].lightsource = "none";
			terrylib_Obj.entities[i].speed = 0;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].dir = terrylib_Help.RIGHT;
			terrylib_Obj.entities[i].canattack = false;
			terrylib_Obj.entities[i].isarobot = true;
			if(gamecontrol_Game.alarm) {
				gamecontrol_Localworld.alertedtoplayer(i);
			}
			break;
		case "dog":
			terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0);
			terrylib_Obj.entities[i].ai = "none";
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].lightsource = "dogbubble";
			terrylib_Obj.entities[i].cameradir = 0;
			this.update(i);
			terrylib_Obj.entities[i].speed = 1;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].dir = terrylib_Help.RIGHT;
			terrylib_Obj.entities[i].dogdir = terrylib_Help.RIGHT;
			terrylib_Obj.entities[i].canattack = true;
			terrylib_Obj.entities[i].isarobot = false;
			if(gamecontrol_Game.alarm) {
				gamecontrol_Localworld.alertedtoplayer(i);
			}
			break;
		case "drone_laser":case "drone_light":
			terrylib_Obj.entities[i].tile = 15;
			terrylib_Obj.entities[i].ai = terrylib_Rand.ppickstring("clockwisefollowwall","anticlockwisefollowwall");
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].speed = 0;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].isarobot = true;
			if(terrylib_Obj.entities[i].type == "drone_light") {
				terrylib_Obj.entities[i].col = 16777215;
				terrylib_Obj.entities[i].lightsource = "laserbeside";
			} else if(terrylib_Obj.entities[i].type == "drone_laser") {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].lightsource = "laserbeside";
				terrylib_Obj.entities[i].alertbysound = false;
			}
			terrylib_Obj.entities[i].canturn = false;
			terrylib_Obj.entities[i].canattack = false;
			terrylib_Obj.entities[i].fireproof = true;
			gamecontrol_Game.attachtowall(i);
			break;
		case "fireman":
			terrylib_Obj.entities[i].tile = HxOverrides.cca("f",0);
			terrylib_Obj.entities[i].ai = "random";
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].lightsource = "none";
			terrylib_Obj.entities[i].para = 6;
			terrylib_Obj.entities[i].speed = 3;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].dir = terrylib_Help.randomdirection();
			terrylib_Obj.entities[i].fireproof = true;
			terrylib_Obj.entities[i].canattack = false;
			terrylib_Obj.entities[i].isarobot = false;
			if(gamecontrol_Game.alarm) {
				gamecontrol_Localworld.alertedtoplayer(i);
			}
			break;
		case "guard":case "guard_clockwise_d":case "guard_clockwise_l":case "guard_clockwise_r":case "guard_clockwise_u":case "laserguard":
			terrylib_Obj.entities[i].dir = terrylib_Help.randomdirection();
			terrylib_Obj.entities[i].tile = HxOverrides.cca("G",0) + terrylib_Obj.entities[i].dir;
			if(haxegon_S.isinstring(terrylib_Obj.entities[i].type,"clockwise")) {
				switch(haxegon_S.getlastbranch(terrylib_Obj.entities[i].type,"_")) {
				case "d":
					terrylib_Obj.entities[i].dir = terrylib_Help.DOWN;
					break;
				case "l":
					terrylib_Obj.entities[i].dir = terrylib_Help.LEFT;
					break;
				case "r":
					terrylib_Obj.entities[i].dir = terrylib_Help.RIGHT;
					break;
				case "u":
					terrylib_Obj.entities[i].dir = terrylib_Help.UP;
					break;
				}
				terrylib_Obj.entities[i].ai = "clockwiserandommarch";
				terrylib_Obj.entities[i].type = "guard";
			} else {
				terrylib_Obj.entities[i].ai = terrylib_Rand.ppickstring("clockwiserandommarch","anticlockwiserandommarch");
			}
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].speed = 1;
			terrylib_Obj.entities[i].health = 1;
			if(terrylib_Obj.entities[i].type == "laserguard") {
				terrylib_Obj.entities[i].lightsource = "laserdirectional";
			} else if(terrylib_Obj.entities[i].type == "guard") {
				terrylib_Obj.entities[i].lightsource = "directional";
			}
			terrylib_Obj.entities[i].col = 16777215;
			terrylib_Obj.entities[i].isarobot = false;
			if(gamecontrol_Game.alarm) {
				gamecontrol_Localworld.alertedtoplayer(i);
			}
			break;
		case "camera":case "lasercamera":
			terrylib_Obj.entities[i].tile = HxOverrides.cca("C",0) + gamecontrol_Game.cameraframe(terrylib_Obj.entities[i].cameradir);
			terrylib_Obj.entities[i].ai = "none";
			terrylib_Obj.entities[i].lightsource = terrylib_Obj.entities[i].type;
			terrylib_Obj.entities[i].speed = 1;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].isarobot = true;
			if(para2 == "preplaced") {
				gamecontrol_Game.faceawayfromwall(i);
			} else {
				gamecontrol_Game.attachtocorner(i);
				gamecontrol_Game.faceawayfromwall(i);
			}
			if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
				terrylib_Obj.entities[i].dir = terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir);
			}
			if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
				terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
			}
			if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
				terrylib_Obj.entities[i].dir = terrylib_Help.oppositedirection(terrylib_Obj.entities[i].dir);
			}
			if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir))) {
				terrylib_Obj.entities[i].dir = terrylib_Help.clockwise(terrylib_Obj.entities[i].dir);
			}
			terrylib_Obj.entities[i].col = 16777215;
			if(terrylib_Obj.entities[i].type == "lasercamera") {
				terrylib_Obj.entities[i].col = 16711680;
			}
			terrylib_Obj.entities[i].cameradir = terrylib_Help.convertcardinaltoangle(terrylib_Obj.entities[i].dir);
			terrylib_Obj.entities[i].camerapower = 8;
			terrylib_Obj.entities[i].alertbysound = false;
			terrylib_Obj.entities[i].canattack = false;
			terrylib_Obj.entities[i].para = 18;
			if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir)),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir)))) {
				if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)))) {
					if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Obj.entities[i].dir) + gamecontrol_Localworld.xstep(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir)),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Obj.entities[i].dir) + gamecontrol_Localworld.ystep(terrylib_Help.clockwise(terrylib_Obj.entities[i].dir)))) {
						terrylib_Obj.entities[i].state = 3;
						terrylib_Obj.entities[i].stringpara = "left";
					} else {
						terrylib_Obj.entities[i].state = 4;
						terrylib_Obj.entities[i].stringpara = "right";
					}
				} else {
					terrylib_Obj.entities[i].state = 3;
					terrylib_Obj.entities[i].stringpara = "left";
				}
			} else if(terrylib_World.collide(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(terrylib_Help.anticlockwise(terrylib_Obj.entities[i].dir)))) {
				terrylib_Obj.entities[i].state = 4;
				terrylib_Obj.entities[i].stringpara = "right";
			} else {
				terrylib_Obj.entities[i].cameradir += 45;
				terrylib_Obj.entities[i].state = 4;
				terrylib_Obj.entities[i].stringpara = "right";
			}
			if(gamecontrol_Game.alarm) {
				gamecontrol_Localworld.alertedtoplayer(i);
			}
			break;
		case "lasersentinal":case "sentinal":
			terrylib_Obj.entities[i].tile = HxOverrides.cca("c",0);
			terrylib_Obj.entities[i].ai = "none";
			terrylib_Obj.entities[i].lightsource = terrylib_Obj.entities[i].type;
			terrylib_Obj.entities[i].speed = 1;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].isarobot = true;
			terrylib_Obj.entities[i].dir = terrylib_Help.randomdirection();
			terrylib_Obj.entities[i].col = 16777215;
			if(terrylib_Obj.entities[i].type == "lasersentinal") {
				terrylib_Obj.entities[i].col = 16711680;
			}
			terrylib_Obj.entities[i].cameradir = 0;
			terrylib_Obj.entities[i].camerapower = 8;
			terrylib_Obj.entities[i].alertbysound = false;
			terrylib_Obj.entities[i].canattack = false;
			terrylib_Obj.entities[i].state = 0;
			if(gamecontrol_Game.alarm) {
				gamecontrol_Localworld.alertedtoplayer(i);
			}
			break;
		case "robot":
			terrylib_Obj.entities[i].tile = 236;
			terrylib_Obj.entities[i].ai = "pathfind";
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].lightsource = "laser_narrow";
			terrylib_Obj.entities[i].speed = 1;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].col = 16729156;
			terrylib_Obj.entities[i].alertbysound = false;
			terrylib_Obj.entities[i].canattack = false;
			terrylib_Obj.entities[i].fireproof = true;
			terrylib_Obj.entities[i].isarobot = true;
			break;
		case "rook":
			terrylib_Obj.entities[i].tile = 165;
			terrylib_Obj.entities[i].ai = "pathfind_rush";
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].lightsource = "laserbeside";
			terrylib_Obj.entities[i].speed = 0;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].alertbysound = false;
			terrylib_Obj.entities[i].fireproof = true;
			terrylib_Obj.entities[i].isarobot = true;
			if(gamecontrol_Game.alarm) {
				gamecontrol_Localworld.alertedtoplayer(i);
			}
			break;
		case "terminator":
			terrylib_Obj.entities[i].tile = 252;
			terrylib_Obj.entities[i].ai = "pathfind";
			terrylib_Obj.entities[i].stringpara = terrylib_Obj.entities[i].ai;
			terrylib_Obj.entities[i].lightsource = "laser_bubble";
			terrylib_Obj.entities[i].speed = 1;
			terrylib_Obj.entities[i].health = 1;
			terrylib_Obj.entities[i].para = 1;
			terrylib_Obj.entities[i].col = 16777028;
			terrylib_Obj.entities[i].alertbysound = false;
			terrylib_Obj.entities[i].canattack = false;
			terrylib_Obj.entities[i].fireproof = true;
			terrylib_Obj.entities[i].isarobot = true;
			break;
		case "tripwire_down":case "tripwire_left":case "tripwire_right":case "tripwire_up":
			if(terrylib_Obj.entities[i].type == "tripwire_up") {
				terrylib_Obj.entities[i].tile = 144;
				terrylib_Obj.entities[i].dir = terrylib_Help.UP;
			}
			if(terrylib_Obj.entities[i].type == "tripwire_down") {
				terrylib_Obj.entities[i].tile = 145;
				terrylib_Obj.entities[i].dir = terrylib_Help.DOWN;
			}
			if(terrylib_Obj.entities[i].type == "tripwire_left") {
				terrylib_Obj.entities[i].tile = 146;
				terrylib_Obj.entities[i].dir = terrylib_Help.LEFT;
			}
			if(terrylib_Obj.entities[i].type == "tripwire_right") {
				terrylib_Obj.entities[i].tile = 147;
				terrylib_Obj.entities[i].dir = terrylib_Help.RIGHT;
			}
			terrylib_Obj.entities[i].lightsource = "directional_narrow";
			terrylib_Obj.entities[i].col = 16777215;
			terrylib_Obj.entities[i].ai = "none";
			terrylib_Obj.entities[i].canturn = false;
			terrylib_Obj.entities[i].canattack = false;
			terrylib_Obj.entities[i].fireproof = true;
			terrylib_Obj.entities[i].collidable = true;
			break;
		}
	}
	,update: function(i) {
		switch(terrylib_Obj.entities[i].type) {
		case "bombbot":
			if(terrylib_Obj.entities[i].state != 0) {
				if(terrylib_Obj.entities[i].state == 1) {
					if(terrylib_Obj.entities[i].life == 10) {
						var player = terrylib_Obj.getplayer();
						player = gamecontrol_Generator.closestroom_getdist_straight(terrylib_Obj.entities[player].xp,terrylib_Obj.entities[player].yp,terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp);
						if(player <= 10) {
							terrylib_Obj.entities[i].life--;
						}
					} else {
						terrylib_Obj.entities[i].life--;
						if(terrylib_Obj.entities[i].life == 0) {
							gamecontrol_Localworld.explode(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp,3);
							terrylib_Obj.entities[i].active = false;
						}
					}
				} else if(terrylib_Obj.entities[i].state == 2) {
					terrylib_Obj.entities[i].active = false;
					gamecontrol_Localworld.explode(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp,3);
				}
			}
			break;
		case "dog":
			terrylib_Obj.entities[i].lightsource = "none";
			if(terrylib_Obj.entities[i].state == 0) {
				terrylib_Obj.entities[i].lightsource = "dogbubble";
				terrylib_Obj.entities[i].cameradir++;
				if(terrylib_Obj.entities[i].cameradir >= 20) {
					terrylib_Obj.entities[i].cameradir = 0;
				}
				if(terrylib_Obj.entities[i].cameradir < 8) {
					terrylib_Obj.entities[i].para = 0;
				} else if(terrylib_Obj.entities[i].cameradir < 12) {
					terrylib_Obj.entities[i].para = 1;
				} else if(terrylib_Obj.entities[i].cameradir < 16) {
					terrylib_Obj.entities[i].para = 2;
				} else {
					terrylib_Obj.entities[i].para = 1;
				}
			} else if(terrylib_Obj.entities[i].state != 1) {
				if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Obj.entities[i].life > 0) {
						terrylib_Obj.entities[i].life--;
						if(terrylib_Obj.entities[i].life <= 0) {
							terrylib_Obj.entities[i].collidable = true;
							terrylib_Obj.entities[i].col = 16777215;
							terrylib_Obj.entities[i].state = 0;
							terrylib_Obj.entities[i].ai = terrylib_Obj.entities[i].stringpara;
							terrylib_Obj.entities[i].lightsource = "none";
							if(gamecontrol_Game.alarm) {
								gamecontrol_Localworld.alertedtoplayer(i);
							}
						}
					}
				} else if(terrylib_Obj.entities[i].state == 3) {
					if(gamecontrol_Game.adjacent(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp,terrylib_Obj.entities[terrylib_Obj.entities[i].target].xp,terrylib_Obj.entities[terrylib_Obj.entities[i].target].yp)) {
						terrylib_Obj.entities[i].state = 1;
						var tmp = terrylib_Rand.ppickstring("WOOF! WOOF! WOOF!","WOOF!","WOOF! WOOF!");
						terrylib_Obj.entities[i].setmessage(tmp,"flashing");
						gamecontrol_Localworld.alertedtoplayer(terrylib_Obj.entities[i].target);
					}
				}
			}
			break;
		case "drone_laser":case "drone_light":
			if(terrylib_Obj.entities[i].state == 1) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					if(terrylib_Obj.entities[i].life == 0) {
						terrylib_Obj.entities[i].state = 0;
						terrylib_Obj.entities[i].speed = 1;
						if(terrylib_Obj.entities[i].type == "drone_laser") {
							terrylib_Obj.entities[i].col = 16711680;
							terrylib_Obj.entities[i].lightsource = "laser_narrow";
						} else if(terrylib_Obj.entities[i].type == "drone_light") {
							terrylib_Obj.entities[i].col = 16777215;
							terrylib_Obj.entities[i].lightsource = "directional_narrow";
						}
						terrylib_Obj.entities[i].ai = terrylib_Obj.entities[i].stringpara;
					}
				}
			} else if(terrylib_Obj.entities[i].state == 2) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					if(terrylib_Obj.entities[i].life <= 0) {
						terrylib_Obj.entities[i].state = 0;
						terrylib_Obj.entities[i].ai = terrylib_Obj.entities[i].stringpara;
						if(terrylib_Obj.entities[i].type == "drone_laser") {
							terrylib_Obj.entities[i].col = 16711680;
							terrylib_Obj.entities[i].lightsource = "laser_narrow";
						} else if(terrylib_Obj.entities[i].type == "drone_light") {
							terrylib_Obj.entities[i].col = 16777215;
							terrylib_Obj.entities[i].lightsource = "directional_narrow";
						}
						terrylib_Obj.entities[i].speed = 1;
						var tmp1 = terrylib_Rand.ppickstring("REBOOTING...","ALL SYSTEMS OPERATIONAL!");
						terrylib_Obj.entities[i].setmessage(tmp1,"whisper");
						terrylib_Obj.entities[i].collidable = true;
					}
				}
			}
			break;
		case "fireman":
			if(terrylib_Obj.entities[i].state == 2) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					if(terrylib_Obj.entities[i].life <= 0) {
						terrylib_Obj.entities[i].state = 0;
						terrylib_Obj.entities[i].ai = terrylib_Obj.entities[i].stringpara;
						terrylib_Obj.entities[i].lightsource = "none";
						var tmp2 = terrylib_Rand.ppickstring("Lol, fire","HAHAHA");
						terrylib_Obj.entities[i].setmessage(tmp2,"whisper");
						terrylib_Obj.entities[i].collidable = true;
					}
				}
			} else if(gamecontrol_Game.turnspeed(terrylib_Obj.entities[i].speed)) {
				gamecontrol_Localworld.startfire(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp);
			}
			break;
		case "camera":case "lasercamera":
			if(terrylib_Obj.entities[i].state == 3) {
				terrylib_Obj.entities[i].stringpara = "left";
				if(terrylib_Obj.entities[i].para > -4) {
					terrylib_Obj.entities[i].para--;
					if(terrylib_Obj.entities[i].para > 0) {
						terrylib_Obj.entities[i].cameradir += 5;
					}
				} else {
					terrylib_Obj.entities[i].para = 18;
					terrylib_Obj.entities[i].state = 4;
				}
			} else if(terrylib_Obj.entities[i].state == 4) {
				terrylib_Obj.entities[i].stringpara = "right";
				if(terrylib_Obj.entities[i].para > -4) {
					terrylib_Obj.entities[i].para--;
					if(terrylib_Obj.entities[i].para > 0) {
						terrylib_Obj.entities[i].cameradir -= 5;
					}
				} else {
					terrylib_Obj.entities[i].para = 18;
					terrylib_Obj.entities[i].state = 3;
				}
			} else if(terrylib_Obj.entities[i].state != 1) {
				if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Obj.entities[i].life > 0) {
						terrylib_Obj.entities[i].life--;
						if(terrylib_Obj.entities[i].life <= 0) {
							if(terrylib_Obj.entities[i].stringpara == "right") {
								terrylib_Obj.entities[i].state = 4;
							} else {
								terrylib_Obj.entities[i].state = 3;
							}
							terrylib_Obj.entities[i].col = 16777215;
							if(terrylib_Obj.entities[i].type == "lasercamera") {
								terrylib_Obj.entities[i].col = 16711680;
							}
							terrylib_Obj.entities[i].lightsource = terrylib_Obj.entities[i].type;
							terrylib_Obj.entities[i].collidable = true;
							var tmp3 = terrylib_Rand.ppickstring("REBOOTING...","SCANNING AREA...");
							terrylib_Obj.entities[i].setmessage(tmp3,"whisper");
						}
					}
				}
			}
			break;
		case "guard":case "laserguard":
			if(terrylib_Obj.entities[i].state != 0) {
				if(terrylib_Obj.entities[i].state != 1) {
					if(terrylib_Obj.entities[i].state == 2) {
						if(terrylib_Obj.entities[i].life > 0) {
							terrylib_Obj.entities[i].life--;
							if(terrylib_Obj.entities[i].life <= 0) {
								terrylib_Obj.entities[i].state = 0;
								terrylib_Obj.entities[i].ai = terrylib_Obj.entities[i].stringpara;
								if(terrylib_Obj.entities[i].type == "guard") {
									terrylib_Obj.entities[i].lightsource = "directional";
								} else if(terrylib_Obj.entities[i].type == "laserguard") {
									terrylib_Obj.entities[i].lightsource = "laserdirectional";
								}
								terrylib_Obj.entities[i].col = 16777215;
								terrylib_Obj.entities[i].speed = 1;
								var tmp4 = terrylib_Rand.ppickstring("???","What was that?","Ugh, my head...","Huh?","Ouch...");
								terrylib_Obj.entities[i].setmessage(tmp4,"whisper");
								terrylib_Obj.entities[i].collidable = true;
								if(gamecontrol_Game.alarm) {
									gamecontrol_Localworld.alertedtoplayer(i);
								}
							}
						}
					}
				}
			}
			break;
		case "lasersentinal":case "sentinal":
			if(terrylib_Obj.entities[i].state == 0) {
				terrylib_Obj.entities[i].cameradir = (terrylib_Obj.entities[i].cameradir + 1) % 12;
			} else if(terrylib_Obj.entities[i].state != 1) {
				if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Obj.entities[i].life > 0) {
						terrylib_Obj.entities[i].life--;
						if(terrylib_Obj.entities[i].life <= 0) {
							terrylib_Obj.entities[i].state = 0;
							terrylib_Obj.entities[i].col = 16777215;
							if(terrylib_Obj.entities[i].type == "lasersentinal") {
								terrylib_Obj.entities[i].col = 16711680;
							}
							terrylib_Obj.entities[i].lightsource = terrylib_Obj.entities[i].type;
							terrylib_Obj.entities[i].collidable = true;
							var tmp5 = terrylib_Rand.ppickstring("REBOOTING...","SCANNING AREA...");
							terrylib_Obj.entities[i].setmessage(tmp5,"whisper");
						}
					}
				}
			}
			break;
		case "robot":
			if(terrylib_Obj.entities[i].state == 1) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					if(terrylib_Obj.entities[i].life == 0) {
						terrylib_Obj.entities[i].state = 0;
						terrylib_Obj.entities[i].col = 16729156;
						terrylib_Obj.entities[i].lightsource = "laser_narrow";
					}
				}
			} else if(terrylib_Obj.entities[i].state == 2) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					if(terrylib_Obj.entities[i].life <= 0) {
						terrylib_Obj.entities[i].state = 0;
						terrylib_Obj.entities[i].ai = terrylib_Obj.entities[i].stringpara;
						terrylib_Obj.entities[i].col = 16711680;
						terrylib_Obj.entities[i].lightsource = "laser_narrow";
						terrylib_Obj.entities[i].collidable = true;
						var tmp6 = terrylib_Rand.ppickstring("REBOOTING...","SCANNING AREA...");
						terrylib_Obj.entities[i].setmessage(tmp6,"whisper");
					}
				}
			}
			break;
		case "rook":
			if(terrylib_Obj.entities[i].state == 0) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					terrylib_Obj.entities[i].lightsource = "none";
					if(terrylib_Obj.entities[i].life <= 8) {
						if(terrylib_Obj.entities[i].life % 2 == 0) {
							terrylib_Obj.entities[i].lightsource = "laserbeside";
						}
					}
					if(terrylib_Obj.entities[i].life == 0) {
						terrylib_Obj.entities[i].lightsource = "laserbeside";
					}
				}
			} else if(terrylib_Obj.entities[i].state != 1) {
				if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Obj.entities[i].life > 0) {
						terrylib_Obj.entities[i].life--;
						if(terrylib_Obj.entities[i].life <= 0) {
							terrylib_Obj.entities[i].state = 0;
							terrylib_Obj.entities[i].col = 16777215;
							terrylib_Obj.entities[i].ai = terrylib_Obj.entities[i].stringpara;
							terrylib_Obj.entities[i].lightsource = "laserbeside";
							terrylib_Obj.entities[i].collidable = true;
							var tmp7 = terrylib_Rand.ppickstring("REBOOTING...","SCANNING AREA...");
							terrylib_Obj.entities[i].setmessage(tmp7,"whisper");
						}
					}
				}
			}
			break;
		case "terminator":
			if(terrylib_Obj.entities[i].state == 1) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					if(terrylib_Obj.entities[i].life == 0) {
						terrylib_Obj.entities[i].state = 0;
						terrylib_Obj.entities[i].col = 16777028;
						terrylib_Obj.entities[i].lightsource = "laser_bubble";
					}
				}
			} else if(terrylib_Obj.entities[i].state == 2) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					if(terrylib_Obj.entities[i].life <= 0) {
						terrylib_Obj.entities[i].state = 0;
						terrylib_Obj.entities[i].ai = terrylib_Obj.entities[i].stringpara;
						terrylib_Obj.entities[i].col = 16777028;
						terrylib_Obj.entities[i].lightsource = "laser_bubble";
						terrylib_Obj.entities[i].collidable = true;
						var tmp8 = terrylib_Rand.ppickstring("REBOOTING...","SCANNING AREA...");
						terrylib_Obj.entities[i].setmessage(tmp8,"whisper");
					}
				}
			}
			break;
		case "tripwire_down":case "tripwire_left":case "tripwire_right":case "tripwire_up":
			if(terrylib_Obj.entities[i].state == 0) {
				terrylib_Obj.entities[i].para = (terrylib_Obj.entities[i].para + 1) % 2;
				if(terrylib_Obj.entities[i].para == 0) {
					terrylib_Obj.entities[i].lightsource = "directional_narrow";
				} else if(terrylib_Obj.entities[i].para == 1) {
					terrylib_Obj.entities[i].lightsource = "none";
				}
			} else if(terrylib_Obj.entities[i].state == 1) {
				terrylib_Obj.entities[i].lightsource = "directional_narrow";
			} else if(terrylib_Obj.entities[i].state == 2) {
				if(terrylib_Obj.entities[i].life > 0) {
					terrylib_Obj.entities[i].life--;
					if(terrylib_Obj.entities[i].life <= 0) {
						terrylib_Obj.entities[i].state = 0;
						terrylib_Obj.entities[i].col = 16777215;
						terrylib_Obj.entities[i].lightsource = "directional_narrow";
						terrylib_Obj.entities[i].para = 0;
						var tmp9 = terrylib_Rand.ppickstring("REBOOTING...","ALL SYSTEMS OPERATIONAL!");
						terrylib_Obj.entities[i].setmessage(tmp9,"whisper");
						terrylib_Obj.entities[i].collidable = true;
					}
				}
			}
			break;
		}
	}
	,insight: function(i) {
		switch(terrylib_Obj.entities[i].type) {
		case "drone_laser":case "lasercamera":case "lasersentinal":case "robot":
			terrylib_Obj.entities[i].setmessage("ENEMY DETECTED! FIRING!","red");
			gamecontrol_Game.hurtplayer(terrylib_Obj.entities[i].dir);
			gamecontrol_Game.checkifplayerdead();
			break;
		case "laserguard":
			var tmp = terrylib_Rand.ppickstring("Enemy detected! Firing!","Got you!");
			terrylib_Obj.entities[i].setmessage(tmp,"shout");
			gamecontrol_Game.hurtplayer(terrylib_Obj.entities[i].dir);
			gamecontrol_Game.checkifplayerdead();
			break;
		case "rook":
			terrylib_Obj.entities[i].state = 0;
			terrylib_Obj.entities[i].life = 12;
			terrylib_Obj.entities[i].setmessage("BZZZZZZZZZZ...","red");
			gamecontrol_Game.hurtplayer(terrylib_Help.NODIRECTION);
			gamecontrol_Game.checkifplayerdead();
			break;
		case "terminator":
			terrylib_Obj.entities[i].setmessage("ENEMY DETECTED! FIRING!","red");
			gamecontrol_Game.hurtplayer(terrylib_Obj.entities[i].dir);
			gamecontrol_Game.checkifplayerdead();
			break;
		}
	}
	,dealert: function(i) {
		terrylib_Obj.entities[i].state = 2;
		terrylib_Obj.entities[i].life = 1;
		this.update(i);
		switch(terrylib_Obj.entities[i].type) {
		case "dog":
			terrylib_Obj.entities[i].setmessage("Woof?","whisper");
			break;
		case "bombbot":case "camera":case "drone_laser":case "drone_light":case "lasercamera":case "lasersentinal":case "robot":case "sentinal":
			var tmp = terrylib_Rand.ppickstring("Error!","Target Lost...");
			terrylib_Obj.entities[i].setmessage(tmp,"whisper");
			break;
		case "guard":case "laserguard":
			var tmp1 = terrylib_Rand.ppickstring("Huh?","Where they'd go?","Must be imagining things...");
			terrylib_Obj.entities[i].setmessage(tmp1,"whisper");
			break;
		case "terminator":
			terrylib_Obj.entities[i].setmessage("YOU CANNOT HIDE FROM ME","flashing");
			break;
		default:
			terrylib_Obj.entities[i].setmessage("???","whisper");
		}
	}
	,alert: function(i) {
		switch(terrylib_Obj.entities[i].type) {
		case "bombbot":
			if(terrylib_Obj.entities[i].state != 1) {
				if(terrylib_Obj.entities[i].state != 1) {
					haxegon_Music.playsound("spotted");
				}
				terrylib_Obj.entities[i].state = 1;
				terrylib_Obj.entities[i].life = 10;
				terrylib_Obj.entities[i].ai = "pathfind";
				terrylib_Obj.entities[i].lightsource = "bombbot";
				if(terrylib_Obj.entities[i].jumpframe <= 0) {
					terrylib_Obj.entities[i].col = 16711680;
					terrylib_Obj.entities[i].jumpframe = 120;
					terrylib_Obj.entities[i].setmessage("ACTIVATED!","flashing");
				}
			}
			break;
		case "dog":
			if(terrylib_Obj.entities[i].state != 1) {
				terrylib_Obj.entities[i].speed = 0;
				terrylib_Obj.entities[i].cameradir = 0;
				terrylib_Obj.entities[i].ai = "pathfind";
				if(terrylib_Obj.entities[i].state != 1) {
					haxegon_Music.playsound("spotted");
				}
				terrylib_Obj.entities[i].state = 1;
				if(terrylib_Obj.entities[i].jumpframe <= 0) {
					terrylib_Obj.entities[i].col = 16711680;
					terrylib_Obj.entities[i].jumpframe = 120;
					var tmp = terrylib_Rand.ppickstring("WOOF! WOOF! WOOF!","WOOF!","WOOF! WOOF!");
					terrylib_Obj.entities[i].setmessage(tmp,"flashing");
				}
			}
			break;
		case "drone_laser":
			terrylib_Obj.entities[i].speed = 0;
			if(terrylib_Obj.entities[i].state != 1) {
				haxegon_Music.playsound("spotted");
			}
			terrylib_Obj.entities[i].state = 1;
			terrylib_Obj.entities[i].ai = "none";
			if(terrylib_Obj.entities[i].jumpframe <= 0) {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].jumpframe = 120;
				terrylib_Obj.entities[i].life = 10;
			}
			break;
		case "drone_light":
			terrylib_Obj.entities[i].speed = 0;
			if(terrylib_Obj.entities[i].state != 1) {
				haxegon_Music.playsound("spotted");
			}
			terrylib_Obj.entities[i].state = 1;
			terrylib_Obj.entities[i].ai = "none";
			if(terrylib_Obj.entities[i].jumpframe <= 0) {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].jumpframe = 120;
				terrylib_Obj.entities[i].setmessage("BZZZZZZ","flashing");
				gamecontrol_Game.alertallenemies();
			}
			break;
		case "fireman":
			terrylib_Obj.entities[i].ai = "pathfind";
			terrylib_Obj.entities[i].state = 0;
			if(terrylib_Obj.entities[i].messagedelay <= 0) {
				var tmp1 = terrylib_Rand.ppickstring("HAHAHAHAHAHAHAHA","BWAAHAHAHA!","Burn!");
				terrylib_Obj.entities[i].setmessage(tmp1,"shout");
			}
			break;
		case "camera":case "lasercamera":
			if(terrylib_Obj.entities[i].state != 1) {
				haxegon_Music.playsound("spotted");
			}
			terrylib_Obj.entities[i].state = 1;
			terrylib_Obj.entities[i].lightsource = terrylib_Obj.entities[i].type;
			if(terrylib_Obj.entities[i].jumpframe <= 0) {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].jumpframe = 120;
				terrylib_Obj.entities[i].setmessage("INTRUDER DETECTED!","flashing");
				gamecontrol_Game.alertallenemies();
			}
			break;
		case "guard":case "laserguard":
			terrylib_Obj.entities[i].ai = "pathfind";
			terrylib_Obj.entities[i].speed = 0;
			if(terrylib_Obj.entities[i].state != 1) {
				haxegon_Music.playsound("spotted");
			}
			terrylib_Obj.entities[i].state = 1;
			terrylib_Obj.entities[i].lightsource = "none";
			if(terrylib_Obj.entities[i].jumpframe <= 0) {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].jumpframe = 120;
				var tmp2 = terrylib_Rand.ppickstring("Error! Intruder detected!","Intruder!","Stop!","Intruder!","Found you!");
				terrylib_Obj.entities[i].setmessage(tmp2,"shout");
			}
			break;
		case "lasersentinal":case "sentinal":
			if(terrylib_Obj.entities[i].state != 1) {
				haxegon_Music.playsound("spotted");
			}
			terrylib_Obj.entities[i].state = 1;
			terrylib_Obj.entities[i].lightsource = terrylib_Obj.entities[i].lightsource;
			if(terrylib_Obj.entities[i].jumpframe <= 0) {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].jumpframe = 120;
				terrylib_Obj.entities[i].setmessage("INTRUDER DETECTED!","flashing");
				gamecontrol_Game.alertallenemies();
			}
			break;
		case "robot":
			if(terrylib_Obj.entities[i].state != 1) {
				haxegon_Music.playsound("spotted");
			}
			terrylib_Obj.entities[i].state = 1;
			if(terrylib_Obj.entities[i].jumpframe <= 0) {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].jumpframe = 120;
				terrylib_Obj.entities[i].life = 10;
			}
			break;
		case "terminator":
			if(terrylib_Obj.entities[i].state != 1) {
				haxegon_Music.playsound("spotted");
			}
			terrylib_Obj.entities[i].state = 1;
			if(terrylib_Obj.entities[i].jumpframe <= 0) {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].jumpframe = 120;
				terrylib_Obj.entities[i].life = 10;
			}
			break;
		case "tripwire_down":case "tripwire_left":case "tripwire_right":case "tripwire_up":
			if(terrylib_Obj.entities[i].state != 1) {
				haxegon_Music.playsound("spotted");
			}
			terrylib_Obj.entities[i].state = 1;
			if(terrylib_Obj.entities[i].jumpframe <= 0) {
				terrylib_Obj.entities[i].col = 16711680;
				terrylib_Obj.entities[i].jumpframe = 120;
				terrylib_Obj.entities[i].setmessage("BZZZZZZ","flashing");
				gamecontrol_Game.alertallenemies();
			}
			break;
		}
	}
	,stun: function(i,time) {
		switch(terrylib_Obj.entities[i].type) {
		case "bombbot":
			terrylib_Obj.entities[i].state = 2;
			this.update(i);
			break;
		case "dog":case "guard":case "laserguard":
			gamecontrol_Draw.screenshake = 10;
			gamecontrol_Draw.flashlight = 5;
			terrylib_Obj.entities[i].state = 2;
			terrylib_Obj.entities[i].ai = "none";
			terrylib_Obj.entities[i].lightsource = "none";
			terrylib_Obj.entities[i].life = time;
			terrylib_Obj.entities[i].collidable = false;
			break;
		case "fireman":
			gamecontrol_Draw.screenshake = 10;
			gamecontrol_Draw.flashlight = 5;
			if(terrylib_Obj.entities[i].state != 2) {
				gamecontrol_Localworld.fireextinguisher_explode(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp,5);
			}
			terrylib_Obj.entities[i].state = 2;
			terrylib_Obj.entities[i].ai = "none";
			terrylib_Obj.entities[i].lightsource = "none";
			terrylib_Obj.entities[i].life = time;
			terrylib_Obj.entities[i].collidable = false;
			break;
		case "camera":case "drone_laser":case "drone_light":case "lasercamera":case "lasersentinal":case "robot":case "rook":case "sentinal":case "terminator":case "tripwire_down":case "tripwire_left":case "tripwire_right":case "tripwire_up":
			gamecontrol_Draw.screenshake = 10;
			gamecontrol_Draw.flashlight = 5;
			terrylib_Obj.entities[i].state = 2;
			terrylib_Obj.entities[i].ai = "none";
			terrylib_Obj.entities[i].lightsource = "none";
			terrylib_Obj.entities[i].life = time;
			terrylib_Obj.entities[i].collidable = false;
			break;
		}
	}
	,kill: function(i) {
		switch(terrylib_Obj.entities[i].type) {
		case "bombbot":
			terrylib_Obj.entities[i].state = 2;
			this.update(i);
			break;
		case "dog":case "guard":case "laserguard":
			terrylib_World.placetile(terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0,gamecontrol_Localworld.BLOOD);
			terrylib_Obj.entities[i].active = false;
			gamecontrol_Draw.screenshake = 10;
			gamecontrol_Draw.flashlight = 5;
			break;
		case "fireman":
			gamecontrol_Localworld.fireextinguisher_explode(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp,5);
			terrylib_World.placetile(terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0,gamecontrol_Localworld.BLOOD);
			terrylib_Obj.entities[i].active = false;
			gamecontrol_Draw.screenshake = 10;
			gamecontrol_Draw.flashlight = 5;
			break;
		case "oldterminator":
			terrylib_Obj.entities[i].health--;
			if(terrylib_Obj.entities[i].health > 0) {
				terrylib_Obj.entities[i].ai = "none";
				var tmp = terrylib_Rand.ppickstring("TAKING DAMAGE!","SYSTEM FAILURE!","ERROR! ERROR!");
				terrylib_Obj.entities[i].setmessage(tmp,"red");
				terrylib_Obj.entities[i].life = 5;
				terrylib_Obj.entities[i].state = 2;
				gamecontrol_Draw.screenshake = 10;
				gamecontrol_Draw.flashlight = 5;
			} else {
				gamecontrol_Localworld.explode(terrylib_Obj.entities[i].xp,terrylib_Obj.entities[i].yp,6);
				terrylib_Obj.entities[i].active = false;
			}
			break;
		case "camera":case "drone_laser":case "drone_light":case "lasercamera":case "lasersentinal":case "robot":case "rook":case "sentinal":case "terminator":case "tripwire_down":case "tripwire_left":case "tripwire_right":case "tripwire_up":
			terrylib_World.placetile(terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0,gamecontrol_Localworld.RUBBLE);
			terrylib_Obj.entities[i].active = false;
			gamecontrol_Draw.screenshake = 10;
			gamecontrol_Draw.flashlight = 5;
			break;
		}
	}
	,animate: function(i) {
		if(terrylib_Obj.entities[i].shakecount > 0) {
			terrylib_Obj.entities[i].shakecount--;
		}
		if(gamecontrol_Game.timestop <= 0) {
			switch(terrylib_Obj.entities[i].type) {
			case "bombbot":
				if(terrylib_Obj.entities[i].state == 1) {
					terrylib_Obj.entities[i].tile = 220 + terrylib_Obj.entities[i].dir;
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 >= 45) {
						terrylib_Obj.entities[i].tile = 220 + terrylib_Obj.entities[i].dir;
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = 220 + terrylib_Obj.entities[i].dir;
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca(Std.string(terrylib_Obj.entities[i].life),0);
					}
				} else {
					terrylib_Obj.entities[i].tile = 206;
					if(terrylib_Help.tenseconds % 120 >= 60) {
						terrylib_Obj.entities[i].tile = 206;
					} else {
						terrylib_Obj.entities[i].tile = 207;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "dog":
				terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0);
				switch(terrylib_Obj.entities[i].state) {
				case 0:
					if(terrylib_Help.tenseconds % 60 >= 15) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0);
						terrylib_Obj.entities[i].col = 16777215;
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0) + 1;
						terrylib_Obj.entities[i].col = 11184810;
					}
					break;
				case 1:case 3:case 4:
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 >= 30) {
						if(terrylib_Help.slowsine % 16 >= 8) {
							if(terrylib_Obj.entities[i].dogdir == terrylib_Help.LEFT) {
								terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0) + 3;
							} else {
								terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0) + 2;
							}
						} else if(terrylib_Obj.entities[i].dogdir == terrylib_Help.LEFT) {
							terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0) + 5;
						} else {
							terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0) + 4;
						}
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
					break;
				case 2:
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("s",0);
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
					break;
				}
				break;
			case "drone_laser":case "drone_light":
				terrylib_Obj.entities[i].tile = 15;
				if(terrylib_Obj.entities[i].state == 1) {
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 >= 30) {
						terrylib_Obj.entities[i].tile = 15;
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
				} else if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = 15;
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "fireman":
				terrylib_Obj.entities[i].tile = HxOverrides.cca("f",0);
				terrylib_Obj.entities[i].jumpframe--;
				if(terrylib_Obj.entities[i].jumpframe <= 0) {
					terrylib_Obj.entities[i].jumpframe = 120;
				}
				if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
					terrylib_Obj.entities[i].col = 16776960;
				} else {
					terrylib_Obj.entities[i].col = 16711680;
				}
				if(terrylib_Obj.entities[i].state == 1) {
					if(terrylib_Help.tenseconds % 60 >= 30) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("f",0);
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
				}
				if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("f",0);
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "camera":case "lasercamera":
				terrylib_Obj.entities[i].tile = HxOverrides.cca("C",0) + gamecontrol_Game.cameraframe(terrylib_Obj.entities[i].cameradir);
				if(terrylib_Obj.entities[i].state == 1) {
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 >= 30) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("C",0) + gamecontrol_Game.cameraframe(terrylib_Obj.entities[i].cameradir);
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
				} else if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("C",0) + gamecontrol_Game.cameraframe(terrylib_Obj.entities[i].cameradir);
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "guard":case "laserguard":
				terrylib_Obj.entities[i].tile = HxOverrides.cca("G",0) + terrylib_Obj.entities[i].dir;
				if(terrylib_Obj.entities[i].state == 1) {
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 >= 30) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("G",0) + terrylib_Obj.entities[i].dir;
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
				} else if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("G",0) + terrylib_Obj.entities[i].dir;
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "lasersentinal":case "sentinal":
				terrylib_Obj.entities[i].tile = HxOverrides.cca("c",0);
				if(terrylib_Obj.entities[i].state == 1) {
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 >= 30) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("c",0);
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
				} else if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("c",0);
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "robot":
				terrylib_Obj.entities[i].tile = 236 + terrylib_Obj.entities[i].dir;
				if(terrylib_Obj.entities[i].state == 1) {
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 >= 30) {
						terrylib_Obj.entities[i].tile = 236 + terrylib_Obj.entities[i].dir;
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
				} else if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = 236 + terrylib_Obj.entities[i].dir;
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "rook":
				if(terrylib_Help.slowsine % 32 >= 16) {
					terrylib_Obj.entities[i].tile = 165;
				} else {
					terrylib_Obj.entities[i].tile = 164;
				}
				terrylib_Obj.entities[i].jumpframe--;
				if(terrylib_Obj.entities[i].jumpframe <= 0) {
					terrylib_Obj.entities[i].jumpframe = 120;
				}
				if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
					terrylib_Obj.entities[i].col = 16776960;
				} else {
					terrylib_Obj.entities[i].col = 16711680;
				}
				if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = 165;
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "terminator":
				terrylib_Obj.entities[i].tile = 252 + terrylib_Obj.entities[i].dir;
				if(terrylib_Obj.entities[i].state == 1) {
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 >= 30) {
						terrylib_Obj.entities[i].tile = 252 + terrylib_Obj.entities[i].dir;
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
				} else if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 >= 16) {
						terrylib_Obj.entities[i].tile = 252 + terrylib_Obj.entities[i].dir;
					} else if(terrylib_Obj.entities[i].life >= 10) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
					} else {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			case "tripwire_down":case "tripwire_left":case "tripwire_right":case "tripwire_up":
				if(terrylib_Obj.entities[i].type == "tripwire_up") {
					terrylib_Obj.entities[i].tile = 144;
				}
				if(terrylib_Obj.entities[i].type == "tripwire_down") {
					terrylib_Obj.entities[i].tile = 145;
				}
				if(terrylib_Obj.entities[i].type == "tripwire_left") {
					terrylib_Obj.entities[i].tile = 146;
				}
				if(terrylib_Obj.entities[i].type == "tripwire_right") {
					terrylib_Obj.entities[i].tile = 147;
				}
				if(terrylib_Obj.entities[i].state == 1) {
					terrylib_Obj.entities[i].jumpframe--;
					if(terrylib_Obj.entities[i].jumpframe <= 0) {
						terrylib_Obj.entities[i].jumpframe = 120;
					}
					if(terrylib_Obj.entities[i].jumpframe % 20 >= 10) {
						terrylib_Obj.entities[i].col = 16776960;
					} else {
						terrylib_Obj.entities[i].col = 16711680;
					}
					if(terrylib_Help.tenseconds % 60 < 30) {
						terrylib_Obj.entities[i].tile = HxOverrides.cca("!",0);
					}
				} else if(terrylib_Obj.entities[i].state == 2) {
					if(terrylib_Help.slowsine % 32 < 16) {
						if(terrylib_Obj.entities[i].life >= 10) {
							terrylib_Obj.entities[i].tile = HxOverrides.cca("z",0) + (1 + Math.floor(10 * terrylib_Rand.prandom()));
						} else {
							terrylib_Obj.entities[i].tile = HxOverrides.cca("0",0) + terrylib_Obj.entities[i].life;
						}
					}
					terrylib_Obj.entities[i].col = 11184810;
				}
				break;
			}
			terrylib_Obj.entities[i].drawframe = terrylib_Obj.entities[i].tile;
		}
	}
	,drawentity: function(i) {
		if(gamecontrol_Localworld.fogat(terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0) == 1) {
			gamecontrol_Draw.draw_default(i);
		} else if(terrylib_Obj.entities[i].type == "robot" || terrylib_Obj.entities[i].type == "terminator") {
			gamecontrol_Draw.draw_unknown_dangerous(i);
		} else {
			gamecontrol_Draw.draw_unknown(i);
		}
	}
	,drawinit: function(i,xoff,yoff,frame) {
		gamecontrol_Draw.draw_defaultinit(i,xoff,yoff,frame);
	}
	,collision: function(i,j) {
	}
	,getinsights_thisframe: function(t) {
		return terrylib_Obj.entities[t].insights_thisframe;
	}
	,setinsights_thisframe: function(t) {
		terrylib_Obj.entities[t].insights_thisframe = true;
	}
	,getalerted_thisframe: function(t) {
		return terrylib_Obj.entities[t].alerted_thisframe;
	}
	,setalerted_thisframe: function(t) {
		terrylib_Obj.entities[t].alerted_thisframe = true;
	}
	,setupcollision: function(i) {
		terrylib_Obj.entities[i].cx = 0;
		terrylib_Obj.entities[i].cy = 0;
		terrylib_Obj.entities[i].w = 12;
		terrylib_Obj.entities[i].h = 12;
		terrylib_Obj.entities[i].collidable = true;
	}
	,__class__: objs_Ent_$enemy
});
var objs_Ent_$item = function() {
	terrylib_util_Ent_$generic.call(this);
	this.name = "item";
	this.init_drawframe = 1;
};
$hxClasses["objs.Ent_item"] = objs_Ent_$item;
objs_Ent_$item.__name__ = ["objs","Ent_item"];
objs_Ent_$item.__super__ = terrylib_util_Ent_$generic;
objs_Ent_$item.prototype = $extend(terrylib_util_Ent_$generic.prototype,{
	create: function(i,xp,yp,para1,para2,para3) {
		if(para3 == null) {
			para3 = "0";
		}
		if(para2 == null) {
			para2 = "0";
		}
		if(para1 == null) {
			para1 = "0";
		}
		terrylib_Obj.entities[i].rule = "item";
		terrylib_Obj.entities[i].tileset = "terminal";
		para1 = para1.toLowerCase();
		var itemnum = gamecontrol_Inventory.getitemlistnum(para1);
		if(itemnum == -1) {
			haxe_Log.trace("ERROR! Cannot figure out an itemnumber for " + para1,{ fileName : "Ent_item.hx", lineNumber : 27, className : "objs.Ent_item", methodName : "create"});
		}
		terrylib_Obj.entities[i].name = para1;
		terrylib_Obj.entities[i].tile = HxOverrides.cca(gamecontrol_Inventory.getitemlistcharacter(para1),0);
		terrylib_Obj.entities[i].para = gamecontrol_Inventory.getitemlistamount(para1);
		terrylib_Obj.entities[i].col = haxegon_Col.rgb(gamecontrol_Inventory.itemlist[itemnum].r,gamecontrol_Inventory.itemlist[itemnum].g,gamecontrol_Inventory.itemlist[itemnum].b);
		this.setupcollision(i);
	}
	,update: function(i) {
		if(terrylib_Obj.entities[i].shakecount > 0) {
			terrylib_Obj.entities[i].shakecount--;
		}
	}
	,animate: function(i) {
		terrylib_Obj.entities[i].drawframe = terrylib_Obj.entities[i].tile;
	}
	,drawentity: function(i) {
		if(gamecontrol_Localworld.fogat(terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0) == 1) {
			gamecontrol_Draw.draw_default_items(i);
		} else {
			gamecontrol_Draw.draw_unknown(i);
		}
	}
	,drawinit: function(i,xoff,yoff,frame) {
		gamecontrol_Draw.draw_defaultinit(i,xoff,yoff,frame);
	}
	,collision: function(i,j) {
	}
	,setupcollision: function(i) {
		terrylib_Obj.entities[i].cx = 0;
		terrylib_Obj.entities[i].cy = 0;
		terrylib_Obj.entities[i].w = 12;
		terrylib_Obj.entities[i].h = 12;
	}
	,__class__: objs_Ent_$item
});
var objs_Ent_$npc = function() {
	terrylib_util_Ent_$generic.call(this);
	this.name = "npc";
	this.init_drawframe = 1;
};
$hxClasses["objs.Ent_npc"] = objs_Ent_$npc;
objs_Ent_$npc.__name__ = ["objs","Ent_npc"];
objs_Ent_$npc.__super__ = terrylib_util_Ent_$generic;
objs_Ent_$npc.prototype = $extend(terrylib_util_Ent_$generic.prototype,{
	create: function(i,xp,yp,para1,para2,para3) {
		if(para3 == null) {
			para3 = "0";
		}
		if(para2 == null) {
			para2 = "0";
		}
		if(para1 == null) {
			para1 = "0";
		}
		terrylib_Obj.entities[i].rule = "npc";
		terrylib_Obj.entities[i].tileset = "terminal";
		gamecontrol_Inventory.getitemlistnum(para1);
		terrylib_Obj.entities[i].name = para1;
		terrylib_Obj.entities[i].tile = 2;
		terrylib_Obj.entities[i].lightsource = "none";
		terrylib_Obj.entities[i].para = 5;
		terrylib_Obj.entities[i].col = terrylib_Rand.ppickint(haxegon_Col.rgb(255,128,128),haxegon_Col.rgb(255,255,128),haxegon_Col.rgb(196,196,255));
		modernversion_Modern.shopkeepcol = terrylib_Obj.entities[i].col;
		this.setupcollision(i);
	}
	,update: function(i) {
	}
	,animate: function(i) {
		terrylib_Obj.entities[i].drawframe = terrylib_Obj.entities[i].tile;
	}
	,drawentity: function(i) {
		if(gamecontrol_Localworld.fogat(terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0) == 1) {
			gamecontrol_Draw.draw_default(i);
		}
	}
	,drawinit: function(i,xoff,yoff,frame) {
		gamecontrol_Draw.draw_defaultinit(i,xoff,yoff,frame);
	}
	,collision: function(i,j) {
	}
	,setupcollision: function(i) {
		terrylib_Obj.entities[i].cx = 0;
		terrylib_Obj.entities[i].cy = 0;
		terrylib_Obj.entities[i].w = 12;
		terrylib_Obj.entities[i].h = 12;
	}
	,__class__: objs_Ent_$npc
});
var objs_Ent_$player = function() {
	terrylib_util_Ent_$generic.call(this);
	this.name = "player";
};
$hxClasses["objs.Ent_player"] = objs_Ent_$player;
objs_Ent_$player.__name__ = ["objs","Ent_player"];
objs_Ent_$player.__super__ = terrylib_util_Ent_$generic;
objs_Ent_$player.prototype = $extend(terrylib_util_Ent_$generic.prototype,{
	create: function(i,xp,yp,para1,para2,para3) {
		if(para3 == null) {
			para3 = "0";
		}
		if(para2 == null) {
			para2 = "0";
		}
		if(para1 == null) {
			para1 = "0";
		}
		terrylib_Obj.entities[i].rule = "player";
		terrylib_Obj.entities[i].tileset = "terminal";
		this.setupcollision(i);
		terrylib_Obj.entities[i].tile = 64;
		terrylib_Obj.entities[i].col = 16771587;
		terrylib_Obj.entities[i].dir = gamecontrol_Game.playerdir;
		terrylib_Obj.entities[i].lightsource = "close";
		terrylib_Obj.entities[i].health = gamecontrol_Game.health;
		terrylib_Obj.entities[i].checkcollision = true;
	}
	,update: function(i) {
	}
	,animate: function(i) {
		if(terrylib_Obj.entities[i].shakecount > 0) {
			terrylib_Obj.entities[i].shakecount--;
		}
		if(terrylib_Obj.entities[i].health == 3) {
			terrylib_Obj.entities[i].col = 16771587;
		} else if(terrylib_Obj.entities[i].health == 2) {
			if(terrylib_Help.slowsine % 32 >= 16) {
				terrylib_Obj.entities[i].col = 13758965;
			} else {
				terrylib_Obj.entities[i].col = 16773444;
			}
		} else if(terrylib_Obj.entities[i].health == 1) {
			if(terrylib_Help.slowsine % 16 >= 8) {
				terrylib_Obj.entities[i].col = 16716049;
			} else {
				terrylib_Obj.entities[i].col = 16729156;
			}
		}
		if(gamecontrol_Game.icecube > 0) {
			terrylib_Obj.entities[i].col = haxegon_Col.rgb(64,64,255 - Math.random() * terrylib_Help.glow * 2 | 0);
		}
		if(gamecontrol_Game.cloaked > 0) {
			terrylib_Obj.entities[i].col = haxegon_Col.rgb(164 + terrylib_Help.glow,164 + terrylib_Help.glow,164 + terrylib_Help.glow);
		}
		if(gamecontrol_Game.timestop > 0) {
			if(terrylib_Help.slowsine % 16 >= 8) {
				terrylib_Obj.entities[i].col = haxegon_Col.rgb(255,255,255);
			} else {
				terrylib_Obj.entities[i].col = haxegon_Col.rgb(32,32,255);
			}
		}
		terrylib_Obj.entities[i].framedelay--;
		if(terrylib_Obj.entities[i].framedelay <= 0) {
			terrylib_Obj.entities[i].framedelay = 4;
			terrylib_Obj.entities[i].walkingframe = (terrylib_Obj.entities[i].walkingframe + 1) % 2;
		}
		if(terrylib_Obj.entities[i].animated > 0) {
			terrylib_Obj.entities[i].animated--;
			terrylib_Obj.entities[i].drawframe = terrylib_Obj.entities[i].tile + terrylib_Obj.entities[i].dir * 16 + terrylib_Obj.entities[i].walkingframe + 1;
		} else {
			terrylib_Obj.entities[i].drawframe = terrylib_Obj.entities[i].tile + terrylib_Obj.entities[i].dir * 16;
		}
		if(gamecontrol_Game.cloaked > 0) {
			terrylib_Obj.entities[i].drawframe = 8;
		}
	}
	,drawentity: function(i) {
		if(gamecontrol_Game.health <= 0) {
			haxegon_Gfx.fillbox((terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12,(terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12,12,12,gamecontrol_Game.backgroundcolour);
			haxegon_Gfx.imagecolor(16771587);
			var tmp = (terrylib_Obj.entities[i].xp - terrylib_World.camerax | 0) * 12;
			var tmp1 = (terrylib_Obj.entities[i].yp - terrylib_World.cameray | 0) * 12;
			var tmp2 = HxOverrides.cca("#",0);
			haxegon_Gfx.drawtile(tmp,tmp1,terrylib_Obj.entities[i].tileset,tmp2);
			haxegon_Gfx.imagecolor();
		} else {
			gamecontrol_Draw.draw_default_player(i);
		}
	}
	,drawinit: function(i,xoff,yoff,frame) {
		gamecontrol_Draw.draw_defaultinit(i,xoff,yoff,frame);
	}
	,collision: function(i,j) {
		if(terrylib_Obj.entities[j].rule == "enemy") {
			terrylib_Obj.entitycollide(i,j);
		}
	}
	,setupcollision: function(i) {
		terrylib_Obj.entities[i].cx = 0;
		terrylib_Obj.entities[i].cy = 0;
		terrylib_Obj.entities[i].w = 12;
		terrylib_Obj.entities[i].h = 12;
	}
	,__class__: objs_Ent_$player
});
var objs_Ent_$treasure = function() {
	terrylib_util_Ent_$generic.call(this);
	this.name = "treasure";
	this.init_drawframe = 1;
};
$hxClasses["objs.Ent_treasure"] = objs_Ent_$treasure;
objs_Ent_$treasure.__name__ = ["objs","Ent_treasure"];
objs_Ent_$treasure.__super__ = terrylib_util_Ent_$generic;
objs_Ent_$treasure.prototype = $extend(terrylib_util_Ent_$generic.prototype,{
	create: function(i,xp,yp,para1,para2,para3) {
		if(para3 == null) {
			para3 = "0";
		}
		if(para2 == null) {
			para2 = "0";
		}
		if(para1 == null) {
			para1 = "0";
		}
		terrylib_Obj.entities[i].rule = "treasure";
		terrylib_Obj.entities[i].tileset = "terminal";
		para1 = para1.toLowerCase();
		terrylib_Obj.entities[i].life = 1;
		terrylib_Obj.entities[i].tile = HxOverrides.cca("$",0);
		terrylib_Obj.entities[i].col = haxegon_Col.rgb(255,255,96);
		this.setupcollision(i);
	}
	,update: function(i) {
	}
	,animate: function(i) {
		terrylib_Obj.entities[i].drawframe = terrylib_Obj.entities[i].tile;
	}
	,drawentity: function(i) {
		if(gamecontrol_Localworld.fogat(terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0) == 1) {
			gamecontrol_Draw.draw_default_items(i);
		} else {
			gamecontrol_Draw.draw_unknown(i);
		}
	}
	,drawinit: function(i,xoff,yoff,frame) {
		gamecontrol_Draw.draw_defaultinit(i,xoff,yoff,frame);
	}
	,collision: function(i,j) {
	}
	,setupcollision: function(i) {
		terrylib_Obj.entities[i].cx = 0;
		terrylib_Obj.entities[i].cy = 0;
		terrylib_Obj.entities[i].w = 12;
		terrylib_Obj.entities[i].h = 12;
	}
	,__class__: objs_Ent_$treasure
});
var objs_Particlelogic = function() { };
$hxClasses["objs.Particlelogic"] = objs_Particlelogic;
objs_Particlelogic.__name__ = ["objs","Particlelogic"];
objs_Particlelogic.initparticle = function(t) {
	if(terrylib_Obj.particles[t].type == "pixel") {
		terrylib_Obj.particles[t].life = 45;
	} else if(terrylib_Obj.particles[t].type == "rpgtext") {
		terrylib_Obj.particles[t].colour = terrylib_Obj.particles[t].ax | 0;
		terrylib_Obj.particles[t].ax = 0;
		terrylib_Obj.particles[t].life = 10;
	}
};
objs_Particlelogic.updateparticle = function(i) {
	if(terrylib_Obj.particles[i].type == "rpgtext") {
		if(terrylib_Obj.particles[i].state == 0) {
			terrylib_Obj.particles[i].xp += Math.random() * 11 - 5;
			terrylib_Obj.particles[i].state = 1;
		} else if(terrylib_Obj.particles[i].state == 1) {
			terrylib_Obj.particles[i].yp -= 3;
			terrylib_Obj.particles[i].life--;
			if(terrylib_Obj.particles[i].life <= 5) {
				terrylib_Obj.particles[i].state = 2;
				terrylib_Obj.particles[i].statedelay = 2;
			}
		} else if(terrylib_Obj.particles[i].state == 2) {
			terrylib_Obj.particles[i].yp += 3;
			terrylib_Obj.particles[i].life--;
			if(terrylib_Obj.particles[i].life <= 0) {
				terrylib_Obj.particles[i].state = 3;
			}
		} else if(terrylib_Obj.particles[i].state == 3) {
			terrylib_Obj.particles[i].state = 4;
			terrylib_Obj.particles[i].statedelay = 20;
		} else if(terrylib_Obj.particles[i].state == 4) {
			terrylib_Obj.particles[i].active = false;
		}
	} else {
		terrylib_Obj.particles[i].vx = terrylib_Obj.particles[i].vx + terrylib_Obj.particles[i].ax;
		terrylib_Obj.particles[i].vy = terrylib_Obj.particles[i].vy + terrylib_Obj.particles[i].ay;
		terrylib_Obj.particles[i].xp = terrylib_Obj.particles[i].xp + terrylib_Obj.particles[i].vx;
		terrylib_Obj.particles[i].yp = terrylib_Obj.particles[i].yp + terrylib_Obj.particles[i].vy;
		terrylib_Obj.particles[i].life--;
		if(terrylib_Obj.particles[i].life <= 0) {
			terrylib_Obj.particles[i].active = false;
		}
	}
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.removeBitmapData(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeFont(key1);
				}
			}
			var keys2 = this.sound.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.removeSound(key2);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getFont: function(id) {
		var _this = this.font;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getSound: function(id) {
		var _this = this.sound;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		lime_utils_Assets.cache.font.remove(id);
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		lime_utils_Assets.cache.audio.remove(id);
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,setFont: function(id,font) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
	}
	,setSound: function(id,sound) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,sound);
		} else {
			_this.h[id] = sound;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_utils_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) {
		lime_utils_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	}
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils_Assets.getBytes(id));
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		return openfl_Assets.cache.getFont(id);
	}
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) {
				return library.getMovieClip(symbolName);
			} else {
				lime_utils_Log.info("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 223, className : "openfl.Assets", methodName : "getMovieClip"});
			}
		} else {
			lime_utils_Log.info("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 229, className : "openfl.Assets", methodName : "getMovieClip"});
		}
	} else {
		lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 235, className : "openfl.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_Assets.getSound(id,useCache);
};
openfl_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setSound(id,sound1);
		}
		return sound1;
	}
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) {
				openfl_Assets.cache.setBitmapData(id,bitmapData1);
			}
			promise.complete(bitmapData1);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		promise.complete(openfl_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_utils_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			promise.completeWith(library.loadMovieClip(symbolName));
		} else {
			promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_Assets.cache.get_enabled()) {
				openfl_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_utils_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	return Type.resolveEnum(name);
};
openfl_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__lastUpdate: null
	,__objectDepths: null
	,__objects: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,__zeroSymbol: null
	,addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[index] = method;
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(index);
		}
	}
	,gotoAndPlay: function(frame,scene) {
		if(this.__symbol != null) {
			this.__currentFrame = this.__getFrame(frame);
			this.__updateFrame();
			this.play();
		}
	}
	,gotoAndStop: function(frame,scene) {
		if(this.__symbol != null) {
			this.__currentFrame = this.__getFrame(frame);
			this.__updateFrame();
			this.stop();
		}
	}
	,nextFrame: function() {
		if(this.__symbol != null) {
			var next = this.__currentFrame + 1;
			if(next > this.__totalFrames) {
				next = this.__totalFrames;
			}
			this.gotoAndStop(next);
		}
	}
	,play: function() {
		if(this.__symbol != null) {
			if(!this.__playing && this.__totalFrames > 1) {
				this.__playing = true;
				this.__frameTime = 1000 / this.__swf.frameRate | 0;
				this.__timeElapsed = 0;
			}
		}
	}
	,prevFrame: function() {
		if(this.__symbol != null) {
			var previous = this.__currentFrame - 1;
			if(previous < 1) {
				previous = 1;
			}
			this.gotoAndStop(previous);
		}
	}
	,stop: function() {
		if(this.__symbol != null) {
			if(this.__playing) {
				this.__playing = false;
			}
		}
	}
	,__applyTween: function(start,end,ratio) {
		return start + (end - start) * ratio;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol != null) {
			if(this.__playing) {
				this.__timeElapsed += deltaTime;
				var advanceFrames = Math.floor(this.__timeElapsed / this.__frameTime);
				this.__timeElapsed = this.__timeElapsed % this.__frameTime;
				if(this.__frameScripts != null) {
					var _g1 = 0;
					while(_g1 < advanceFrames) {
						++_g1;
						this.__currentFrame++;
						if(this.__currentFrame > this.__totalFrames) {
							this.__currentFrame = 1;
						}
						if(this.__frameScripts.h.hasOwnProperty(this.__currentFrame - 1)) {
							this.__frameScripts.h[this.__currentFrame - 1]();
							if(!this.__playing) {
								break;
							}
						}
					}
				} else {
					this.__currentFrame += advanceFrames;
					while(this.__currentFrame > this.__totalFrames) this.__currentFrame -= this.__totalFrames;
				}
				this.__updateFrame();
			}
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__fromSymbol: function(swf,symbol) {
		if(this.__objects != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__lastUpdate = -1;
		this.__objectDepths = [];
		this.__objects = new haxe_ds_IntMap();
		this.__zeroSymbol = -1;
		this.__currentFrame = 1;
		this.__totalFrames = this.__symbol.frames.length;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__symbol.frames[i].label != null) {
				this.__currentLabels.push(new openfl_display_FrameLabel(this.__symbol.frames[i].label,i + 1));
			}
		}
		this.__updateFrame();
		var _g2 = 0;
		var _g11 = Type.getInstanceFields(js_Boot.getClass(this));
		while(_g2 < _g11.length) {
			var field = _g11[_g2];
			++_g2;
			var _g21 = 0;
			var _g3 = this.__children;
			while(_g21 < _g3.length) {
				var child = _g3[_g21];
				++_g21;
				if(child.get_name() == field) {
					this[field] = child;
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
	}
	,__getFrame: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			var index = frame;
			if(index < 1) {
				return 1;
			}
			if(index > this.__totalFrames) {
				return this.__totalFrames;
			}
			return index;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) {
					return frameLabel.get_frame();
				}
			}
		}
		return 1;
	}
	,__placeObject: function(displayObject,frameObject) {
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					filters.push(new openfl_filters_BlurFilter(filter[2],filter[3],filter[4]));
					break;
				case 1:
					filters.push(new openfl_filters_ColorMatrixFilter(filter[2]));
					break;
				case 2:
					filters.push(new openfl_filters_DropShadowFilter(filter[2],filter[3],filter[4],filter[5],filter[6],filter[7],filter[8],filter[9],filter[10],filter[11],filter[12]));
					break;
				case 3:
					filters.push(new openfl_filters_GlowFilter(filter[2],filter[3],filter[4],filter[5],filter[6],filter[7],filter[8],filter[9]));
					break;
				}
			}
			displayObject.set_filters(filters);
		}
		displayObject.set_visible(frameObject.visible);
	}
	,__renderFrame: function(index) {
		var previousIndex = this.__lastUpdate - 1;
		if(previousIndex > index) {
			var timelineObject;
			var exists;
			var i = 0;
			while(i < this.__objectDepths.length) {
				timelineObject = this.__objectDepths[i];
				exists = false;
				var _g = 0;
				var _g1 = this.__symbol.frames[0].objects;
				while(_g < _g1.length) {
					var frameObject = _g1[_g];
					++_g;
					if(frameObject.id == timelineObject.id) {
						exists = true;
						break;
					}
				}
				if(!exists) {
					if(timelineObject.displayObject.parent == this) {
						this.removeChild(timelineObject.displayObject);
					}
					this.__objectDepths.splice(i,1);
				} else {
					++i;
				}
			}
			previousIndex = 0;
		}
		var frame;
		var timelineObject1;
		var displayObject;
		var symbol;
		var mask = null;
		var maskObject = null;
		var depthChange = false;
		var _g11 = previousIndex;
		var _g2 = index + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(i1 < 0) {
				continue;
			}
			frame = this.__symbol.frames[i1];
			var _g21 = 0;
			var _g3 = frame.objects;
			while(_g21 < _g3.length) {
				var frameObject1 = _g3[_g21];
				++_g21;
				if(frameObject1.type != openfl__$internal_timeline_FrameObjectType.DESTROY) {
					if(frameObject1.id == 0 && frameObject1.symbol != this.__zeroSymbol) {
						timelineObject1 = this.__objects.h[0];
						if(timelineObject1 != null && timelineObject1.displayObject.parent == this) {
							this.removeChild(timelineObject1.displayObject);
						}
						HxOverrides.remove(this.__objectDepths,this.__objects.h[0]);
						timelineObject1 = null;
						this.__zeroSymbol = frameObject1.symbol;
					}
					displayObject = null;
					if(!this.__objects.h.hasOwnProperty(frameObject1.id)) {
						if(this.__swf.symbols.h.hasOwnProperty(frameObject1.symbol)) {
							symbol = this.__swf.symbols.h[frameObject1.symbol];
							displayObject = symbol.__createObject(this.__swf);
						}
						if(displayObject != null) {
							timelineObject1 = new openfl_display__$MovieClip_TimelineObject(frameObject1.id,frameObject1.depth,displayObject);
							this.__objectDepths.push(timelineObject1);
							depthChange = true;
							this.__objects.h[frameObject1.id] = timelineObject1;
						}
					} else {
						timelineObject1 = this.__objects.h[frameObject1.id];
						displayObject = timelineObject1.displayObject;
						if(timelineObject1.displayObject.parent == null) {
							this.__objectDepths.push(timelineObject1);
							depthChange = true;
						}
					}
					if(displayObject != null) {
						this.__placeObject(displayObject,frameObject1);
						if(mask != null) {
							if(mask.clipDepth < frameObject1.depth) {
								mask = null;
							} else {
								displayObject.set_mask(maskObject);
							}
						} else {
							displayObject.set_mask(null);
						}
						if(frameObject1.clipDepth != 0) {
							mask = frameObject1;
							displayObject.set_visible(false);
							maskObject = displayObject;
						}
					}
				} else if(this.__objects.h.hasOwnProperty(frameObject1.id)) {
					timelineObject1 = this.__objects.h[frameObject1.id];
					if(timelineObject1 != null && timelineObject1.displayObject.parent == this) {
						this.removeChild(timelineObject1.displayObject);
					}
					HxOverrides.remove(this.__objectDepths,timelineObject1);
					depthChange = true;
				}
			}
		}
		if(depthChange) {
			this.__objectDepths.sort($bind(this,this.__sortTimelineDepth));
			var i2 = this.__objectDepths.length - 1;
			while(i2 >= 0) {
				timelineObject1 = this.__objectDepths[i2];
				this.addChildAt(timelineObject1.displayObject,0);
				--i2;
			}
		}
	}
	,__sortTimelineDepth: function(a,b) {
		return a.depth - b.depth;
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__updateFrame: function() {
		if(this.__currentFrame != this.__lastUpdate) {
			var frameIndex = this.__currentFrame - 1;
			if(frameIndex > -1) {
				if(this.__symbol.frames.length > frameIndex && this.__symbol.frames[frameIndex] != null) {
					this.__currentFrameLabel = this.__symbol.frames[frameIndex].label;
				} else {
					this.__currentFrameLabel = null;
				}
				if(this.__currentFrameLabel != null) {
					this.__currentLabel = this.__currentFrameLabel;
				} else if(this.__currentFrame != this.__lastUpdate + 1) {
					this.__currentLabel = null;
					var _g = 0;
					var _g1 = this.__currentLabels;
					while(_g < _g1.length) {
						var label = _g1[_g];
						++_g;
						if(label.get_frame() <= this.__currentFrame) {
							this.__currentLabel = label.get_name();
						} else {
							break;
						}
					}
				}
				this.__renderFrame(frameIndex);
			}
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		this.__lastUpdate = this.__currentFrame;
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			openfl_geom_ColorTransform.__limeColorMatrix = new Float32Array(20);
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) {
		target = "_blank";
	}
	lime_system_System.openURL(request.url,target);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null?_this.existsReserved(api):_this.h.hasOwnProperty(api))) {
		var _this1 = openfl_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 151, className : "openfl.Lib", methodName : "trace"});
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_BoolVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_BoolVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = false;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FloatVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FloatVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = 0;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FunctionVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = null;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_IntVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_IntVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = 0;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_ObjectVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					++_g1;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_renderer_AbstractBlendModeManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,setShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				this.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				break;
			case 1:
				var c1 = data.readBeginFill();
				this.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				this.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				this.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				this.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				this.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				this.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawRect();
				this.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				this.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 10:
				var c9 = data.readDrawTriangles();
				this.drawTriangles(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9));
				break;
			case 11:
				data.readEndFill();
				this.endFill();
				break;
			case 12:
				var c10 = data.readLineBitmapStyle();
				this.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
				break;
			case 13:
				var c11 = data.readLineGradientStyle();
				this.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
				break;
			case 14:
				var c12 = data.readLineStyle();
				this.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12));
				break;
			case 15:
				var c13 = data.readLineTo();
				this.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
				break;
			case 16:
				var c14 = data.readMoveTo();
				this.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
				break;
			case 17:
				this.overrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(data.readOverrideMatrix()));
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		switch(this.prev[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new(this);
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new(this);
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new(this);
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new(this);
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new(this);
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new(this);
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new(this);
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new(this);
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new(this);
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new(this);
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new(this);
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new(this);
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new(this);
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new(this);
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new(this);
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new(this);
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new(this);
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](5);
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1["float"](2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.obj(3);
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",18];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
	this.allowSmoothing = true;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,cairo: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,projectionMatrix: null
	,z: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap);
		var transform = bitmap.__renderTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else {
			cairo.set_matrix(transform.__toMatrix3());
		}
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && bitmap.smoothing?1:3);
			cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(bitmap.__worldAlpha);
			}
		}
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_cairo_CairoBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.cairo.CairoBlendModeManager"] = openfl__$internal_renderer_cairo_CairoBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.__name__ = ["openfl","_internal","renderer","cairo","CairoBlendModeManager"];
openfl__$internal_renderer_cairo_CairoBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.cairo.set_operator(12);
			break;
		case 1:
			break;
		case 2:
			this.renderSession.cairo.set_operator(17);
			break;
		case 3:
			this.renderSession.cairo.set_operator(23);
			break;
		case 4:
			break;
		case 5:
			this.renderSession.cairo.set_operator(21);
			break;
		case 6:
			break;
		case 7:
			this.renderSession.cairo.set_operator(2);
			break;
		case 8:
			this.renderSession.cairo.set_operator(18);
			break;
		case 9:
			this.renderSession.cairo.set_operator(14);
			break;
		case 10:
			this.renderSession.cairo.set_operator(2);
			break;
		case 11:
			this.renderSession.cairo.set_operator(16);
			break;
		case 12:
			this.renderSession.cairo.set_operator(15);
			break;
		case 13:
			break;
		case 14:
			break;
		default:
			this.renderSession.cairo.set_operator(2);
		}
	}
	,__class__: openfl__$internal_renderer_cairo_CairoBlendModeManager
});
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = ["openfl","_internal","renderer","cairo","CairoDisplayObject"];
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	}
	if(strokeBefore) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type) {
	case 0:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat,smooth) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,smooth && openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing?1:3);
	if(bitmapRepeat) {
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	}
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	if(commands.get_length() == 0) {
		return;
	}
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c1 = data.readBeginFill();
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false;
				} else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16) / 255,((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8) / 255,(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255) / 255,openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
					openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3) - offsetY);
				break;
			case 4:
				var c4 = data.readCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
				break;
			case 5:
				var c5 = data.readDrawCircle();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),0,Math.PI * 2);
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				hasPath = true;
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
				x -= offsetX;
				y -= offsetY;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c7 = data.readDrawRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 10:
				var c9 = data.readDrawTriangles();
				var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9);
				var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9);
				var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9);
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				var width1 = 0;
				var height1 = 0;
				var currentMatrix = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g3 = 0;
						var _g2 = v.get_length() / 2 | 0;
						while(_g3 < _g2) {
							var i = _g3++;
							uvt.push(v.get(i * 2) / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width);
							uvt.push(v.get(i * 2 + 1) / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height);
						}
					}
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9).get_length() != v.get_length());
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i1 = 0;
				var l = ind.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i1 < l) {
					a_ = i1;
					b_ = i1 + 1;
					c_ = i1 + 2;
					iax = ind.get(a_) * 2;
					iay = ind.get(a_) * 2 + 1;
					ibx = ind.get(b_) * 2;
					iby = ind.get(b_) * 2 + 1;
					icx = ind.get(c_) * 2;
					icy = ind.get(c_) * 2 + 1;
					x1 = v.get(iax);
					y1 = v.get(iay);
					x2 = v.get(ibx);
					y2 = v.get(iby);
					x3 = v.get(icx);
					y3 = v.get(icy);
					switch(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9)) {
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i1 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i1 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						}
						i1 += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3());
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.get(iax) * width1;
					uvx2 = uvt.get(ibx) * width1;
					uvx3 = uvt.get(icx) * width1;
					uvy1 = uvt.get(iay) * height1;
					uvy2 = uvt.get(iby) * height1;
					uvy3 = uvt.get(icy) * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i1 += 3;
						continue;
					}
					x1 *= currentMatrix.a;
					x2 *= currentMatrix.a;
					x3 *= currentMatrix.a;
					y1 *= currentMatrix.d;
					y2 *= currentMatrix.d;
					y3 *= currentMatrix.d;
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(new lime_math_Matrix3(t1,t2,t3,t4,dx,dy));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					}
					i1 += 3;
				}
				break;
			case 12:
				var c10 = data.readLineBitmapStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var c11 = data.readLineGradientStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 14:
				var c12 = data.readLineStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) == null);
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) == null) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) > 0?openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12):1);
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12) == null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1);
					} else {
						var _g21 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12);
						var tmp;
						switch(_g21) {
						case 0:
							tmp = 2;
							break;
						case 1:
							tmp = 0;
							break;
						default:
							tmp = 1;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(tmp);
					}
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12) == null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1);
					} else {
						var _g22 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12);
						var tmp1;
						switch(_g22) {
						case 0:
							tmp1 = 0;
							break;
						case 2:
							tmp1 = 2;
							break;
						default:
							tmp1 = 1;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(tmp1);
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12));
					var r = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 16711680) >>> 16) / 255;
					var g = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 65280) >>> 8) / 255;
					var b = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12) & 255) / 255;
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12) == 1) {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b);
					} else {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12));
					}
				}
				break;
			case 15:
				var c13 = data.readLineTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13);
				positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13);
				break;
			case 16:
				var c14 = data.readMoveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14);
				positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14);
				closeGap = true;
				startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14);
				startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14);
				break;
			default:
				data.skip(type);
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
			}
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
					matrix.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				}
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else {
		current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(current.x + 0.66666666666666663 * (cx - current.x),current.y + 0.66666666666666663 * (cy - current.y),x + 0.66666666666666663 * (cx - x),y + 0.66666666666666663 * (cy - y),x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession,parentTransform) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6));
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7));
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(mask.__getRenderTransform().__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(stage,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
	this.renderSession.blendModeManager = new openfl__$internal_renderer_cairo_CairoBlendModeManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCairo(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.cairo.identityMatrix();
		if(this.stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2]);
			this.cairo.paint();
		}
		this.stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession,transform) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap,false);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.__scrollRect;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.bitmapData.image.get_src(),0,0);
		} else {
			context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.maskManager.pushObject(displayObject);
		var context = renderSession.context;
		var transform = displayObject.__renderTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			var graphics = displayObject.__graphics;
			if(graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
				var width = graphics.__width;
				var height = graphics.__height;
				if(graphics.__canvas != null) {
					var context1 = renderSession.context;
					var scrollRect = displayObject.__scrollRect;
					if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
						renderSession.maskManager.pushObject(displayObject);
						context1.globalAlpha = displayObject.__worldAlpha;
						var transform1 = graphics.__worldTransform;
						if(renderSession.roundPixels) {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
						} else {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
						}
						context1.drawImage(graphics.__canvas,0,0);
						renderSession.maskManager.popObject(displayObject);
					}
				}
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type) {
	case 0:
		var matrix1 = matrix != null?matrix:new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill();
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c = data.readBeginBitmapFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c1 = data.readBeginGradientFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
				} else {
					var c2 = data.readBeginFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
				}
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 11:
				data.readEndFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 12:
				var c9 = data.readLineBitmapStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9));
				break;
			case 13:
				var c10 = data.readLineGradientStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10));
				break;
			case 14:
				var c11 = data.readLineStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11),1,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11));
				break;
			case 15:
				var c12 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				break;
			case 16:
				var c13 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				break;
			default:
				data.skip(type);
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
			return true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			return true;
		}
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			var c = data.readBeginBitmapFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),true,openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c) != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c).clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c1 = data.readBeginFill();
			if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) == 1) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),6);
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16) + ", " + ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8) + ", " + (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255) + ", " + openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c2 = data.readBeginGradientFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			var c3 = data.readCubicCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3) - offsetY);
			break;
		case 4:
			var c4 = data.readCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
			break;
		case 5:
			var c5 = data.readDrawCircle();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),0,Math.PI * 2,true);
			break;
		case 6:
			var c6 = data.readDrawEllipse();
			var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
			var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
			var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
			var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
			x -= offsetX;
			y -= offsetY;
			var ox = width / 2 * .5522848;
			var oy = height / 2 * .5522848;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 7:
			var c7 = data.readDrawRect();
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7)));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7)));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7);
					sl = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7);
					sb = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7);
					sr = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7);
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
					}
				}
			}
			if(!optimizationUsed) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
			}
			break;
		case 8:
			var c8 = data.readDrawRoundRect();
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
			break;
		case 12:
			var c9 = data.readLineBitmapStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c10 = data.readLineGradientStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10));
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 14:
			var c11 = data.readLineStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) == null);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) > 0?openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11):1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11) == null?"round":openfl_display__$JointStyle_JointStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == null?"round":openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == 0?"butt":openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11) == 1) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16777215,6);
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16711680) >>> 16) + ", " + ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 65280) >>> 8) + ", " + (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 255) + ", " + openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11) + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 15:
			var c12 = data.readLineTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12);
			positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12);
			break;
		case 16:
			var c13 = data.readMoveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			closeGap = true;
			startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			break;
		default:
			data.skip(type);
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			var transform = graphics.__renderTransform;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c = data.readBeginBitmapFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c1 = data.readBeginGradientFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
						} else {
							var c2 = data.readBeginFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
						}
						break;
					case 3:
						var c3 = data.readCubicCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						break;
					case 4:
						var c4 = data.readCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						break;
					case 5:
						var c5 = data.readDrawCircle();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						break;
					case 6:
						var c6 = data.readDrawEllipse();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						break;
					case 7:
						var c7 = data.readDrawRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						break;
					case 8:
						var c8 = data.readDrawRoundRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						break;
					case 10:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c9 = data.readDrawTriangles();
						var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9);
						var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9);
						var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9);
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) {
							throw "__break__";
						}
						if(!colorFill) {
							if(uvt == null) {
								uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
								var _g3 = 0;
								var _g2 = v.get_length() / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									uvt.push(v.get(i * 2) / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
									uvt.push(v.get(i * 2 + 1) / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
								}
							}
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,uvt.get_length() != v.get_length());
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
							} else {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
							}
						}
						var i1 = 0;
						var l = ind.get_length();
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a_ = i1;
							b_ = i1 + 1;
							c_ = i1 + 2;
							iax = ind.get(a_) * 2;
							iay = ind.get(a_) * 2 + 1;
							ibx = ind.get(b_) * 2;
							iby = ind.get(b_) * 2 + 1;
							icx = ind.get(c_) * 2;
							icy = ind.get(c_) * 2 + 1;
							x1 = v.get(iax);
							y1 = v.get(iay);
							x2 = v.get(ibx);
							y2 = v.get(iby);
							x3 = v.get(icx);
							y3 = v.get(icy);
							switch(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9)) {
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i1 += 3;
									continue;
								}
								break;
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								}
								i1 += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.get(iax) * pattern.width;
							uvx2 = uvt.get(ibx) * pattern.width;
							uvx3 = uvt.get(icx) * pattern.width;
							uvy1 = uvt.get(iay) * pattern.height;
							uvy2 = uvt.get(iby) * pattern.height;
							uvy3 = uvt.get(icy) * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					case 11:
						data.readEndFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 12:
						var c10 = data.readLineBitmapStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
						break;
					case 13:
						var c11 = data.readLineGradientStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c11),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c11));
						break;
					case 14:
						var c12 = data.readLineStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12));
						break;
					case 15:
						var c13 = data.readLineTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13));
						break;
					case 16:
						var c14 = data.readMoveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14));
						break;
					default:
						data.skip(type);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2,true);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6));
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7));
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.clearRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		}
		this.stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderSession.maskManager.pushObject(shape);
				context.globalAlpha = shape.__worldAlpha;
				var transform = graphics.__worldTransform;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				context.drawImage(graphics.__canvas,0,0);
				renderSession.maskManager.popObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) {
			hiddenInput.maxLength = textEngine.maxChars;
		}
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.bounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update();
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			var transform1 = graphics.__renderTransform;
			if(renderSession.roundPixels) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
			} else {
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.get_length()) {
					var group = _g11.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) {
						break;
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) {
						offsetY = group.format.size * 0.185;
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.advances.length <= i1) {
										break;
									}
									advance += group.advances[i1];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group.startIndex > selectionStart) {
								selectionStart = group.startIndex;
							}
							if(group.endIndex < selectionEnd) {
								selectionEnd = group.endIndex;
							}
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY1 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i2 = _g12++;
						scrollY1 -= textEngine.lineHeights.get(i2);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.get_defaultTextFormat().color,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(stage,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function() {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap);
		if(bitmap.bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
		}
		renderSession.maskManager.popObject(bitmap);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	if(bitmap.__imageVersion != bitmap.bitmapData.image.version) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		bitmap.__canvas.width = bitmap.bitmapData.width;
		bitmap.__canvas.height = bitmap.bitmapData.height;
		bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.bitmapData.image.version;
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderSession) {
	var tmp = displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
		if(graphics.__dirty || displayObject.__worldAlphaChanged || displayObject.__canvas == null && graphics.__canvas != null) {
			if(graphics.__canvas != null) {
				if(displayObject.__canvas != graphics.__canvas) {
					if(displayObject.__canvas != null) {
						renderSession.element.removeChild(displayObject.__canvas);
					}
					displayObject.__canvas = graphics.__canvas;
					displayObject.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(displayObject,displayObject.__canvas,renderSession);
				}
			} else if(displayObject.__canvas != null) {
				renderSession.element.removeChild(displayObject.__canvas);
				displayObject.__canvas = null;
				displayObject.__style = null;
			}
		}
		if(displayObject.__canvas != null) {
			renderSession.maskManager.pushObject(displayObject);
			var cacheTransform = displayObject.__renderTransform;
			displayObject.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				displayObject.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(displayObject,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(displayObject,renderSession,true,true,true);
			displayObject.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(displayObject);
		}
	} else if(displayObject.__canvas != null) {
		renderSession.element.removeChild(displayObject.__canvas);
		displayObject.__canvas = null;
		displayObject.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.clipRects = [];
	this.numClipRects = 0;
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	currentClipRect: null
	,clipRects: null
	,numClipRects: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.currentClipRect = clipRect;
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.currentClipRect = this.clipRects[this.numClipRects - 1];
			} else {
				this.currentClipRect = null;
			}
		}
	}
	,updateClip: function(displayObject) {
		if(this.currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	this.renderSession.transformProperty = prefix.lowercase == "webkit"?"-webkit-transform":"transform";
	this.renderSession.transformOriginProperty = prefix.lowercase == "webkit"?"-webkit-transform-origin":"transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__renderTransformChanged) {
		var _this = displayObject.__renderTransform;
		style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)":"matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
	}
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) {
			style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null);
		} else {
			style.removeProperty("opacity");
		}
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) {
			style.removeProperty("clip");
		} else {
			var clip = displayObject.__worldClip;
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__renderTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldClip = null;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.updateClip = function(displayObject,renderSession) {
	renderSession.maskManager.updateClip(displayObject);
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) {
			this.element.style.background = this.stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderSession.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			renderSession.maskManager.pushObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(shape,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(shape);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = textEngine.text.replace(new RegExp("\n","g".split("u").join("")),"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.multiline) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				var _this_r = new RegExp("\n","g".split("u").join(""));
				textField.__div.innerHTML = textEngine.text.replace(_this_r,"<br>");
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null);
				} else {
					style.removeProperty("background-color");
				}
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null);
				} else {
					style.removeProperty("border");
				}
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != 2) {
					style.setProperty("width","auto",null);
				} else {
					style.setProperty("width",textEngine.width + "px",null);
				}
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
		}
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.get_blendMode());
		renderSession.maskManager.pushObject(bitmap);
		var shader = renderSession.filterManager.pushObject(bitmap);
		shader.get_data().uImage0.input = bitmap.bitmapData;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,bitmap.bitmapData.getBuffer(gl,bitmap.__worldAlpha));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(bitmap);
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] = openfl__$internal_renderer_opengl_GLDisplayObject;
openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = ["openfl","_internal","renderer","opengl","GLDisplayObject"];
openfl__$internal_renderer_opengl_GLDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.maskManager.pushObject(displayObject);
		var gl = renderSession.gl;
		var rect = openfl_geom_Rectangle.__temp;
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.pushRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		gl.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		renderSession.maskManager.popRect();
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			var graphics = displayObject.__graphics;
			if(graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
				if(graphics.__bitmap != null && graphics.__visible) {
					var renderer = renderSession.renderer;
					var gl1 = renderSession.gl;
					renderSession.blendModeManager.setBlendMode(displayObject.get_blendMode());
					renderSession.maskManager.pushObject(displayObject);
					var shader = renderSession.filterManager.pushObject(displayObject);
					shader.get_data().uImage0.input = graphics.__bitmap;
					shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
					shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
					renderSession.shaderManager.setShader(shader);
					gl1.bindBuffer(gl1.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl1,displayObject.__worldAlpha));
					gl1.vertexAttribPointer(shader.get_data().aPosition.index,3,gl1.FLOAT,false,24,0);
					gl1.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl1.FLOAT,false,24,12);
					gl1.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl1.FLOAT,false,24,20);
					gl1.drawArrays(gl1.TRIANGLE_STRIP,0,4);
					renderSession.filterManager.popObject(displayObject);
					renderSession.maskManager.popObject(displayObject);
				}
			}
		}
	}
};
var openfl__$internal_renderer_opengl_GLFilterManager = function(renderer,renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new openfl_geom_Matrix();
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	filterDepth: null
	,gl: null
	,matrix: null
	,renderer: null
	,pushObject: function(object) {
		if(object.__filters != null && object.__filters.length > 0) {
			if(object.__filters.length == 1 && object.__filters[0].__numPasses == 0) {
				return object.__filters[0].__initShader(this.renderSession,0);
			} else {
				this.renderer.getRenderTarget(true);
			}
			this.filterDepth++;
		}
		return this.renderSession.shaderManager.defaultShader;
	}
	,popObject: function(object) {
		if(object.__filters != null && object.__filters.length > 0) {
			var filter = object.__filters[0];
			var currentTarget;
			var shader;
			if(object.__filters.length > 1 || filter.__numPasses > 0) {
				var _g1 = 0;
				var _g = filter.__numPasses;
				while(_g1 < _g) {
					var i = _g1++;
					currentTarget = this.renderer.currentRenderTarget;
					this.renderer.getRenderTarget(true);
					shader = filter.__initShader(this.renderSession,i);
					this.renderPass(currentTarget,shader);
				}
				this.filterDepth--;
				this.renderer.getRenderTarget(this.filterDepth > 0);
				this.renderPass(this.renderer.currentRenderTarget,this.renderSession.shaderManager.defaultShader);
			} else {
				this.filterDepth--;
			}
		}
	}
	,renderPass: function(target,shader) {
		shader.get_data().uImage0.input = target;
		shader.get_data().uImage0.smoothing = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		this.renderSession.shaderManager.setShader(shader);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,target.getBuffer(this.gl,1));
		this.gl.vertexAttribPointer(shader.get_data().aPosition.index,3,this.gl.FLOAT,false,24,0);
		this.gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,this.gl.FLOAT,false,24,12);
		this.gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,this.gl.FLOAT,false,24,20);
		this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl__$internal_renderer_opengl_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.numClipRects = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,numClipRects: null
	,tempRect: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.scissorRect(this.clipRects[this.numClipRects - 1]);
			} else {
				this.scissorRect();
			}
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var x = Math.floor(clipRect.x);
			var y = Math.floor(renderer.height - clipRect.y - clipRect.height);
			var width = Math.ceil(clipRect.width);
			var height = Math.ceil(clipRect.height);
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			this.gl.scissor(x,y,width,height);
		} else {
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = function(stage,gl,flipped) {
	if(flipped == null) {
		flipped = true;
	}
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.flipped = flipped;
	this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = gl;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this,this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.get(0).context3D == null) {
			stage.stage3Ds.get(0).__createContext(stage,this.renderSession);
		}
		this.resize(Math.ceil(stage.window.__width * stage.window.__scale),Math.ceil(stage.window.__height * stage.window.__scale));
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,projectionFlipped: null
	,currentRenderTarget: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,flipped: null
	,gl: null
	,matrix: null
	,renderTargetA: null
	,renderTargetB: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) {
			this.gl.clearColor(0,0,0,0);
		} else {
			this.gl.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		}
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,getCacheObject: function() {
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__temp;
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.matrix,this.flipped?this.projectionFlipped:this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.matrix,i);
		}
		return this.values;
	}
	,getRenderTarget: function(framebuffer) {
		if(framebuffer) {
			if(this.renderTargetA == null) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB == null) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.currentRenderTarget == this.renderTargetA) {
				this.currentRenderTarget = this.renderTargetB;
			} else {
				this.currentRenderTarget = this.renderTargetA;
			}
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentRenderTarget.__getFramebuffer(this.gl));
			this.gl.viewport(0,0,this.width,this.height);
			this.gl.clearColor(0,0,0,0);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			this.flipped = false;
		} else {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);
			this.flipped = true;
		}
	}
	,render: function() {
		this.gl.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.clearColor(0,0,0,1);
			this.gl.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.scissor(0,0,this.offsetX,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.scissor(0,0,this.width,this.offsetY);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
			this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(width,height,1,true));
			this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
		}
		if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
			this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(width,height,1,true));
			this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
		}
		this.displayMatrix = this.stage.__displayMatrix;
		var _this = this.displayMatrix;
		this.offsetX = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		var _this1 = this.displayMatrix;
		this.offsetY = Math.round(0 * _this1.b + 0 * _this1.d + _this1.ty);
		var _this2 = this.displayMatrix;
		this.displayWidth = Math.round(width * _this2.a + 0 * _this2.c + _this2.tx - this.offsetX);
		var _this3 = this.displayMatrix;
		this.displayHeight = Math.round(0 * _this3.b + height * _this3.d + _this3.ty - this.offsetY);
		this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.defaultShader.gl = gl;
	this.defaultShader.__init();
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,setShader: function(shader) {
		if(this.currentShader == shader) {
			if(this.currentShader != null) {
				this.currentShader.__update();
			}
			return;
		}
		if(this.currentShader != null) {
			this.currentShader.__disable();
		}
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return;
		}
		this.currentShader = shader;
		if(this.currentShader.gl == null) {
			this.currentShader.gl = this.gl;
			this.currentShader.__init();
		}
		this.gl.useProgram(shader.glProgram);
		this.currentShader.__enable();
		this.currentShader.__update();
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_renderer_opengl_GLShape = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLShape"] = openfl__$internal_renderer_opengl_GLShape;
openfl__$internal_renderer_opengl_GLShape.__name__ = ["openfl","_internal","renderer","opengl","GLShape"];
openfl__$internal_renderer_opengl_GLShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__bitmap != null && graphics.__visible) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			renderSession.blendModeManager.setBlendMode(shape.get_blendMode());
			renderSession.maskManager.pushObject(shape);
			var shader = renderSession.filterManager.pushObject(shape);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			renderSession.shaderManager.setShader(shader);
			gl.bindBuffer(gl.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl,shape.__worldAlpha));
			gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
			gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
			gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
			gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
			renderSession.filterManager.popObject(shape);
			renderSession.maskManager.popObject(shape);
		}
	}
};
var openfl__$internal_renderer_opengl_GLStage3D = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLStage3D"] = openfl__$internal_renderer_opengl_GLStage3D;
openfl__$internal_renderer_opengl_GLStage3D.__name__ = ["openfl","_internal","renderer","opengl","GLStage3D"];
openfl__$internal_renderer_opengl_GLStage3D.render = function(stage3D,renderSession) {
	if(stage3D.context3D != null) {
		renderSession.gl.depthMask(true);
		renderSession.blendModeManager.setBlendMode(null);
		if(renderSession.shaderManager.currentShader != null) {
			renderSession.shaderManager.setShader(null);
			if(stage3D.context3D.__program != null) {
				stage3D.context3D.__program.__use();
			}
		}
	}
};
var openfl__$internal_stage3D_AGALConverter = function() { };
$hxClasses["openfl._internal.stage3D.AGALConverter"] = openfl__$internal_stage3D_AGALConverter;
openfl__$internal_stage3D_AGALConverter.__name__ = ["openfl","_internal","stage3D","AGALConverter"];
openfl__$internal_stage3D_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_stage3D_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	return new haxe__$Int64__$_$_$Int64(byteArray.readInt(),low);
};
openfl__$internal_stage3D_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	if(agal.readInt() != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	if((agal.readByte() & 255) != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0?openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX:openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_stage3D_RegisterMap();
	var sb_b = "";
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + ", " + sr2.toGLSL() + "; // rcp (untested)");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				sr1.sourceMask = 3;
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D);
				sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				break;
			case 1:
				sr1.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				break;
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile == null) {
		var version = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl__$internal_stage3D_AGALConverter.limitedProfile = version.indexOf("OpenGL ES") > -1 || version.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b = "" + Std.string("// AGAL " + (programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX?"vertex":"fragment") + " shader\n");
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile) {
		glsl_b += Std.string("#version " + 100 + "\n");
		glsl_b += "precision highp float;\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += sb_b == null?"null":"" + sb_b;
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl__$internal_stage3D__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] = openfl__$internal_stage3D__$AGALConverter_DestRegister;
openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","DestRegister"];
openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str = "." + "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str = this.type == 3?this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX?"gl_Position":"gl_FragColor":openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_DestRegister
};
var openfl__$internal_stage3D__$AGALConverter_ProgramType = $hxClasses["openfl._internal.stage3D._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
var openfl__$internal_stage3D_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.stage3D.RegisterMap"] = openfl__$internal_stage3D_RegisterMap;
openfl__$internal_stage3D_RegisterMap.__name__ = ["openfl","_internal","stage3D","RegisterMap"];
openfl__$internal_stage3D_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			if(a.type != b.type) {
				return js_Boot.__cast(a.type , Int) - js_Boot.__cast(b.type , Int);
			} else {
				return a.number - b.number;
			}
		});
		var sb_b = "";
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			var entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			switch(entry.usage[1]) {
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 765, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				haxe_Log.trace("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",{ fileName : "AGALConverter.hx", lineNumber : 769, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += entry.name == null?"null":"" + entry.name;
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				var count = 128;
				if(i < this.mEntries.length - 1) {
					count = this.mEntries[i + 1].number - entry.number;
				}
				sb_b += Std.string(entry.name + "[" + count + "]");
				sb_b += ";\n";
			} else {
				sb_b += entry.name == null?"null":"" + entry.name;
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_stage3D_RegisterMap
};
var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] = openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","stage3D","_AGALConverter","RegisterMapEntry"];
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.stage3D._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","VECTOR_4_ARRAY"] };
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",6];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
var openfl__$internal_stage3D__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] = openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SamplerRegister"];
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var a;
	a = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 28);
	var b = new haxe__$Int64__$_$_$Int64(0,15);
	sr.f = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low).low;
	var a1;
	a1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 24);
	var b1 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.m = new haxe__$Int64__$_$_$Int64(a1.high & b1.high,a1.low & b1.low).low;
	var a2;
	a2 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 20);
	var b2 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.w = new haxe__$Int64__$_$_$Int64(a2.high & b2.high,a2.low & b2.low).low;
	var a3;
	a3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 16);
	var b3 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.s = new haxe__$Int64__$_$_$Int64(a3.high & b3.high,a3.low & b3.low).low;
	var a4;
	a4 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 12);
	var b4 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.d = new haxe__$Int64__$_$_$Int64(a4.high & b4.high,a4.low & b4.low).low;
	var a5;
	a5 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 8);
	var b5 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.t = new haxe__$Int64__$_$_$Int64(a5.high & b5.high,a5.low & b5.low).low;
	var a6;
	a6 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high);
	var b6 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.type = new haxe__$Int64__$_$_$Int64(a6.high & b6.high,a6.low & b6.low).low;
	var a7;
	a7 = new haxe__$Int64__$_$_$Int64(v.high >> 16,v.high << 16 | v.low >>> 16);
	var b7 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.b = new haxe__$Int64__$_$_$Int64(a7.high & b7.high,a7.low & b7.low).low;
	var b8 = new haxe__$Int64__$_$_$Int64(0,65535);
	sr.n = new haxe__$Int64__$_$_$Int64(v.high & b8.high,v.low & b8.low).low;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		return openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
	}
	,toSamplerState: function() {
		var magFilter = 0;
		var minFilter = 0;
		var wrapModeS = 0;
		var wrapModeT = 0;
		switch(this.f) {
		case 0:
			magFilter = 9728;
			break;
		case 1:
			magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.m) {
		case 0:
			if(this.f != 0) {
				minFilter = 9729;
			} else {
				minFilter = 9728;
			}
			break;
		case 1:
			if(this.f != 0) {
				minFilter = 9986;
			} else {
				minFilter = 9984;
			}
			break;
		case 2:
			if(this.f != 0) {
				minFilter = 9987;
			} else {
				minFilter = 9985;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.w) {
		case 0:
			wrapModeS = 33071;
			wrapModeT = 33071;
			break;
		case 1:
			wrapModeS = 10497;
			wrapModeT = 10497;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		return new openfl__$internal_stage3D_SamplerState(minFilter,magFilter,wrapModeS,wrapModeT,(this.b << 24 >> 24) / 8.0,0.0,(this.s & 4) == 4,(this.s & 1) == 1);
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister
};
var openfl__$internal_stage3D__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] = openfl__$internal_stage3D__$AGALConverter_SourceRegister;
openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SourceRegister"];
openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var a;
	a = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 31);
	var b = new haxe__$Int64__$_$_$Int64(0,1);
	sr.d = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low).low;
	var a1;
	a1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 16);
	var b1 = new haxe__$Int64__$_$_$Int64(0,3);
	sr.q = new haxe__$Int64__$_$_$Int64(a1.high & b1.high,a1.low & b1.low).low;
	var a2;
	a2 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> 8);
	var b2 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.itype = new haxe__$Int64__$_$_$Int64(a2.high & b2.high,a2.low & b2.low).low;
	var a3;
	a3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high);
	var b3 = new haxe__$Int64__$_$_$Int64(0,15);
	sr.type = new haxe__$Int64__$_$_$Int64(a3.high & b3.high,a3.low & b3.low).low;
	var a4;
	a4 = new haxe__$Int64__$_$_$Int64(v.high >> 24,v.high << 8 | v.low >>> 24);
	var b4 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.s = new haxe__$Int64__$_$_$Int64(a4.high & b4.high,a4.low & b4.low).low;
	var a5;
	a5 = new haxe__$Int64__$_$_$Int64(v.high >> 16,v.high << 16 | v.low >>> 16);
	var b5 = new haxe__$Int64__$_$_$Int64(0,255);
	sr.o = new haxe__$Int64__$_$_$Int64(a5.high & b5.high,a5.low & b5.low).low;
	var b6 = new haxe__$Int64__$_$_$Int64(0,65535);
	sr.n = new haxe__$Int64__$_$_$Int64(v.high & b6.high,v.low & b6.low).low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					switch(this.s >> i * 2 & 3) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = String.fromCharCode(HxOverrides.cca("x",0) + this.q);
			str += "[ int(" + (openfl__$internal_stage3D_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent) + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister
};
var openfl__$internal_stage3D_Context3DStateCache = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var _g1 = 0;
		while(_g1 < 4096) this._registers.set(_g1++,-999999999.0);
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateActiveTextureSample: function(texture) {
		this._activeTexture = texture;
		return true;
	}
	,updateActiveVertexArray: function(vertexArray) {
		this._activeVertexArray = vertexArray;
		return true;
	}
	,updateBlendDestFactor: function(factor) {
		this._destBlendFactor = factor;
		return true;
	}
	,updateBlendSrcFactor: function(factor) {
		this._srcBlendFactor = factor;
		return true;
	}
	,updateCullingMode: function(cullMode) {
		this._cullingMode = cullMode;
		return true;
	}
	,updateDepthCompareMode: function(mode) {
		this._depthTestCompareMode = mode;
		return true;
	}
	,updateDepthTestEnabled: function(test) {
		this._depthTestEnabled = test;
		return true;
	}
	,updateDepthTestMask: function(mask) {
		this._depthTestMask = mask;
		return true;
	}
	,updateProgram3D: function(program3d) {
		this._program = program3d;
		return true;
	}
	,updateRegisters: function(mTemp,startRegister,numRegisters) {
		return true;
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLUtils = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) {
		return;
	}
	var error = lime_graphics_opengl_GL.context.getError();
	if(error != 0) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + error + "\n"));
	}
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid) {
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(maxAniso == null) {
		maxAniso = 0.0;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	this.minFilter = minFilter;
	this.magFilter = magFilter;
	this.wrapModeS = wrapModeS;
	this.wrapModeT = wrapModeT;
	this.lodBias = lodBias;
	this.maxAniso = maxAniso;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	centroid: null
	,ignoreSampler: null
	,lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.minFilter = other.minFilter;
		this.magFilter = other.magFilter;
		this.wrapModeS = other.wrapModeS;
		this.wrapModeT = other.wrapModeT;
		this.lodBias = other.lodBias;
		this.maxAniso = other.maxAniso;
		this.centroid = other.centroid;
	}
	,equals: function(other) {
		if(this == other) {
			return true;
		}
		if(other == null) {
			return false;
		}
		if(this.minFilter == other.minFilter && this.magFilter == other.magFilter && this.wrapModeS == other.wrapModeS && this.wrapModeT == other.wrapModeT && this.lodBias == other.lodBias) {
			return this.maxAniso == other.maxAniso;
		} else {
			return false;
		}
	}
	,__class__: openfl__$internal_stage3D_SamplerState
};
var openfl__$internal_stage3D_assembler_FS = function() {
};
$hxClasses["openfl._internal.stage3D.assembler.FS"] = openfl__$internal_stage3D_assembler_FS;
openfl__$internal_stage3D_assembler_FS.__name__ = ["openfl","_internal","stage3D","assembler","FS"];
openfl__$internal_stage3D_assembler_FS.prototype = {
	format: null
	,size: null
	,__class__: openfl__$internal_stage3D_assembler_FS
};
var openfl__$internal_stage3D_assembler_Flags = function() {
};
$hxClasses["openfl._internal.stage3D.assembler.Flags"] = openfl__$internal_stage3D_assembler_Flags;
openfl__$internal_stage3D_assembler_Flags.__name__ = ["openfl","_internal","stage3D","assembler","Flags"];
openfl__$internal_stage3D_assembler_Flags.prototype = {
	fragonly: null
	,horizontal: null
	,matrix: null
	,simple: null
	,__class__: openfl__$internal_stage3D_assembler_Flags
};
var openfl__$internal_stage3D_assembler_Opcode = function(dest,aformat,asize,bformat,bsize,opcode,simple,horizontal,fragonly,matrix) {
	if(matrix == null) {
		matrix = false;
	}
	if(fragonly == null) {
		fragonly = false;
	}
	if(horizontal == null) {
		horizontal = false;
	}
	this.a = new openfl__$internal_stage3D_assembler_FS();
	this.b = new openfl__$internal_stage3D_assembler_FS();
	this.flags = new openfl__$internal_stage3D_assembler_Flags();
	this.dest = dest;
	this.a.format = aformat;
	this.a.size = asize;
	this.b.format = bformat;
	this.b.size = bsize;
	this.opcode = opcode;
	this.flags.simple = simple;
	this.flags.horizontal = horizontal;
	this.flags.fragonly = fragonly;
	this.flags.matrix = matrix;
};
$hxClasses["openfl._internal.stage3D.assembler.Opcode"] = openfl__$internal_stage3D_assembler_Opcode;
openfl__$internal_stage3D_assembler_Opcode.__name__ = ["openfl","_internal","stage3D","assembler","Opcode"];
openfl__$internal_stage3D_assembler_Opcode.prototype = {
	a: null
	,b: null
	,dest: null
	,flags: null
	,opcode: null
	,__class__: openfl__$internal_stage3D_assembler_Opcode
};
var openfl__$internal_stage3D_assembler_OpcodeMap = function() { };
$hxClasses["openfl._internal.stage3D.assembler.OpcodeMap"] = openfl__$internal_stage3D_assembler_OpcodeMap;
openfl__$internal_stage3D_assembler_OpcodeMap.__name__ = ["openfl","_internal","stage3D","assembler","OpcodeMap"];
openfl__$internal_stage3D_assembler_OpcodeMap.__properties__ = {get_map:"get_map"}
openfl__$internal_stage3D_assembler_OpcodeMap.get_map = function() {
	if(openfl__$internal_stage3D_assembler_OpcodeMap._map == null) {
		openfl__$internal_stage3D_assembler_OpcodeMap._map = new haxe_ds_StringMap();
		var value = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,0,true,false,false,false);
		var _this = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.mov != null) {
			_this.setReserved("mov",value);
		} else {
			_this.h["mov"] = value;
		}
		var value1 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,1,true,false,false,false);
		var _this1 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.add != null) {
			_this1.setReserved("add",value1);
		} else {
			_this1.h["add"] = value1;
		}
		var value2 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,2,true,false,false,false);
		var _this2 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.sub != null) {
			_this2.setReserved("sub",value2);
		} else {
			_this2.h["sub"] = value2;
		}
		var value3 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,3,true,false,false,false);
		var _this3 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.mul != null) {
			_this3.setReserved("mul",value3);
		} else {
			_this3.h["mul"] = value3;
		}
		var value4 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,4,true,false,false,false);
		var _this4 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.div != null) {
			_this4.setReserved("div",value4);
		} else {
			_this4.h["div"] = value4;
		}
		var value5 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,5,true,false,false,false);
		var _this5 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.rcp != null) {
			_this5.setReserved("rcp",value5);
		} else {
			_this5.h["rcp"] = value5;
		}
		var value6 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,6,true,false,false,false);
		var _this6 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.min != null) {
			_this6.setReserved("min",value6);
		} else {
			_this6.h["min"] = value6;
		}
		var value7 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,7,true,false,false,false);
		var _this7 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.max != null) {
			_this7.setReserved("max",value7);
		} else {
			_this7.h["max"] = value7;
		}
		var value8 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,8,true,false,false,false);
		var _this8 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.frc != null) {
			_this8.setReserved("frc",value8);
		} else {
			_this8.h["frc"] = value8;
		}
		var value9 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,9,true,false,false,false);
		var _this9 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.sqt != null) {
			_this9.setReserved("sqt",value9);
		} else {
			_this9.h["sqt"] = value9;
		}
		var value10 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,10,true,false,false,false);
		var _this10 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.rsq != null) {
			_this10.setReserved("rsq",value10);
		} else {
			_this10.h["rsq"] = value10;
		}
		var value11 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,11,true,false,false,false);
		var _this11 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.pow != null) {
			_this11.setReserved("pow",value11);
		} else {
			_this11.h["pow"] = value11;
		}
		var value12 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,12,true,false,false,false);
		var _this12 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.log != null) {
			_this12.setReserved("log",value12);
		} else {
			_this12.h["log"] = value12;
		}
		var value13 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,13,true,false,false,false);
		var _this13 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.exp != null) {
			_this13.setReserved("exp",value13);
		} else {
			_this13.h["exp"] = value13;
		}
		var value14 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,14,true,false,false,false);
		var _this14 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.nrm != null) {
			_this14.setReserved("nrm",value14);
		} else {
			_this14.h["nrm"] = value14;
		}
		var value15 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,15,true,false,false,false);
		var _this15 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.sin != null) {
			_this15.setReserved("sin",value15);
		} else {
			_this15.h["sin"] = value15;
		}
		var value16 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,16,true,false,false,false);
		var _this16 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.cos != null) {
			_this16.setReserved("cos",value16);
		} else {
			_this16.h["cos"] = value16;
		}
		var value17 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,17,true,true,false,false);
		var _this17 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.crs != null) {
			_this17.setReserved("crs",value17);
		} else {
			_this17.h["crs"] = value17;
		}
		var value18 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,18,true,true,false,false);
		var _this18 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.dp3 != null) {
			_this18.setReserved("dp3",value18);
		} else {
			_this18.h["dp3"] = value18;
		}
		var value19 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,19,true,true,false,false);
		var _this19 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.dp4 != null) {
			_this19.setReserved("dp4",value19);
		} else {
			_this19.h["dp4"] = value19;
		}
		var value20 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,20,true,false,false,false);
		var _this20 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.abs != null) {
			_this20.setReserved("abs",value20);
		} else {
			_this20.h["abs"] = value20;
		}
		var value21 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,21,true,false,false,false);
		var _this21 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.neg != null) {
			_this21.setReserved("neg",value21);
		} else {
			_this21.h["neg"] = value21;
		}
		var value22 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"none",0,22,true,false,false,false);
		var _this22 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.sat != null) {
			_this22.setReserved("sat",value22);
		} else {
			_this22.h["sat"] = value22;
		}
		var value23 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"sampler",1,38,true,false,true,false);
		var _this23 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.ted != null) {
			_this23.setReserved("ted",value23);
		} else {
			_this23.h["ted"] = value23;
		}
		var value24 = new openfl__$internal_stage3D_assembler_Opcode("none","scalar",1,"none",0,39,true,false,true,false);
		var _this24 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.kil != null) {
			_this24.setReserved("kil",value24);
		} else {
			_this24.h["kil"] = value24;
		}
		var value25 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"sampler",1,40,true,false,true,false);
		var _this25 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.tex != null) {
			_this25.setReserved("tex",value25);
		} else {
			_this25.h["tex"] = value25;
		}
		var value26 = new openfl__$internal_stage3D_assembler_Opcode("vector","matrix",3,"vector",3,23,true,false,false,true);
		var _this26 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.m33 != null) {
			_this26.setReserved("m33",value26);
		} else {
			_this26.h["m33"] = value26;
		}
		var value27 = new openfl__$internal_stage3D_assembler_Opcode("vector","matrix",4,"vector",4,24,true,false,false,true);
		var _this27 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.m44 != null) {
			_this27.setReserved("m44",value27);
		} else {
			_this27.h["m44"] = value27;
		}
		var value28 = new openfl__$internal_stage3D_assembler_Opcode("vector","matrix",3,"vector",4,25,true,false,false,true);
		var _this28 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.m43 != null) {
			_this28.setReserved("m43",value28);
		} else {
			_this28.h["m43"] = value28;
		}
		var value29 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,41,true,false,false,false);
		var _this29 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.sge != null) {
			_this29.setReserved("sge",value29);
		} else {
			_this29.h["sge"] = value29;
		}
		var value30 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,42,true,false,false,false);
		var _this30 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.slt != null) {
			_this30.setReserved("slt",value30);
		} else {
			_this30.h["slt"] = value30;
		}
		var value31 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,43,true,false,false,false);
		var _this31 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.sgn != null) {
			_this31.setReserved("sgn",value31);
		} else {
			_this31.h["sgn"] = value31;
		}
		var value32 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,44,true,false,false,false);
		var _this32 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.seq != null) {
			_this32.setReserved("seq",value32);
		} else {
			_this32.h["seq"] = value32;
		}
		var value33 = new openfl__$internal_stage3D_assembler_Opcode("vector","vector",4,"vector",4,45,true,false,false,false);
		var _this33 = openfl__$internal_stage3D_assembler_OpcodeMap._map;
		if(__map_reserved.sne != null) {
			_this33.setReserved("sne",value33);
		} else {
			_this33.h["sne"] = value33;
		}
	}
	return openfl__$internal_stage3D_assembler_OpcodeMap._map;
};
var openfl__$internal_stage3D_assembler_Part = function(name,version) {
	if(version == null) {
		version = 0;
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.version = version;
	this.data = new openfl_utils_ByteArrayData(0);
	this.data.__endian = 1;
};
$hxClasses["openfl._internal.stage3D.assembler.Part"] = openfl__$internal_stage3D_assembler_Part;
openfl__$internal_stage3D_assembler_Part.__name__ = ["openfl","_internal","stage3D","assembler","Part"];
openfl__$internal_stage3D_assembler_Part.prototype = {
	data: null
	,name: null
	,version: null
	,__class__: openfl__$internal_stage3D_assembler_Part
};
var openfl__$internal_stage3D_assembler_Reg = function(code,desc) {
	this.code = code;
	this.desc = desc;
};
$hxClasses["openfl._internal.stage3D.assembler.Reg"] = openfl__$internal_stage3D_assembler_Reg;
openfl__$internal_stage3D_assembler_Reg.__name__ = ["openfl","_internal","stage3D","assembler","Reg"];
openfl__$internal_stage3D_assembler_Reg.prototype = {
	code: null
	,desc: null
	,__class__: openfl__$internal_stage3D_assembler_Reg
};
var openfl__$internal_stage3D_assembler_RegMap = function() { };
$hxClasses["openfl._internal.stage3D.assembler.RegMap"] = openfl__$internal_stage3D_assembler_RegMap;
openfl__$internal_stage3D_assembler_RegMap.__name__ = ["openfl","_internal","stage3D","assembler","RegMap"];
openfl__$internal_stage3D_assembler_RegMap.__properties__ = {get_map:"get_map"}
openfl__$internal_stage3D_assembler_RegMap.get_map = function() {
	if(openfl__$internal_stage3D_assembler_RegMap._map == null) {
		openfl__$internal_stage3D_assembler_RegMap._map = new haxe_ds_StringMap();
		var _this = openfl__$internal_stage3D_assembler_RegMap._map;
		var value = new openfl__$internal_stage3D_assembler_Reg(0,"vertex attribute");
		if(__map_reserved.va != null) {
			_this.setReserved("va",value);
		} else {
			_this.h["va"] = value;
		}
		var _this1 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value1 = new openfl__$internal_stage3D_assembler_Reg(1,"fragment constant");
		if(__map_reserved.fc != null) {
			_this1.setReserved("fc",value1);
		} else {
			_this1.h["fc"] = value1;
		}
		var _this2 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value2 = new openfl__$internal_stage3D_assembler_Reg(1,"vertex constant");
		if(__map_reserved.vc != null) {
			_this2.setReserved("vc",value2);
		} else {
			_this2.h["vc"] = value2;
		}
		var _this3 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value3 = new openfl__$internal_stage3D_assembler_Reg(2,"fragment temporary");
		if(__map_reserved.ft != null) {
			_this3.setReserved("ft",value3);
		} else {
			_this3.h["ft"] = value3;
		}
		var _this4 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value4 = new openfl__$internal_stage3D_assembler_Reg(2,"vertex temporary");
		if(__map_reserved.vt != null) {
			_this4.setReserved("vt",value4);
		} else {
			_this4.h["vt"] = value4;
		}
		var _this5 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value5 = new openfl__$internal_stage3D_assembler_Reg(3,"vertex output");
		if(__map_reserved.vo != null) {
			_this5.setReserved("vo",value5);
		} else {
			_this5.h["vo"] = value5;
		}
		var _this6 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value6 = new openfl__$internal_stage3D_assembler_Reg(3,"vertex output");
		if(__map_reserved.op != null) {
			_this6.setReserved("op",value6);
		} else {
			_this6.h["op"] = value6;
		}
		var _this7 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value7 = new openfl__$internal_stage3D_assembler_Reg(3,"fragment depth output");
		if(__map_reserved.fd != null) {
			_this7.setReserved("fd",value7);
		} else {
			_this7.h["fd"] = value7;
		}
		var _this8 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value8 = new openfl__$internal_stage3D_assembler_Reg(3,"fragment output");
		if(__map_reserved.fo != null) {
			_this8.setReserved("fo",value8);
		} else {
			_this8.h["fo"] = value8;
		}
		var _this9 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value9 = new openfl__$internal_stage3D_assembler_Reg(3,"fragment output");
		if(__map_reserved.oc != null) {
			_this9.setReserved("oc",value9);
		} else {
			_this9.h["oc"] = value9;
		}
		var _this10 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value10 = new openfl__$internal_stage3D_assembler_Reg(4,"varying");
		if(__map_reserved.v != null) {
			_this10.setReserved("v",value10);
		} else {
			_this10.h["v"] = value10;
		}
		var _this11 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value11 = new openfl__$internal_stage3D_assembler_Reg(4,"varying output");
		if(__map_reserved.vi != null) {
			_this11.setReserved("vi",value11);
		} else {
			_this11.h["vi"] = value11;
		}
		var _this12 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value12 = new openfl__$internal_stage3D_assembler_Reg(4,"varying input");
		if(__map_reserved.fi != null) {
			_this12.setReserved("fi",value12);
		} else {
			_this12.h["fi"] = value12;
		}
		var _this13 = openfl__$internal_stage3D_assembler_RegMap._map;
		var value13 = new openfl__$internal_stage3D_assembler_Reg(5,"sampler");
		if(__map_reserved.fs != null) {
			_this13.setReserved("fs",value13);
		} else {
			_this13.h["fs"] = value13;
		}
	}
	return openfl__$internal_stage3D_assembler_RegMap._map;
};
var openfl__$internal_stage3D_assembler_Sampler = function(shift,mask,value) {
	this.shift = shift;
	this.mask = mask;
	this.value = value;
};
$hxClasses["openfl._internal.stage3D.assembler.Sampler"] = openfl__$internal_stage3D_assembler_Sampler;
openfl__$internal_stage3D_assembler_Sampler.__name__ = ["openfl","_internal","stage3D","assembler","Sampler"];
openfl__$internal_stage3D_assembler_Sampler.prototype = {
	mask: null
	,shift: null
	,value: null
	,__class__: openfl__$internal_stage3D_assembler_Sampler
};
var openfl__$internal_stage3D_assembler_SamplerMap = function() { };
$hxClasses["openfl._internal.stage3D.assembler.SamplerMap"] = openfl__$internal_stage3D_assembler_SamplerMap;
openfl__$internal_stage3D_assembler_SamplerMap.__name__ = ["openfl","_internal","stage3D","assembler","SamplerMap"];
openfl__$internal_stage3D_assembler_SamplerMap.__properties__ = {get_map:"get_map"}
openfl__$internal_stage3D_assembler_SamplerMap.get_map = function() {
	if(openfl__$internal_stage3D_assembler_SamplerMap._map == null) {
		openfl__$internal_stage3D_assembler_SamplerMap._map = new haxe_ds_StringMap();
		var _this = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value = new openfl__$internal_stage3D_assembler_Sampler(8,15,0);
		if(__map_reserved.rgba != null) {
			_this.setReserved("rgba",value);
		} else {
			_this.h["rgba"] = value;
		}
		var _this1 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value1 = new openfl__$internal_stage3D_assembler_Sampler(8,15,5);
		if(__map_reserved.rg != null) {
			_this1.setReserved("rg",value1);
		} else {
			_this1.h["rg"] = value1;
		}
		var _this2 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value2 = new openfl__$internal_stage3D_assembler_Sampler(8,15,4);
		if(__map_reserved.r != null) {
			_this2.setReserved("r",value2);
		} else {
			_this2.h["r"] = value2;
		}
		var _this3 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value3 = new openfl__$internal_stage3D_assembler_Sampler(8,15,1);
		if(__map_reserved.compressed != null) {
			_this3.setReserved("compressed",value3);
		} else {
			_this3.h["compressed"] = value3;
		}
		var _this4 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value4 = new openfl__$internal_stage3D_assembler_Sampler(8,15,2);
		if(__map_reserved.compressed_alpha != null) {
			_this4.setReserved("compressed_alpha",value4);
		} else {
			_this4.h["compressed_alpha"] = value4;
		}
		var _this5 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value5 = new openfl__$internal_stage3D_assembler_Sampler(8,15,1);
		if(__map_reserved.dxt1 != null) {
			_this5.setReserved("dxt1",value5);
		} else {
			_this5.h["dxt1"] = value5;
		}
		var _this6 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value6 = new openfl__$internal_stage3D_assembler_Sampler(8,15,2);
		if(__map_reserved.dxt5 != null) {
			_this6.setReserved("dxt5",value6);
		} else {
			_this6.h["dxt5"] = value6;
		}
		var _this7 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value7 = new openfl__$internal_stage3D_assembler_Sampler(12,15,0);
		if(__map_reserved["2d"] != null) {
			_this7.setReserved("2d",value7);
		} else {
			_this7.h["2d"] = value7;
		}
		var _this8 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value8 = new openfl__$internal_stage3D_assembler_Sampler(12,15,1);
		if(__map_reserved.cube != null) {
			_this8.setReserved("cube",value8);
		} else {
			_this8.h["cube"] = value8;
		}
		var _this9 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value9 = new openfl__$internal_stage3D_assembler_Sampler(12,15,2);
		if(__map_reserved["3d"] != null) {
			_this9.setReserved("3d",value9);
		} else {
			_this9.h["3d"] = value9;
		}
		var _this10 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value10 = new openfl__$internal_stage3D_assembler_Sampler(16,1,1);
		if(__map_reserved.centroid != null) {
			_this10.setReserved("centroid",value10);
		} else {
			_this10.h["centroid"] = value10;
		}
		var _this11 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value11 = new openfl__$internal_stage3D_assembler_Sampler(16,4,4);
		if(__map_reserved.ignoresampler != null) {
			_this11.setReserved("ignoresampler",value11);
		} else {
			_this11.h["ignoresampler"] = value11;
		}
		var _this12 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value12 = new openfl__$internal_stage3D_assembler_Sampler(20,15,0);
		if(__map_reserved.clamp != null) {
			_this12.setReserved("clamp",value12);
		} else {
			_this12.h["clamp"] = value12;
		}
		var _this13 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value13 = new openfl__$internal_stage3D_assembler_Sampler(20,15,1);
		if(__map_reserved.repeat != null) {
			_this13.setReserved("repeat",value13);
		} else {
			_this13.h["repeat"] = value13;
		}
		var _this14 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value14 = new openfl__$internal_stage3D_assembler_Sampler(20,15,1);
		if(__map_reserved.wrap != null) {
			_this14.setReserved("wrap",value14);
		} else {
			_this14.h["wrap"] = value14;
		}
		var _this15 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value15 = new openfl__$internal_stage3D_assembler_Sampler(24,15,0);
		if(__map_reserved.nomip != null) {
			_this15.setReserved("nomip",value15);
		} else {
			_this15.h["nomip"] = value15;
		}
		var _this16 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value16 = new openfl__$internal_stage3D_assembler_Sampler(24,15,0);
		if(__map_reserved.mipnone != null) {
			_this16.setReserved("mipnone",value16);
		} else {
			_this16.h["mipnone"] = value16;
		}
		var _this17 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value17 = new openfl__$internal_stage3D_assembler_Sampler(24,15,1);
		if(__map_reserved.mipnearest != null) {
			_this17.setReserved("mipnearest",value17);
		} else {
			_this17.h["mipnearest"] = value17;
		}
		var _this18 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value18 = new openfl__$internal_stage3D_assembler_Sampler(24,15,2);
		if(__map_reserved.miplinear != null) {
			_this18.setReserved("miplinear",value18);
		} else {
			_this18.h["miplinear"] = value18;
		}
		var _this19 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value19 = new openfl__$internal_stage3D_assembler_Sampler(28,15,0);
		if(__map_reserved.nearest != null) {
			_this19.setReserved("nearest",value19);
		} else {
			_this19.h["nearest"] = value19;
		}
		var _this20 = openfl__$internal_stage3D_assembler_SamplerMap._map;
		var value20 = new openfl__$internal_stage3D_assembler_Sampler(28,15,1);
		if(__map_reserved.linear != null) {
			_this20.setReserved("linear",value20);
		} else {
			_this20.h["linear"] = value20;
		}
	}
	return openfl__$internal_stage3D_assembler_SamplerMap._map;
};
var openfl__$internal_swf_FilterType = $hxClasses["openfl._internal.swf.FilterType"] = { __ename__ : ["openfl","_internal","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
openfl__$internal_swf_SWFLite.__name__ = ["openfl","_internal","swf","SWFLite"];
openfl__$internal_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var tmp = this.symbols.iterator();
			while(tmp.hasNext()) {
				var symbol = tmp.next();
				if(symbol.className == className) {
					if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_SpriteSymbol)) {
						return (js_Boot.__cast(symbol , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var tmp = this.symbols.iterator();
		while(tmp.hasNext()) {
			var symbol = tmp.next();
			if(symbol.className == className) {
				if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
					return openfl_Assets.getBitmapData(symbol.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var tmp = this.symbols.iterator();
		while(tmp.hasNext()) if(tmp.next().className == className) {
			return true;
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_swf_SWFLite
};
var openfl__$internal_swf_SWFLiteLibrary = function(id) {
	openfl_AssetLibrary.call(this);
	this.id = id;
};
$hxClasses["openfl._internal.swf.SWFLiteLibrary"] = openfl__$internal_swf_SWFLiteLibrary;
openfl__$internal_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","swf","SWFLiteLibrary"];
openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_AssetLibrary;
openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(openfl_AssetLibrary.prototype,{
	id: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		var tmp;
		var tmp1;
		var _this = this.cachedImages;
		if(!(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id))) {
			var _this1 = this.classTypes;
			if(__map_reserved[id] != null) {
				tmp1 = _this1.existsReserved(id);
			} else {
				tmp1 = _this1.h.hasOwnProperty(id);
			}
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var _this2 = this.paths;
			if(__map_reserved[id] != null) {
				tmp = _this2.existsReserved(id);
			} else {
				tmp = _this2.h.hasOwnProperty(id);
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			return openfl_AssetLibrary.prototype.getImage.call(this,id);
		} else if(this.swf != null) {
			return lime_graphics_Image.fromBitmapData(this.swf.getBitmapData(id));
		} else {
			return null;
		}
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			var _this = this.preload;
			var key = this.id;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,true);
			} else {
				_this.h[key] = true;
			}
		}
		var tmp = this.paths.keys();
		while(tmp.hasNext()) {
			var id = tmp.next();
			var _this1 = this.preload;
			if(__map_reserved[id] != null) {
				_this1.setReserved(id,true);
			} else {
				_this1.h[id] = true;
			}
		}
		return openfl_AssetLibrary.prototype.load.call(this).then(function(_) {
			if(_gthis.id != null) {
				_gthis.swf = openfl__$internal_swf_SWFLite.unserialize(_gthis.getText(_gthis.id));
				_gthis.swf.library = _gthis;
			}
			var promise = new lime_app_Promise();
			promise.complete(_gthis);
			return promise.future;
		});
	}
	,unload: function() {
		var bitmap;
		var tmp = this.swf.symbols.iterator();
		while(tmp.hasNext()) {
			var symbol = tmp.next();
			if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol;
				openfl_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__class__: openfl__$internal_swf_SWFLiteLibrary
});
var openfl__$internal_swf_ShapeCommand = $hxClasses["openfl._internal.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_swf_ShapeCommand;
openfl__$internal_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(this.__getBitmap(swf),1,true);
	}
	,__getBitmap: function(swf) {
		if(openfl_Assets.cache.hasBitmapData(this.path)) {
			return openfl_Assets.cache.getBitmapData(this.path);
		} else {
			var source = swf.library.getImage(this.path);
			if(source != null && this.alpha != null && this.alpha != "") {
				var alphaBitmapData = swf.library.getImage(this.alpha);
				source.copyChannel(alphaBitmapData,alphaBitmapData.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
				source.buffer.premultiplied = true;
				source.set_premultiplied(false);
			}
			var bitmapData = openfl_display_BitmapData.fromImage(source);
			openfl_Assets.cache.setBitmapData(this.path,bitmapData);
			return bitmapData;
		}
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,bold: null
	,codes: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = swf.symbols.h[command[2]];
				if(bitmap != null && bitmap.path != "") {
					graphics.beginBitmapFill(bitmap.__getBitmap(swf),matrix,repeat,smooth);
				}
				break;
			case 1:
				graphics.beginFill(command[2],command[3]);
				break;
			case 2:
				graphics.beginGradientFill(command[2],command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				break;
			case 3:
				graphics.curveTo(command[2],command[3],command[4],command[5]);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha = command[4];
				var color = command[3];
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				graphics.lineTo(command[2],command[3]);
				break;
			case 7:
				graphics.moveTo(command[2],command[3]);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	frames: null
	,__createObject: function(swf) {
		var movieClip = null;
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				movieClip = Type.createInstance(symbolType,[]);
			}
		}
		if(movieClip == null) {
			movieClip = new openfl_display_MovieClip();
		}
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.h[record.fontID];
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					var scale = record.fontHeight / 1024 * 0.05;
					var index;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								graphics.curveTo(command[2] * scale + offsetX,command[3] * scale + offsetY,command[4] * scale + offsetX,command[5] * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								graphics.lineTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
								break;
							case 7:
								graphics.moveTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		this.records = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	ascent = format.size;
	descent = format.size * 0.185;
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font = format.italic?"italic ":"normal ";
	font += "normal ";
	font += format.bold?"bold ":"normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	var _g1 = format.font;
	var tmp;
	switch(_g1) {
	case "_sans":
		tmp = "sans-serif";
		break;
	case "_serif":
		tmp = "serif";
		break;
	case "_typewriter":
		tmp = "monospace";
		break;
	default:
		tmp = "'" + format.font + "'";
	}
	font += "" + tmp;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__cairoFont: null
	,__font: null
	,__hiddenInput: null
	,getBounds: function() {
		var padding = this.border?1:0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.get_length() == 0) {
			return this.text;
		} else {
			return this.text.substring(index > 0?this.lineBreaks.get(index - 1):0,this.lineBreaks.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var cr = this.text.indexOf("\n",startIndex);
		var lf = this.text.indexOf("\r",startIndex);
		if(cr == -1) {
			return lf;
		}
		if(lf == -1) {
			return cr;
		}
		if(cr < lf) {
			return cr;
		} else {
			return lf;
		}
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		var rangeIndex = -1;
		var formatRange = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.getLineBreakIndex();
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(-1 < _gthis.textFormatRanges.get_length() - 1) {
			rangeIndex = 0;
			formatRange = _gthis.textFormatRanges.get(0);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) {
				spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = this.text.length;
		if(this.multiline) {
			++maxLoops;
		}
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances = [];
			var _g1 = textIndex;
			var _g = breakIndex;
			while(_g1 < _g) advances.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(_g1++)).width);
			layoutGroup.advances = advances;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances1 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances1.length) {
				var advance = advances1[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				layoutGroup.lineIndex++;
				offsetY += heightValue;
				++lineIndex;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) {
						spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				lineFormat = formatRange.format;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
			++lineIndex;
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			layoutGroup = null;
			wrap = false;
			while(textIndex != formatRange.end) {
				if(spaceIndex == -1) {
					spaceIndex = formatRange.end;
				}
				var text1 = this.text;
				var advances2 = [];
				var _g11 = textIndex;
				var _g3 = spaceIndex;
				while(_g11 < _g3) advances2.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(_g11++)).width);
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances2.length) {
					var advance1 = advances2[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
					}
				}
				if(wrap) {
					offsetY += heightValue;
					var i = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i);
						if(i > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i;
					}
					++lineIndex;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g12 = this.layoutGroups.get_length() - offsetCount;
						var _g5 = this.layoutGroups.get_length();
						while(_g12 < _g5) {
							layoutGroup = this.layoutGroups.get(_g12++);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances2;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != 2) {
							layoutGroup.endIndex = spaceIndex;
						}
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == 2) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances2;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances2);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) {
							spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
						}
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) {
					if(spaceIndex > formatRange.end) {
						--textIndex;
					}
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else if(textIndex < formatRange.end || textIndex == this.text.length) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
				var text2 = this.text;
				var endIndex = formatRange.end;
				var advances3 = [];
				var _g13 = textIndex;
				while(_g13 < endIndex) advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(_g13++)).width);
				layoutGroup.advances = advances3;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var advances4 = layoutGroup.advances;
				var width2 = 0.0;
				var _g6 = 0;
				while(_g6 < advances4.length) {
					var advance2 = advances4[_g6];
					++_g6;
					width2 += advance2;
				}
				layoutGroup.width = width2;
				layoutGroup.height = heightValue;
				this.layoutGroups.push(layoutGroup);
				offsetX += layoutGroup.width;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) {
					spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
			}
			if(textIndex == formatRange.end) {
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				switch(group.format.align) {
				case 0:
					var tmp = this.width - 4;
					if(this.lineWidths.get(lineIndex) < tmp) {
						offsetX = Math.round((this.width - 4 - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					var tmp1 = this.width - 4;
					if(this.lineWidths.get(lineIndex) < tmp1) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g2 = this.layoutGroups.get_length();
						while(_g3 < _g2) if(this.layoutGroups.get(_g3++).lineIndex == lineIndex) {
							++lineLength;
						} else {
							break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = this.text.charAt(group.endIndex);
							if(group.endIndex < this.text.length && endChar != "\n" && endChar != "\r") {
								offsetX = (this.width - 4 - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								var _g31 = 1;
								var _g21 = lineLength;
								while(_g31 < _g21) {
									var j = _g31++;
									this.layoutGroups.get(i + j).offsetX += offsetX * j;
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					var tmp2 = this.width - 4;
					if(this.lineWidths.get(lineIndex) < tmp2) {
						offsetX = Math.round(this.width - 4 - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || !this.multiline && StringTools.trim(this.text) == "" || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	advances: null
	,ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_timeline_Frame = function() {
	this.objects = [];
};
$hxClasses["openfl._internal.timeline.Frame"] = openfl__$internal_timeline_Frame;
openfl__$internal_timeline_Frame.__name__ = ["openfl","_internal","timeline","Frame"];
openfl__$internal_timeline_Frame.prototype = {
	label: null
	,objects: null
	,__class__: openfl__$internal_timeline_Frame
};
var openfl__$internal_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.timeline.FrameObject"] = openfl__$internal_timeline_FrameObject;
openfl__$internal_timeline_FrameObject.__name__ = ["openfl","_internal","timeline","FrameObject"];
openfl__$internal_timeline_FrameObject.prototype = {
	clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_timeline_FrameObject
};
var openfl__$internal_timeline_FrameObjectType = $hxClasses["openfl._internal.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_timeline_FrameObjectType;
var openfl__$internal_utils_NullUtils = function() { };
$hxClasses["openfl._internal.utils.NullUtils"] = openfl__$internal_utils_NullUtils;
openfl__$internal_utils_NullUtils.__name__ = ["openfl","_internal","utils","NullUtils"];
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,falloff) {
	if(seed == null) {
		seed = 123;
	}
	if(falloff == null) {
		falloff = .5;
	}
	this.octaves = octaves == null?4:octaves;
	this.baseFactor = 0.015625;
	this.seedOffset(seed);
	this.octFreqPers(falloff);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = ["openfl","_internal","utils","PerlinNoise"];
openfl__$internal_utils_PerlinNoise.prototype = {
	octaves: null
	,aOctFreq: null
	,aOctPers: null
	,fPersMax: null
	,iXoffset: null
	,iYoffset: null
	,iZoffset: null
	,baseFactor: null
	,fill: function(bitmap,_x,_y,_z,_) {
		var baseX = _x * this.baseFactor + this.iXoffset;
		_y = _y * this.baseFactor + this.iYoffset;
		_z = _z * this.baseFactor + this.iZoffset;
		var width = bitmap.width;
		var height = bitmap.height;
		var p = openfl__$internal_utils_PerlinNoise.P;
		var octaves = this.octaves;
		var aOctFreq = this.aOctFreq;
		var aOctPers = this.aOctPers;
		var _g1 = 0;
		while(_g1 < height) {
			var py = _g1++;
			_x = baseX;
			var _g3 = 0;
			while(_g3 < width) {
				var px = _g3++;
				var s = 0.;
				var _g5 = 0;
				while(_g5 < octaves) {
					var i = _g5++;
					var fFreq = aOctFreq[i];
					var fPers = aOctPers[i];
					var x = _x * fFreq;
					var y = _y * fFreq;
					var z = _z * fFreq;
					var xf = x - x % 1;
					var yf = y - y % 1;
					var zf = z - z % 1;
					var X = (xf | 0) & 255;
					var Y = (yf | 0) & 255;
					var Z = (zf | 0) & 255;
					x -= xf;
					y -= yf;
					z -= zf;
					var u = x * x * x * (x * (x * 6 - 15) + 10);
					var v = y * y * y * (y * (y * 6 - 15) + 10);
					var w = z * z * z * (z * (z * 6 - 15) + 10);
					var A = p[X] + Y;
					var AA = p[A] + Z;
					var AB = p[A + 1] + Z;
					var B = p[X + 1] + Y;
					var BA = p[B] + Z;
					var BB = p[B + 1] + Z;
					var x1 = x - 1;
					var y1 = y - 1;
					var z1 = z - 1;
					var hash = p[BB + 1] & 15;
					var g1 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z1:hash < 4?-y1:hash == 14?-x1:-z1);
					hash = p[AB + 1] & 15;
					var g2 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z1:hash < 4?-y1:hash == 14?-x:-z1);
					hash = p[BA + 1] & 15;
					var g3 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z1:hash < 4?-y:hash == 14?-x1:-z1);
					hash = p[AA + 1] & 15;
					var g4 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z1:hash < 4?-y:hash == 14?-x:-z1);
					hash = p[BB] & 15;
					var g5 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z:hash < 4?-y1:hash == 14?-x1:-z);
					hash = p[AB] & 15;
					var g6 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z:hash < 4?-y1:hash == 14?-x:-z);
					hash = p[BA] & 15;
					var g7 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z:hash < 4?-y:hash == 14?-x1:-z);
					hash = p[AA] & 15;
					var g8 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z:hash < 4?-y:hash == 14?-x:-z);
					g2 += u * (g1 - g2);
					g4 += u * (g3 - g4);
					g6 += u * (g5 - g6);
					g8 += u * (g7 - g8);
					g4 += v * (g2 - g4);
					g8 += v * (g6 - g8);
					s += (g8 + w * (g4 - g8)) * fPers;
				}
				var color = (s * this.fPersMax + 1) * 128 | 0;
				bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
				_x += this.baseFactor;
			}
			_y += this.baseFactor;
		}
	}
	,octFreqPers: function(fPersistence) {
		var fFreq;
		var fPers;
		this.aOctFreq = [];
		this.aOctPers = [];
		this.fPersMax = 0;
		var _g1 = 0;
		var _g = this.octaves;
		while(_g1 < _g) {
			var i = _g1++;
			fFreq = Math.pow(2,i);
			fPers = Math.pow(fPersistence,i);
			this.fPersMax += fPers;
			this.aOctFreq.push(fFreq);
			this.aOctPers.push(fPers);
		}
		this.fPersMax = 1 / this.fPersMax;
	}
	,seedOffset: function(iSeed) {
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iXoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iYoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iZoffset = iSeed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) {
		openfl_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		openfl_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl_Lib.current.__loaderInfo.content = openfl_Lib.current;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new openfl_display_Window(_g1[0]));
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.onPreloadComplete();
			}
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.set_bitmapData(bitmapData);
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__imageVersion: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var cairo = renderSession.cairo;
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				renderSession.maskManager.pushObject(this);
				var transform = this.__renderTransform;
				if(renderSession.roundPixels) {
					var matrix = transform.__toMatrix3();
					matrix.tx = Math.round(matrix.tx);
					matrix.ty = Math.round(matrix.ty);
					cairo.set_matrix(matrix);
				} else {
					cairo.set_matrix(transform.__toMatrix3());
				}
				var surface = this.bitmapData.getSurface();
				if(surface != null) {
					var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
					lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && this.smoothing?1:3);
					cairo.set_source(pattern);
					if(this.__worldAlpha == 1) {
						cairo.paint();
					} else {
						cairo.paintWithAlpha(this.__worldAlpha);
					}
				}
				renderSession.maskManager.popObject(this);
			}
		}
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var context = renderSession.context;
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				renderSession.maskManager.pushObject(this,false);
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.bitmapData.image);
				context.globalAlpha = this.__worldAlpha;
				var transform = this.__renderTransform;
				var scrollRect = this.__scrollRect;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context.mozImageSmoothingEnabled = false;
					context.msImageSmoothingEnabled = false;
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(this.bitmapData.image.get_src(),0,0);
				} else {
					context.drawImage(this.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context.mozImageSmoothingEnabled = true;
					context.msImageSmoothingEnabled = true;
					context.imageSmoothingEnabled = true;
				}
				renderSession.maskManager.popObject(this,false);
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			renderSession.maskManager.pushObject(this);
			if(this.bitmapData.image.buffer.__srcImage != null) {
				openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
			}
			renderSession.maskManager.popObject(this);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				var renderer = renderSession.renderer;
				var gl = renderSession.gl;
				renderSession.blendModeManager.setBlendMode(this.get_blendMode());
				renderSession.maskManager.pushObject(this);
				var shader = renderSession.filterManager.pushObject(this);
				shader.get_data().uImage0.input = this.bitmapData;
				shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && (this.smoothing || renderSession.upscaled);
				shader.get_data().uMatrix.value = renderer.getMatrix(this.__renderTransform);
				renderSession.shaderManager.setShader(shader);
				gl.bindBuffer(gl.ARRAY_BUFFER,this.bitmapData.getBuffer(gl,this.__worldAlpha));
				gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
				gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
				gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
				gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
				renderSession.filterManager.popObject(this);
				renderSession.maskManager.popObject(this);
			}
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,set_bitmapData: function(value) {
		this.bitmapData = value;
		this.smoothing = false;
		var tmp = this.__filters != null && this.__filters.length > 0;
		return this.bitmapData;
	}
	,get_height: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.width * Math.abs(this.get_scaleX());
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBase64(base64,type,function(image) {
		_gthis.__fromImage(image);
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	var rawAlpha1 = rawAlpha;
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
		_gthis.__fromImage(image);
		if(rawAlpha1 != null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
			var data = image.buffer.data;
			var _g1 = 0;
			var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha1);
			while(_g1 < _g) data[_g1++ * 4 + 3] = rawAlpha1.readUnsignedByte();
			image.version++;
		}
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture.__textureID;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__buffer: null
	,__bufferAlpha: null
	,__bufferData: null
	,__framebuffer: null
	,__isValid: null
	,__surface: null
	,__texture: null
	,__textureVersion: null
	,__transform: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		filter.__applyFilter(sourceBitmapData,this,sourceRect,destPoint);
	}
	,clone: function() {
		if(!this.__isValid) {
			return new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			var bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__texture = this.__texture;
			bitmapData.__isValid = true;
			return bitmapData;
		} else {
			return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = 16711680;
							comparePixel = 16776960;
							comparePixel = 16777215;
							comparePixel = (a & 255) << 24 | 16711680 | 65280 | 255;
							foundDifference = true;
						}
					} else {
						comparePixel = 0 | (r & 255) << 16 | 0 | 0;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__buffer = null;
		this.__framebuffer = null;
		this.__texture = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				gl.bindFramebuffer(gl.FRAMEBUFFER,this.__getFramebuffer(gl));
				gl.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(openfl_Lib.current.stage,gl,false);
				renderer.resize(this.width,this.height);
				var renderSession = renderer.renderSession;
				renderSession.shaderManager = (js_Boot.__cast(openfl_Lib.current.stage.__renderer , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var tmp;
				var tmp1;
				if(source == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(source.__properties__) {
						tmp = source.__properties__["get_" + "width"];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = source[tmp]();
					} else {
						tmp1 = source.width;
					}
				}
				var width = Math.ceil(tmp1);
				var tmp3;
				var tmp4;
				if(source == null) {
					tmp4 = null;
				} else {
					var tmp5;
					if(source.__properties__) {
						tmp3 = source.__properties__["get_" + "height"];
						tmp5 = tmp3;
					} else {
						tmp5 = false;
					}
					if(tmp5) {
						tmp4 = source[tmp3]();
					} else {
						tmp4 = source.height;
					}
				}
				var height = Math.ceil(tmp4);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.roundPixels = true;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			source.__renderCanvas(renderSession1);
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			byteArray = new openfl_utils_ByteArrayData(0);
		}
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png")));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)));
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		} else if(this.__framebuffer != null) {
			var gl = lime_graphics_opengl_GL.context;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			if(useScissor) {
				gl.enable(gl.SCISSOR_TEST);
				gl.scissor(Math.round(rect.x),Math.round(rect.y),Math.round(rect.width),Math.round(rect.height));
			}
			gl.clearColor((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,(color1 >>> 24 & 255) / 255);
			gl.clear(gl.COLOR_BUFFER_BIT);
			if(useScissor) {
				gl.disable(gl.SCISSOR_TEST);
			}
			gl.bindFramebuffer(gl.FRAMEBUFFER,null);
		}
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl,alpha) {
		if(this.__buffer == null) {
			var array = [this.width,this.height,0,1,1,alpha,0,this.height,0,0,1,alpha,this.width,0,0,1,0,alpha,0,0,0,0,0,alpha];
			this.__bufferData = array != null?new Float32Array(array):null;
			this.__bufferAlpha = alpha;
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else if(this.__bufferAlpha != alpha) {
			this.__bufferData[5] = alpha;
			this.__bufferData[11] = alpha;
			this.__bufferData[17] = alpha;
			this.__bufferData[23] = alpha;
			this.__bufferAlpha = alpha;
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.__surface != null) {
				lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			}
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) {
				gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			} else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			}
			if(textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) {
				gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,textureImage.buffer.width,textureImage.buffer.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			} else {
				gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			}
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4 | 0;
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g1 = 0;
		while(_g1 < length) result.set(_g1++,pixels.readUnsignedInt());
		return result;
	}
	,histogram: function(hRect) {
		var pixels = this.getPixels(hRect != null?hRect:new openfl_geom_Rectangle(0,0,this.width,this.height));
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			++_g1;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 256) {
				++_g3;
				_g2.push(0);
			}
			_g.push(_g2);
		}
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) ++_g[_g21++ % 4][pixels.readUnsignedByte()];
		return _g;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		}
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				if((this.getPixel32(x,y) >> 24 & 255) >= firstAlphaThreshold) {
					return true;
				}
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g1 = 0;
				while(_g1 < length) {
					++_g1;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) {
						return true;
					}
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4 | 0;
				var pixel1;
				var _g11 = 0;
				while(_g11 < length1) {
					++_g11;
					pixel1 = pixels1.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold) {
						return true;
					}
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		func();
		var range = high - low;
		new openfl_utils_ByteArrayData(0);
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + func() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + func() % range;
					}
					if(greenChannel) {
						green = low + func() % range;
					}
					if(blueChannel) {
						blue = low + func() % range;
					}
					if(alphaChannel) {
						alpha = low + func() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) {
				c1 = pixelValue & -16777216;
			} else {
				c1 = alphaArray[pixelValue >> 24 & 255];
			}
			if(redArray == null) {
				c2 = pixelValue & 16711680;
			} else {
				c2 = redArray[pixelValue >> 16 & 255];
			}
			if(greenArray == null) {
				c3 = pixelValue & 65280;
			} else {
				c3 = greenArray[pixelValue >> 8 & 255];
			}
			if(blueArray == null) {
				c4 = pixelValue & 255;
			} else {
				c4 = blueArray[pixelValue & 255];
			}
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		this.setPixels(new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh),pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,0.01).fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),1);
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.get_length() * 4);
		var _g = 0;
		while(_g < inputVector.get_length()) {
			var color = inputVector.get(_g);
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _gthis = this;
		lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g1 = 0;
				var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
				while(_g1 < _g) data[_g1++ * 4 + 3] = rawAlpha.readUnsignedByte();
				image.version++;
			}
			if(onload != null) {
				onload(_gthis);
			}
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getFramebuffer: function(gl) {
		if(this.__framebuffer == null) {
			this.getTexture(gl);
			this.__framebuffer = gl.createFramebuffer();
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__texture,0);
		}
		return this.__framebuffer;
	}
	,__renderCairo: function(renderSession) {
		if(!this.readable) {
			return;
		}
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else {
			cairo.set_matrix(transform.__toMatrix3());
		}
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(!renderSession.allowSmoothing || cairo.get_antialias() == 1) {
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3);
			} else {
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			}
			cairo.set_source(pattern);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(10);
		var shader = renderSession.shaderManager.defaultShader;
		shader.get_data().uImage0.input = this;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.getBuffer(gl,1));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DirectRenderer = function(type) {
	if(type == null) {
		type = "DirectRenderer";
	}
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null?sourceGraphics.__bounds.clone():null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t21 > 0 && t21 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			ix = this.__calculateBezierQuadPoint((this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX),this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			iy = this.__calculateBezierQuadPoint((this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY),this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.get_length()) {
			var graphics = graphicsData.get(_g);
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) {
				this.endFill();
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.get_length()) {
				var command = commands.get(_g);
				++_g;
				switch(command) {
				case 1:
					this.moveTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 3:
					this.curveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3));
					dataIndex += 4;
					break;
				case 4:
					this.moveTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 5:
					this.lineTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 6:
					this.cubicCurveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3),data.get(dataIndex + 4),data.get(dataIndex + 5));
					dataIndex += 6;
					break;
				default:
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented({ fileName : "Graphics.hx", lineNumber : 450, className : "openfl.display.Graphics", methodName : "drawRoundRectComplex"});
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		var vlen = vertices.get_length() / 2 | 0;
		if(culling == null) {
			culling = 1;
		}
		if(indices == null) {
			if(vlen % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g1 = 0;
			while(_g1 < vlen) indices.push(_g1++);
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g11 = 0;
		while(_g11 < vlen) {
			var i = _g11++;
			tmpx = vertices.get(i * 2);
			tmpy = vertices.get(i * 2 + 1);
			if(maxX < tmpx) {
				maxX = tmpx;
			}
			if(maxY < tmpy) {
				maxY = tmpy;
			}
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0?-matrix.tx:1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0?-matrix.ty:1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				graphicsData.push(new openfl_display_GraphicsBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c)));
				break;
			case 1:
				graphicsData.push(new openfl_display_GraphicsSolidFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(data.readBeginFill()),1));
				break;
			case 2:
				var c1 = data.readBeginGradientFill();
				graphicsData.push(new openfl_display_GraphicsGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1)));
				break;
			case 3:
				data.readCubicCurveTo();
				break;
			case 4:
				var c2 = data.readCurveTo();
				path = new openfl_display_GraphicsPath();
				path.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c2),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c2));
				graphicsData.push(path);
				break;
			case 5:
				data.readDrawCircle();
				break;
			case 6:
				data.readDrawEllipse();
				break;
			case 7:
				data.readDrawEllipse();
				break;
			case 8:
				data.readDrawEllipse();
				break;
			case 11:
				data.readEndFill();
				graphicsData.push(new openfl_display_GraphicsEndFill());
				break;
			case 12:
				data.readLineBitmapStyle();
				break;
			case 13:
				data.readLineGradientStyle();
				break;
			case 14:
				var c3 = data.readLineStyle();
				graphicsData.push(new openfl_display_GraphicsStroke(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c3),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c3)));
				break;
			case 15:
				var c4 = data.readLineTo();
				path = new openfl_display_GraphicsPath();
				path.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c4));
				graphicsData.push(path);
				break;
			case 16:
				var c5 = data.readMoveTo();
				path = new openfl_display_GraphicsPath();
				path.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c5));
				graphicsData.push(path);
				break;
			default:
				data.skip(type);
			}
		}
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(Math.abs(width - this.__width) > 2 || Math.abs(height - this.__height) > 2) {
			this.set___dirty(true);
		}
		this.__width = Math.floor(width);
		this.__height = Math.floor(height);
		if(this.__width <= 0 || this.__height <= 0) {
			return;
		}
		this.__renderTransform.a = this.__width / this.__bounds.width;
		this.__renderTransform.d = this.__height / this.__bounds.height;
		this.__worldTransform.a = 1 / this.__renderTransform.a;
		this.__worldTransform.b = 0;
		this.__worldTransform.c = 0;
		this.__worldTransform.d = 1 / this.__renderTransform.d;
		this.__worldTransform.tx = this.__bounds.x;
		this.__worldTransform.ty = this.__bounds.y;
		this.__worldTransform.concat(this.__owner.__renderTransform);
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			this.commands.push(3);
			this.data.push(anchorX);
			this.data.push(anchorY);
			this.data.push(controlX);
			this.data.push(controlY);
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(2);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(1);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(2);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(1);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = ["openfl","display","_GraphicsPathWinding","GraphicsPathWinding_Impl_"];
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = 0.0;
	}
	this.caps = caps != null?caps:0;
	this.fill = fill;
	this.joints = joints != null?joints:2;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode != null?scaleMode:2;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,close: function() {
		openfl_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 48, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		var _gthis = this;
		var extension = "";
		var path = request.url;
		var queryIndex = path.indexOf("?");
		if(queryIndex > -1) {
			path = path.substring(0,queryIndex);
		}
		var extIndex = path.lastIndexOf(".");
		if(extIndex > -1) {
			extension = path.substring(extIndex + 1);
		}
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null || request.contentType == "") {
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(e) {
				_gthis.contentLoaderInfo.content = new openfl_display_Sprite();
				_gthis.addChild(_gthis.contentLoaderInfo.content);
				eval("(function () {" + Std.string(loader.data) + "})()");
				var event = new openfl_events_Event("complete");
				event.target = _gthis.contentLoaderInfo;
				event.currentTarget = _gthis.contentLoaderInfo;
				_gthis.contentLoaderInfo.dispatchEvent(event);
			});
			loader.addEventListener("ioError",function(e1) {
				_gthis.BitmapData_onError(e1);
			});
			loader.dataFormat = 1;
			loader.load(request);
			return;
		} else if(this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var loader1 = new openfl_net_URLLoader();
			loader1.addEventListener("complete",function(e2) {
				var info = JSON.parse(loader1.data);
				var library = Type.createInstance(Type.resolveClass(info.type),[null]);
				openfl_Assets.registerLibrary(info.name,library);
				var manifest = haxe_Unserializer.run(info.manifest);
				var assetType;
				var basePath = request.url;
				basePath = StringTools.replace(basePath,"\\","/");
				var parts = basePath.split("/");
				parts.pop();
				parts.pop();
				basePath = parts.join("/");
				var libraryData = null;
				var loaded = -1;
				var total = 0;
				var checkLoaded = function() {
					if(loaded >= total) {
						library.swf = openfl__$internal_swf_SWFLite.unserialize(libraryData);
						_gthis.contentLoaderInfo.content = library.getMovieClip("");
						_gthis.addChild(_gthis.contentLoaderInfo.content);
						var event1 = new openfl_events_Event("complete");
						event1.target = _gthis.contentLoaderInfo;
						event1.currentTarget = _gthis.contentLoaderInfo;
						_gthis.contentLoaderInfo.dispatchEvent(event1);
					}
				};
				var _g = 0;
				while(_g < manifest.length) {
					var asset = [manifest[_g]];
					++_g;
					if(!openfl_Assets.exists(asset[0].id)) {
						assetType = asset[0].type;
						switch(assetType) {
						case "IMAGE":
							++total;
							openfl_display_BitmapData.fromFile(basePath + "/" + Std.string(asset[0].path),(function(asset1) {
								return function(bitmapData) {
									++loaded;
									checkLoaded();
									openfl_Assets.cache.setBitmapData(asset1[0].path,bitmapData);
								};
							})(asset),(function() {
								return function() {
									_gthis.BitmapData_onError(null);
								};
							})());
							break;
						case "TEXT":
							++total;
							var textLoader = [new openfl_net_URLLoader()];
							var tmp1 = (function(textLoader1) {
								return function(_) {
									libraryData = textLoader1[0].data;
									++loaded;
									checkLoaded();
								};
							})(textLoader);
							textLoader[0].addEventListener("complete",tmp1);
							var tmp2 = (function() {
								return function(e3) {
									_gthis.BitmapData_onError(e3);
								};
							})();
							textLoader[0].addEventListener("ioError",tmp2);
							textLoader[0].dataFormat = 1;
							var tmp3 = basePath + "/" + Std.string(asset[0].path);
							textLoader[0].load(new openfl_net_URLRequest(tmp3));
							break;
						default:
						}
					}
				}
				++loaded;
				checkLoaded();
			});
			loader1.addEventListener("ioError",function(e4) {
				_gthis.BitmapData_onError(e4);
			});
			loader1.dataFormat = 1;
			loader1.load(request);
		}
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_1) {
			openfl_display_BitmapData.fromFile(path,function(bitmapData1) {
				worker.sendComplete(bitmapData1);
			},function() {
				worker.sendError("ioError");
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer,context) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event("unload");
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		openfl_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 321, className : "openfl.display.Loader", methodName : "unloadAndStop"});
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.content);
		var event = new openfl_events_Event("complete");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display__$MovieClip_TimelineObject = function(id,depth,displayObject) {
	this.id = id;
	this.depth = depth;
	this.displayObject = displayObject;
};
$hxClasses["openfl.display._MovieClip.TimelineObject"] = openfl_display__$MovieClip_TimelineObject;
openfl_display__$MovieClip_TimelineObject.__name__ = ["openfl","display","_MovieClip","TimelineObject"];
openfl_display__$MovieClip_TimelineObject.prototype = {
	depth: null
	,displayObject: null
	,id: null
	,__class__: openfl_display__$MovieClip_TimelineObject
};
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) {
		return false;
	}
	if(lime_graphics_opengl_GL.context != null) {
		return true;
	} else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) {
			context = canvas.getContext("experimental-webgl");
		}
		return context != null;
	}
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.__scrollRect == null) {
					rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
				} else {
					rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
				}
				if(this.__render != null) {
					this.__render(rect);
				}
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.__scrollRect == null) {
				rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
			} else {
				rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
			}
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
			if(this.__render != null) {
				this.__render(rect);
			}
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	this.display = display;
	if(display != null) {
		display.addEventListener("complete",$bind(this,this.display_onComplete),false,-1000);
		openfl_Lib.current.addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,ready: null
	,start: function() {
		this.ready = true;
		openfl_Lib.current.get_loaderInfo().__complete();
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_Event("complete",true,true));
		} else {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.current.get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onComplete: function(event) {
		if(event.isDefaultPrevented()) {
			return;
		}
		if(this.display != null) {
			this.display.removeEventListener("complete",$bind(this,this.display_onComplete));
			if(this.display.parent == openfl_Lib.current) {
				openfl_Lib.current.removeChild(this.display);
			}
			openfl_Lib.current.stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var perceivedLuminosity = 0.299 * (backgroundColor >> 16 & 255) + 0.587 * (backgroundColor >> 8 & 255) + 0.114 * (backgroundColor & 255);
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var y = this.getHeight() / 2 - 3.5;
	var width = this.getWidth() - 60;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,7);
	this.outline.set_x(30);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - 4,3);
	this.progress.set_x(32);
	this.progress.set_y(y + 2);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.current.stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.current.stage.window.config.height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.current.stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.current.stage.window.config.width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.current.stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var percent = (openfl_Lib.getTimer() - this.startAnimation) / (this.endAnimation - this.startAnimation);
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_Shader = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) {
			this.get_data().uImage0.input = null;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.disableVertexAttribArray(parameter2.index);
		}
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.bindTexture(this.gl.TEXTURE_2D,null);
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = new openfl_display_ShaderData(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__uniformMatrix2 = new Float32Array(4);
			this.__uniformMatrix3 = new Float32Array(9);
			this.__uniformMatrix4 = new Float32Array(16);
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			var fragment = "#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1?"mediump":"lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource();
			this.glProgram = lime_utils_GLUtils.createProgram(this.get_glVertexSource(),fragment);
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					var _this = this.__isUniform;
					var key = input.name;
					if(__map_reserved[key] != null?_this.getReserved(key):_this.h[key]) {
						input.index = this.gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = this.gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					var _this1 = this.__isUniform;
					var key1 = parameter.name;
					if(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]) {
						parameter.index = this.gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = this.gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					var _this2 = this.__isUniform;
					var key2 = parameter1.name;
					if(__map_reserved[key2] != null?_this2.getReserved(key2):_this2.h[key2]) {
						parameter1.index = this.gl.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = this.gl.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					var _this3 = this.__isUniform;
					var key3 = parameter2.name;
					if(__map_reserved[key3] != null?_this3.getReserved(key3):_this3.h[key3]) {
						parameter2.index = this.gl.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = this.gl.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				this.get_data()[name] = input;
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					this.get_data()[name] = parameter;
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					this.get_data()[name] = parameter1;
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					this.get_data()[name] = parameter2;
				}
			}
			var _this = this.__isUniform;
			var value = storageType == "uniform";
			if(__map_reserved[name] != null) {
				_this.setReserved(name,value);
			} else {
				_this.h[name] = value;
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) {
			this.__updateGL();
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.activeTexture(this.gl.TEXTURE0 + textureCount);
				this.gl.bindTexture(this.gl.TEXTURE_2D,input.input.getTexture(this.gl));
				if(input.smoothing) {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			++textureCount;
		}
		var index = 0;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			var value = parameter.value;
			index = parameter.index;
			if(value != null) {
				switch(parameter.type) {
				case 0:
					this.gl.uniform1i(index,value[0]?1:0);
					break;
				case 1:
					this.gl.uniform2i(index,value[0]?1:0,value[1]?1:0);
					break;
				case 2:
					this.gl.uniform3i(index,value[0]?1:0,value[1]?1:0,value[2]?1:0);
					break;
				case 3:
					this.gl.uniform4i(index,value[0]?1:0,value[1]?1:0,value[2]?1:0,value[3]?1:0);
					break;
				default:
				}
			} else {
				var _this = this.__isUniform;
				var key = parameter.name;
				if(!(__map_reserved[key] != null?_this.getReserved(key):_this.h[key])) {
					this.gl.enableVertexAttribArray(parameter.index);
				}
			}
		}
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			var value1 = parameter1.value;
			index = parameter1.index;
			if(value1 != null) {
				switch(parameter1.type) {
				case 4:
					this.gl.uniform1f(index,value1[0]);
					break;
				case 5:
					this.gl.uniform2f(index,value1[0],value1[1]);
					break;
				case 6:
					this.gl.uniform3f(index,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.uniform4f(index,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g21 = 0;
					while(_g21 < 4) {
						var i = _g21++;
						this.__uniformMatrix2[i] = value1[i];
					}
					this.gl.uniformMatrix2fv(index,false,this.__uniformMatrix2);
					break;
				case 16:
					var _g22 = 0;
					while(_g22 < 9) {
						var i1 = _g22++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					this.gl.uniformMatrix3fv(index,false,this.__uniformMatrix3);
					break;
				case 20:
					var _g23 = 0;
					while(_g23 < 16) {
						var i2 = _g23++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					this.gl.uniformMatrix4fv(index,false,this.__uniformMatrix4);
					break;
				default:
				}
			} else {
				var _this1 = this.__isUniform;
				var key1 = parameter1.name;
				if(!(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1])) {
					this.gl.enableVertexAttribArray(parameter1.index);
				}
			}
		}
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			var value2 = parameter2.value;
			if(value2 != null) {
				switch(parameter2.type) {
				case 8:
					this.gl.uniform1i(index,value2[0]);
					break;
				case 9:
					this.gl.uniform2i(index,value2[0],value2[1]);
					break;
				case 10:
					this.gl.uniform3i(index,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.uniform4i(index,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else {
				var _this2 = this.__isUniform;
				var key2 = parameter2.name;
				if(!(__map_reserved[key2] != null?_this2.getReserved(key2):_this2.h[key2])) {
					this.gl.enableVertexAttribArray(parameter2.index);
				}
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_ShaderData = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = {};
$hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = {};
$hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] = openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = ["openfl","display","_ShaderPrecision","ShaderPrecision_Impl_"];
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.set_upState(upState != null?upState:new openfl_display_DisplayObject());
	this.set_overState(overState);
	this.set_downState(downState);
	this.set_hitTestState(hitTestState != null?hitTestState:new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.set___currentState(this.upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	downState: null
	,enabled: null
	,hitTestState: null
	,overState: null
	,trackAsMenu: null
	,upState: null
	,useHandCursor: null
	,__currentState: null
	,__ignoreEvent: null
	,__previousStates: null
	,__soundTransform: null
	,__symbol: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getRenderBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.hitTestState != null) {
			var cacheTransform = this.__updateTransform(this.hitTestState);
			if(this.hitTestState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					stack[stack.length - 1] = hitObject;
				}
				hitTest = true;
			}
			this.__resetTransform(this.hitTestState,cacheTransform);
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			var cacheTransform1 = this.__updateTransform(this.__currentState);
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
			this.__resetTransform(this.__currentState,cacheTransform1);
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		var cacheTransform = this.__updateTransform(this.__currentState);
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		this.__resetTransform(this.__currentState,cacheTransform);
		return hitTest;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCairo(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		this.__currentState.__renderCairoMask(renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.get_length()) {
			var previousState = _g1.get(_g);
			++_g;
			previousState.__renderDOM(renderSession);
		}
		this.__previousStates.set_length(0);
		this.__currentState.__renderDOM(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__resetTransform: function(state,cacheTransform) {
		state.__updateTransforms(cacheTransform);
		state.__updateChildren(false);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
	}
	,__updateTransform: function(state) {
		var local = state.__transform;
		var parentTransform = this.__worldTransform;
		var overrideTransform = openfl_geom_Matrix.__temp;
		overrideTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
		overrideTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
		overrideTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
		overrideTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
		overrideTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
		overrideTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		var cacheTransform = state.__transform;
		state.__transform = overrideTransform;
		state.__update(false,true);
		state.__transform = cacheTransform;
		return cacheTransform;
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__updateTransform(this.__currentState);
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) {
			this.set___currentState(downState);
		}
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) {
			this.set___currentState(overState);
		}
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) {
			this.set___currentState(upState);
		}
		return this.upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null) {
			this.__currentState.__renderParent = null;
		}
		if(value.parent != null) {
			value.parent.removeChild(value);
		}
		value.__renderParent = this;
		return this.__currentState = value;
	}
	,__this_onMouseDown: function(event) {
		if(this.downState != null) {
			this.set___currentState(this.downState);
		}
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.upState != this.__currentState) {
			this.set___currentState(this.upState);
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.overState != this.__currentState && this.overState != null && !this.__ignoreEvent) {
			this.set___currentState(this.overState);
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.overState != null) {
			this.set___currentState(this.overState);
		} else {
			this.set___currentState(this.upState);
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else {
		this.set_color(color);
	}
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.stage3Ds.push(new openfl_display_Stage3D());
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	if(openfl_Lib.current.stage == null) {
		this.stage.addChild(openfl_Lib.current);
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		renderer.onRender.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		renderer.onContextLost.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		renderer.onContextRestored.add(function(a2) {
			f2(a12,a2);
		});
	}
	,addWindow: function(window) {
		if(this.window != window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		window.onActivate.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		window.onClose.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		window.onCreate.add(function() {
			f2(a12);
		});
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		window.onDeactivate.add(function() {
			f3(a13);
		});
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		window.onDropFile.add(function(a2) {
			f4(a14,a2);
		});
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		window.onEnter.add(function() {
			f5(a15);
		});
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		window.onFocusIn.add(function() {
			f6(a16);
		});
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		window.onFocusOut.add(function() {
			f7(a17);
		});
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		window.onFullscreen.add(function() {
			f8(a18);
		});
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		window.onKeyDown.add(function(a21,a3) {
			f9(a19,a21,a3);
		});
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		window.onKeyUp.add(function(a22,a31) {
			f10(a110,a22,a31);
		});
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		window.onLeave.add(function() {
			f11(a111);
		});
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		window.onMinimize.add(function() {
			f12(a112);
		});
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		window.onMouseDown.add(function(x,y,a23) {
			f13(a113,x,y,a23);
		});
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		window.onMouseMove.add(function(x1,y1) {
			f14(a114,x1,y1);
		});
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		window.onMouseMoveRelative.add(function(x2,y2) {
			f15(a115,x2,y2);
		});
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		window.onMouseUp.add(function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		});
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		window.onMouseWheel.add(function(a25,a32) {
			f17(a117,a25,a32);
		});
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		window.onMove.add(function(x4,y4) {
			f18(a118,x4,y4);
		});
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		window.onResize.add(function(a26,a33) {
			f19(a119,a26,a33);
		});
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		window.onRestore.add(function() {
			f20(a120);
		});
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		window.onTextEdit.add(function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		});
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		window.onTextInput.add(function(a28) {
			f22(a122,a28);
		});
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var tmp = lime_ui_Gamepad.devices.iterator();
		while(tmp.hasNext()) this.__onGamepadConnect(tmp.next());
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
	}
	,removeWindow: function(window) {
	}
	,setPreloader: function(preloader) {
	}
	,unregisterModule: function(application) {
		application.onExit.remove($bind(this,this.onModuleExit));
		application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
	}
	,globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onKey("keyDown",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onKey("keyUp",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			try {
				this.__broadcastEvent(new openfl_events_Event("deactivate"));
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.__handleError(e);
			}
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseDown";
				break;
			case 2:
				type = "rightMouseDown";
				break;
			default:
				type = "mouseDown";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseUp";
				break;
			case 2:
				type = "rightMouseUp";
				break;
			default:
				type = "mouseUp";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
			if(!this.showDefaultContextMenu && button == 2) {
				window.onMouseUp.cancel();
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var stack = [];
			if(this.__focus == null) {
				this.__getInteractive(stack);
			} else {
				this.__focus.__getInteractive(stack);
			}
			var event = new openfl_events_TextEvent("textInput",true,false,text);
			if(stack.length > 0) {
				stack.reverse();
				this.__fireEvent(event,stack);
			} else {
				this.__dispatchEvent(event);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchMove: function(touch) {
		try {
			this.__onTouch("touchMove",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchEnd: function(touch) {
		try {
			if(this.__primaryTouch == touch) {
				this.__primaryTouch = null;
			}
			this.__onTouch("touchEnd",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchStart: function(touch) {
		try {
			if(this.__primaryTouch == null) {
				this.__primaryTouch = touch;
			}
			this.__onTouch("touchBegin",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__broadcastEvent(new openfl_events_Event("activate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			if(window.renderer != null) {
				var _g = window.renderer.context;
				switch(_g[1]) {
				case 0:
					this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,_g[2]);
					break;
				case 1:
					this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,_g[2]);
					break;
				case 2:
					this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this,_g[2]);
					break;
				case 4:
					break;
				case 5:
					break;
				default:
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.set_focus(this.__cacheFocus);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var currentFocus = this.get_focus();
			this.set_focus(null);
			this.__cacheFocus = currentFocus;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__resize();
			if(this.__displayState == 2) {
				this.__displayState = 1;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__resize();
			if(this.__displayState != 2 && !window.__fullscreen) {
				this.__displayState = 2;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__broadcastEvent(new openfl_events_Event("activate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		try {
			if(this.application != null && this.application.__windows.length > 0) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
			}
			if(this.__rendering) {
				return;
			}
			this.__rendering = true;
			if(this.__renderer != null) {
				this.__renderer.clear();
			}
			this.__broadcastEvent(new openfl_events_Event("enterFrame"));
			this.__broadcastEvent(new openfl_events_Event("exitFrame"));
			if(this.__invalidated) {
				this.__invalidated = false;
				this.__broadcastEvent(new openfl_events_Event("render"));
			}
			this.__renderable = true;
			this.__enterFrame(this.__deltaTime);
			this.__deltaTime = 0;
			this.__update(false,true);
			if(this.__renderer != null) {
				if(renderer.type == lime_graphics_RendererType.CAIRO) {
					var _g = renderer.context;
					if(_g[1] == 4) {
						var cairo = _g[2];
						(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
						this.__renderer.renderSession.cairo = cairo;
					}
				}
				this.__renderer.render();
			}
			this.__rendering = false;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		var _this = openfl_display_DisplayObject.__broadcastEvents;
		var key = event.type;
		if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
			var _this1 = openfl_display_DisplayObject.__broadcastEvents;
			var key1 = event.type;
			var dispatchers = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				dispatcher.__dispatch(event);
			}
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var target;
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				stack[_g1++].__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
			}
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
			if(event.__isCanceled) {
				return;
			}
			if(event.bubbles) {
				event.eventPhase = 3;
				var i = length - 2;
				while(i >= 0) {
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
					--i;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.current.__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var event = new openfl_events_KeyboardEvent(type,true,false,openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)),keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		gamepad.onAxisMove.add(function(a2,a3) {
			f(a1,a2,a3);
		});
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		gamepad.onButtonDown.add(function(a21) {
			f1(a11,a21);
		});
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		gamepad.onButtonUp.add(function(a22) {
			f2(a12,a22);
		});
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		gamepad.onDisconnect.add(function() {
			f3(a13);
		});
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = new openfl_geom_Point(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.get_tabEnabled()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft == target) {
				clickType = "click";
			}
			this.__mouseDownLeft = null;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						lime_ui_Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		var localPoint;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				if(this.__mouseOverTarget == this) {
					localPoint = targetPoint;
				} else {
					localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
				}
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,localPoint,this.__mouseOverTarget);
				this.__mouseOverTarget.__dispatchEvent(event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,localPoint,this.__mouseOverTarget);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1) {
				if(target3.hasEventListener("rollOver")) {
					localPoint = target3.globalToLocal(targetPoint);
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,localPoint,target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("rollOut")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				if(target == this) {
					localPoint = targetPoint;
				} else {
					localPoint = target.globalToLocal(targetPoint);
				}
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,localPoint,target);
				event.bubbles = true;
				target.__dispatchEvent(event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = new openfl_geom_Point(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__fireEvent(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,deltaY | 0),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			point.x = -_this.tx;
			point.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
			point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
			point.x = px;
		}
		var touchX = point.x;
		var touchY = point.y;
		var __stack = [];
		if(this.__hitTest(touchX,touchY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) {
				target = this;
			}
			var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.globalToLocal(point),target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = this.__primaryTouch == touch;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,touchX,touchY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = this.__primaryTouch == touch;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = this.window.__width;
		this.__logicalHeight = this.window.__height;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var targetScale = Math.min(windowWidth / this.stageWidth,windowHeight / this.stageHeight);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		this.__dragBounds = bounds == null?null:bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		this.__colorSplit = [((value & 16711680) >>> 16) / 255,((value & 65280) >>> 8) / 255,(value & 255) / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__fireEvent(event,stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__fireEvent(event1,stack1);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) {
			return this.application.backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) {
			return this.application.backend.setFrameRate(value);
		}
		return value;
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.set_x(0);
	this.set_y(0);
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,__contextRequested: null
	,__canvas: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		this.__contextRequested = true;
		if(this.context3D != null) {
			haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function(stage,renderSession) {
		if(renderSession.gl != null) {
			this.context3D = new openfl_display3D_Context3D(this,renderSession);
			this.__dispatchCreate();
		} else {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,{ alpha : Object.prototype.hasOwnProperty.call($window.config,"background") && $window.config.background == null, antialias : Object.prototype.hasOwnProperty.call($window.config,"antialiasing") && $window.config.antialiasing > 0, depth : Object.prototype.hasOwnProperty.call($window.config,"depthBuffer")?$window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call($window.config,"stencilBuffer") && $window.config.stencilBuffer, preserveDrawingBuffer : false});
			if(this.__webgl != null) {
				lime_graphics_opengl_GL.context = this.__webgl;
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				renderSession.element.appendChild(this.__canvas);
				this.__style = this.__canvas.style;
				this.__style.setProperty("position","absolute",null);
				this.__style.setProperty("top","0",null);
				this.__style.setProperty("left","0",null);
				this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
				this.__style.setProperty("z-index","-1",null);
				this.__dispatchCreate();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderCairo: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			lime_graphics_opengl_GL.context = this.__webgl;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			this.__resetContext3DStates();
			if(this.context3D != null) {
				renderSession.gl.depthMask(true);
				renderSession.blendModeManager.setBlendMode(null);
				if(renderSession.shaderManager.currentShader != null) {
					renderSession.shaderManager.setShader(null);
					if(this.context3D.__program != null) {
						this.context3D.__program.__use();
					}
				}
			}
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,set_x: function(value) {
		this.x = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,set_y: function(value) {
		this.y = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",set_x:"set_x"}
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		if(Object.prototype.hasOwnProperty.call(this.config,"resizable") && !this.config.resizable) {
			this.stage.__setLogicalSize(this.config.width,this.config.height);
		}
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.totalGPUMemory = 0;
	this.profile = 0;
	this.enableErrorChecking = false;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	this.__vertexConstants = new Float32Array(512);
	this.__fragmentConstants = new Float32Array(512);
	var array = [1.0,1.0,1.0,1.0];
	this.__positionScale = array != null?new Float32Array(array):null;
	this.__samplerDirty = 0;
	this.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this.__samplerStates = [];
	var _g = 0;
	while(_g < 8) this.__samplerStates[_g++] = new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071);
	this.maxBackBufferHeight = this.maxBackBufferWidth = lime_graphics_opengl_GL.context.getParameter(3386);
	this.__backBufferAntiAlias = 0;
	this.__backBufferEnableDepthAndStencil = true;
	this.__backBufferWantsBestResolution = false;
	this.__frameCount = 0;
	this.__rttDepthAndStencil = false;
	this.__samplerDirty = 0;
	this.__stencilCompareMode = 0;
	this.__stencilRef = 0;
	this.__stencilReadMask = 255;
	this.__supportsPackedDepthStencil = true;
	this.__stats = openfl__$Vector_Vector_$Impl_$.toIntVector(null,11);
	this.__statsCache = openfl__$Vector_Vector_$Impl_$.toIntVector(null,11);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = lime_graphics_opengl_GL.context.getParameter(7936);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = lime_graphics_opengl_GL.context.getParameter(7938);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = lime_graphics_opengl_GL.context.getParameter(7937);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = lime_graphics_opengl_GL.context.getParameter(35724);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	var _g1 = 0;
	var _g2 = this.__stats.get_length();
	while(_g1 < _g2) this.__stats.set(_g1++,0);
	openfl_display3D_Context3D.__stateCache.clearSettings();
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,enableErrorChecking: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__depthRenderBuffer: null
	,__depthStencilRenderBuffer: null
	,__fragmentConstants: null
	,__framebuffer: null
	,__frameCount: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__scissorRectangle: null
	,__stage3D: null
	,__stats: null
	,__statsCache: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__stencilRenderBuffer: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		var clearMask = 0;
		if((mask & 1) != 0) {
			clearMask = 16384;
			lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if((mask & 2) != 0) {
			clearMask |= 256;
			lime_graphics_opengl_GL.context.clearDepth(depth);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if((mask & 4) != 0) {
			clearMask |= 1024;
			lime_graphics_opengl_GL.context.clearStencil(stencil);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		lime_graphics_opengl_GL.context.clear(clearMask);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		this.__updateBackbufferViewport();
		this.backBufferWidth = width;
		this.backBufferHeight = height;
		this.__backBufferAntiAlias = antiAlias;
		this.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
		this.__backBufferWantsBestResolution = wantsBestResolution;
		openfl_display3D_Context3D.__stateCache.clearSettings();
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createProgram: function() {
		return new openfl_display3D_Program3D(this);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function() {
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__program == null) {
			return;
		}
		this.__flushSamplerState();
		this.__program.__flush();
		var count = numTriangles == -1?indexBuffer.__numIndices:numTriangles * 3;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.drawElements(4,count,indexBuffer.__elementType,firstIndex);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__statsIncrement(0);
	}
	,present: function() {
		this.__statsSendToTelemetry();
		this.__statsClear(0);
		this.__frameCount++;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		var updateSrc = openfl_display3D_Context3D.__stateCache.updateBlendSrcFactor(sourceFactor);
		var updateDest = openfl_display3D_Context3D.__stateCache.updateBlendDestFactor(destinationFactor);
		if(updateSrc || updateDest) {
			this.__updateBlendFactors();
		}
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(openfl_display3D_Context3D.__stateCache.updateCullingMode(triangleFaceToCull)) {
			switch(triangleFaceToCull) {
			case 0:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 2:
				lime_graphics_opengl_GL.context.enable(2884);
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			case 3:
				lime_graphics_opengl_GL.context.disable(2884);
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		var depthTestEnabled = this.__backBufferEnableDepthAndStencil;
		if(openfl_display3D_Context3D.__stateCache.updateDepthTestEnabled(depthTestEnabled)) {
			if(depthTestEnabled) {
				lime_graphics_opengl_GL.context.enable(2929);
			} else {
				lime_graphics_opengl_GL.context.disable(2929);
			}
		}
		if(openfl_display3D_Context3D.__stateCache.updateDepthTestMask(depthMask)) {
			lime_graphics_opengl_GL.context.depthMask(depthMask);
		}
		if(openfl_display3D_Context3D.__stateCache.updateDepthCompareMode(passCompareMode)) {
			switch(passCompareMode) {
			case 0:
				lime_graphics_opengl_GL.context.depthFunc(519);
				break;
			case 1:
				lime_graphics_opengl_GL.context.depthFunc(514);
				break;
			case 2:
				lime_graphics_opengl_GL.context.depthFunc(516);
				break;
			case 3:
				lime_graphics_opengl_GL.context.depthFunc(518);
				break;
			case 4:
				lime_graphics_opengl_GL.context.depthFunc(513);
				break;
			case 5:
				lime_graphics_opengl_GL.context.depthFunc(515);
				break;
			case 6:
				lime_graphics_opengl_GL.context.depthFunc(512);
				break;
			case 7:
				lime_graphics_opengl_GL.context.depthFunc(517);
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
		}
	}
	,setProgram: function(program) {
		if(program == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		if(openfl_display3D_Context3D.__stateCache.updateProgram3D(program)) {
			program.__use();
			program.__setPositionScale(this.__positionScale);
			this.__program = program;
			this.__samplerDirty |= this.__program.__samplerUsageMask;
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var tmp = this.__program.__getSamplerState(i);
				this.__samplerStates[i].copyFrom(tmp);
			}
		}
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0) {
			return;
		}
		if(numRegisters == -1) {
			numRegisters = (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2) - byteArrayOffset;
		}
		var isVertex = programType == 1;
		var dest = isVertex?this.__vertexConstants:this.__fragmentConstants;
		var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
		var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var floatData = len == null?new Float32Array(bytes.b.bufferValue,0):new Float32Array(bytes.b.bufferValue,0,len);
		var outOffset = firstRegister * 4;
		var inOffset = _$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4) | 0;
		var _g1 = 0;
		var _g = numRegisters * 4;
		while(_g1 < _g) {
			var i = _g1++;
			dest[outOffset + i] = floatData[inOffset + i];
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,numRegisters);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		var isVertex = programType == 1;
		var dest = isVertex?this.__vertexConstants:this.__fragmentConstants;
		var source = matrix.rawData;
		var i = firstRegister * 4;
		if(transposedMatrix) {
			dest[i++] = source.get(0);
			dest[i++] = source.get(4);
			dest[i++] = source.get(8);
			dest[i++] = source.get(12);
			dest[i++] = source.get(1);
			dest[i++] = source.get(5);
			dest[i++] = source.get(9);
			dest[i++] = source.get(13);
			dest[i++] = source.get(2);
			dest[i++] = source.get(6);
			dest[i++] = source.get(10);
			dest[i++] = source.get(14);
			dest[i++] = source.get(3);
			dest[i++] = source.get(7);
			dest[i++] = source.get(11);
			dest[i++] = source.get(15);
		} else {
			dest[i++] = source.get(0);
			dest[i++] = source.get(1);
			dest[i++] = source.get(2);
			dest[i++] = source.get(3);
			dest[i++] = source.get(4);
			dest[i++] = source.get(5);
			dest[i++] = source.get(6);
			dest[i++] = source.get(7);
			dest[i++] = source.get(8);
			dest[i++] = source.get(9);
			dest[i++] = source.get(10);
			dest[i++] = source.get(11);
			dest[i++] = source.get(12);
			dest[i++] = source.get(13);
			dest[i++] = source.get(14);
			dest[i++] = source.get(15);
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,4);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		if(numRegisters == -1) {
			numRegisters = data.get_length() >> 2;
		}
		var isVertex = programType == 1;
		var dest = isVertex?this.__vertexConstants:this.__fragmentConstants;
		var sourceIndex = 0;
		var destIndex = firstRegister * 4;
		var _g1 = 0;
		var _g = numRegisters;
		while(_g1 < _g) {
			++_g1;
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
			dest[destIndex++] = data.get(sourceIndex++);
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,numRegisters);
		}
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__renderToTexture = null;
		this.__scissorRectangle = null;
		this.__updateBackbufferViewport();
		this.__updateScissorRectangle();
		this.__updateDepthAndStencilState();
		this.__positionScale[1] = 1.0;
		if(this.__program != null) {
			this.__program.__setPositionScale(this.__positionScale);
		}
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		var width = 0;
		var height = 0;
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			var texture2D = texture;
			width = texture2D.__width;
			height = texture2D.__height;
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			var rectTexture = texture;
			width = rectTexture.__width;
			height = rectTexture.__height;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid texture"));
		}
		if(this.__framebuffer == null) {
			this.__framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.__framebuffer);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(enableDepthAndStencil) {
			if(this.__supportsPackedDepthStencil) {
				if(this.__depthStencilRenderBuffer == null) {
					this.__depthStencilRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__depthStencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.__depthStencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				if(this.__depthRenderBuffer == null) {
					this.__depthRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				if(this.__stencilRenderBuffer == null) {
					this.__stencilRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__depthRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,33189,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__stencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,36168,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36096,36161,this.__depthRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36128,36161,this.__stencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		this.__setViewport(0,0,width,height);
		if(this.enableErrorChecking) {
			if(lime_graphics_opengl_GL.context.checkFramebufferStatus(36160) != 36053) {
				haxe_Log.trace("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",{ fileName : "Context3D.hx", lineNumber : 726, className : "openfl.display3D.Context3D", methodName : "setRenderToTexture"});
			}
		}
		this.__positionScale[1] = -1.0;
		if(this.__program != null) {
			this.__program.__setPositionScale(this.__positionScale);
		}
		this.__renderToTexture = texture;
		this.__scissorRectangle = null;
		this.__rttDepthAndStencil = enableDepthAndStencil;
		this.__updateScissorRectangle();
		this.__updateDepthAndStencilState();
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(sampler < 0 || sampler > 8) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("sampler out of range"));
		}
		var state = this.__samplerStates[sampler];
		switch(wrap) {
		case 0:
			state.wrapModeS = 33071;
			state.wrapModeT = 33071;
			break;
		case 1:
			state.wrapModeS = 33071;
			state.wrapModeT = 10497;
			break;
		case 2:
			state.wrapModeS = 10497;
			state.wrapModeT = 10497;
			break;
		case 3:
			state.wrapModeS = 10497;
			state.wrapModeT = 33071;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
		}
		switch(filter) {
		case 0:
			state.magFilter = 9729;
			break;
		case 1:
			state.magFilter = 9729;
			break;
		case 2:
			state.magFilter = 9729;
			break;
		case 3:
			state.magFilter = 9729;
			break;
		case 4:
			state.magFilter = 9729;
			break;
		case 5:
			state.magFilter = 9728;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("filter bad enum"));
		}
		switch(mipfilter) {
		case 0:
			state.minFilter = 9987;
			break;
		case 1:
			state.minFilter = 9984;
			break;
		case 2:
			state.minFilter = filter == 5?9728:9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
		}
	}
	,setScissorRectangle: function(rectangle) {
		this.__scissorRectangle = rectangle != null?rectangle.clone():null;
		this.__updateScissorRectangle();
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(this.__getGLStencilAction(actionOnDepthFail),this.__getGLStencilAction(actionOnDepthPassStencilFail),this.__getGLStencilAction(actionOnBothPass));
		lime_graphics_opengl_GL.context.stencilFunc(this.__getGLCompareMode(this.__stencilCompareMode),this.__stencilRef,this.__stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__stencilReadMask = readMask;
		this.__stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.__getGLCompareMode(this.__stencilCompareMode),this.__stencilRef,this.__stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		if(this.__samplerTextures.get(sampler) != texture) {
			this.__samplerTextures.set(sampler,texture);
			this.__samplerDirty |= 1 << sampler;
		}
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(buffer == null) {
			lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.bindBuffer(34962,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			return;
		}
		lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5121,true,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 1:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,1,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 2:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,2,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 3:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,3,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 4:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__flushSamplerState: function() {
		var sampler = 0;
		while(this.__samplerDirty != 0) {
			if((this.__samplerDirty & 1 << sampler) != 0) {
				if(openfl_display3D_Context3D.__stateCache.updateActiveTextureSample(sampler)) {
					lime_graphics_opengl_GL.context.activeTexture(33984 + sampler);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				var texture = this.__samplerTextures.get(sampler);
				if(texture != null) {
					lime_graphics_opengl_GL.context.bindTexture(texture.__textureTarget,texture.__getTexture());
					openfl__$internal_stage3D_GLUtils.CheckGLError();
					texture.__setSamplerState(this.__samplerStates[sampler]);
				} else {
					lime_graphics_opengl_GL.context.bindTexture(3553,null);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				this.__samplerDirty &= ~(1 << sampler);
			}
			++sampler;
		}
	}
	,__getGLCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 514;
		case 2:
			return 516;
		case 3:
			return 518;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 512;
		case 7:
			return 517;
		default:
			return 514;
		}
	}
	,__getGLStencilAction: function(stencilAction) {
		switch(stencilAction) {
		case 0:
			return 7683;
		case 1:
			return 34056;
		case 2:
			return 7682;
		case 3:
			return 34055;
		case 4:
			return 5386;
		case 5:
			return 7680;
		case 6:
			return 7681;
		case 7:
			return 0;
		default:
			return 7680;
		}
	}
	,__hasGLExtension: function(name) {
		return lime_graphics_opengl_GL.context.getSupportedExtensions().indexOf(name) != -1;
	}
	,__setViewport: function(originX,originY,width,height) {
		if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
			lime_graphics_opengl_GL.context.viewport(originX,originY,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__statsAdd: function(stat,value) {
		this.__stats.set(stat,this.__stats.get(stat) + value);
		return this.__stats.get(stat);
	}
	,__statsClear: function(stat) {
		this.__stats.set(stat,0);
	}
	,__statsDecrement: function(stat) {
		this.__stats.set(stat,this.__stats.get(stat) - 1);
	}
	,__statsIncrement: function(stat) {
		this.__stats.set(stat,this.__stats.get(stat) + 1);
	}
	,__statsSendToTelemetry: function() {
	}
	,__statsSubtract: function(stat,value) {
		this.__stats.set(stat,this.__stats.get(stat) - value);
		return this.__stats.get(stat);
	}
	,__updateDepthAndStencilState: function() {
		if(this.__renderToTexture != null?this.__rttDepthAndStencil:this.__backBufferEnableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.enable(2960);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			lime_graphics_opengl_GL.context.disable(2929);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.disable(2960);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__updateBlendFactors: function() {
		if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) {
			return;
		}
		var src = 1;
		var dest = 0;
		switch(openfl_display3D_Context3D.__stateCache._srcBlendFactor) {
		case 0:
			src = 772;
			break;
		case 1:
			src = 774;
			break;
		case 2:
			src = 1;
			break;
		case 3:
			src = 773;
			break;
		case 4:
			src = 775;
			break;
		case 5:
			src = 771;
			break;
		case 7:
			src = 770;
			break;
		case 9:
			src = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(openfl_display3D_Context3D.__stateCache._destBlendFactor) {
		case 0:
			dest = 772;
			break;
		case 2:
			dest = 1;
			break;
		case 3:
			dest = 773;
			break;
		case 5:
			dest = 771;
			break;
		case 6:
			dest = 769;
			break;
		case 7:
			dest = 770;
			break;
		case 8:
			dest = 768;
			break;
		case 9:
			dest = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		lime_graphics_opengl_GL.context.enable(3042);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.blendFunc(src,dest);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__updateScissorRectangle: function() {
		if(this.__scissorRectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var height = 0;
		if(this.__renderToTexture != null) {
			if(js_Boot.__instanceof(this.__renderToTexture,openfl_display3D_textures_Texture)) {
				height = this.__renderToTexture.__height;
			} else if(js_Boot.__instanceof(this.__renderToTexture,openfl_display3D_textures_RectangleTexture)) {
				height = this.__renderToTexture.__height;
			}
		} else {
			height = this.backBufferHeight;
		}
		lime_graphics_opengl_GL.context.scissor(this.__scissorRectangle.x | 0,height - (this.__scissorRectangle.y | 0) - (this.__scissorRectangle.height | 0) | 0,this.__scissorRectangle.width | 0,this.__scissorRectangle.height | 0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__updateBackbufferViewport: function() {
		if(this.__renderToTexture == null) {
			this.__setViewport(this.__stage3D.x | 0,this.__stage3D.y | 0,this.backBufferWidth,this.backBufferHeight);
		}
	}
	,set_enableErrorChecking: function(value) {
		return this.enableErrorChecking = openfl__$internal_stage3D_GLUtils.debug = value;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {set_enableErrorChecking:"set_enableErrorChecking"}
});
var openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3D.Context3DTelemetry_Impl_"] = openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.__name__ = ["openfl","display3D","_Context3D","Context3DTelemetry_Impl_"];
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DMipFilter","Context3DMipFilter_Impl_"];
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = ["openfl","display3D","_Context3DProfile","Context3DProfile_Impl_"];
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DRenderMode","Context3DRenderMode_Impl_"];
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFilter","Context3DTextureFilter_Impl_"];
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DVertexBufferFormat","Context3DVertexBufferFormat_Impl_"];
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DWrapMode","Context3DWrapMode_Impl_"];
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_y":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_y":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_y";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_y";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	this.__elementType = 5123;
	this.__id = lime_graphics_opengl_GL.context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.__usage = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0?35048:35044;
	this.__context.__statsIncrement(1);
	this.__memoryUsage = 0;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__usage: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.__id);
		this.__context.__statsDecrement(1);
		this.__context.__statsSubtract(6,this.__memoryUsage);
		this.__memoryUsage = 0;
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		this.uploadFromTypedArray(buffer != null?count == null?new Int16Array(buffer,offset):new Int16Array(buffer,offset,count):null);
	}
	,uploadFromTypedArray: function(data) {
		if(data == null) {
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bufferData(34963,data,this.__usage);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(data.byteLength != this.__memoryUsage) {
			this.__context.__statsAdd(6,data.byteLength - this.__memoryUsage);
			this.__memoryUsage = data.byteLength;
		}
	}
	,uploadFromVector: function(data,startOffset,count) {
		var length = startOffset + count;
		var buffer = count != null?new Int16Array(count):null;
		var _g1 = startOffset;
		while(_g1 < length) {
			var i = _g1++;
			buffer[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(buffer);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D) {
	this.__context = context3D;
	this.__memUsage = 0;
	this.__samplerUsageMask = 0;
	this.__uniforms = new List();
	this.__samplerUniforms = new List();
	this.__alphaSamplerUniforms = new List();
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerUniforms: null
	,__context: null
	,__fragmentShaderID: null
	,__fragmentSource: null
	,__fragmentUniformMap: null
	,__memUsage: null
	,__positionScale: null
	,__programID: null
	,__samplerStates: null
	,__samplerUniforms: null
	,__samplerUsageMask: null
	,__uniforms: null
	,__vertexShaderID: null
	,__vertexSource: null
	,__vertexUniformMap: null
	,dispose: function() {
		this.__deleteShaders();
	}
	,upload: function(vertexProgram,fragmentProgram) {
		var samplerStates = [];
		this.__uploadFromGLSL(openfl__$internal_stage3D_AGALConverter.convertToGLSL(vertexProgram,null),openfl__$internal_stage3D_AGALConverter.convertToGLSL(fragmentProgram,samplerStates));
		var _g1 = 0;
		var _g = samplerStates.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__setSamplerState(i,samplerStates[i]);
		}
	}
	,__buildUniformList: function() {
		this.__uniforms.clear();
		this.__samplerUniforms.clear();
		this.__alphaSamplerUniforms.clear();
		this.__samplerUsageMask = 0;
		var numActive = 0;
		numActive = lime_graphics_opengl_GL.context.getProgramParameter(this.__programID,35718);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var vertexUniforms = new List();
		var fragmentUniforms = new List();
		var _g1 = 0;
		var _g = numActive;
		while(_g1 < _g) {
			var i = _g1++;
			var info = lime_graphics_opengl_GL.context.getActiveUniform(this.__programID,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			var uniform = new openfl_display3D__$Program3D_Uniform();
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = lime_graphics_opengl_GL.context.getUniformLocation(this.__programID,uniform.name);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			switch(uniform.type) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__uniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__positionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && !StringTools.endsWith(uniform.name,"_alpha")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__samplerUniforms.add(uniform);
				var _g4 = 0;
				var _g3 = uniform.regCount;
				while(_g4 < _g3) this.__samplerUsageMask |= 1 << uniform.regIndex + _g4++;
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + (uniform.name.indexOf("_") - 7))) + 4;
				this.__alphaSamplerUniforms.add(uniform);
			}
			if(openfl_display3D_Program3D.verbose) {
				haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "Program3D.hx", lineNumber : 174, className : "openfl.display3D.Program3D", methodName : "__buildUniformList"});
			}
		}
		this.__vertexUniformMap = new openfl_display3D__$Program3D_UniformMap(Lambda.array(vertexUniforms));
		this.__fragmentUniformMap = new openfl_display3D__$Program3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		if(this.__programID != null) {
			this.__programID = null;
		}
		if(this.__vertexShaderID != null) {
			lime_graphics_opengl_GL.context.deleteShader(this.__vertexShaderID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__vertexShaderID = null;
		}
		if(this.__fragmentShaderID != null) {
			lime_graphics_opengl_GL.context.deleteShader(this.__fragmentShaderID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__fragmentShaderID = null;
		}
		if(this.__memUsage != 0) {
			this.__context.__statsDecrement(5);
			this.__context.__statsSubtract(10,this.__memUsage);
			this.__memUsage = 0;
		}
	}
	,__flush: function() {
		this.__vertexUniformMap.flush();
		this.__fragmentUniformMap.flush();
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates.get(sampler);
	}
	,__markDirty: function(isVertex,index,count) {
		if(isVertex) {
			this.__vertexUniformMap.markDirty(index,count);
		} else {
			this.__fragmentUniformMap.markDirty(index,count);
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__positionScale != null) {
			lime_graphics_opengl_GL.context.uniform4fv(this.__positionScale.location,positionScale);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates.set(sampler,state);
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		this.__deleteShaders();
		if(openfl_display3D_Program3D.verbose) {
			haxe_Log.trace(vertexShaderSource,{ fileName : "Program3D.hx", lineNumber : 278, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			haxe_Log.trace(fragmentShaderSource,{ fileName : "Program3D.hx", lineNumber : 279, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__vertexSource = vertexShaderSource;
		this.__fragmentSource = fragmentShaderSource;
		this.__vertexShaderID = lime_graphics_opengl_GL.context.createShader(35633);
		lime_graphics_opengl_GL.context.shaderSource(this.__vertexShaderID,vertexShaderSource);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.compileShader(this.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var shaderCompiled = lime_graphics_opengl_GL.context.getShaderParameter(this.__vertexShaderID,35713);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(shaderCompiled == 0) {
			var vertexInfoLog = lime_graphics_opengl_GL.context.getShaderInfoLog(this.__vertexShaderID);
			if(vertexInfoLog != null && vertexInfoLog.length != 0) {
				haxe_Log.trace("vertex: " + vertexInfoLog,{ fileName : "Program3D.hx", lineNumber : 303, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling vertex shader: " + vertexInfoLog));
		}
		this.__fragmentShaderID = lime_graphics_opengl_GL.context.createShader(35632);
		lime_graphics_opengl_GL.context.shaderSource(this.__fragmentShaderID,fragmentShaderSource);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.compileShader(this.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(lime_graphics_opengl_GL.context.getShaderParameter(this.__fragmentShaderID,35713) == 0) {
			var fragmentInfoLog = lime_graphics_opengl_GL.context.getShaderInfoLog(this.__fragmentShaderID);
			if(fragmentInfoLog != null && fragmentInfoLog.length != 0) {
				haxe_Log.trace("fragment: " + fragmentInfoLog,{ fileName : "Program3D.hx", lineNumber : 326, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling fragment shader: " + fragmentInfoLog));
		}
		this.__programID = lime_graphics_opengl_GL.context.createProgram();
		lime_graphics_opengl_GL.context.attachShader(this.__programID,this.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.attachShader(this.__programID,this.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var name = "va" + i;
			if(vertexShaderSource.indexOf(" " + name) != -1) {
				lime_graphics_opengl_GL.context.bindAttribLocation(this.__programID,i,name);
			}
		}
		lime_graphics_opengl_GL.context.linkProgram(this.__programID);
		var infoLog = lime_graphics_opengl_GL.context.getProgramInfoLog(this.__programID);
		if(infoLog != null && infoLog.length != 0) {
			haxe_Log.trace("program: ${infoLog}",{ fileName : "Program3D.hx", lineNumber : 359, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__buildUniformList();
		this.__memUsage = 1;
		this.__context.__statsIncrement(5);
		this.__context.__statsAdd(10,this.__memUsage);
	}
	,__use: function() {
		var program = this.__programID;
		lime_graphics_opengl_GL.__currentProgram = program;
		lime_graphics_opengl_GL.context.useProgram(program);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__vertexUniformMap.markAllDirty();
		this.__fragmentUniformMap.markAllDirty();
		var _g_head = this.__samplerUniforms.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.regCount == 1) {
				lime_graphics_opengl_GL.context.uniform1i(val.location,val.regIndex);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
			}
		}
		var _g_head1 = this.__alphaSamplerUniforms.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			if(val1.regCount == 1) {
				lime_graphics_opengl_GL.context.uniform1i(val1.location,val1.regIndex);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
			}
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D__$Program3D_Uniform = function() {
	this.isDirty = true;
};
$hxClasses["openfl.display3D._Program3D.Uniform"] = openfl_display3D__$Program3D_Uniform;
openfl_display3D__$Program3D_Uniform.__name__ = ["openfl","display3D","_Program3D","Uniform"];
openfl_display3D__$Program3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,flush: function() {
		var index = this.regIndex * 4;
		switch(this.type) {
		case 35664:
			lime_graphics_opengl_GL.context.uniform2fv(this.location,this.__getRegisters(index,this.regCount * 2));
			break;
		case 35665:
			lime_graphics_opengl_GL.context.uniform3fv(this.location,this.__getRegisters(index,this.regCount * 3));
			break;
		case 35666:
			lime_graphics_opengl_GL.context.uniform4fv(this.location,this.__getRegisters(index,this.regCount * 4));
			break;
		case 35674:
			lime_graphics_opengl_GL.context.uniformMatrix2fv(this.location,false,this.__getRegisters(index,this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics_opengl_GL.context.uniformMatrix3fv(this.location,false,this.__getRegisters(index,this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics_opengl_GL.context.uniformMatrix4fv(this.location,false,this.__getRegisters(index,this.size * 4 * 4));
			break;
		default:
			lime_graphics_opengl_GL.context.uniform4fv(this.location,this.__getRegisters(index,this.regCount * 4));
		}
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__getRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D__$Program3D_Uniform
};
var openfl_display3D__$Program3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) this.__registerLookup.set(uniform1.regIndex + _g3++,uniform1);
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D._Program3D.UniformMap"] = openfl_display3D__$Program3D_UniformMap;
openfl_display3D__$Program3D_UniformMap.__name__ = ["openfl","display3D","_Program3D","UniformMap"];
openfl_display3D__$Program3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D__$Program3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	this.__id = lime_graphics_opengl_GL.context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.__stride = this.__vertexSize * 4;
	this.__memoryUsage = 0;
	this.__usage = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0?35048:35044;
	this.__context.__statsIncrement(2);
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.__id);
		this.__context.__statsDecrement(2);
		this.__context.__statsSubtract(7,this.__memoryUsage);
		this.__memoryUsage = 0;
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		this.uploadFromTypedArray(buffer != null?length == null?new Float32Array(buffer,offset):new Float32Array(buffer,offset,length):null);
	}
	,uploadFromTypedArray: function(data) {
		if(data == null) {
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bufferData(34962,data,this.__usage);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(data.byteLength != this.__memoryUsage) {
			this.__context.__statsAdd(7,data.byteLength - this.__memoryUsage);
			this.__memoryUsage = data.byteLength;
		}
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var buffer = count != null?new Float32Array(count):null;
		var _g1 = start;
		while(_g1 < length) {
			var i = _g1++;
			buffer[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(buffer);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,target) {
	this.__outputTextureMemoryUsage = false;
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	this.__textureTarget = target;
	this.__textureID = lime_graphics_opengl_GL.context.createTexture();
	this.__internalFormat = 6408;
	this.__format = 6408;
	this.__memoryUsage = 0;
	this.__compressedMemoryUsage = 0;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__compressedMemoryUsage: null
	,__context: null
	,__format: null
	,__height: null
	,__internalFormat: null
	,__memoryUsage: null
	,__optimizeForRenderToTexture: null
	,__outputTextureMemoryUsage: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
		}
		lime_graphics_opengl_GL.context.deleteTexture(this.__textureID);
		if(this.__compressedMemoryUsage > 0) {
			this.__context.__statsDecrement(4);
			this.__context.__statsSubtract(9,this.__compressedMemoryUsage);
			this.__compressedMemoryUsage = 0;
		}
		if(this.__memoryUsage > 0) {
			this.__context.__statsDecrement(3);
			this.__context.__statsSubtract(8,this.__memoryUsage);
			this.__memoryUsage = 0;
		}
	}
	,__getImage: function(bitmapData) {
		var image = bitmapData.image;
		if(!bitmapData.__isValid || image == null) {
			return null;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			lime_graphics_opengl_GL.context.pixelStorei(37441,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			lime_graphics_opengl_GL.context.pixelStorei(37441,0);
			image = image.clone();
			image.set_premultiplied(true);
		}
		if(image.get_format() != 0) {
			image = image.clone();
			image.set_format(0);
			image.buffer.premultiplied = true;
		}
		return image;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10241,state.minFilter);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10240,state.magFilter);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10242,state.wrapModeS);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10243,state.wrapModeT);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__samplerState = state;
		}
	}
	,__trackCompressedMemoryUsage: function(memory) {
		if(this.__compressedMemoryUsage == 0) {
			this.__context.__statsIncrement(4);
		}
		this.__compressedMemoryUsage += memory;
		this.__context.__statsAdd(9,memory);
		this.__trackMemoryUsage(memory);
	}
	,__trackMemoryUsage: function(memory) {
		if(this.__memoryUsage == 0) {
			this.__context.__statsIncrement(3);
		}
		this.__memoryUsage += memory;
		this.__context.__statsAdd(8,memory);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context,34067);
	this.__size = size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		switch(side) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		this.__uploadedSides |= 1 << side;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.uploadFromTypedArray(null);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		if(source == null) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		this.uploadFromTypedArray(image.get_data());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		this.uploadFromTypedArray(buffer != null?new Uint8Array(buffer,byteArrayOffset):null);
	}
	,uploadFromTypedArray: function(data) {
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,5121,data);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__trackMemoryUsage(this.__width * this.__height * 4);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,0,this.__internalFormat,width,height,0,this.__format,5121,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
	this.uploadFromTypedArray(null);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__getATFVersion = function(data) {
	if(data.readUTFBytes(3) != "ATF") {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var position = data.position;
	var version = 0;
	if(_$UInt_UInt_$Impl_$.gte(data.length - data.position,5)) {
		if(openfl_display3D_textures_Texture.__readUInt32(data) == 255) {
			version = data.readUnsignedByte();
		} else {
			data.position = position;
		}
	}
	return version;
};
openfl_display3D_textures_Texture.__readUInt24 = function(data) {
	var value = data.readUnsignedByte() << 16;
	value = value | data.readUnsignedByte() << 8;
	value = value | data.readUnsignedByte();
	return value;
};
openfl_display3D_textures_Texture.__readUInt32 = function(data) {
	var value = data.readUnsignedByte() << 24;
	value = value | data.readUnsignedByte() << 16;
	value = value | data.readUnsignedByte() << 8;
	value = value | data.readUnsignedByte();
	return value;
};
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		data.position = byteArrayOffset;
		var signature = data.readUTFBytes(3);
		data.position = byteArrayOffset;
		if(signature == "ATF") {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__uploadATFTextureFromByteArray(data,byteArrayOffset);
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if(async) {
			haxe_Timer.delay(function() {
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		this.uploadFromTypedArray(this.__getImage(source).get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		this.uploadFromTypedArray(buffer != null?new Uint8Array(buffer,byteArrayOffset):null,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,5121,data);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__trackMemoryUsage(width * height * 4);
	}
	,__uploadATFTextureFromByteArray: function(data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var version = openfl_display3D_textures_Texture.__getATFVersion(data);
		if(js_Boot.__cast(byteArrayOffset + (version == 0?openfl_display3D_textures_Texture.__readUInt24(data):openfl_display3D_textures_Texture.__readUInt32(data)) , Int) > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
		}
		if(data.readUnsignedByte() >> 7 != 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube maps are not supported"));
		}
		var width = 1 << data.readUnsignedByte();
		var height = 1 << data.readUnsignedByte();
		if(width != this.__width || height != this.__height) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		var mipCount = data.readUnsignedByte();
		var _g1 = 0;
		while(_g1 < mipCount) {
			++_g1;
			var _g2 = 0;
			while(_g2 < 3) {
				var gpuFormat = _g2++;
				var blockLength = version == 0?openfl_display3D_textures_Texture.__readUInt24(data):openfl_display3D_textures_Texture.__readUInt32(data);
				_$UInt_UInt_$Impl_$.gt(blockLength,0);
				data.position = data.position + blockLength;
			}
		}
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) {
			haxe_Timer.delay(function() {
				_gthis.__textureReady();
			},0);
		} else {
			this.__netStream.__video.addEventListener("canplay",function(_) {
				_gthis.__textureReady();
			},false);
		}
	}
	,__getTexture: function() {
		if(!this.__netStream.__video.paused) {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,6408,5121,this.__netStream.__video);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(this.index < this.list.length && !this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) {
			return true;
		} else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null?keyLocationValue:0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_external_ExternalInterface = function() { };
$hxClasses["openfl.external.ExternalInterface"] = openfl_external_ExternalInterface;
openfl_external_ExternalInterface.__name__ = ["openfl","external","ExternalInterface"];
openfl_external_ExternalInterface.addCallback = function(functionName,closure) {
	if(openfl_Lib.application.__windows[0].backend.element != null) {
		openfl_Lib.application.__windows[0].backend.element[functionName] = closure;
	}
};
openfl_external_ExternalInterface.call = function(functionName,p1,p2,p3,p4,p5) {
	var callResponse = null;
	var thisArg = functionName.split(".").slice(0,-1).join(".");
	if(thisArg.length > 0) {
		functionName += ".bind(" + thisArg + ")";
	}
	if(p1 == null) {
		callResponse = eval(functionName)();
	} else if(p2 == null) {
		callResponse = eval(functionName)(p1);
	} else if(p3 == null) {
		callResponse = eval(functionName)(p1,p2);
	} else if(p4 == null) {
		callResponse = eval(functionName)(p1,p2,p3);
	} else if(p5 == null) {
		callResponse = eval(functionName)(p1,p2,p3,p4);
	} else {
		callResponse = eval(functionName)(p1,p2,p3,p4,p5);
	}
	return callResponse;
};
var openfl_filters_BitmapFilter = function() {
	this.__numPasses = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__cacheObject: null
	,__numPasses: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceBitmapData,destBitmapData,sourceRect,destPoint) {
	}
	,__initShader: function(renderSession,pass) {
		return renderSession.shaderManager.defaultShader;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uImage0, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		this.get_data().uTextureSize.value = [this.get_data().uImage0.input.width,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.set_quality(quality);
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	blurX: null
	,blurY: null
	,quality: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__initShader: function(renderSession,pass) {
		var data = openfl_filters_BlurFilter.__blurShader.get_data();
		if(pass <= this.horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			data.uRadius.value[0] = this.blurX * scale;
			data.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.horizontalPasses >> 1);
			data.uRadius.value[0] = 0;
			data.uRadius.value[1] = this.blurY * scale1;
		}
		return openfl_filters_BlurFilter.__blurShader;
	}
	,set_quality: function(value) {
		this.horizontalPasses = this.blurX <= 0?0:Math.round(this.blurX * (value / 4)) + 1;
		this.verticalPasses = this.blurY <= 0?0:Math.round(this.blurY * (value / 4)) + 1;
		this.__numPasses = this.horizontalPasses + this.verticalPasses;
		return this.quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.get_data().uOffsets.value = [0,0,0,0];
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype,{
	init: function(matrix) {
		var multipliers = this.get_data().uMultipliers.value;
		var offsets = this.get_data().uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numPasses = 0;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.matrix);
	}
	,__applyFilter: function(sourceBitmapData,destBitmapData,sourceRect,destPoint) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(destBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(destBitmapData.image);
		var source = sourceBitmapData.image.get_data();
		var target = destBitmapData.image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var targetStride = destBitmapData.width * 4;
		var sourceOffset;
		var targetOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				targetOffset = (row + offsetX) * targetStride + (column + offsetY) * 4;
				var srcR = source[sourceOffset];
				var srcG = source[sourceOffset + 1];
				var srcB = source[sourceOffset + 2];
				var srcA = source[sourceOffset + 3];
				target[targetOffset] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[0] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[1] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[2] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[3] + this.matrix[4] | 0;
				target[targetOffset + 1] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[5] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[6] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[7] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[8] + this.matrix[9] | 0;
				target[targetOffset + 2] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[10] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[11] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[12] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[13] + this.matrix[14] | 0;
				target[targetOffset + 3] = _$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[15] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[16] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[17] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[18] + this.matrix[19] | 0;
			}
		}
		destBitmapData.image.dirty = true;
	}
	,__initShader: function(renderSession,pass) {
		openfl_filters_ColorMatrixFilter.__colorMatrixShader.init(this.matrix);
		return openfl_filters_ColorMatrixFilter.__colorMatrixShader;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.set_hideObject(hideObject);
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,angle: null
	,blurX: null
	,blurY: null
	,color: null
	,distance: null
	,hideObject: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,set_knockout: function(value) {
		return this.knockout = value;
	}
	,set_hideObject: function(value) {
		return this.hideObject = value;
	}
	,set_quality: function(value) {
		return this.quality = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout",set_hideObject:"set_hideObject"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(uImage0, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(uImage0, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(uImage0, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
	this.get_data().uColor.value = [0,0,0,0];
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		this.get_data().uTextureSize.value = [this.get_data().uImage0.input.width,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.__cacheObject = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,blurX: null
	,blurY: null
	,color: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__initShader: function(renderSession,pass) {
		var data = openfl_filters_GlowFilter.__glowShader.get_data();
		if(pass <= this.horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			data.uRadius.value[0] = this.blurX * scale;
			data.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.horizontalPasses >> 1);
			data.uRadius.value[0] = 0;
			data.uRadius.value[1] = this.blurY * scale1;
		}
		data.uColor.value[0] = (this.color >> 16 & 255) / 255;
		data.uColor.value[1] = (this.color >> 8 & 255) / 255;
		data.uColor.value[2] = (this.color & 255) / 255;
		data.uColor.value[3] = this.alpha;
		return openfl_filters_GlowFilter.__glowShader;
	}
	,set_knockout: function(value) {
		return this.knockout = value;
	}
	,set_quality: function(value) {
		this.horizontalPasses = this.blurX <= 0?0:Math.round(this.blurX * (value / 4)) + 1;
		this.verticalPasses = this.blurY <= 0?0:Math.round(this.blurY * (value / 4)) + 1;
		this.__numPasses = this.horizontalPasses + this.verticalPasses;
		return this.quality = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout"}
});
var openfl_filters__$BlurShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._BlurShader_ShaderData"] = openfl_filters__$BlurShader_$ShaderData;
openfl_filters__$BlurShader_$ShaderData.__name__ = ["openfl","filters","_BlurShader_ShaderData"];
openfl_filters__$BlurShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$BlurShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurShader_$ShaderData
});
var openfl_filters__$ColorMatrixShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ColorMatrixShader_ShaderData"] = openfl_filters__$ColorMatrixShader_$ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.__name__ = ["openfl","filters","_ColorMatrixShader_ShaderData"];
openfl_filters__$ColorMatrixShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixShader_$ShaderData
});
var openfl_filters__$GlowShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._GlowShader_ShaderData"] = openfl_filters__$GlowShader_$ShaderData;
openfl_filters__$GlowShader_$ShaderData.__name__ = ["openfl","filters","_GlowShader_ShaderData"];
openfl_filters__$GlowShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$GlowShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,uColor: null
	,__class__: openfl_filters__$GlowShader_$ShaderData
});
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			var _this = this.__displayObject;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
			return new openfl_geom_Matrix3D(vector);
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.get(5),value.rawData.get(4)) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.get(0);
			this.__displayObject.__transform.b = value.rawData.get(1);
			this.__displayObject.__transform.c = value.rawData.get(5);
			this.__displayObject.__transform.d = value.rawData.get(6);
			this.__displayObject.__transform.tx = value.rawData.get(12);
			this.__displayObject.__transform.ty = value.rawData.get(13);
			var _this = this.__displayObject;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		var tmp;
		if(defaultLibrary != null) {
			var _this = defaultLibrary.cachedAudioBuffers;
			var key = this.url;
			if(__map_reserved[key] != null) {
				tmp = _this.existsReserved(key);
			} else {
				tmp = _this.h.hasOwnProperty(key);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = defaultLibrary.cachedAudioBuffers;
			var key1 = this.url;
			this.AudioBuffer_onURLLoad(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]);
		} else {
			lime_audio_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) {
			forcePlayAsMusic = false;
		}
		this.__buffer = lime_audio_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		this.__buffer = lime_audio_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_audio_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"}
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) {
			throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,__connection: null
	,__timer: null
	,__video: null
	,close: function() {
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(time) {
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__playStatus: function(code) {
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	if(localPath == null) {
		localPath = window.location.href;
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		openfl_Lib.application.onExit.add(openfl_net_SharedObject.application_onExit);
	}
	var id = localPath + "/" + name;
	var _this = openfl_net_SharedObject.__sharedObjects;
	if(!(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id))) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
			}
		}
		var _this1 = openfl_net_SharedObject.__sharedObjects;
		if(__map_reserved[id] != null) {
			_this1.setReserved(id,sharedObject);
		} else {
			_this1.h[id] = sharedObject;
		}
	}
	var _this2 = openfl_net_SharedObject.__sharedObjects;
	return __map_reserved[id] != null?_this2.getReserved(id):_this2.h[id];
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) {
		secure = false;
	}
	if(persistence == null) {
		persistence = false;
	}
	openfl_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 230, className : "openfl.net.SharedObject", methodName : "getRemote"});
	return null;
};
openfl_net_SharedObject.__mkdir = function(directory) {
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var _this = openfl_net_SharedObject.__sharedObjects;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) tmp.next().flush();
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,fps: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 96, className : "openfl.net.SharedObject", methodName : "connect"});
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return 1;
		}
		return 0;
	}
	,send: function($arguments) {
		openfl_Lib.notImplemented({ fileName : "SharedObject.hx", lineNumber : 239, className : "openfl.net.SharedObject", methodName : "send"});
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) {
			this.data[propertyName] = value;
		}
	}
	,get_size: function() {
		try {
			return haxe_io_Bytes.ofString(haxe_Serializer.run(this.data)).length;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$ = {};
$hxClasses["openfl.net._SharedObjectFlushStatus.SharedObjectFlushStatus_Impl_"] = openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.__name__ = ["openfl","net","_SharedObjectFlushStatus","SharedObjectFlushStatus_Impl_"];
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.fromString = function(value) {
	switch(value) {
	case "flushed":
		return 0;
	case "pending":
		return 1;
	default:
		return null;
	}
};
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "flushed";
	case 1:
		return "pending";
	default:
		return null;
	}
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.data = data;
				_gthis.dispatchEvent(new openfl_events_Event("complete"));
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.data = data1;
				_gthis.dispatchEvent(new openfl_events_Event("complete"));
			});
		}
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		var tmp;
		switch(_g) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var value = Reflect.field(request.data,field);
					var _this = this.__httpRequest.formData;
					if(__map_reserved[field] != null) {
						_this.setReserved(field,value);
					} else {
						_this.h[field] = value;
					}
				}
			} else if(js_Boot.__instanceof(request.data,haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.userAgent = request.userAgent;
	}
	,httpRequest_onError: function(error) {
		if(error == 403) {
			this.dispatchEvent(new openfl_events_SecurityErrorEvent("securityError"));
		} else {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(source) {
	if(source != null) {
		this.decode(source);
	}
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) {
				var s = HxOverrides.substr(f1,0,eq);
				var field = decodeURIComponent(s.split("+").join(" "));
				var s1 = HxOverrides.substr(f1,eq + 1,null);
				this[field] = decodeURIComponent(s1.split("+").join(" "));
			} else if(eq != 0) {
				this[decodeURIComponent(f1.split("+").join(" "))] = "";
			}
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var tmp = encodeURIComponent(f) + "=";
			var s = Reflect.field(this,f);
			result.push(tmp + encodeURIComponent(s));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl_system_Capabilities;
openfl_system_Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl_system_Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_language:"get_language"}
openfl_system_Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl_system_Capabilities.get_language = function() {
	var language = lime_system__$Locale_Locale_$Impl_$.get_language(lime_system__$Locale_Locale_$Impl_$.get_currentLocale());
	if(language != null) {
		language = language.toLowerCase();
		switch(language) {
		case "cs":case "da":case "de":case "en":case "es":case "fi":case "fr":case "hu":case "it":case "ja":case "ko":case "nb":case "nl":case "pl":case "pt":case "ru":case "sv":case "tr":
			return language;
		case "zh":
			var region = lime_system__$Locale_Locale_$Impl_$.get_region(lime_system__$Locale_Locale_$Impl_$.get_currentLocale());
			if(region != null) {
				switch(region.toUpperCase()) {
				case "HANT":case "TW":
					return "zh-TW";
				default:
				}
			}
			return "zh-CN";
		default:
			return "xu";
		}
	}
	return "en";
};
openfl_system_Capabilities.get_os = function() {
	return "HTML5";
};
openfl_system_Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl_system_Capabilities.get_screenDPI = function() {
	var $window = openfl_Lib.application.__windows[0];
	if($window != null) {
		var display = $window.get_display();
		if(display != null) {
			return display.dpi;
		}
	}
	return 0;
};
openfl_system_Capabilities.get_screenResolutionX = function() {
	var stage = openfl_Lib.current.stage;
	var resolutionX = 0;
	if(stage.window != null) {
		var display = stage.window.get_display();
		if(display != null) {
			resolutionX = display.currentMode.width;
		}
	}
	if(resolutionX > 0) {
		return resolutionX;
	}
	return stage.stageWidth;
};
openfl_system_Capabilities.get_screenResolutionY = function() {
	var stage = openfl_Lib.current.stage;
	var resolutionY = 0;
	if(stage.window != null) {
		var display = stage.window.get_display();
		if(display != null) {
			resolutionY = display.currentMode.height;
		}
	}
	if(resolutionY > 0) {
		return resolutionY;
	}
	return stage.stageHeight;
};
openfl_system_Capabilities.get_version = function() {
	var value = "WEB";
	value = "WEB" + (" " + StringTools.replace("4.5.2",".",",") + ",0");
	return value;
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl_Lib.notImplemented({ fileName : "System.hx", lineNumber : 40, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl_Lib.notImplemented({ fileName : "System.hx", lineNumber : 47, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_system__$TouchscreenType_TouchscreenType_$Impl_$ = {};
$hxClasses["openfl.system._TouchscreenType.TouchscreenType_Impl_"] = openfl_system__$TouchscreenType_TouchscreenType_$Impl_$;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.__name__ = ["openfl","system","_TouchscreenType","TouchscreenType_Impl_"];
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "finger":
		return 0;
	case "none":
		return 1;
	case "stylus":
		return 2;
	default:
		return null;
	}
};
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "finger";
	case 1:
		return "none";
	case 2:
		return "stylus";
	default:
		return null;
	}
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
	}
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__tabEnabled = true;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		this.__text += text;
		var tmp = this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1);
		tmp.end = this.__text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return null;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) x += group.advances[_g3++];
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i = _g3++;
						advance += group.advances[i];
						if(x <= group.offsetX + advance) {
							return group.startIndex + i;
						}
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return 0;
		}
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) {
				startIndex = index + 1;
			} else if(index > charIndex) {
				break;
			}
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return 0;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) {
					format = group.format.clone();
				} else {
					if(group.format.font != format.font) {
						format.font = null;
					}
					if(group.format.size != format.size) {
						format.size = null;
					}
					if(group.format.color != format.color) {
						format.color = null;
					}
					if(group.format.bold != format.bold) {
						format.bold = null;
					}
					if(group.format.italic != format.italic) {
						format.italic = null;
					}
					if(group.format.underline != format.underline) {
						format.underline = null;
					}
					if(group.format.url != format.url) {
						format.url = null;
					}
					if(group.format.target != format.target) {
						format.target = null;
					}
					if(group.format.align != format.align) {
						format.align = null;
					}
					if(group.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group.format.indent != format.indent) {
						format.indent = null;
					}
					if(group.format.leading != format.leading) {
						format.leading = null;
					}
					if(group.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex?this.__caretIndex:this.__selectionIndex;
		this.replaceText(startIndex,this.__caretIndex > this.__selectionIndex?this.__caretIndex:this.__selectionIndex,value);
		var i = startIndex + value.length;
		this.setSelection(i,i);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) {
			return;
		}
		this.__updateText(this.__text.substring(0,beginIndex) + newText + this.__text.substring(endIndex));
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					this.__textEngine.textFormatRanges.splice(i,1);
				} else {
					range.start = 0;
					range.end = 0;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(format.font != null) {
			this.__textFormat.font = format.font;
		}
		if(format.size != null) {
			this.__textFormat.size = format.size;
		}
		if(format.color != null) {
			this.__textFormat.color = format.color;
		}
		if(format.bold != null) {
			this.__textFormat.bold = format.bold;
		}
		if(format.italic != null) {
			this.__textFormat.italic = format.italic;
		}
		if(format.underline != null) {
			this.__textFormat.underline = format.underline;
		}
		if(format.url != null) {
			this.__textFormat.url = format.url;
		}
		if(format.target != null) {
			this.__textFormat.target = format.target;
		}
		if(format.align != null) {
			this.__textFormat.align = format.align;
		}
		if(format.leftMargin != null) {
			this.__textFormat.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.__textFormat.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.__textFormat.indent = format.indent;
		}
		if(format.leading != null) {
			this.__textFormat.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.__textFormat.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.__textFormat.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.__textFormat.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.__textFormat.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.__textFormat.tabStops = format.tabStops;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = Math.round(symbol.fontHeight / 20);
		var tmp = swf.symbols.h[symbol.fontID] != null;
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g1 = 0;
				var _g11 = openfl_text_Font.enumerateFonts();
				while(_g1 < _g11.length) {
					var font = _g11[_g1];
					++_g1;
					if(font.name == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else {
			lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 666, className : "openfl.text.TextField", methodName : "__fromSymbol"});
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
			if(this.get_embedFonts()) {
				format.leading += 4;
			}
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getAttributeMatch: function(regex) {
		if(regex.matched(2) != null) {
			return regex.matched(2);
		} else {
			return regex.matched(3);
		}
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		} else {
			return null;
		}
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.get(_g1++);
		if(y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.get_length();
		while(_g11 < _g2) {
			var i = _g11++;
			group = this.__textEngine.layoutGroups.get(i);
			if(i < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i1]) + group.advances[i1] / 2) {
								return group.startIndex + i1;
							} else if(group.startIndex + i1 < group.endIndex) {
								return group.startIndex + i1 + 1;
							} else {
								return group.endIndex;
							}
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(px,norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(px,norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				var transform = graphics.__renderTransform;
				if(renderSession.roundPixels) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.get_length()) {
						var group = _g11.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.advances.length <= i1) {
											break;
										}
										advance += group.advances[i1];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY1 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i2 = _g12++;
							scrollY1 -= textEngine.lineHeights.get(i2);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(this.get_defaultTextFormat().color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		var textField = this;
		var textEngine = textField.__textEngine;
		if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
			if(textField.__dirty || textField.__div == null) {
				if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
					if(textField.__div == null) {
						textField.__div = window.document.createElement("div");
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
						textField.__style.setProperty("outline","none",null);
						textField.__div.addEventListener("input",function(event) {
							event.preventDefault();
							if(textField.get_htmlText() != textField.__div.innerHTML) {
								textField.set_htmlText(textField.__div.innerHTML);
								textField.__dirty = false;
							}
						},true);
					}
					if(!textEngine.multiline) {
						textField.__style.setProperty("white-space","nowrap",null);
					} else {
						textField.__style.setProperty("word-wrap","break-word",null);
					}
					textField.__style.setProperty("overflow","hidden",null);
					if(textEngine.selectable) {
						textField.__style.setProperty("cursor","text",null);
					} else {
						textField.__style.setProperty("cursor","inherit",null);
					}
					textField.__div.contentEditable = textEngine.type == 1;
					var style = textField.__style;
					textField.__div.innerHTML = textEngine.text.replace(new RegExp("\n","g".split("u").join("")),"<br>");
					if(textEngine.background) {
						style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null);
					} else {
						style.removeProperty("background-color");
					}
					if(textEngine.border) {
						style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null);
					} else {
						style.removeProperty("border");
					}
					style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
					style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
					if(textEngine.autoSize != 2) {
						style.setProperty("width","auto",null);
					} else {
						style.setProperty("width",textEngine.width + "px",null);
					}
					style.setProperty("height",textEngine.height + "px",null);
					switch(textField.__textFormat.align) {
					case 0:
						style.setProperty("text-align","center",null);
						break;
					case 4:
						style.setProperty("text-align","right",null);
						break;
					default:
						style.setProperty("text-align","left",null);
					}
					textField.__dirty = false;
				} else if(textField.__div != null) {
					renderSession.element.removeChild(textField.__div);
					textField.__div = null;
				}
			}
			if(textField.__div != null) {
				openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
				openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
			}
		} else if(textField.__div != null) {
			renderSession.element.removeChild(textField.__div);
			textField.__div = null;
			textField.__style = null;
		}
	}
	,__renderGL: function(renderSession) {
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				var transform = graphics.__renderTransform;
				if(renderSession.roundPixels) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) scrollY -= textEngine.lineHeights.get(_g1++);
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.get_length()) {
						var group = _g11.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i = _g3++;
										if(group.advances.length <= i) {
											break;
										}
										advance += group.advances[i];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY1 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) scrollY1 -= textEngine.lineHeights.get(_g12++);
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(this.get_defaultTextFormat().color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						var _g = this;
						_g.set_x(_g.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateText: function(value) {
		this.__text = value;
		if(this.__text.length < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = this.__text.length;
		}
		if(!this.__displayAsPassword) {
			this.__textEngine.text = this.__text;
		} else {
			var length = this.get_text().length;
			var mask = "";
			var _g1 = 0;
			while(_g1 < length) {
				++_g1;
				mask += "*";
			}
			this.__textEngine.text = mask;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = value.replace(openfl_text_TextField.__regexBreakTag.r,"\n");
			value = value.replace(openfl_text_TextField.__regexEntities[0].r,"\"");
			value = value.replace(openfl_text_TextField.__regexEntities[1].r,"'");
			value = value.replace(openfl_text_TextField.__regexEntities[2].r,"&");
			var segments = value.split("<");
			if(segments.length == 1) {
				value = value.replace(openfl_text_TextField.__regexHTMLTag.r,"");
				if(this.__textEngine.textFormatRanges.get_length() > 1) {
					this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
				}
				value = value.replace(openfl_text_TextField.__regexEntities[3].r,"<");
				value = value.replace(openfl_text_TextField.__regexEntities[4].r,">");
				var range = this.__textEngine.textFormatRanges.get(0);
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				this.__updateText(value);
				return value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.get_length());
				value = "";
				var segment;
				var _g1 = 0;
				var _g = segments.length;
				while(_g1 < _g) {
					var i = _g1++;
					segment = segments[i];
					segment = segment.replace(openfl_text_TextField.__regexEntities[3].r,"<");
					segment = segment.replace(openfl_text_TextField.__regexEntities[4].r,">");
					segments[i] = segment;
				}
				var formatStack = [this.__textFormat.clone()];
				var sub;
				var noLineBreak = false;
				var _g2 = 0;
				while(_g2 < segments.length) {
					var segment1 = segments[_g2];
					++_g2;
					if(segment1 == "") {
						continue;
					}
					var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
					var tagEndIndex = segment1.indexOf(">");
					var start = tagEndIndex + 1;
					var spaceIndex = segment1.indexOf(" ");
					var tagName = segment1.substring(isClosingTag?1:0,spaceIndex > -1 && spaceIndex < tagEndIndex?spaceIndex:tagEndIndex);
					var format;
					if(isClosingTag) {
						formatStack.pop();
						format = formatStack[formatStack.length - 1].clone();
						if(tagName.toLowerCase() == "p" && this.__textEngine.textFormatRanges.get_length() > 0) {
							value += "\n";
							noLineBreak = true;
						}
						if(start < segment1.length) {
							sub = HxOverrides.substr(segment1,start,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
							value += sub;
							noLineBreak = false;
						}
					} else {
						format = formatStack[formatStack.length - 1].clone();
						if(tagEndIndex > -1) {
							switch(tagName.toLowerCase()) {
							case "b":
								format.bold = true;
								break;
							case "em":case "i":
								format.italic = true;
								break;
							case "font":
								if(openfl_text_TextField.__regexFace.match(segment1)) {
									format.font = this.__getAttributeMatch(openfl_text_TextField.__regexFace);
								}
								if(openfl_text_TextField.__regexColor.match(segment1)) {
									format.color = Std.parseInt("0x" + this.__getAttributeMatch(openfl_text_TextField.__regexColor));
								}
								if(openfl_text_TextField.__regexSize.match(segment1)) {
									var sizeAttr = this.__getAttributeMatch(openfl_text_TextField.__regexSize);
									var firstChar = HxOverrides.cca(sizeAttr,0);
									if(firstChar == 43 || firstChar == 45) {
										format.size = (formatStack.length >= 2?formatStack[formatStack.length - 2]:this.__textFormat).size + Std.parseInt(sizeAttr);
									} else {
										format.size = Std.parseInt(sizeAttr);
									}
								}
								break;
							case "p":
								if(this.__textEngine.textFormatRanges.get_length() > 0 && !noLineBreak) {
									value += "\n";
								}
								if(openfl_text_TextField.__regexAlign.match(segment1)) {
									format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(this.__getAttributeMatch(openfl_text_TextField.__regexAlign).toLowerCase());
								}
								break;
							case "textformat":
								if(openfl_text_TextField.__regexBlockIndent.match(segment1)) {
									format.blockIndent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexBlockIndent));
								}
								if(openfl_text_TextField.__regexIndent.match(segment1)) {
									format.indent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexIndent));
								}
								if(openfl_text_TextField.__regexLeading.match(segment1)) {
									format.leading = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeading));
								}
								if(openfl_text_TextField.__regexLeftMargin.match(segment1)) {
									format.leftMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeftMargin));
								}
								if(openfl_text_TextField.__regexRightMargin.match(segment1)) {
									format.rightMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexRightMargin));
								}
								if(openfl_text_TextField.__regexTabStops.match(segment1)) {
									var values = this.__getAttributeMatch(openfl_text_TextField.__regexTabStops).split(" ");
									var tabStops = [];
									var _g11 = 0;
									while(_g11 < values.length) {
										var stop = values[_g11];
										++_g11;
										tabStops.push(Std.parseInt(stop));
									}
									format.tabStops = tabStops;
								}
								break;
							case "u":
								format.underline = true;
								break;
							}
							formatStack.push(format);
							if(start < segment1.length) {
								sub = segment1.substring(start);
								this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
								value += sub;
								noLineBreak = false;
							}
						} else {
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length));
							value += segment1;
							noLineBreak = false;
						}
					}
				}
				if(this.__textEngine.textFormatRanges.get_length() == 0) {
					this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(formatStack[0],0,0));
				}
			}
		}
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return this.__text.length;
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
		}
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
		}
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var range = _g1.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.removeEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.get_scaleX());
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.get_scaleX());
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var _this = this.__worldTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			var _this1 = this.__worldTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				this.__caretIndex = this.__text.length;
				this.__selectionIndex = 0;
			}
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
			}
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__text.length) {
					this.__caretIndex++;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__text.length) {
						this.__caretIndex++;
					}
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) {
					this.__caretIndex--;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) {
						this.__caretIndex--;
					}
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\n");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var device = new openfl_ui_GameInputDevice(lime_ui_Joystick.__getDeviceData()[gamepad.id].id,lime_ui_Joystick.__getDeviceData()[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var tmp;
			switch(axis) {
			case 0:
				tmp = "LEFT_X";
				break;
			case 1:
				tmp = "LEFT_Y";
				break;
			case 2:
				tmp = "RIGHT_X";
				break;
			case 3:
				tmp = "RIGHT_Y";
				break;
			case 4:
				tmp = "TRIGGER_LEFT";
				break;
			case 5:
				tmp = "TRIGGER_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + axis + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"AXIS_" + tmp,-1,1);
			device.__axis.h[axis] = control;
			device.__controls.push(control);
		}
		var control1 = device.__axis.h[axis];
		control1.value = value;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var tmp;
			switch(button) {
			case 0:
				tmp = "A";
				break;
			case 1:
				tmp = "B";
				break;
			case 2:
				tmp = "X";
				break;
			case 3:
				tmp = "Y";
				break;
			case 4:
				tmp = "BACK";
				break;
			case 5:
				tmp = "GUIDE";
				break;
			case 6:
				tmp = "START";
				break;
			case 7:
				tmp = "LEFT_STICK";
				break;
			case 8:
				tmp = "RIGHT_STICK";
				break;
			case 9:
				tmp = "LEFT_SHOULDER";
				break;
			case 10:
				tmp = "RIGHT_SHOULDER";
				break;
			case 11:
				tmp = "DPAD_UP";
				break;
			case 12:
				tmp = "DPAD_DOWN";
				break;
			case 13:
				tmp = "DPAD_LEFT";
				break;
			case 14:
				tmp = "DPAD_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + button + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"BUTTON_" + tmp,0,1);
			device.__button.h[button] = control;
			device.__controls.push(control);
		}
		var control1 = device.__button.h[button];
		control1.value = 1;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var tmp;
			switch(button) {
			case 0:
				tmp = "A";
				break;
			case 1:
				tmp = "B";
				break;
			case 2:
				tmp = "X";
				break;
			case 3:
				tmp = "Y";
				break;
			case 4:
				tmp = "BACK";
				break;
			case 5:
				tmp = "GUIDE";
				break;
			case 6:
				tmp = "START";
				break;
			case 7:
				tmp = "LEFT_STICK";
				break;
			case 8:
				tmp = "RIGHT_STICK";
				break;
			case 9:
				tmp = "LEFT_SHOULDER";
				break;
			case 10:
				tmp = "RIGHT_SHOULDER";
				break;
			case 11:
				tmp = "DPAD_UP";
				break;
			case 12:
				tmp = "DPAD_DOWN";
				break;
			case 13:
				tmp = "DPAD_LEFT";
				break;
			case 14:
				tmp = "DPAD_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + button + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"BUTTON_" + tmp,0,1);
			device.__button.h[button] = control;
			device.__controls.push(control);
		}
		var control1 = device.__button.h[button];
		control1.value = 0;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"}
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	switch(value) {
	case "arrow":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		break;
	case "button":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.POINTER);
		break;
	case "hand":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.MOVE);
		break;
	case "ibeam":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.TEXT);
		break;
	default:
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"}
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) {
		return true;
	}
	return false;
};
var openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$ = {};
$hxClasses["openfl.ui._MultitouchInputMode.MultitouchInputMode_Impl_"] = openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.__name__ = ["openfl","ui","_MultitouchInputMode","MultitouchInputMode_Impl_"];
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "gesture":
		return 0;
	case "none":
		return 1;
	case "touchPoint":
		return 2;
	default:
		return null;
	}
};
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "gesture";
	case 1:
		return "none";
	case 2:
		return "touchPoint";
	default:
		return null;
	}
};
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.__r = new haxe_ds_StringMap();
	this.__cur = new openfl__$internal_stage3D_assembler_Part();
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = ["openfl","utils","AGALMiniAssembler"];
openfl_utils_AGALMiniAssembler.prototype = {
	agalcode: null
	,error: null
	,__cur: null
	,__debugEnabled: null
	,__r: null
	,assemble: function(programType,source) {
		var agalMiniAssembler = new openfl_utils_AGALMiniAssembler();
		var data = null;
		var concatSource;
		switch(programType) {
		case 0:
			concatSource = "part fragment 1 \n" + source + "endpart";
			agalMiniAssembler.__assemble(concatSource);
			var _this = agalMiniAssembler.__r;
			data = (__map_reserved.fragment != null?_this.getReserved("fragment"):_this.h["fragment"]).data;
			break;
		case 1:
			concatSource = "part vertex 1 \n" + source + "endpart";
			agalMiniAssembler.__assemble(concatSource);
			var _this1 = agalMiniAssembler.__r;
			data = (__map_reserved.vertex != null?_this1.getReserved("vertex"):_this1.h["vertex"]).data;
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown Context3DProgramType");
		}
		return this.agalcode = data;
	}
	,__addHeader: function(partname,version) {
		if(version == 0) {
			version = 1;
		}
		var _this = this.__r;
		if(!(__map_reserved[partname] != null?_this.existsReserved(partname):_this.h.hasOwnProperty(partname))) {
			var value = new openfl__$internal_stage3D_assembler_Part(partname,version);
			var _this1 = this.__r;
			if(__map_reserved[partname] != null) {
				_this1.setReserved(partname,value);
			} else {
				_this1.h[partname] = value;
			}
			var _this2 = this.__r;
			this.__emitHeader(__map_reserved[partname] != null?_this2.getReserved(partname):_this2.h[partname]);
		} else {
			var _this3 = this.__r;
			if((__map_reserved[partname] != null?_this3.getReserved(partname):_this3.h[partname]).version != (version | 0)) {
				throw new js__$Boot_HaxeError("Multiple versions for part " + partname);
			}
		}
		var _this4 = this.__r;
		this.__cur = __map_reserved[partname] != null?_this4.getReserved(partname):_this4.h[partname];
	}
	,__assemble: function(source,ext_part,ext_version) {
		if(ext_version == 0) {
			ext_version = 1;
		}
		if(ext_part != null) {
			this.__addHeader(ext_part,ext_version);
		}
		var lines = new EReg("[\n\r]+","g").split(source);
		var _g1 = 0;
		var _g = lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__processLine(lines[i],i);
		}
		return this.__r;
	}
	,__emitDest: function(pr,token,opdest) {
		var reg = this.__getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
		var _this = openfl__$internal_stage3D_assembler_RegMap.get_map();
		var key = reg[1];
		if((__map_reserved[key] != null?_this.getReserved(key):_this.h[key]) == null) {
			return false;
		}
		if(Std.parseInt(reg[2]) == null) {
			reg[2] = "0";
		}
		var em_num = reg[2] != null?reg[2]:"0";
		var _this1 = openfl__$internal_stage3D_assembler_RegMap.get_map();
		var key1 = reg[1];
		var em_code = (__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]).code;
		var em_mask = this.__stringToMask(reg[3]);
		pr.data.writeShort(Std.parseInt(em_num));
		pr.data.writeByte(em_mask);
		pr.data.writeByte(em_code);
		return true;
	}
	,__emitHeader: function(pr) {
		pr.data.writeByte(160);
		pr.data.writeUnsignedInt(pr.version);
		if(pr.version >= 16) {
			pr.data.writeByte(0);
		}
		pr.data.writeByte(161);
		switch(pr.name) {
		case "cpu":
			pr.data.writeByte(2);
			break;
		case "fragment":
			pr.data.writeByte(1);
			break;
		case "vertex":
			pr.data.writeByte(0);
			break;
		default:
			pr.data.writeByte(255);
		}
	}
	,__emitOpcode: function(pr,opcode) {
		pr.data.writeUnsignedInt(opcode);
	}
	,__emitSampler: function(pr,token,opsrc,opts) {
		var reg = this.__getGroupMatches(new EReg("fs(\\d*)","i"),token,1);
		if(reg.length < 1) {
			return false;
		}
		pr.data.writeShort(Std.parseInt(reg[1]));
		pr.data.writeByte(0);
		pr.data.writeByte(0);
		var samplerbits = 5;
		var sampleroptset = 0;
		var _g1 = 0;
		var _g = opts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = openfl__$internal_stage3D_assembler_SamplerMap.get_map();
			var key = opts[i].toLowerCase();
			var o = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			if(o != null) {
				if((sampleroptset >>> o.shift & o.mask) != 0) {
					haxe_Log.trace("Warning, duplicate sampler option",{ fileName : "AGALMiniAssembler.hx", lineNumber : 209, className : "openfl.utils.AGALMiniAssembler", methodName : "__emitSampler"});
				}
				sampleroptset = sampleroptset | o.mask << o.shift;
				samplerbits = samplerbits & ~(o.mask << o.shift);
				samplerbits = samplerbits | o.value << o.shift;
			}
		}
		pr.data.writeUnsignedInt(samplerbits);
		return true;
	}
	,__emitSource: function(pr,token,opsrc) {
		var indexed = this.__getGroupMatches(new EReg("vc\\[(v[tcai])(\\d+)\\.([xyzw])([\\+\\-]\\d+)?\\](\\.[xyzw]{1,4})?","i"),token,5);
		var reg;
		if(indexed.length > 0) {
			var _this = openfl__$internal_stage3D_assembler_RegMap.get_map();
			var key = indexed[1];
			if((__map_reserved[key] != null?_this.getReserved(key):_this.h[key]) == null) {
				return false;
			}
			var selindex = { x : 0, y : 1, z : 2, w : 3};
			var tmp = Std.parseInt(indexed[2]) | 0;
			var _this1 = openfl__$internal_stage3D_assembler_RegMap.get_map();
			var key1 = indexed[1];
			var tmp1 = (__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]).code;
			var tmp2 = this.__stringToSwizzle(indexed[5]);
			var field = indexed[3];
			var tmp3;
			var tmp4;
			if(selindex == null) {
				tmp4 = null;
			} else {
				var tmp5;
				if(selindex.__properties__) {
					tmp3 = selindex.__properties__["get_" + field];
					tmp5 = tmp3;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = selindex[tmp3]();
				} else {
					tmp4 = selindex[field];
				}
			}
			var em = { num : tmp, code : tmp1, swizzle : tmp2, select : tmp4, offset : Std.parseInt(indexed[4]) | 0};
			pr.data.writeShort(em.num);
			pr.data.writeByte(em.offset);
			pr.data.writeByte(em.swizzle);
			pr.data.writeByte(1);
			pr.data.writeByte(em.code);
			pr.data.writeByte(em.select);
			pr.data.writeByte(128);
		} else {
			reg = this.__getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
			var _this2 = openfl__$internal_stage3D_assembler_RegMap.get_map();
			var key2 = reg[1];
			if((__map_reserved[key2] != null?_this2.getReserved(key2):_this2.h[key2]) == null) {
				return false;
			}
			if(reg.length < 4) {
				reg.push("");
			}
			var tmp6 = Std.parseInt(reg[2]) | 0;
			var _this3 = openfl__$internal_stage3D_assembler_RegMap.get_map();
			var key3 = reg[1];
			var em1 = { num : tmp6, code : (__map_reserved[key3] != null?_this3.getReserved(key3):_this3.h[key3]).code, swizzle : this.__stringToSwizzle(reg[3])};
			pr.data.writeShort(em1.num);
			pr.data.writeByte(0);
			pr.data.writeByte(em1.swizzle);
			pr.data.writeByte(em1.code);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
		}
		return true;
	}
	,__emitZeroDword: function(pr) {
		pr.data.writeUnsignedInt(0);
	}
	,__emitZeroQword: function(pr) {
		pr.data.writeUnsignedInt(0);
		pr.data.writeUnsignedInt(0);
	}
	,__getGroupMatches: function(ereg,text,groupCount) {
		if(groupCount == null) {
			groupCount = 0;
		}
		var matches = [];
		if(!ereg.match(text)) {
			return matches;
		}
		var m = 0;
		var t = null;
		var completed = false;
		while(true) {
			var tmp;
			if(!completed) {
				t = ereg.matched(m++);
				tmp = t != null;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			matches.push(t);
			if(groupCount != 0 && _$UInt_UInt_$Impl_$.gt(m,groupCount)) {
				completed = true;
			}
		}
		return matches;
	}
	,__getMatches: function(ereg,text) {
		var matches = [];
		while(ereg.match(text)) {
			matches.push(ereg.matched(1));
			text = ereg.matchedRight();
		}
		return matches;
	}
	,__processLine: function(line,linenr) {
		var startcomment = line.indexOf("//");
		if(startcomment != -1) {
			line = line.substring(0,startcomment);
		}
		var r = new EReg("^\\s+|\\s+$","g");
		line = line.replace(r.r,"");
		if(line.length <= 0) {
			return;
		}
		r = new EReg("<.*>","g");
		var optsb = r.match(line);
		var opts = null;
		if(optsb) {
			var optsi = r.matchedPos().pos;
			opts = this.__getMatches(new EReg("([\\w\\.\\-\\+]+)","gi"),line.substring(optsi));
			line = line.substring(0,optsi);
		}
		var tokens = this.__getMatches(new EReg("([\\w\\.\\+\\[\\]]+)","gi"),line);
		if(tokens.length == 0) {
			if(line.length >= 3) {
				haxe_Log.trace("Warning: bad line " + Std.string(_$UInt_UInt_$Impl_$.toFloat(linenr)) + ": " + line,{ fileName : "AGALMiniAssembler.hx", lineNumber : 385, className : "openfl.utils.AGALMiniAssembler", methodName : "__processLine"});
			}
			return;
		}
		switch(tokens[0]) {
		case "endpart":
			if(this.__cur == null) {
				throw new js__$Boot_HaxeError("Unexpected endpart");
			}
			this.__cur.data.position = 0;
			this.__cur = null;
			return;
		case "part":
			this.__addHeader(tokens[1],Std.parseInt(tokens[2]));
			break;
		default:
			if(this.__cur == null) {
				haxe_Log.trace("Warning: bad line " + Std.string(_$UInt_UInt_$Impl_$.toFloat(linenr)) + ": " + line + " (Outside of any part definition)",{ fileName : "AGALMiniAssembler.hx", lineNumber : 416, className : "openfl.utils.AGALMiniAssembler", methodName : "__processLine"});
				return;
			}
			if(this.__cur.name == "comment") {
				return;
			}
			var op = openfl__$internal_stage3D_assembler_OpcodeMap.get_map().get(tokens[0]);
			if(op == null) {
				throw new js__$Boot_HaxeError("Bad opcode " + tokens[0] + " " + Std.string(_$UInt_UInt_$Impl_$.toFloat(linenr)) + ": " + line);
			}
			this.__emitOpcode(this.__cur,op.opcode);
			var ti = 1;
			if(op.dest != null && op.dest != "none") {
				ti = 2;
				if(!this.__emitDest(this.__cur,tokens[1],op.dest)) {
					throw new js__$Boot_HaxeError("Bad destination register " + tokens[1] + " " + Std.string(_$UInt_UInt_$Impl_$.toFloat(linenr)) + ": " + line);
				}
			} else {
				this.__emitZeroDword(this.__cur);
			}
			if(op.a != null && op.a.format != "none") {
				if(!this.__emitSource(this.__cur,tokens[ti++],op.a)) {
					throw new js__$Boot_HaxeError("Bad source register " + tokens[ti - 1] + " " + Std.string(_$UInt_UInt_$Impl_$.toFloat(linenr)) + ": " + line);
				}
			} else {
				this.__emitZeroQword(this.__cur);
			}
			if(op.b != null && op.b.format != "none") {
				if(op.b.format == "sampler") {
					if(!this.__emitSampler(this.__cur,tokens[ti++],op.b,opts)) {
						throw new js__$Boot_HaxeError("Bad sampler register " + tokens[ti - 1] + " " + Std.string(_$UInt_UInt_$Impl_$.toFloat(linenr)) + ": " + line);
					}
				} else if(!this.__emitSource(this.__cur,tokens[ti++],op.b)) {
					throw new js__$Boot_HaxeError("Bad source register " + tokens[ti - 1] + " " + Std.string(_$UInt_UInt_$Impl_$.toFloat(linenr)) + ": " + line);
				}
			} else {
				this.__emitZeroQword(this.__cur);
			}
		}
	}
	,__stringToMask: function(s) {
		if(s == null) {
			return 15;
		}
		var r = 0;
		if(s.indexOf("x") != -1) {
			r = 1;
		}
		if(s.indexOf("y") != -1) {
			r |= 2;
		}
		if(s.indexOf("z") != -1) {
			r |= 4;
		}
		if(s.indexOf("w") != -1) {
			r |= 8;
		}
		return r;
	}
	,__stringToSwizzle: function(s) {
		if(s == "") {
			return 228;
		}
		var chartoindex = { x : 0, y : 1, z : 2, w : 3};
		var sw = 0;
		if(s.charAt(0) != ".") {
			throw new js__$Boot_HaxeError("Missing . for swizzle");
		}
		if(s.length > 1) {
			sw = 0 | Reflect.field(chartoindex,s.charAt(1));
		}
		if(s.length > 2) {
			sw |= Reflect.field(chartoindex,s.charAt(2)) << 2;
		} else {
			sw |= (sw & 3) << 2;
		}
		if(s.length > 3) {
			sw |= Reflect.field(chartoindex,s.charAt(3)) << 4;
		} else {
			sw |= (sw & 12) << 2;
		}
		if(s.length > 4) {
			sw |= Reflect.field(chartoindex,s.charAt(4)) << 6;
		} else {
			sw |= (sw & 48) << 2;
		}
		return sw;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function(path) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromLimeBytes = function(bytes) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray)));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
	}
	this1.length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	haxe_io_Bytes.call(this,new haxe_io_Bytes(new ArrayBuffer(length)).b.buffer);
	this.__length = length;
	this.__endian = 0;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.compress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.compress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.compress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(this.__endian == 1) {
			return haxe_io_FPHelper.i64ToDouble(ch1,ch2);
		} else {
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value = this.__endian == 1?ch2 << 8 | ch1:ch1 << 8 | ch2;
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		return this.readUTFBytes(this.readUnsignedShort());
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.decompress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.decompress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.decompress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.__length;
		}
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		this.writeInt(haxe_io_FPHelper.floatToI32(value));
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			var cacheLength = this.length;
			this.length = this.__length;
			bytes.blit(0,this,0,this.__length);
			this.length = cacheLength;
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c = this1 == null?null:js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__instanceof(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var starling_animation_IAnimatable = function() { };
$hxClasses["starling.animation.IAnimatable"] = starling_animation_IAnimatable;
starling_animation_IAnimatable.__name__ = ["starling","animation","IAnimatable"];
starling_animation_IAnimatable.prototype = {
	advanceTime: null
	,__class__: starling_animation_IAnimatable
};
var starling_animation_DelayedCall = function(call,delay,args) {
	starling_events_EventDispatcher.call(this);
	this.reset(call,delay,args);
};
$hxClasses["starling.animation.DelayedCall"] = starling_animation_DelayedCall;
starling_animation_DelayedCall.__name__ = ["starling","animation","DelayedCall"];
starling_animation_DelayedCall.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_DelayedCall.fromPool = function(call,delay,args) {
	if(starling_animation_DelayedCall.sPool.get_length() != 0) {
		return starling_animation_DelayedCall.sPool.pop().reset(call,delay,args);
	} else {
		return new starling_animation_DelayedCall(call,delay,args);
	}
};
starling_animation_DelayedCall.toPool = function(delayedCall) {
	delayedCall.mCall = null;
	delayedCall.mArgs = null;
	delayedCall.removeEventListeners();
	starling_animation_DelayedCall.sPool.push(delayedCall);
};
starling_animation_DelayedCall.__super__ = starling_events_EventDispatcher;
starling_animation_DelayedCall.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mCurrentTime: null
	,mTotalTime: null
	,mCall: null
	,mArgs: null
	,mRepeatCount: null
	,reset: function(call,delay,args) {
		this.mCurrentTime = 0;
		this.mTotalTime = Math.max(delay,0.0001);
		this.mCall = call;
		this.mArgs = args;
		this.mRepeatCount = 1;
		return this;
	}
	,advanceTime: function(time) {
		var previousTime = this.mCurrentTime;
		this.mCurrentTime += time;
		if(this.mCurrentTime > this.mTotalTime) {
			this.mCurrentTime = this.mTotalTime;
		}
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				this.mCall.apply(this.mCall,this.mArgs);
				if(this.mRepeatCount > 0) {
					this.mRepeatCount -= 1;
				}
				this.mCurrentTime = 0;
				this.advanceTime(previousTime + time - this.mTotalTime);
			} else {
				var call = this.mCall;
				var args = this.mArgs;
				this.dispatchEventWith("removeFromJuggler");
				call.apply(call,args);
			}
		}
	}
	,complete: function() {
		var restTime = this.mTotalTime - this.mCurrentTime;
		if(restTime > 0) {
			this.advanceTime(restTime);
		}
	}
	,get_isComplete: function() {
		if(this.mRepeatCount == 1) {
			return this.mCurrentTime >= this.mTotalTime;
		} else {
			return false;
		}
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		return this.mRepeatCount = value;
	}
	,__class__: starling_animation_DelayedCall
	,__properties__: {set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",get_isComplete:"get_isComplete"}
});
var starling_animation_Juggler = function() {
	this.mElapsedTime = 0;
	this.mObjects = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.animation.Juggler"] = starling_animation_Juggler;
starling_animation_Juggler.__name__ = ["starling","animation","Juggler"];
starling_animation_Juggler.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_Juggler.prototype = {
	mObjects: null
	,mElapsedTime: null
	,add: function(object) {
		if(object != null && this.mObjects.indexOf(object,0) == -1) {
			this.mObjects.set(this.mObjects.get_length(),object);
			var dispatcher = js_Boot.__instanceof(object,starling_events_EventDispatcher)?object:null;
			if(dispatcher != null) {
				dispatcher.addEventListener("removeFromJuggler",$bind(this,this.onRemove));
			}
		}
	}
	,contains: function(object) {
		return this.mObjects.indexOf(object,0) != -1;
	}
	,remove: function(object) {
		if(object == null) {
			return;
		}
		var dispatcher = js_Boot.__instanceof(object,starling_events_EventDispatcher)?object:null;
		if(dispatcher != null) {
			dispatcher.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
		}
		var index = this.mObjects.indexOf(object,0);
		if(index != -1) {
			this.mObjects.set(index,null);
		}
	}
	,removeTweens: function(target) {
		if(target == null) {
			return;
		}
		var i = this.mObjects.get_length() - 1;
		while(i >= 0) {
			var tween = js_Boot.__instanceof(this.mObjects.get(i),starling_animation_Tween)?this.mObjects.get(i):null;
			if(tween != null && tween.get_target() == target) {
				tween.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
				this.mObjects.set(i,null);
			}
			--i;
		}
	}
	,containsTweens: function(target) {
		if(target == null) {
			return false;
		}
		var i = this.mObjects.get_length() - 1;
		while(i >= 0) {
			var tween = js_Boot.__instanceof(this.mObjects.get(i),starling_animation_Tween)?this.mObjects.get(i):null;
			if(tween != null && tween.get_target() == target) {
				return true;
			}
			--i;
		}
		return false;
	}
	,purge: function() {
		var i = this.mObjects.get_length() - 1;
		while(i >= 0) {
			var dispatcher = js_Boot.__instanceof(this.mObjects.get(i),starling_events_EventDispatcher)?this.mObjects.get(i):null;
			if(dispatcher != null) {
				dispatcher.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
			}
			this.mObjects.set(i,null);
			--i;
		}
	}
	,delayCall: function(call,delay,args) {
		if(call == null) {
			return null;
		}
		if(args == null) {
			args = [];
		}
		var delayedCall = starling_animation_DelayedCall.fromPool(call,delay,args);
		delayedCall.addEventListener("removeFromJuggler",$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,repeatCall: function(call,interval,repeatCount,args) {
		if(repeatCount == null) {
			repeatCount = 0;
		}
		if(call == null) {
			return null;
		}
		if(args == null) {
			args = [];
		}
		var delayedCall = starling_animation_DelayedCall.fromPool(call,interval,args);
		delayedCall.set_repeatCount(repeatCount);
		delayedCall.addEventListener("removeFromJuggler",$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,onPooledDelayedCallComplete: function(event) {
		starling_animation_DelayedCall.toPool(js_Boot.__cast(event.target , starling_animation_DelayedCall));
	}
	,tween: function(target,time,properties) {
		if(target == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("target must not be null"));
		}
		var tween = starling_animation_Tween.fromPool(target,time);
		var _g = 0;
		var _g1 = Reflect.fields(properties);
		while(_g < _g1.length) {
			var property = _g1[_g];
			++_g;
			var value = Reflect.field(properties,property);
			var tmp;
			var tmp1;
			if(tween == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(tween.__properties__) {
					tmp = tween.__properties__["get_" + property];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = tween[tmp]();
				} else {
					tmp1 = tween[property];
				}
			}
			if(tmp1 != null) {
				var tmp3;
				var tmp4;
				if(tween.__properties__) {
					tmp3 = tween.__properties__["set_" + property];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					tween[tmp3](value);
				} else {
					tween[property] = value;
				}
			} else {
				var tmp5;
				var tmp6;
				if(target == null) {
					tmp6 = null;
				} else {
					var tmp7;
					if(target.__properties__) {
						tmp5 = target.__properties__["get_" + property];
						tmp7 = tmp5;
					} else {
						tmp7 = false;
					}
					if(tmp7) {
						tmp6 = target[tmp5]();
					} else {
						tmp6 = target[property];
					}
				}
				if(tmp6 != null) {
					tween.animate(property,value);
				} else {
					throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid property: " + property));
				}
			}
		}
		tween.addEventListener("removeFromJuggler",$bind(this,this.onPooledTweenComplete));
		this.add(tween);
		return tween;
	}
	,onPooledTweenComplete: function(event) {
		starling_animation_Tween.toPool(js_Boot.__cast(event.target , starling_animation_Tween));
	}
	,advanceTime: function(time) {
		var numObjects = this.mObjects.get_length();
		var currentIndex = 0;
		var i = 0;
		this.mElapsedTime += time;
		if(numObjects == 0) {
			return;
		}
		while(i < numObjects) {
			var object = this.mObjects.get(i);
			if(object != null) {
				if(currentIndex != i) {
					this.mObjects.set(currentIndex,object);
					this.mObjects.set(i,null);
				}
				object.advanceTime(time);
				++currentIndex;
			}
			++i;
		}
		if(currentIndex != i) {
			numObjects = this.mObjects.get_length();
			while(i < numObjects) this.mObjects.set(currentIndex++,this.mObjects.get(i++));
			this.mObjects.set_length(currentIndex);
		}
	}
	,onRemove: function(event) {
		this.remove(js_Boot.__cast(event.target , starling_animation_IAnimatable));
		var tween = js_Boot.__instanceof(event.target,starling_animation_Tween)?event.target:null;
		if(tween != null && tween.get_isComplete()) {
			this.add(tween.get_nextTween());
		}
	}
	,get_elapsedTime: function() {
		return this.mElapsedTime;
	}
	,get_objects: function() {
		return this.mObjects;
	}
	,__class__: starling_animation_Juggler
	,__properties__: {get_objects:"get_objects",get_elapsedTime:"get_elapsedTime"}
};
var starling_animation_Transitions = function() { };
$hxClasses["starling.animation.Transitions"] = starling_animation_Transitions;
starling_animation_Transitions.__name__ = ["starling","animation","Transitions"];
starling_animation_Transitions.getTransition = function(name) {
	if(starling_animation_Transitions.sTransitions == null) {
		starling_animation_Transitions.registerDefaults();
	}
	var _this = starling_animation_Transitions.sTransitions;
	return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
};
starling_animation_Transitions.register = function(name,func) {
	if(starling_animation_Transitions.sTransitions == null) {
		starling_animation_Transitions.registerDefaults();
	}
	var _this = starling_animation_Transitions.sTransitions;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,func);
	} else {
		_this.h[name] = func;
	}
};
starling_animation_Transitions.registerDefaults = function() {
	starling_animation_Transitions.sTransitions = new haxe_ds_StringMap();
	starling_animation_Transitions.register("linear",starling_animation_Transitions.linear);
	starling_animation_Transitions.register("easeIn",starling_animation_Transitions.easeIn);
	starling_animation_Transitions.register("easeOut",starling_animation_Transitions.easeOut);
	starling_animation_Transitions.register("easeInOut",starling_animation_Transitions.easeInOut);
	starling_animation_Transitions.register("easeOutIn",starling_animation_Transitions.easeOutIn);
	starling_animation_Transitions.register("easeInBack",starling_animation_Transitions.easeInBack);
	starling_animation_Transitions.register("easeOutBack",starling_animation_Transitions.easeOutBack);
	starling_animation_Transitions.register("easeInOutBack",starling_animation_Transitions.easeInOutBack);
	starling_animation_Transitions.register("easeOutInBack",starling_animation_Transitions.easeOutInBack);
	starling_animation_Transitions.register("easeInElastic",starling_animation_Transitions.easeInElastic);
	starling_animation_Transitions.register("easeOutElastic",starling_animation_Transitions.easeOutElastic);
	starling_animation_Transitions.register("easeInOutElastic",starling_animation_Transitions.easeInOutElastic);
	starling_animation_Transitions.register("easeOutInElastic",starling_animation_Transitions.easeOutInElastic);
	starling_animation_Transitions.register("easeInBounce",starling_animation_Transitions.easeInBounce);
	starling_animation_Transitions.register("easeOutBounce",starling_animation_Transitions.easeOutBounce);
	starling_animation_Transitions.register("easeInOutBounce",starling_animation_Transitions.easeInOutBounce);
	starling_animation_Transitions.register("easeOutInBounce",starling_animation_Transitions.easeOutInBounce);
};
starling_animation_Transitions.linear = function(ratio) {
	return ratio;
};
starling_animation_Transitions.easeIn = function(ratio) {
	return ratio * ratio * ratio;
};
starling_animation_Transitions.easeOut = function(ratio) {
	var invRatio = ratio - 1.0;
	return invRatio * invRatio * invRatio + 1;
};
starling_animation_Transitions.easeInOut = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeIn,starling_animation_Transitions.easeOut,ratio);
};
starling_animation_Transitions.easeOutIn = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOut,starling_animation_Transitions.easeIn,ratio);
};
starling_animation_Transitions.easeInBack = function(ratio) {
	return Math.pow(ratio,2) * (2.70158 * ratio - 1.70158);
};
starling_animation_Transitions.easeOutBack = function(ratio) {
	var invRatio = ratio - 1.0;
	return Math.pow(invRatio,2) * (2.70158 * invRatio + 1.70158) + 1.0;
};
starling_animation_Transitions.easeInOutBack = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInBack,starling_animation_Transitions.easeOutBack,ratio);
};
starling_animation_Transitions.easeOutInBack = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutBack,starling_animation_Transitions.easeInBack,ratio);
};
starling_animation_Transitions.easeInElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) {
		return ratio;
	} else {
		var invRatio = ratio - 1;
		return -1. * Math.pow(2.0,10.0 * invRatio) * Math.sin((invRatio - 0.075) * (2.0 * Math.PI) / 0.3);
	}
};
starling_animation_Transitions.easeOutElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) {
		return ratio;
	} else {
		return Math.pow(2.0,-10. * ratio) * Math.sin((ratio - 0.075) * (2.0 * Math.PI) / 0.3) + 1;
	}
};
starling_animation_Transitions.easeInOutElastic = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInElastic,starling_animation_Transitions.easeOutElastic,ratio);
};
starling_animation_Transitions.easeOutInElastic = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutElastic,starling_animation_Transitions.easeInElastic,ratio);
};
starling_animation_Transitions.easeInBounce = function(ratio) {
	return 1.0 - starling_animation_Transitions.easeOutBounce(1.0 - ratio);
};
starling_animation_Transitions.easeOutBounce = function(ratio) {
	var l;
	if(ratio < 0.36363636363636365) {
		l = 7.5625 * Math.pow(ratio,2);
	} else if(ratio < 0.72727272727272729) {
		ratio -= 0.54545454545454541;
		l = 7.5625 * Math.pow(ratio,2) + 0.75;
	} else if(ratio < 0.90909090909090906) {
		ratio -= 0.81818181818181823;
		l = 7.5625 * Math.pow(ratio,2) + 0.9375;
	} else {
		ratio -= 0.95454545454545459;
		l = 7.5625 * Math.pow(ratio,2) + 0.984375;
	}
	return l;
};
starling_animation_Transitions.easeInOutBounce = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInBounce,starling_animation_Transitions.easeOutBounce,ratio);
};
starling_animation_Transitions.easeOutInBounce = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutBounce,starling_animation_Transitions.easeInBounce,ratio);
};
starling_animation_Transitions.easeCombined = function(startFunc,endFunc,ratio) {
	if(ratio < 0.5) {
		return 0.5 * startFunc(ratio * 2.0);
	} else {
		return 0.5 * endFunc((ratio - 0.5) * 2.0) + 0.5;
	}
};
var starling_animation_Tween = function(target,time,transition) {
	if(transition == null) {
		transition = "linear";
	}
	starling_events_EventDispatcher.call(this);
	this.reset(target,time,transition);
};
$hxClasses["starling.animation.Tween"] = starling_animation_Tween;
starling_animation_Tween.__name__ = ["starling","animation","Tween"];
starling_animation_Tween.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_Tween.getPropertyHint = function(property) {
	if(property.indexOf("color") != -1 || property.indexOf("Color") != -1) {
		return "rgb";
	}
	var hintMarkerIndex = property.indexOf("#");
	if(hintMarkerIndex != -1) {
		return HxOverrides.substr(property,hintMarkerIndex + 1,null);
	} else {
		return null;
	}
};
starling_animation_Tween.getPropertyName = function(property) {
	var hintMarkerIndex = property.indexOf("#");
	if(hintMarkerIndex != -1) {
		return property.substring(0,hintMarkerIndex);
	} else {
		return property;
	}
};
starling_animation_Tween.fromPool = function(target,time,transition) {
	if(transition == null) {
		transition = "linear";
	}
	if(starling_animation_Tween.sTweenPool.get_length() != 0) {
		return starling_animation_Tween.sTweenPool.pop().reset(target,time,transition);
	} else {
		return new starling_animation_Tween(target,time,transition);
	}
};
starling_animation_Tween.toPool = function(tween) {
	tween.mOnStart = tween.mOnUpdate = tween.mOnRepeat = tween.mOnComplete = null;
	tween.mOnStartArgs = tween.mOnUpdateArgs = tween.mOnRepeatArgs = tween.mOnCompleteArgs = null;
	tween.mTarget = null;
	tween.mTransitionFunc = null;
	tween.removeEventListeners();
	starling_animation_Tween.sTweenPool.push(tween);
};
starling_animation_Tween.__super__ = starling_events_EventDispatcher;
starling_animation_Tween.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mTarget: null
	,mTransitionFunc: null
	,mTransitionName: null
	,mProperties: null
	,mStartValues: null
	,mEndValues: null
	,mUpdateFuncs: null
	,mOnStart: null
	,mOnUpdate: null
	,mOnRepeat: null
	,mOnComplete: null
	,mOnStartArgs: null
	,mOnUpdateArgs: null
	,mOnRepeatArgs: null
	,mOnCompleteArgs: null
	,mTotalTime: null
	,mCurrentTime: null
	,mProgress: null
	,mDelay: null
	,mRoundToInt: null
	,mNextTween: null
	,mRepeatCount: null
	,mRepeatDelay: null
	,mReverse: null
	,mCurrentCycle: null
	,reset: function(target,time,transition) {
		if(transition == null) {
			transition = "linear";
		}
		this.mTarget = target;
		this.mCurrentTime = 0.0;
		this.mTotalTime = Math.max(0.0001,time);
		this.mProgress = 0.0;
		this.mDelay = this.mRepeatDelay = 0.0;
		this.mOnStart = this.mOnUpdate = this.mOnRepeat = this.mOnComplete = null;
		this.mOnStartArgs = this.mOnUpdateArgs = this.mOnRepeatArgs = this.mOnCompleteArgs = null;
		this.mRoundToInt = this.mReverse = false;
		this.mRepeatCount = 1;
		this.mCurrentCycle = -1;
		this.mNextTween = null;
		if(typeof(transition) == "string") {
			this.set_transition(transition);
		} else if(Reflect.isFunction(transition)) {
			this.set_transitionFunc(transition);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Transition must be either a string or a function"));
		}
		if(this.mProperties != null) {
			this.mProperties.set_length(0);
		} else {
			this.mProperties = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(this.mStartValues != null) {
			this.mStartValues.set_length(0);
		} else {
			this.mStartValues = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		if(this.mEndValues != null) {
			this.mEndValues.set_length(0);
		} else {
			this.mEndValues = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		if(this.mUpdateFuncs != null) {
			this.mUpdateFuncs.set_length(0);
		} else {
			this.mUpdateFuncs = openfl__$Vector_Vector_$Impl_$.toFunctionVector(null);
		}
		return this;
	}
	,animate: function(property,endValue) {
		if(this.mTarget == null) {
			return;
		}
		var pos = this.mProperties.get_length();
		var updateFunc = this.getUpdateFuncFromProperty(property);
		this.mProperties.set(pos,starling_animation_Tween.getPropertyName(property));
		this.mStartValues.set(pos,NaN);
		this.mEndValues.set(pos,endValue);
		this.mUpdateFuncs.set(pos,updateFunc);
	}
	,scaleTo: function(factor) {
		this.animate("scaleX",factor);
		this.animate("scaleY",factor);
	}
	,moveTo: function(x,y) {
		this.animate("x",x);
		this.animate("y",y);
	}
	,fadeTo: function(alpha) {
		this.animate("alpha",alpha);
	}
	,rotateTo: function(angle,type) {
		if(type == null) {
			type = "rad";
		}
		this.animate("rotation#" + type,angle);
	}
	,advanceTime: function(time) {
		if(time == 0 || this.mRepeatCount == 1 && this.mCurrentTime == this.mTotalTime) {
			return;
		}
		var i;
		var previousTime = this.mCurrentTime;
		var restTime = this.mTotalTime - this.mCurrentTime;
		var carryOverTime = time > restTime?time - restTime:0.0;
		this.mCurrentTime += time;
		if(this.mCurrentTime <= 0) {
			return;
		} else if(this.mCurrentTime > this.mTotalTime) {
			this.mCurrentTime = this.mTotalTime;
		}
		if(this.mCurrentCycle < 0 && previousTime <= 0 && this.mCurrentTime > 0) {
			this.mCurrentCycle++;
			if(this.mOnStart != null) {
				if(this.mOnStartArgs != null) {
					this.mOnStart(this.mOnStartArgs);
				} else {
					this.mOnStart();
				}
			}
		}
		var ratio = this.mCurrentTime / this.mTotalTime;
		var reversed = this.mReverse && this.mCurrentCycle % 2 == 1;
		var numProperties = this.mStartValues.get_length();
		this.mProgress = reversed?this.mTransitionFunc(1.0 - ratio):this.mTransitionFunc(ratio);
		var _g1 = 0;
		var _g = numProperties;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(this.mStartValues.get(i1) != this.mStartValues.get(i1)) {
				var o = this.mTarget;
				var field = this.mProperties.get(i1);
				var tmp;
				var tmp1;
				if(o == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(o.__properties__) {
						tmp = o.__properties__["get_" + field];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = o[tmp]();
					} else {
						tmp1 = o[field];
					}
				}
				this.mStartValues.set(i1,tmp1);
			}
			this.mUpdateFuncs.get(i1)(this.mProperties.get(i1),this.mStartValues.get(i1),this.mEndValues.get(i1));
		}
		if(this.mOnUpdate != null) {
			if(this.mOnUpdateArgs != null) {
				this.mOnUpdate(this.mOnUpdateArgs);
			} else {
				this.mOnUpdate();
			}
		}
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				this.mCurrentTime = -this.mRepeatDelay;
				this.mCurrentCycle++;
				if(this.mRepeatCount > 1) {
					this.mRepeatCount--;
				}
				if(this.mOnRepeat != null) {
					if(this.mOnRepeatArgs != null) {
						this.mOnRepeat(this.mOnRepeatArgs);
					} else {
						this.mOnRepeat();
					}
				}
			} else {
				var onComplete = this.mOnComplete;
				var onCompleteArgs = this.mOnCompleteArgs;
				this.dispatchEventWith("removeFromJuggler");
				if(this.mOnComplete != null) {
					if(this.mOnCompleteArgs != null) {
						this.mOnComplete(this.mOnCompleteArgs);
					} else {
						this.mOnComplete();
					}
				}
			}
		}
		if(carryOverTime != 0) {
			this.advanceTime(carryOverTime);
		}
	}
	,getUpdateFuncFromProperty: function(property) {
		var updateFunc;
		var hint = starling_animation_Tween.getPropertyHint(property);
		if(hint == null) {
			updateFunc = $bind(this,this.updateStandard);
		} else {
			switch(hint) {
			case "deg":
				updateFunc = $bind(this,this.updateDeg);
				break;
			case "rad":
				updateFunc = $bind(this,this.updateRad);
				break;
			case "rgb":
				updateFunc = $bind(this,this.updateRgb);
				break;
			default:
				haxe_Log.trace("[Starling] Ignoring unknown property hint: " + hint,{ fileName : "Tween.hx", lineNumber : 285, className : "starling.animation.Tween", methodName : "getUpdateFuncFromProperty"});
				updateFunc = $bind(this,this.updateStandard);
			}
		}
		return updateFunc;
	}
	,updateStandard: function(property,startValue,endValue) {
		var newValue = startValue + this.mProgress * (endValue - startValue);
		if(this.mRoundToInt) {
			newValue = Math.round(newValue);
		}
		var o = this.mTarget;
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + property];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](newValue);
		} else {
			o[property] = newValue;
		}
	}
	,updateRgb: function(property,startValue,endValue) {
		var startColor = startValue | 0;
		var endColor = endValue | 0;
		var startA = startColor >>> 24 & 255;
		var startR = startColor >>> 16 & 255;
		var startG = startColor >>> 8 & 255;
		var startB = startColor & 255;
		var endA = endColor >>> 24 & 255;
		var endR = endColor >>> 16 & 255;
		var endG = endColor >>> 8 & 255;
		var endB = endColor & 255;
		var newA = _$UInt_UInt_$Impl_$.toFloat(startA) + _$UInt_UInt_$Impl_$.toFloat(endA - startA) * this.mProgress | 0;
		var newR = _$UInt_UInt_$Impl_$.toFloat(startR) + _$UInt_UInt_$Impl_$.toFloat(endR - startR) * this.mProgress | 0;
		var newG = _$UInt_UInt_$Impl_$.toFloat(startG) + _$UInt_UInt_$Impl_$.toFloat(endG - startG) * this.mProgress | 0;
		var newB = _$UInt_UInt_$Impl_$.toFloat(startB) + _$UInt_UInt_$Impl_$.toFloat(endB - startB) * this.mProgress | 0;
		var o = this.mTarget;
		var value = newA << 24 | newR << 16 | newG << 8 | newB;
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + property];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[property] = value;
		}
	}
	,updateRad: function(property,startValue,endValue) {
		this.updateAngle(Math.PI,property,startValue,endValue);
	}
	,updateDeg: function(property,startValue,endValue) {
		this.updateAngle(180,property,startValue,endValue);
	}
	,updateAngle: function(pi,property,startValue,endValue) {
		while(Math.abs(endValue - startValue) > pi) if(startValue < endValue) {
			endValue -= 2.0 * pi;
		} else {
			endValue += 2.0 * pi;
		}
		this.updateStandard(property,startValue,endValue);
	}
	,getEndValue: function(property) {
		var index = this.mProperties.indexOf(property,0);
		if(index == -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("The property '" + property + "' is not animated"));
		} else {
			return this.mEndValues.get(index);
		}
	}
	,get_isComplete: function() {
		if(this.mCurrentTime >= this.mTotalTime) {
			return this.mRepeatCount == 1;
		} else {
			return false;
		}
	}
	,get_target: function() {
		return this.mTarget;
	}
	,get_transition: function() {
		return this.mTransitionName;
	}
	,set_transition: function(value) {
		this.mTransitionName = value;
		this.mTransitionFunc = starling_animation_Transitions.getTransition(value);
		if(this.mTransitionFunc == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid transiton: " + value));
		}
		return this.mTransitionName;
	}
	,get_transitionFunc: function() {
		return this.mTransitionFunc;
	}
	,set_transitionFunc: function(value) {
		this.mTransitionName = "custom";
		this.mTransitionFunc = value;
		return value;
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_progress: function() {
		return this.mProgress;
	}
	,get_delay: function() {
		return this.mDelay;
	}
	,set_delay: function(value) {
		this.mCurrentTime = this.mCurrentTime + this.mDelay - value;
		this.mDelay = value;
		return this.mDelay;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		return this.mRepeatCount = value;
	}
	,get_repeatDelay: function() {
		return this.mRepeatDelay;
	}
	,set_repeatDelay: function(value) {
		return this.mRepeatDelay = value;
	}
	,get_reverse: function() {
		return this.mReverse;
	}
	,set_reverse: function(value) {
		return this.mReverse = value;
	}
	,get_roundToInt: function() {
		return this.mRoundToInt;
	}
	,set_roundToInt: function(value) {
		return this.mRoundToInt = value;
	}
	,get_onStart: function() {
		return this.mOnStart;
	}
	,set_onStart: function(value) {
		return this.mOnStart = value;
	}
	,get_onUpdate: function() {
		return this.mOnUpdate;
	}
	,set_onUpdate: function(value) {
		return this.mOnUpdate = value;
	}
	,get_onRepeat: function() {
		return this.mOnRepeat;
	}
	,set_onRepeat: function(value) {
		return this.mOnRepeat = value;
	}
	,get_onComplete: function() {
		return this.mOnComplete;
	}
	,set_onComplete: function(value) {
		return this.mOnComplete = value;
	}
	,get_onStartArgs: function() {
		return this.mOnStartArgs;
	}
	,set_onStartArgs: function(value) {
		return this.mOnStartArgs = value;
	}
	,onUpdateArgs: null
	,get_onUpdateArgs: function() {
		return this.mOnUpdateArgs;
	}
	,set_onUpdateArgs: function(value) {
		this.mOnUpdateArgs = value;
	}
	,get_onRepeatArgs: function() {
		return this.mOnRepeatArgs;
	}
	,set_onRepeatArgs: function(value) {
		return this.mOnRepeatArgs = value;
	}
	,get_onCompleteArgs: function() {
		return this.mOnCompleteArgs;
	}
	,set_onCompleteArgs: function(value) {
		return this.mOnCompleteArgs = value;
	}
	,get_nextTween: function() {
		return this.mNextTween;
	}
	,set_nextTween: function(value) {
		return this.mNextTween = value;
	}
	,__class__: starling_animation_Tween
	,__properties__: {set_nextTween:"set_nextTween",get_nextTween:"get_nextTween",set_onCompleteArgs:"set_onCompleteArgs",get_onCompleteArgs:"get_onCompleteArgs",set_onRepeatArgs:"set_onRepeatArgs",get_onRepeatArgs:"get_onRepeatArgs",set_onStartArgs:"set_onStartArgs",get_onStartArgs:"get_onStartArgs",set_onComplete:"set_onComplete",get_onComplete:"get_onComplete",set_onRepeat:"set_onRepeat",get_onRepeat:"get_onRepeat",set_onUpdate:"set_onUpdate",get_onUpdate:"get_onUpdate",set_onStart:"set_onStart",get_onStart:"get_onStart",set_roundToInt:"set_roundToInt",get_roundToInt:"get_roundToInt",set_reverse:"set_reverse",get_reverse:"get_reverse",set_repeatDelay:"set_repeatDelay",get_repeatDelay:"get_repeatDelay",set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",set_delay:"set_delay",get_delay:"get_delay",get_progress:"get_progress",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",set_transitionFunc:"set_transitionFunc",get_transitionFunc:"get_transitionFunc",set_transition:"set_transition",get_transition:"get_transition",get_target:"get_target",get_isComplete:"get_isComplete"}
});
var starling_core_RenderSupport = function() {
	this.mStencilReferenceValue = 0;
	this.mMasks = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mProjectionMatrix = new openfl_geom_Matrix();
	this.mModelViewMatrix = new openfl_geom_Matrix();
	this.mMvpMatrix = new openfl_geom_Matrix();
	this.mMatrixStack = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMatrixStackSize = 0;
	this.mProjectionMatrix3D = new openfl_geom_Matrix3D();
	this.mModelViewMatrix3D = new openfl_geom_Matrix3D();
	this.mMvpMatrix3D = new openfl_geom_Matrix3D();
	this.mMatrixStack3D = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMatrixStack3DSize = 0;
	this.mDrawCount = 0;
	this.mBlendMode = "normal";
	this.mClipRectStack = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mClipRectStackSize = 0;
	this.mCurrentQuadBatchID = 0;
	var a = [new starling_display_QuadBatch(true)];
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	this.mQuadBatches = vector;
	this.loadIdentity();
	this.setProjectionMatrix(0,0,400,300);
};
$hxClasses["starling.core.RenderSupport"] = starling_core_RenderSupport;
starling_core_RenderSupport.__name__ = ["starling","core","RenderSupport"];
starling_core_RenderSupport.transformMatrixForObject = function(matrix,object) {
	starling_utils_MatrixUtil.prependMatrix(matrix,object.get_transformationMatrix());
};
starling_core_RenderSupport.setDefaultBlendFactors = function(premultipliedAlpha) {
	starling_core_RenderSupport.setBlendFactors(premultipliedAlpha);
};
starling_core_RenderSupport.setBlendFactors = function(premultipliedAlpha,blendMode) {
	if(blendMode == null) {
		blendMode = "normal";
	}
	var blendFactors = starling_display_BlendMode.getBlendFactors(blendMode,premultipliedAlpha);
	var tmp = blendFactors[0];
	var tmp1 = blendFactors[1];
	starling_core_Starling.get_current().get_context().setBlendFactors(tmp,tmp1);
};
starling_core_RenderSupport._clear = function(rgb,alpha) {
	if(alpha == null) {
		alpha = 0.0;
	}
	if(rgb == null) {
		rgb = 0;
	}
	starling_core_Starling.get_current().get_context().clear(starling_utils_Color.getRed(rgb) / 255.0,starling_utils_Color.getGreen(rgb) / 255.0,starling_utils_Color.getBlue(rgb) / 255.0,alpha);
};
starling_core_RenderSupport.assembleAgal = function(vertexShader,fragmentShader,resultProgram) {
	if(resultProgram == null) {
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		resultProgram = context.createProgram();
	}
	var assembler = new openfl_utils_AGALMiniAssembler();
	resultProgram.upload(assembler.assemble(1,vertexShader),assembler.assemble(0,fragmentShader));
	return resultProgram;
};
starling_core_RenderSupport.getTextureLookupFlags = function(format,mipMapping,repeat,smoothing) {
	if(smoothing == null) {
		smoothing = "bilinear";
	}
	if(repeat == null) {
		repeat = false;
	}
	var options = ["2d",repeat?"repeat":"clamp"];
	if(format == 3) {
		options.push("dxt1");
	} else if(format == 4) {
		options.push("dxt5");
	}
	if(smoothing == "none") {
		options.push("nearest");
		options.push(mipMapping?"mipnearest":"mipnone");
	} else if(smoothing == "bilinear") {
		options.push("linear");
		options.push(mipMapping?"mipnearest":"mipnone");
	} else {
		options.push("linear");
		options.push(mipMapping?"miplinear":"mipnone");
	}
	return "<" + options.join(",") + ">";
};
starling_core_RenderSupport.prototype = {
	mProjectionMatrix: null
	,mModelViewMatrix: null
	,mMvpMatrix: null
	,mMatrixStack: null
	,mMatrixStackSize: null
	,mProjectionMatrix3D: null
	,mModelViewMatrix3D: null
	,mMvpMatrix3D: null
	,mMatrixStack3D: null
	,mMatrixStack3DSize: null
	,mDrawCount: null
	,mBlendMode: null
	,mClipRectStack: null
	,mClipRectStackSize: null
	,mQuadBatches: null
	,mCurrentQuadBatchID: null
	,dispose: function() {
		var _g = 0;
		var _g1 = this.mQuadBatches;
		while(_g < _g1.get_length()) {
			var quadBatch = _g1.get(_g);
			++_g;
			quadBatch.dispose();
		}
	}
	,setProjectionMatrix: function(x,y,width,height,stageWidth,stageHeight,cameraPos) {
		if(stageHeight == null) {
			stageHeight = 0;
		}
		if(stageWidth == null) {
			stageWidth = 0;
		}
		if(stageWidth <= 0) {
			stageWidth = width;
		}
		if(stageHeight <= 0) {
			stageHeight = height;
		}
		if(cameraPos == null) {
			cameraPos = starling_core_RenderSupport.sPoint3D;
			cameraPos.setTo(stageWidth / 2,stageHeight / 2,stageWidth / Math.tan(0.5) * 0.5);
		}
		this.mProjectionMatrix.setTo(2.0 / width,0,0,-2. / height,-(2 * x + width) / width,(2 * y + height) / height);
		var focalLength = Math.abs(cameraPos.z);
		var offsetX = cameraPos.x - stageWidth / 2;
		var offsetY = cameraPos.y - stageHeight / 2;
		var far = focalLength * 20;
		var near = 1;
		var scaleX = stageWidth / width;
		var scaleY = stageHeight / height;
		starling_core_RenderSupport.sMatrixData.set(0,2 * focalLength / stageWidth);
		starling_core_RenderSupport.sMatrixData.set(5,-2 * focalLength / stageHeight);
		starling_core_RenderSupport.sMatrixData.set(10,far / (far - near));
		starling_core_RenderSupport.sMatrixData.set(14,-far * near / (far - near));
		starling_core_RenderSupport.sMatrixData.set(11,1);
		starling_core_RenderSupport.sMatrixData.set(0,starling_core_RenderSupport.sMatrixData.get(0) * scaleX);
		starling_core_RenderSupport.sMatrixData.set(5,starling_core_RenderSupport.sMatrixData.get(5) * scaleY);
		starling_core_RenderSupport.sMatrixData.set(8,scaleX - 1 - 2 * scaleX * (x - offsetX) / stageWidth);
		starling_core_RenderSupport.sMatrixData.set(9,-scaleY + 1 + 2 * scaleY * (y - offsetY) / stageHeight);
		this.mProjectionMatrix3D.copyRawDataFrom(starling_core_RenderSupport.sMatrixData);
		this.mProjectionMatrix3D.prependTranslation(-stageWidth / 2.0 - offsetX,-stageHeight / 2.0 - offsetY,focalLength);
		this.applyClipRect();
	}
	,setOrthographicProjection: function(x,y,width,height) {
		var stage = starling_core_Starling.get_current().get_stage();
		starling_core_RenderSupport.sClipRect.setTo(x,y,width,height);
		this.setProjectionMatrix(x,y,width,height,stage.get_stageWidth(),stage.get_stageHeight(),stage.get_cameraPosition());
	}
	,loadIdentity: function() {
		this.mModelViewMatrix.identity();
		this.mModelViewMatrix3D.identity();
	}
	,translateMatrix: function(dx,dy) {
		starling_utils_MatrixUtil.prependTranslation(this.mModelViewMatrix,dx,dy);
	}
	,rotateMatrix: function(angle) {
		starling_utils_MatrixUtil.prependRotation(this.mModelViewMatrix,angle);
	}
	,scaleMatrix: function(sx,sy) {
		starling_utils_MatrixUtil.prependScale(this.mModelViewMatrix,sx,sy);
	}
	,prependMatrix: function(matrix) {
		starling_utils_MatrixUtil.prependMatrix(this.mModelViewMatrix,matrix);
	}
	,transformMatrix: function(object) {
		starling_utils_MatrixUtil.prependMatrix(this.mModelViewMatrix,object.get_transformationMatrix());
	}
	,pushMatrix: function() {
		if(this.mMatrixStack.get_length() < this.mMatrixStackSize + 1) {
			this.mMatrixStack.push(new openfl_geom_Matrix());
		}
		this.mMatrixStack.get(this.mMatrixStackSize++).copyFrom(this.mModelViewMatrix);
	}
	,popMatrix: function() {
		this.mModelViewMatrix.copyFrom(this.mMatrixStack.get(--this.mMatrixStackSize));
	}
	,resetMatrix: function() {
		this.mMatrixStackSize = 0;
		this.mMatrixStack3DSize = 0;
		this.loadIdentity();
	}
	,get_mvpMatrix: function() {
		this.mMvpMatrix.copyFrom(this.mModelViewMatrix);
		this.mMvpMatrix.concat(this.mProjectionMatrix);
		return this.mMvpMatrix;
	}
	,get_modelViewMatrix: function() {
		return this.mModelViewMatrix;
	}
	,get_projectionMatrix: function() {
		return this.mProjectionMatrix;
	}
	,set_projectionMatrix: function(value) {
		this.mProjectionMatrix.copyFrom(value);
		this.applyClipRect();
		return this.mProjectionMatrix;
	}
	,transformMatrix3D: function(object) {
		this.mModelViewMatrix3D.prepend(starling_utils_MatrixUtil.convertTo3D(this.mModelViewMatrix,starling_core_RenderSupport.sMatrix3D));
		this.mModelViewMatrix3D.prepend(object.get_transformationMatrix3D());
		this.mModelViewMatrix.identity();
	}
	,pushMatrix3D: function() {
		if(this.mMatrixStack3D.get_length() < this.mMatrixStack3DSize + 1) {
			this.mMatrixStack3D.push(new openfl_geom_Matrix3D());
		}
		this.mMatrixStack3D.get(this.mMatrixStack3DSize++).copyFrom(this.mModelViewMatrix3D);
	}
	,popMatrix3D: function() {
		this.mModelViewMatrix3D.copyFrom(this.mMatrixStack3D.get(--this.mMatrixStack3DSize));
	}
	,get_mvpMatrix3D: function() {
		if(this.mMatrixStack3DSize == 0) {
			starling_utils_MatrixUtil.convertTo3D(this.get_mvpMatrix(),this.mMvpMatrix3D);
		} else {
			this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
			this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
			this.mMvpMatrix3D.prepend(starling_utils_MatrixUtil.convertTo3D(this.mModelViewMatrix,starling_core_RenderSupport.sMatrix3D));
		}
		return this.mMvpMatrix3D;
	}
	,get_projectionMatrix3D: function() {
		return this.mProjectionMatrix3D;
	}
	,set_projectionMatrix3D: function(value) {
		this.mProjectionMatrix3D.copyFrom(value);
		return this.mProjectionMatrix3D;
	}
	,applyBlendMode: function(premultipliedAlpha) {
		starling_core_RenderSupport.setBlendFactors(premultipliedAlpha,this.mBlendMode);
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		if(value != "auto") {
			this.mBlendMode = value;
		}
		return this.mBlendMode;
	}
	,get_renderTarget: function() {
		return starling_core_Starling.get_current().get_contextData().get("Starling.renderTarget");
	}
	,set_renderTarget: function(target) {
		this.setRenderTarget(target);
		return target;
	}
	,setRenderTarget: function(target,antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		starling_core_Starling.get_current().get_contextData().set("Starling.renderTarget",target);
		this.applyClipRect();
		if(target != null) {
			var tmp = target.get_base();
			starling_core_Starling.get_current().get_context().setRenderToTexture(tmp,starling_utils_SystemUtil.get_supportsDepthAndStencil(),antiAliasing);
		} else {
			starling_core_Starling.get_current().get_context().setRenderToBackBuffer();
		}
	}
	,pushClipRect: function(rectangle,intersectWithCurrent) {
		if(intersectWithCurrent == null) {
			intersectWithCurrent = true;
		}
		if(this.mClipRectStack.get_length() < this.mClipRectStackSize + 1) {
			this.mClipRectStack.push(new openfl_geom_Rectangle());
		}
		this.mClipRectStack.get(this.mClipRectStackSize).copyFrom(rectangle);
		rectangle = this.mClipRectStack.get(this.mClipRectStackSize);
		if(intersectWithCurrent && this.mClipRectStackSize > 0) {
			starling_utils_RectangleUtil.intersect(rectangle,this.mClipRectStack.get(this.mClipRectStackSize - 1),rectangle);
		}
		++this.mClipRectStackSize;
		this.applyClipRect();
		return rectangle;
	}
	,popClipRect: function() {
		if(this.mClipRectStackSize > 0) {
			--this.mClipRectStackSize;
			this.applyClipRect();
		}
	}
	,applyClipRect: function() {
		this.finishQuadBatch();
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			return;
		}
		if(this.mClipRectStackSize > 0) {
			var width;
			var height;
			var rect = this.mClipRectStack.get(this.mClipRectStackSize - 1);
			var renderTarget = this.get_renderTarget();
			if(renderTarget != null) {
				width = renderTarget.get_root().get_nativeWidth() | 0;
				height = renderTarget.get_root().get_nativeHeight() | 0;
			} else {
				width = starling_core_Starling.get_current().get_backBufferWidth();
				height = starling_core_Starling.get_current().get_backBufferHeight();
			}
			starling_utils_MatrixUtil.transformCoords(this.mProjectionMatrix,rect.x,rect.y,starling_core_RenderSupport.sPoint);
			starling_core_RenderSupport.sClipRect.x = (starling_core_RenderSupport.sPoint.x * 0.5 + 0.5) * width;
			starling_core_RenderSupport.sClipRect.y = (0.5 - starling_core_RenderSupport.sPoint.y * 0.5) * height;
			starling_utils_MatrixUtil.transformCoords(this.mProjectionMatrix,rect.get_right(),rect.get_bottom(),starling_core_RenderSupport.sPoint);
			starling_core_RenderSupport.sClipRect.set_right((starling_core_RenderSupport.sPoint.x * 0.5 + 0.5) * width);
			starling_core_RenderSupport.sClipRect.set_bottom((0.5 - starling_core_RenderSupport.sPoint.y * 0.5) * height);
			starling_core_RenderSupport.sBufferRect.setTo(0,0,width,height);
			starling_utils_RectangleUtil.intersect(starling_core_RenderSupport.sClipRect,starling_core_RenderSupport.sBufferRect,starling_core_RenderSupport.sScissorRect);
			if(starling_core_RenderSupport.sScissorRect.width < 1 || starling_core_RenderSupport.sScissorRect.height < 1) {
				starling_core_RenderSupport.sScissorRect.setTo(0,0,1,1);
			}
			starling_core_RenderSupport.sScissorRect.y = height - starling_core_RenderSupport.sScissorRect.height - starling_core_RenderSupport.sScissorRect.y;
			context.setScissorRectangle(starling_core_RenderSupport.sScissorRect);
		} else {
			context.setScissorRectangle(null);
		}
	}
	,mMasks: null
	,mStencilReferenceValue: null
	,pushMask: function(mask) {
		this.mMasks.set(this.mMasks.get_length(),mask);
		this.mStencilReferenceValue++;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			return;
		}
		this.finishQuadBatch();
		context.setStencilActions(2,1,2);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mStencilReferenceValue);
		context.setStencilActions(2,1,5);
	}
	,popMask: function() {
		var mask = this.mMasks.pop();
		this.mStencilReferenceValue--;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			return;
		}
		this.finishQuadBatch();
		context.setStencilActions(2,1,0);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mStencilReferenceValue);
		context.setStencilActions(2,1,5);
	}
	,drawMask: function(mask) {
		this.pushMatrix();
		var stage = mask.get_stage();
		if(stage != null) {
			mask.getTransformationMatrix(stage,this.mModelViewMatrix);
		} else {
			this.transformMatrix(mask);
		}
		mask.render(this,0.0);
		this.finishQuadBatch();
		this.popMatrix();
	}
	,get_stencilReferenceValue: function() {
		return this.mStencilReferenceValue;
	}
	,set_stencilReferenceValue: function(value) {
		this.mStencilReferenceValue = value;
		if(starling_core_Starling.get_current().get_contextValid()) {
			starling_core_Starling.get_current().get_context().setStencilReferenceValue(value);
		}
		return this.mStencilReferenceValue;
	}
	,batchQuad: function(quad,parentAlpha,texture,smoothing) {
		if(this.mQuadBatches.get(this.mCurrentQuadBatchID).isStateChange(quad.get_tinted(),parentAlpha,texture,smoothing,this.mBlendMode)) {
			this.finishQuadBatch();
		}
		this.mQuadBatches.get(this.mCurrentQuadBatchID).addQuad(quad,parentAlpha,texture,smoothing,this.mModelViewMatrix,this.mBlendMode);
	}
	,batchQuadBatch: function(quadBatch,parentAlpha) {
		if(this.mQuadBatches.get(this.mCurrentQuadBatchID).isStateChange(quadBatch.get_tinted(),parentAlpha,quadBatch.get_texture(),quadBatch.get_smoothing(),this.mBlendMode,quadBatch.get_numQuads())) {
			this.finishQuadBatch();
		}
		this.mQuadBatches.get(this.mCurrentQuadBatchID).addQuadBatch(quadBatch,parentAlpha,this.mModelViewMatrix,this.mBlendMode);
	}
	,finishQuadBatch: function() {
		var currentBatch = this.mQuadBatches.get(this.mCurrentQuadBatchID);
		if(currentBatch.get_numQuads() != 0) {
			if(this.mMatrixStack3DSize == 0) {
				currentBatch.renderCustom(this.mProjectionMatrix3D);
			} else {
				this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
				this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
				currentBatch.renderCustom(this.mMvpMatrix3D);
			}
			currentBatch.reset();
			++this.mCurrentQuadBatchID;
			++this.mDrawCount;
			if(this.mQuadBatches.get_length() <= this.mCurrentQuadBatchID) {
				this.mQuadBatches.push(new starling_display_QuadBatch(true));
			}
		}
	}
	,nextFrame: function() {
		this.resetMatrix();
		this.trimQuadBatches();
		this.mMasks.set_length(0);
		this.mCurrentQuadBatchID = 0;
		this.mBlendMode = "normal";
		this.mDrawCount = 0;
	}
	,trimQuadBatches: function() {
		var numUsedBatches = this.mCurrentQuadBatchID + 1;
		var numTotalBatches = this.mQuadBatches.get_length();
		if(numTotalBatches >= 16 && numTotalBatches > 2 * numUsedBatches) {
			var numToRemove = numTotalBatches - numUsedBatches;
			var _g1 = 0;
			while(_g1 < numToRemove) {
				++_g1;
				this.mQuadBatches.pop().dispose();
			}
		}
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 0.0;
		}
		if(rgb == null) {
			rgb = 0;
		}
		starling_core_RenderSupport._clear(rgb,alpha);
	}
	,raiseDrawCount: function(value) {
		if(value == null) {
			value = 1;
		}
		this.mDrawCount = this.mDrawCount + value;
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,__class__: starling_core_RenderSupport
	,__properties__: {get_drawCount:"get_drawCount",set_stencilReferenceValue:"set_stencilReferenceValue",get_stencilReferenceValue:"get_stencilReferenceValue",set_renderTarget:"set_renderTarget",get_renderTarget:"get_renderTarget",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_projectionMatrix3D:"set_projectionMatrix3D",get_projectionMatrix3D:"get_projectionMatrix3D",get_mvpMatrix3D:"get_mvpMatrix3D",set_projectionMatrix:"set_projectionMatrix",get_projectionMatrix:"get_projectionMatrix",get_modelViewMatrix:"get_modelViewMatrix",get_mvpMatrix:"get_mvpMatrix"}
};
var starling_core_Starling = function(rootClass,stage,viewPort,stage3D,renderMode,profile) {
	if(profile == null) {
		profile = "auto";
	}
	if(renderMode == null) {
		renderMode = 0;
	}
	this.mStoredDrawCount = 0;
	starling_events_EventDispatcher.call(this);
	if(stage == null) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Stage must not be null"));
	}
	if(viewPort == null) {
		viewPort = new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight);
	}
	if(stage3D == null) {
		stage3D = stage.stage3Ds.get(0);
	}
	starling_utils_SystemUtil.initialize();
	starling_core_Starling.sAll.push(this);
	this.makeCurrent();
	this.mRootClass = rootClass;
	this.mViewPort = viewPort;
	this.mPreviousViewPort = new openfl_geom_Rectangle();
	this.mStage3D = stage3D;
	this.mStage = new starling_display_Stage(viewPort.width | 0,viewPort.height | 0,stage.get_color());
	this.mNativeOverlay = new openfl_display_Sprite();
	this.mNativeStage = stage;
	this.mNativeStage.addChild(this.mNativeOverlay);
	this.mNativeStageContentScaleFactor = 1.0;
	this.mTouchProcessor = new starling_events_TouchProcessor(this.mStage);
	this.mJuggler = new starling_animation_Juggler();
	this.mAntiAliasing = 0;
	this.mSimulateMultitouch = false;
	this.mEnableErrorChecking = false;
	this.mSupportHighResolutions = false;
	this.mBroadcastKeyboardEvents = true;
	this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	this.mSupport = new starling_core_RenderSupport();
	var v = new haxe_ds_StringMap();
	starling_core_Starling.sContextData.set(stage3D,v);
	var this1 = starling_core_Starling.sContextData.h[stage3D.__id__];
	var v1 = new haxe_ds_StringMap();
	this1.set("Starling.programs",v1);
	stage.scaleMode = 2;
	stage.align = 6;
	var _g = 0;
	var _g1 = this.get_touchEventTypes();
	while(_g < _g1.length) {
		var touchEventType = _g1[_g];
		++_g;
		stage.addEventListener(touchEventType,$bind(this,this.onTouch),false,0,true);
	}
	stage.addEventListener("enterFrame",$bind(this,this.onEnterFrame),false,0,true);
	stage.addEventListener("keyDown",$bind(this,this.onKey),false,0,true);
	stage.addEventListener("keyUp",$bind(this,this.onKey),false,0,true);
	stage.addEventListener("resize",$bind(this,this.onResize),false,0,true);
	stage.addEventListener("mouseLeave",$bind(this,this.onMouseLeave),false,0,true);
	this.mStage3D.addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,10,true);
	this.mStage3D.addEventListener("error",$bind(this,this.onStage3DError),false,10,true);
	if(this.mStage3D.context3D != null && this.mStage3D.context3D.driverInfo != "Disposed") {
		this.mProfile = this.mStage3D.context3D.profile;
		if(stage3D.context3D != null) {
			haxe_Timer.delay($bind(this,this.initialize),1);
		}
	} else {
		if(!starling_utils_SystemUtil.get_supportsDepthAndStencil()) {
			haxe_Log.trace("[Starling] Mask support requires 'depthAndStencil' to be enabled" + " in the application descriptor.",{ fileName : "Starling.hx", lineNumber : 336, className : "starling.core.Starling", methodName : "new"});
		}
		this.mShareContext = false;
		this.requestContext3D(stage3D,renderMode,profile);
	}
};
$hxClasses["starling.core.Starling"] = starling_core_Starling;
starling_core_Starling.__name__ = ["starling","core","Starling"];
starling_core_Starling.__properties__ = {set_handleLostContext:"set_handleLostContext",get_handleLostContext:"get_handleLostContext",set_multitouchEnabled:"set_multitouchEnabled",get_multitouchEnabled:"get_multitouchEnabled",get_all:"get_all",get_current:"get_current"}
starling_core_Starling.get_current = function() {
	return starling_core_Starling.sCurrent;
};
starling_core_Starling.get_all = function() {
	return starling_core_Starling.sAll;
};
starling_core_Starling.get_multitouchEnabled = function() {
	return openfl_ui_Multitouch.inputMode == 2;
};
starling_core_Starling.set_multitouchEnabled = function(value) {
	if(starling_core_Starling.sCurrent != null) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("'multitouchEnabled' must be set before Starling instance is created"));
	} else {
		openfl_ui_Multitouch.inputMode = value?2:1;
	}
	return openfl_ui_Multitouch.inputMode == 2;
};
starling_core_Starling.get_handleLostContext = function() {
	return starling_core_Starling.sHandleLostContext;
};
starling_core_Starling.set_handleLostContext = function(value) {
	if(starling_core_Starling.sCurrent != null) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("'handleLostContext' must be set before Starling instance is created"));
	} else {
		starling_core_Starling.sHandleLostContext = value;
	}
	return starling_core_Starling.sHandleLostContext;
};
starling_core_Starling.__super__ = starling_events_EventDispatcher;
starling_core_Starling.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mStage3D: null
	,mStage: null
	,mRootClass: null
	,mRoot: null
	,mJuggler: null
	,mSupport: null
	,mTouchProcessor: null
	,mAntiAliasing: null
	,mSimulateMultitouch: null
	,mEnableErrorChecking: null
	,mLastFrameTimestamp: null
	,mLeftMouseDown: null
	,mStatsDisplay: null
	,mShareContext: null
	,mProfile: null
	,mContext: null
	,mStarted: null
	,mRendering: null
	,mSupportHighResolutions: null
	,mBroadcastKeyboardEvents: null
	,mViewPort: null
	,mPreviousViewPort: null
	,mClippedViewPort: null
	,mNativeStage: null
	,mNativeOverlay: null
	,mNativeStageContentScaleFactor: null
	,mStoredDrawCount: null
	,dispose: function() {
		this.stop(true);
		this.mNativeStage.removeEventListener("enterFrame",$bind(this,this.onEnterFrame),false);
		this.mNativeStage.removeEventListener("keyDown",$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener("keyUp",$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener("resize",$bind(this,this.onResize),false);
		this.mNativeStage.removeEventListener("mouseLeave",$bind(this,this.onMouseLeave),false);
		this.mNativeStage.removeChild(this.mNativeOverlay);
		this.mStage3D.removeEventListener("context3DCreate",$bind(this,this.onContextCreated),false);
		this.mStage3D.removeEventListener("error",$bind(this,this.onStage3DError),false);
		var _g = 0;
		var _g1 = this.get_touchEventTypes();
		while(_g < _g1.length) {
			var touchEventType = _g1[_g];
			++_g;
			this.mNativeStage.removeEventListener(touchEventType,$bind(this,this.onTouch),false);
		}
		if(this.mStage != null) {
			this.mStage.dispose();
		}
		if(this.mSupport != null) {
			this.mSupport.dispose();
		}
		if(this.mTouchProcessor != null) {
			this.mTouchProcessor.dispose();
		}
		if(starling_core_Starling.sCurrent == this) {
			starling_core_Starling.sCurrent = null;
		}
		if(this.mContext != null && !this.mShareContext) {
			this.mContext.dispose();
		}
		var index = starling_core_Starling.sAll.indexOf(this,0);
		if(index != -1) {
			starling_core_Starling.sAll.splice(index,1);
		}
	}
	,requestContext3D: function(stage3D,renderMode,profile) {
		var _gthis = this;
		var profiles = [];
		var currentProfile;
		if(profile == "auto") {
			profiles = [2,0,1];
		} else if(typeof(profile) == "number" && ((profile | 0) === profile)) {
			profiles = [profile];
		} else if((profile instanceof Array) && profile.__enum__ == null) {
			profiles = profile;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Profile must be of type 'Context3DProfile' or 'Array'"));
		}
		var onFinished = null;
		var onError = null;
		var requestNextProfile = null;
		requestNextProfile = function() {
			currentProfile = profiles.shift();
			try {
				_gthis.mStage3D.requestContext3D(renderMode,currentProfile);
			} catch( error ) {
				haxe_CallStack.lastException = error;
				if (error instanceof js__$Boot_HaxeError) error = error.val;
				if( js_Boot.__instanceof(error,openfl_errors_Error) ) {
					if(profiles.length != 0) {
						haxe_Timer.delay(requestNextProfile,1);
					} else {
						throw new js__$Boot_HaxeError(error);
					}
				} else throw(error);
			}
		};
		var requestNextProfile1 = requestNextProfile;
		var onCreated = function(event) {
			var context = stage3D.context3D;
			if(renderMode == 0 && profiles.length != 0 && (context.driverInfo != null && context.driverInfo.indexOf("Software") != -1)) {
				onError(event);
			} else {
				_gthis.mProfile = currentProfile;
				onFinished();
			}
		};
		onError = function(event1) {
			if(profiles.length != 0) {
				event1.stopImmediatePropagation();
				haxe_Timer.delay(requestNextProfile1,1);
			} else {
				onFinished();
			}
		};
		onFinished = function() {
			_gthis.mStage3D.removeEventListener("context3DCreate",onCreated);
			_gthis.mStage3D.removeEventListener("error",onError);
		};
		this.mStage3D.addEventListener("context3DCreate",onCreated,false,100);
		this.mStage3D.addEventListener("error",onError,false,100);
		requestNextProfile1();
	}
	,initialize: function() {
		this.makeCurrent();
		this.initializeGraphicsAPI();
		this.initializeRoot();
		this.mTouchProcessor.set_simulateMultitouch(this.mSimulateMultitouch);
		this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	}
	,initializeGraphicsAPI: function() {
		this.mContext = this.mStage3D.context3D;
		this.mContext.set_enableErrorChecking(this.mEnableErrorChecking);
		haxe_Log.trace("[Starling] Initialization complete.",{ fileName : "Starling.hx", lineNumber : 462, className : "starling.core.Starling", methodName : "initializeGraphicsAPI"});
		haxe_Log.trace("[Starling] Display Driver: " + this.mContext.driverInfo,{ fileName : "Starling.hx", lineNumber : 463, className : "starling.core.Starling", methodName : "initializeGraphicsAPI"});
		this.updateViewPort(true);
		this.dispatchEventWith("context3DCreate",false,this.mContext);
	}
	,initializeRoot: function() {
		if(this.mRoot == null && this.mRootClass != null) {
			this.mRoot = Type.createInstance(this.mRootClass,[]);
			if(this.mRoot == null) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid root class: " + Std.string(this.mRootClass)));
			}
			this.mStage.addChildAt(this.mRoot,0);
			this.dispatchEventWith("rootCreated",false,this.mRoot);
		}
	}
	,nextFrame: function() {
		var now = openfl_Lib.getTimer() / 1000.0;
		var passedTime = now - this.mLastFrameTimestamp;
		this.mLastFrameTimestamp = now;
		if(passedTime > 1.0) {
			passedTime = 1.0;
		}
		if(passedTime < 0.0) {
			passedTime = 1.0 / this.mNativeStage.get_frameRate();
		}
		this.advanceTime(passedTime);
		this.render();
	}
	,advanceTime: function(passedTime) {
		if(!this.get_contextValid()) {
			return;
		}
		this.makeCurrent();
		this.mTouchProcessor.advanceTime(passedTime);
		this.mStage.advanceTime(passedTime);
		this.mJuggler.advanceTime(passedTime);
	}
	,render: function() {
		if(!this.get_contextValid()) {
			return;
		}
		this.makeCurrent();
		this.updateViewPort();
		this.dispatchEventWith("render");
		var scaleX = this.mViewPort.width / this.mStage.get_stageWidth();
		var scaleY = this.mViewPort.height / this.mStage.get_stageHeight();
		this.mContext.setDepthTest(false,0);
		this.mContext.setCulling(3);
		this.mSupport.nextFrame();
		this.mSupport.set_stencilReferenceValue(0);
		this.mSupport.set_renderTarget(null);
		this.mSupport.setProjectionMatrix(this.mViewPort.x < 0?-this.mViewPort.x / scaleX:0.0,this.mViewPort.y < 0?-this.mViewPort.y / scaleY:0.0,this.mClippedViewPort.width / scaleX,this.mClippedViewPort.height / scaleY,this.mStage.get_stageWidth(),this.mStage.get_stageHeight(),this.mStage.get_cameraPosition());
		if(!this.mShareContext) {
			starling_core_RenderSupport._clear(this.mStage.get_color(),1.0);
		}
		this.mStage.render(this.mSupport,1.0);
		this.mSupport.finishQuadBatch();
		if(this.mStatsDisplay != null) {
			this.mStatsDisplay.set_drawCount(this.mSupport.get_drawCount() + this.mStoredDrawCount);
		}
		this.mStoredDrawCount = 0;
		if(!this.mShareContext) {
			this.mContext.present();
		}
	}
	,updateViewPort: function(forceUpdate) {
		if(forceUpdate == null) {
			forceUpdate = false;
		}
		if(forceUpdate || this.mPreviousViewPort.width != this.mViewPort.width || this.mPreviousViewPort.height != this.mViewPort.height || this.mPreviousViewPort.x != this.mViewPort.x || this.mPreviousViewPort.y != this.mViewPort.y) {
			this.mPreviousViewPort.setTo(this.mViewPort.x,this.mViewPort.y,this.mViewPort.width,this.mViewPort.height);
			this.mClippedViewPort = this.mViewPort.intersection(new openfl_geom_Rectangle(0,0,this.mNativeStage.stageWidth,this.mNativeStage.stageHeight));
			if(!this.mShareContext) {
				if(this.mProfile == 1) {
					this.configureBackBuffer(32,32,this.mAntiAliasing,true);
				}
				this.mStage3D.set_x(this.mClippedViewPort.x);
				this.mStage3D.set_y(this.mClippedViewPort.y);
				this.configureBackBuffer(this.mClippedViewPort.width | 0,this.mClippedViewPort.height | 0,this.mAntiAliasing,true,this.mSupportHighResolutions);
				var tmp;
				if(this.mSupportHighResolutions) {
					var o = this.mNativeStage;
					var tmp1;
					var tmp2;
					if(o == null) {
						tmp2 = null;
					} else {
						var tmp3;
						if(o.__properties__) {
							tmp1 = o.__properties__["get_" + "contentsScaleFactor"];
							tmp3 = tmp1;
						} else {
							tmp3 = false;
						}
						if(tmp3) {
							tmp2 = o[tmp1]();
						} else {
							tmp2 = o.contentsScaleFactor;
						}
					}
					tmp = tmp2 != null;
				} else {
					tmp = false;
				}
				if(tmp) {
					var o1 = this.mNativeStage;
					var tmp4;
					var tmp5;
					if(o1 == null) {
						tmp5 = null;
					} else {
						var tmp6;
						if(o1.__properties__) {
							tmp4 = o1.__properties__["get_" + "contentsScaleFactor"];
							tmp6 = tmp4;
						} else {
							tmp6 = false;
						}
						if(tmp6) {
							tmp5 = o1[tmp4]();
						} else {
							tmp5 = o1.contentsScaleFactor;
						}
					}
					this.mNativeStageContentScaleFactor = tmp5;
				} else {
					this.mNativeStageContentScaleFactor = 1.0;
				}
			}
		}
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution) {
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		this.mContext.configureBackBuffer(width,height,antiAlias,enableDepthAndStencil && starling_utils_SystemUtil.get_supportsDepthAndStencil(),wantsBestResolution);
	}
	,updateNativeOverlay: function() {
		this.mNativeOverlay.set_x(this.mViewPort.x);
		this.mNativeOverlay.set_y(this.mViewPort.y);
		this.mNativeOverlay.set_scaleX(this.mViewPort.width / this.mStage.get_stageWidth());
		this.mNativeOverlay.set_scaleY(this.mViewPort.height / this.mStage.get_stageHeight());
	}
	,stopWithFatalError: function(message) {
		var background = new openfl_display_Shape();
		background.get_graphics().beginFill(0,0.8);
		background.get_graphics().drawRect(0,0,this.mStage.get_stageWidth(),this.mStage.get_stageHeight());
		background.get_graphics().endFill();
		var textField = new openfl_text_TextField();
		var textFormat = new openfl_text_TextFormat("_sans",14,16777215);
		textFormat.align = 0;
		textField.set_defaultTextFormat(textFormat);
		textField.set_wordWrap(true);
		textField.set_width(this.mStage.get_stageWidth() * 0.75);
		textField.set_autoSize(0);
		textField.set_text(message);
		textField.set_x((this.mStage.get_stageWidth() - textField.get_width()) / 2);
		textField.set_y((this.mStage.get_stageHeight() - textField.get_height()) / 2);
		textField.set_background(true);
		textField.set_backgroundColor(5570560);
		this.updateNativeOverlay();
		this.get_nativeOverlay().addChild(background);
		this.get_nativeOverlay().addChild(textField);
		this.stop(true);
		haxe_Log.trace("[Starling]",{ fileName : "Starling.hx", lineNumber : 644, className : "starling.core.Starling", methodName : "stopWithFatalError", customParams : [message]});
		this.dispatchEventWith("fatalError",false,message);
	}
	,makeCurrent: function() {
		starling_core_Starling.sCurrent = this;
	}
	,start: function() {
		this.mStarted = this.mRendering = true;
		this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	}
	,stop: function(suspendRendering) {
		if(suspendRendering == null) {
			suspendRendering = false;
		}
		this.mStarted = false;
		this.mRendering = !suspendRendering;
	}
	,onStage3DError: function(event) {
		if(event.errorID == 3702) {
			this.stopWithFatalError("Context3D not available! Possible reasons: wrong " + (openfl_system_Capabilities.playerType == "Desktop"?"renderMode":"wmode") + " or missing device support.");
		} else {
			this.stopWithFatalError("Stage3D error: " + event.text);
		}
	}
	,onContextCreated: function(event) {
		if(!starling_core_Starling.get_handleLostContext() && this.mContext != null) {
			event.stopImmediatePropagation();
			this.stopWithFatalError("The application lost the device context!");
			haxe_Log.trace("[Starling] Enable 'Starling.handleLostContext' to avoid this error.",{ fileName : "Starling.hx", lineNumber : 699, className : "starling.core.Starling", methodName : "onContextCreated"});
		} else {
			this.initialize();
		}
	}
	,onEnterFrame: function(event) {
		if(!this.mShareContext) {
			if(this.mStarted) {
				this.nextFrame();
			} else if(this.mRendering) {
				this.render();
			}
		}
		this.updateNativeOverlay();
	}
	,onKey: function(event) {
		if(!this.mStarted) {
			return;
		}
		var keyEvent = new starling_events_KeyboardEvent(event.type,event.charCode,event.keyCode,event.keyLocation,event.ctrlKey,event.altKey,event.shiftKey);
		this.makeCurrent();
		if(this.mBroadcastKeyboardEvents) {
			this.mStage.broadcastEvent(keyEvent);
		} else {
			this.mStage.dispatchEvent(keyEvent);
		}
		if(keyEvent.isDefaultPrevented()) {
			event.preventDefault();
		}
	}
	,onResize: function(event) {
		var _gthis = this;
		var stageWidth = (js_Boot.__cast(event.target , openfl_display_Stage)).stageWidth;
		var stageHeight = (js_Boot.__cast(event.target , openfl_display_Stage)).stageHeight;
		var dispatchResizeEvent = null;
		dispatchResizeEvent = function() {
			_gthis.makeCurrent();
			_gthis.removeEventListener("context3DCreate",dispatchResizeEvent);
			_gthis.mStage.dispatchEvent(new starling_events_ResizeEvent("resize",stageWidth,stageHeight));
		};
		var dispatchResizeEvent1 = dispatchResizeEvent;
		if(this.get_contextValid()) {
			dispatchResizeEvent1();
		} else {
			this.addEventListener("context3DCreate",dispatchResizeEvent1);
		}
	}
	,onMouseLeave: function(event) {
		this.mTouchProcessor.enqueueMouseLeftStage();
	}
	,onTouch: function(event) {
		if(!this.mStarted) {
			return;
		}
		var globalX;
		var globalY;
		var touchID;
		var phase = null;
		var pressure = 1.0;
		var width = 1.0;
		var height = 1.0;
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			globalX = mouseEvent.stageX;
			globalY = mouseEvent.stageY;
			touchID = 0;
			if(event.type == "mouseDown") {
				this.mLeftMouseDown = true;
			} else if(event.type == "mouseUp") {
				this.mLeftMouseDown = false;
			}
		} else {
			var touchEvent = js_Boot.__cast(event , openfl_events_TouchEvent);
			if(openfl_ui_Mouse.supportsCursor && touchEvent.isPrimaryTouchPoint) {
				return;
			} else {
				globalX = touchEvent.stageX;
				globalY = touchEvent.stageY;
				touchID = touchEvent.touchPointID;
				pressure = touchEvent.pressure;
				width = touchEvent.sizeX;
				height = touchEvent.sizeY;
			}
		}
		switch(event.type) {
		case "mouseDown":
			phase = "began";
			break;
		case "mouseMove":
			if(this.mLeftMouseDown) {
				phase = "moved";
			} else {
				phase = "hover";
			}
			break;
		case "mouseUp":
			phase = "ended";
			break;
		case "touchBegin":
			phase = "began";
			break;
		case "touchEnd":
			phase = "ended";
			break;
		case "touchMove":
			phase = "moved";
			break;
		}
		globalX = this.mStage.get_stageWidth() * (globalX - this.mViewPort.x) / this.mViewPort.width;
		globalY = this.mStage.get_stageHeight() * (globalY - this.mViewPort.y) / this.mViewPort.height;
		this.mTouchProcessor.enqueue(touchID,phase,globalX,globalY,pressure,width,height);
		if(event.type == "mouseUp" && openfl_ui_Mouse.supportsCursor) {
			this.mTouchProcessor.enqueue(touchID,"hover",globalX,globalY);
		}
	}
	,get_touchEventTypes: function() {
		var types = [];
		if(starling_core_Starling.get_multitouchEnabled()) {
			types.push("touchBegin");
			types.push("touchMove");
			types.push("touchEnd");
		}
		if(!starling_core_Starling.get_multitouchEnabled() || openfl_ui_Mouse.supportsCursor) {
			types.push("mouseDown");
			types.push("mouseMove");
			types.push("mouseUp");
		}
		return types;
	}
	,registerProgram: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = this.mContext.createProgram();
		program.upload(vertexShader,fragmentShader);
		this.get_programs().set(name,program);
		return program;
	}
	,registerProgramFromSource: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = starling_core_RenderSupport.assembleAgal(vertexShader,fragmentShader);
		this.get_programs().set(name,program);
		return program;
	}
	,deleteProgram: function(name) {
		var program = this.getProgram(name);
		if(program != null) {
			program.dispose();
			this.get_programs().remove(name);
		}
	}
	,getProgram: function(name) {
		return this.get_programs().get(name);
	}
	,hasProgram: function(name) {
		return this.get_programs().exists(name);
	}
	,get_programs: function() {
		return this.get_contextData().get("Starling.programs");
	}
	,get_isStarted: function() {
		return this.mStarted;
	}
	,get_juggler: function() {
		return this.mJuggler;
	}
	,get_context: function() {
		return this.mContext;
	}
	,get_contextData: function() {
		return starling_core_Starling.sContextData.h[this.mStage3D.__id__];
	}
	,get_backBufferWidth: function() {
		return this.mClippedViewPort.width | 0;
	}
	,get_backBufferHeight: function() {
		return this.mClippedViewPort.height | 0;
	}
	,get_backBufferPixelsPerPoint: function() {
		return this.mNativeStageContentScaleFactor | 0;
	}
	,get_simulateMultitouch: function() {
		return this.mSimulateMultitouch;
	}
	,set_simulateMultitouch: function(value) {
		this.mSimulateMultitouch = value;
		if(this.mContext != null) {
			this.mTouchProcessor.set_simulateMultitouch(value);
		}
		return this.mSimulateMultitouch;
	}
	,get_enableErrorChecking: function() {
		return this.mEnableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		this.mEnableErrorChecking = value;
		if(this.mContext != null) {
			this.mContext.set_enableErrorChecking(value);
		}
		return this.mEnableErrorChecking;
	}
	,get_antiAliasing: function() {
		return this.mAntiAliasing;
	}
	,set_antiAliasing: function(value) {
		if(this.mAntiAliasing != value) {
			this.mAntiAliasing = value;
			if(this.get_contextValid()) {
				this.updateViewPort(true);
			}
		}
		return this.mAntiAliasing;
	}
	,get_viewPort: function() {
		return this.mViewPort;
	}
	,set_viewPort: function(value) {
		return this.mViewPort = value.clone();
	}
	,get_contentScaleFactor: function() {
		return this.mViewPort.width * this.mNativeStageContentScaleFactor / this.mStage.get_stageWidth();
	}
	,get_nativeOverlay: function() {
		return this.mNativeOverlay;
	}
	,get_showStats: function() {
		if(this.mStatsDisplay != null) {
			return this.mStatsDisplay.get_parent() != null;
		} else {
			return false;
		}
	}
	,set_showStats: function(value) {
		if(value == this.get_showStats()) {
			if(this.mStatsDisplay != null) {
				return this.mStatsDisplay.get_parent() != null;
			} else {
				return false;
			}
		}
		if(value) {
			if(this.mStatsDisplay != null) {
				this.mStage.addChild(this.mStatsDisplay);
			} else {
				this.showStatsAt();
			}
		} else {
			this.mStatsDisplay.removeFromParent();
		}
		if(this.mStatsDisplay != null) {
			return this.mStatsDisplay.get_parent() != null;
		} else {
			return false;
		}
	}
	,showStatsAt: function(hAlign,vAlign,scale) {
		if(scale == null) {
			scale = 1;
		}
		if(vAlign == null) {
			vAlign = "top";
		}
		if(hAlign == null) {
			hAlign = "left";
		}
		var _gthis = this;
		var onRootCreated = null;
		if(this.mContext == null) {
			this.addEventListener("rootCreated",onRootCreated);
		} else {
			var stageWidth = this.mStage.get_stageWidth();
			var stageHeight = this.mStage.get_stageHeight();
			if(this.mStatsDisplay == null) {
				this.mStatsDisplay = new starling_core_StatsDisplay();
				this.mStatsDisplay.set_touchable(false);
			}
			this.mStage.addChild(this.mStatsDisplay);
			this.mStatsDisplay.set_scaleX(this.mStatsDisplay.set_scaleY(scale));
			if(hAlign == "left") {
				this.mStatsDisplay.set_x(0);
			} else if(hAlign == "right") {
				this.mStatsDisplay.set_x(stageWidth - this.mStatsDisplay.get_width());
			} else {
				this.mStatsDisplay.set_x((stageWidth - this.mStatsDisplay.get_width()) / 2 | 0);
			}
			if(vAlign == "top") {
				this.mStatsDisplay.set_y(0);
			} else if(vAlign == "bottom") {
				this.mStatsDisplay.set_y(stageHeight - this.mStatsDisplay.get_height());
			} else {
				this.mStatsDisplay.set_y((stageHeight - this.mStatsDisplay.get_height()) / 2 | 0);
			}
		}
		var onRootCreated1 = null;
		onRootCreated1 = function() {
			_gthis.showStatsAt(hAlign,vAlign,scale);
			_gthis.removeEventListener("rootCreated",onRootCreated1);
		};
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_stage3D: function() {
		return this.mStage3D;
	}
	,get_nativeStage: function() {
		return this.mNativeStage;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,get_rootClass: function() {
		return this.mRootClass;
	}
	,set_rootClass: function(value) {
		if(this.mRootClass != null && this.mRoot != null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Root class may not change after root has been instantiated"));
		} else if(this.mRootClass == null) {
			this.mRootClass = value;
			if(this.mContext != null) {
				this.initializeRoot();
			}
		}
		return this.mRootClass;
	}
	,get_shareContext: function() {
		return this.mShareContext;
	}
	,set_shareContext: function(value) {
		return this.mShareContext = value;
	}
	,get_profile: function() {
		return this.mProfile;
	}
	,get_supportHighResolutions: function() {
		return this.mSupportHighResolutions;
	}
	,set_supportHighResolutions: function(value) {
		if(this.mSupportHighResolutions != value) {
			this.mSupportHighResolutions = value;
			if(this.get_contextValid()) {
				this.updateViewPort(true);
			}
		}
		return this.mSupportHighResolutions;
	}
	,get_broadcastKeyboardEvents: function() {
		return this.mBroadcastKeyboardEvents;
	}
	,set_broadcastKeyboardEvents: function(value) {
		return this.mBroadcastKeyboardEvents = value;
	}
	,get_touchProcessor: function() {
		return this.mTouchProcessor;
	}
	,set_touchProcessor: function(value) {
		if(value != this.mTouchProcessor) {
			this.mTouchProcessor.dispose();
			this.mTouchProcessor = value;
		}
		return this.mTouchProcessor;
	}
	,get_contextValid: function() {
		if(this.mContext != null) {
			var driverInfo = this.mContext.driverInfo;
			if(driverInfo != null && driverInfo != "") {
				return driverInfo != "Disposed";
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,__class__: starling_core_Starling
	,__properties__: {get_contextValid:"get_contextValid",set_touchProcessor:"set_touchProcessor",get_touchProcessor:"get_touchProcessor",set_supportHighResolutions:"set_supportHighResolutions",get_supportHighResolutions:"get_supportHighResolutions",get_profile:"get_profile",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",set_rootClass:"set_rootClass",get_rootClass:"get_rootClass",get_root:"get_root",get_nativeStage:"get_nativeStage",get_stage3D:"get_stage3D",get_stage:"get_stage",set_showStats:"set_showStats",get_showStats:"get_showStats",get_nativeOverlay:"get_nativeOverlay",get_contentScaleFactor:"get_contentScaleFactor",set_viewPort:"set_viewPort",get_viewPort:"get_viewPort",set_antiAliasing:"set_antiAliasing",get_antiAliasing:"get_antiAliasing",set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch",get_backBufferPixelsPerPoint:"get_backBufferPixelsPerPoint",get_backBufferHeight:"get_backBufferHeight",get_backBufferWidth:"get_backBufferWidth",get_contextData:"get_contextData",get_context:"get_context",get_juggler:"get_juggler",get_isStarted:"get_isStarted",get_programs:"get_programs",get_touchEventTypes:"get_touchEventTypes"}
});
var starling_core_StatsDisplay = function() {
	this.mDrawCount = 0;
	this.mMemory = 0;
	this.mFps = 0;
	this.mTotalTime = 0;
	this.mFrameCount = 0;
	starling_display_Sprite.call(this);
	this.mBackground = new starling_display_Quad(70,45,0);
	this.mTextField = new starling_text_TextField(68,45,"","_sans",12,16777215);
	this.mTextField.set_x(2);
	this.mTextField.set_hAlign("left");
	this.mTextField.set_vAlign("top");
	this.addChild(this.mBackground);
	this.addChild(this.mTextField);
	this.set_blendMode("none");
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
	this.addEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
};
$hxClasses["starling.core.StatsDisplay"] = starling_core_StatsDisplay;
starling_core_StatsDisplay.__name__ = ["starling","core","StatsDisplay"];
starling_core_StatsDisplay.__super__ = starling_display_Sprite;
starling_core_StatsDisplay.prototype = $extend(starling_display_Sprite.prototype,{
	mBackground: null
	,mTextField: null
	,mFrameCount: null
	,mTotalTime: null
	,mFps: null
	,mMemory: null
	,mDrawCount: null
	,onAddedToStage: function(e) {
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.mTotalTime = this.mFrameCount = 0;
		this.update();
	}
	,onRemovedFromStage: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,onEnterFrame: function(e) {
		this.mTotalTime += (js_Boot.__cast(e , starling_events_EnterFrameEvent)).get_passedTime();
		this.mFrameCount++;
		if(this.mTotalTime > 0.5) {
			this.update();
			this.mTotalTime = 0;
			this.mFrameCount = 0;
		}
	}
	,update: function() {
		this.mFps = this.mTotalTime > 0?this.mFrameCount / this.mTotalTime:0;
		this.mMemory = openfl_system_System.get_totalMemory() * 0.000000954;
		this.mTextField.set_text("FPS: " + Math.round(this.mFps * 10) / 10 + "\nMEM: " + Math.round(this.mMemory * 10) / 10 + "\nDRW: " + (this.mTotalTime > 0?this.mDrawCount - 2:this.mDrawCount));
	}
	,render: function(support,parentAlpha) {
		support.finishQuadBatch();
		starling_display_Sprite.prototype.render.call(this,support,parentAlpha);
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,set_drawCount: function(value) {
		return this.mDrawCount = value;
	}
	,get_fps: function() {
		return this.mFps;
	}
	,set_fps: function(value) {
		return this.mFps = value;
	}
	,get_memory: function() {
		return this.mMemory;
	}
	,set_memory: function(value) {
		return this.mMemory = value;
	}
	,__class__: starling_core_StatsDisplay
	,__properties__: $extend(starling_display_Sprite.prototype.__properties__,{set_memory:"set_memory",get_memory:"get_memory",set_fps:"set_fps",get_fps:"get_fps",set_drawCount:"set_drawCount",get_drawCount:"get_drawCount"})
});
var starling_display_BlendMode = function() { };
$hxClasses["starling.display.BlendMode"] = starling_display_BlendMode;
starling_display_BlendMode.__name__ = ["starling","display","BlendMode"];
starling_display_BlendMode.getBlendFactors = function(mode,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	var modes = starling_display_BlendMode.sBlendFactors[premultipliedAlpha?1:0];
	var ret = __map_reserved[mode] != null?modes.getReserved(mode):modes.h[mode];
	if(ret != null) {
		return ret;
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid blend mode"));
	}
};
starling_display_BlendMode.register = function(name,sourceFactor,destFactor,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	var modes = starling_display_BlendMode.sBlendFactors[premultipliedAlpha?1:0];
	var v = [sourceFactor,destFactor];
	if(__map_reserved[name] != null) {
		modes.setReserved(name,v);
	} else {
		modes.h[name] = v;
	}
	var otherModes = starling_display_BlendMode.sBlendFactors[!premultipliedAlpha?1:0];
	if(!(__map_reserved[name] != null?otherModes.existsReserved(name):otherModes.h.hasOwnProperty(name))) {
		var v1 = [sourceFactor,destFactor];
		if(__map_reserved[name] != null) {
			otherModes.setReserved(name,v1);
		} else {
			otherModes.h[name] = v1;
		}
	}
};
var starling_display_Ring = function(innerRadius,outerRadius,color,premultipliedAlpha,nsides,startangle) {
	if(nsides == null) {
		nsides = -1;
	}
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	if(color == null) {
		color = 16777215;
	}
	starling_display_Sprite.call(this);
	this._polygons = [];
	this._innerRadius = innerRadius;
	this._outerRadius = outerRadius;
	this._outerRadius2 = outerRadius * outerRadius;
	var c0 = new openfl_geom_Point();
	var c1 = new openfl_geom_Point();
	var p0 = new openfl_geom_Point();
	var p1 = new openfl_geom_Point();
	var nParts = Math.max(Math.round(outerRadius),8) | 0;
	if(nsides > -1) {
		nParts = nsides;
	}
	var angle = 0;
	if(startangle != null) {
		angle = startangle;
	}
	var _g1 = 0;
	var _g = nParts;
	while(_g1 < _g) {
		var i = _g1++;
		var a0 = angle + (i + 0.0) * 2.0 * Math.PI / nParts;
		var a1 = angle + (i + 1.0) * 2.0 * Math.PI / nParts;
		var ca0 = Math.cos(a0);
		var sa0 = Math.sin(a0);
		var ca1 = Math.cos(a1);
		var sa1 = Math.sin(a1);
		c0.x = outerRadius + ca0 * innerRadius;
		c0.y = outerRadius + sa0 * innerRadius;
		c1.x = outerRadius + ca1 * innerRadius;
		c1.y = outerRadius + sa1 * innerRadius;
		p0.x = outerRadius + ca0 * outerRadius;
		p0.y = outerRadius + sa0 * outerRadius;
		p1.x = outerRadius + ca1 * outerRadius;
		p1.y = outerRadius + sa1 * outerRadius;
		var q = new starling_display_Poly4(c0.x,c0.y,p0.x,p0.y,c1.x,c1.y,p1.x,p1.y,color,premultipliedAlpha);
		this._polygons.push(q);
		this.addChild(q);
	}
};
$hxClasses["starling.display.Ring"] = starling_display_Ring;
starling_display_Ring.__name__ = ["starling","display","Ring"];
starling_display_Ring.__super__ = starling_display_Sprite;
starling_display_Ring.prototype = $extend(starling_display_Sprite.prototype,{
	_innerRadius: null
	,_outerRadius: null
	,_outerRadius2: null
	,_polygons: null
	,setpolycolor: function(value) {
		var _g1 = 0;
		var _g = this._polygons.length;
		while(_g1 < _g) this._polygons[_g1++].set_color(value);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.get_visible() || !this.get_touchable())) {
			return null;
		}
		var vx = localPoint.x - this._outerRadius;
		var vy = localPoint.y - this._outerRadius;
		if(vx * vx + vy * vy < this._outerRadius2) {
			return this;
		} else {
			return null;
		}
	}
	,__class__: starling_display_Ring
});
var starling_display_Disk = function(radius,color,premultipliedAlpha,nsides,startangle) {
	if(nsides == null) {
		nsides = -1;
	}
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	if(color == null) {
		color = 16777215;
	}
	starling_display_Ring.call(this,0,radius,color,premultipliedAlpha,nsides,startangle);
};
$hxClasses["starling.display.Disk"] = starling_display_Disk;
starling_display_Disk.__name__ = ["starling","display","Disk"];
starling_display_Disk.__super__ = starling_display_Ring;
starling_display_Disk.prototype = $extend(starling_display_Ring.prototype,{
	__class__: starling_display_Disk
});
var starling_display_Image = function(texture) {
	if(texture != null) {
		var frame = texture.get_frame();
		var width = frame != null?frame.width:texture.get_width();
		var height = frame != null?frame.height:texture.get_height();
		var pma = texture.get_premultipliedAlpha();
		starling_display_Quad.call(this,width,height,16777215,pma);
		this.mVertexData.setTexCoords(0,0.0,0.0);
		this.mVertexData.setTexCoords(1,1.0,0.0);
		this.mVertexData.setTexCoords(2,0.0,1.0);
		this.mVertexData.setTexCoords(3,1.0,1.0);
		this.mTexture = texture;
		this.mSmoothing = "bilinear";
		this.mVertexDataCache = new starling_utils_VertexData(4,pma);
		this.mVertexDataCacheInvalid = true;
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture cannot be null"));
	}
};
$hxClasses["starling.display.Image"] = starling_display_Image;
starling_display_Image.__name__ = ["starling","display","Image"];
starling_display_Image.fromBitmap = function(bitmap,generateMipMaps,scale) {
	if(scale == null) {
		scale = 1;
	}
	if(generateMipMaps == null) {
		generateMipMaps = true;
	}
	return new starling_display_Image(starling_textures_Texture.fromBitmap(bitmap,generateMipMaps,false,scale));
};
starling_display_Image.__super__ = starling_display_Quad;
starling_display_Image.prototype = $extend(starling_display_Quad.prototype,{
	mTexture: null
	,mSmoothing: null
	,mVertexDataCache: null
	,mVertexDataCacheInvalid: null
	,onVertexDataChanged: function() {
		this.mVertexDataCacheInvalid = true;
	}
	,readjustSize: function() {
		var frame = this.get_texture().get_frame();
		var width = frame != null?frame.width:this.get_texture().get_width();
		var height = frame != null?frame.height:this.get_texture().get_height();
		this.mVertexData.setPosition(0,0.0,0.0);
		this.mVertexData.setPosition(1,width,0.0);
		this.mVertexData.setPosition(2,0.0,height);
		this.mVertexData.setPosition(3,width,height);
		this.onVertexDataChanged();
	}
	,setTexCoords: function(vertexID,coords) {
		this.mVertexData.setTexCoords(vertexID,coords.x,coords.y);
		this.onVertexDataChanged();
	}
	,setTexCoordsTo: function(vertexID,u,v) {
		this.mVertexData.setTexCoords(vertexID,u,v);
		this.onVertexDataChanged();
	}
	,getTexCoords: function(vertexID,resultPoint) {
		if(resultPoint == null) {
			resultPoint = new openfl_geom_Point();
		}
		this.mVertexData.getTexCoords(vertexID,resultPoint);
		return resultPoint;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		this.copyVertexDataTransformedTo(targetData,targetVertexID,null);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		if(this.mVertexDataCacheInvalid) {
			this.mVertexDataCacheInvalid = false;
			this.mVertexData.copyTo(this.mVertexDataCache);
			this.mTexture.adjustVertexData(this.mVertexDataCache,0,4);
		}
		this.mVertexDataCache.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,set_texture: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture cannot be null"));
		} else if(value != this.mTexture) {
			this.mTexture = value;
			this.mVertexData.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha());
			this.mVertexDataCache.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha(),false);
			this.onVertexDataChanged();
		}
		return this.mTexture;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,set_smoothing: function(value) {
		if(starling_textures_TextureSmoothing.isValid(value)) {
			this.mSmoothing = value;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid smoothing mode: " + value));
		}
		return this.mSmoothing;
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha,this.mTexture,this.mSmoothing);
	}
	,__class__: starling_display_Image
	,__properties__: $extend(starling_display_Quad.prototype.__properties__,{set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_texture:"set_texture",get_texture:"get_texture"})
});
var starling_display_Poly4 = function(x1,y1,x2,y2,x3,y3,x4,y4,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	if(color == null) {
		color = 16777215;
	}
	if(y4 == null) {
		y4 = 0;
	}
	if(x4 == null) {
		x4 = 0;
	}
	if(y3 == null) {
		y3 = 0;
	}
	if(x3 == null) {
		x3 = 0;
	}
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	this._lowerRight = new openfl_geom_Point(0,0);
	this.ymax = 0;
	this.ymin = 0;
	this.xmax = 0;
	this.xmin = 0;
	this.p4 = new openfl_geom_Point(0,0);
	this.p3 = new openfl_geom_Point(0,0);
	this.p2 = new openfl_geom_Point(0,0);
	this.p1 = new openfl_geom_Point(0,0);
	this.p1.setTo(x1,y1);
	this.p2.setTo(x2,y2);
	this.p3.setTo(x3,y3);
	this.p4.setTo(x4,y4);
	this.xmin = Math.min(this.p1.x,Math.min(this.p2.x,Math.min(this.p3.x,this.p4.x)));
	this.ymin = Math.min(this.p1.y,Math.min(this.p2.y,Math.min(this.p3.y,this.p4.y)));
	this.xmax = Math.max(this.p1.x,Math.max(this.p2.x,Math.max(this.p3.x,this.p4.x)));
	this.ymax = Math.max(this.p1.y,Math.max(this.p2.y,Math.max(this.p3.y,this.p4.y)));
	starling_display_Quad.call(this,this.xmax - this.xmin,this.ymax - this.ymin,color,premultipliedAlpha);
	this.mVertexData.setPosition(0,this.p1.x - this.xmin,this.p1.y - this.ymin);
	this.mVertexData.setPosition(1,this.p2.x - this.xmin,this.p2.y - this.ymin);
	this.mVertexData.setPosition(2,this.p3.x - this.xmin,this.p3.y - this.ymin);
	this.mVertexData.setPosition(3,this.p4.x - this.xmin,this.p4.y - this.ymin);
	this.onVertexDataChanged();
	this.set_x(this.xmin);
	this.set_y(this.ymin);
	this._lowerRight.setTo(this.xmax - this.xmin,this.ymax - this.ymin);
};
$hxClasses["starling.display.Poly4"] = starling_display_Poly4;
starling_display_Poly4.__name__ = ["starling","display","Poly4"];
starling_display_Poly4.__super__ = starling_display_Quad;
starling_display_Poly4.prototype = $extend(starling_display_Quad.prototype,{
	p1: null
	,p2: null
	,p3: null
	,p4: null
	,xmin: null
	,xmax: null
	,ymin: null
	,ymax: null
	,_lowerRight: null
	,min4: function(a,b,c,d) {
		return Math.min(a,Math.min(b,Math.min(c,d)));
	}
	,max4: function(a,b,c,d) {
		return Math.max(a,Math.max(b,Math.max(c,d)));
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		if(targetSpace == this) {
			resultRect.setTo(0.0,0.0,this._lowerRight.x,this._lowerRight.y);
		} else if(targetSpace == this.get_parent() && this.get_rotation() == 0.0) {
			var scaleX = this.get_scaleX();
			var scaleY = this.get_scaleY();
			resultRect.setTo(this.get_x() - this.get_pivotX() * scaleX,this.get_y() - this.get_pivotY() * scaleY,this._lowerRight.x * scaleX,this._lowerRight.y * scaleY);
			if(scaleX < 0) {
				resultRect.width *= -1;
				resultRect.x -= resultRect.width;
			}
			if(scaleY < 0) {
				resultRect.height *= -1;
				resultRect.y -= resultRect.height;
			}
		} else {
			resultRect = starling_display_Quad.prototype.getBounds.call(this,targetSpace,resultRect);
		}
		return resultRect;
	}
	,__class__: starling_display_Poly4
});
var starling_display_Line = function(x1,y1,x2,y2,thickness,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	this.l4 = new openfl_geom_Point(0,0);
	this.l3 = new openfl_geom_Point(0,0);
	this.l2 = new openfl_geom_Point(0,0);
	this.l1 = new openfl_geom_Point(0,0);
	this.to = new openfl_geom_Point(0,0);
	this.from = new openfl_geom_Point(0,0);
	this.from.setTo(x1,y1);
	this.to.setTo(x2,y2);
	var dx = this.to.x - this.from.x;
	var dy = this.to.y - this.from.y;
	var l = Math.sqrt(dx * dx + dy * dy);
	var u = new openfl_geom_Point(dx / l,dy / l);
	var v = new openfl_geom_Point(u.y,-u.x);
	var halfT = thickness * 0.5;
	this.l1 = this.from.clone();
	this.l1.offset(v.x * halfT,v.y * halfT);
	this.l1.offset(-u.x * halfT,-u.y * halfT);
	this.l2 = this.from.clone();
	this.l2.offset(-v.x * halfT,-v.y * halfT);
	this.l2.offset(-u.x * halfT,-u.y * halfT);
	this.l3 = this.to.clone();
	this.l3.offset(v.x * halfT,v.y * halfT);
	this.l3.offset(u.x * halfT,u.y * halfT);
	this.l4 = this.to.clone();
	this.l4.offset(-v.x * halfT,-v.y * halfT);
	this.l4.offset(u.x * halfT,u.y * halfT);
	starling_display_Poly4.call(this,this.l1.x,this.l1.y,this.l2.x,this.l2.y,this.l3.x,this.l3.y,this.l4.x,this.l4.y,color,premultipliedAlpha);
};
$hxClasses["starling.display.Line"] = starling_display_Line;
starling_display_Line.__name__ = ["starling","display","Line"];
starling_display_Line.__super__ = starling_display_Poly4;
starling_display_Line.prototype = $extend(starling_display_Poly4.prototype,{
	from: null
	,to: null
	,l1: null
	,l2: null
	,l3: null
	,l4: null
	,__class__: starling_display_Line
});
var starling_display_QuadBatch = function(optimizeForProfile) {
	if(optimizeForProfile == null) {
		optimizeForProfile = false;
	}
	starling_display_DisplayObject.call(this);
	this.mVertexData = new starling_utils_VertexData(0,true);
	this.mIndexData = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.mNumQuads = 0;
	this.mTinted = false;
	this.mSyncRequired = false;
	this.mBatchable = false;
	this.mOwnsTexture = false;
	if(optimizeForProfile) {
		var profile = starling_core_Starling.get_current().get_profile();
		this.mForceTinted = profile != 1 && profile != 0;
	}
	this.mForceTinted = true;
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.display.QuadBatch"] = starling_display_QuadBatch;
starling_display_QuadBatch.__name__ = ["starling","display","QuadBatch"];
starling_display_QuadBatch.compile = function(object,quadBatches) {
	starling_display_QuadBatch.compileObject(object,quadBatches,-1,new openfl_geom_Matrix());
};
starling_display_QuadBatch.optimize = function(quadBatches) {
	var batch1;
	var batch2;
	var _g1 = 0;
	var _g = quadBatches.get_length();
	while(_g1 < _g) {
		var i = _g1++;
		batch1 = quadBatches.get(i);
		var j = i + 1;
		while(j < quadBatches.get_length()) {
			batch2 = quadBatches.get(j);
			if(!batch1.isStateChange(batch2.get_tinted(),1.0,batch2.get_texture(),batch2.get_smoothing(),batch2.get_blendMode(),batch2.get_numQuads())) {
				batch1.addQuadBatch(batch2);
				batch2.dispose();
				quadBatches.splice(j,1);
			} else {
				++j;
			}
		}
	}
};
starling_display_QuadBatch.compileObject = function(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,ignoreCurrentFilter) {
	if(ignoreCurrentFilter == null) {
		ignoreCurrentFilter = false;
	}
	if(alpha == null) {
		alpha = 1.0;
	}
	if(js_Boot.__instanceof(object,starling_display_Sprite3D)) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Sprite3D objects cannot be flattened"));
	}
	var i;
	var quadBatch;
	var isRootObject = false;
	var objectAlpha = object.get_alpha();
	var container = js_Boot.__instanceof(object,starling_display_DisplayObjectContainer)?object:null;
	var quad = js_Boot.__instanceof(object,starling_display_Quad)?object:null;
	var batch = js_Boot.__instanceof(object,starling_display_QuadBatch)?object:null;
	var filter = object.get_filter();
	if(quadBatchID == -1) {
		isRootObject = true;
		quadBatchID = 0;
		objectAlpha = 1.0;
		blendMode = object.get_blendMode();
		ignoreCurrentFilter = true;
		if(quadBatches.get_length() == 0) {
			quadBatches.set(0,new starling_display_QuadBatch(true));
		} else {
			quadBatches.get(0).reset();
			quadBatches.get(0).set_ownsTexture(false);
		}
	} else {
		if(object.get_mask() != null) {
			haxe_Log.trace("[Starling] Masks are ignored on children of a flattened sprite.",{ fileName : "QuadBatch.hx", lineNumber : 584, className : "starling.display.QuadBatch", methodName : "compileObject"});
		}
		if(js_Boot.__instanceof(object,starling_display_Sprite) && (js_Boot.__cast(object , starling_display_Sprite)).get_clipRect() != null) {
			haxe_Log.trace("[Starling] ClipRects are ignored on children of a flattened sprite.",{ fileName : "QuadBatch.hx", lineNumber : 587, className : "starling.display.QuadBatch", methodName : "compileObject"});
		}
	}
	if(filter != null && !ignoreCurrentFilter) {
		if(filter.get_mode() == "above") {
			quadBatchID = starling_display_QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
		}
		quadBatchID = starling_display_QuadBatch.compileObject(filter.compile(object),quadBatches,quadBatchID,transformationMatrix,alpha,blendMode);
		quadBatches.get(quadBatchID).set_ownsTexture(true);
		if(filter.get_mode() == "below") {
			quadBatchID = starling_display_QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
		}
	} else if(container != null) {
		var numChildren = container.get_numChildren();
		var childMatrix = new openfl_geom_Matrix();
		var _g1 = 0;
		while(_g1 < numChildren) {
			var child = container.getChildAt(_g1++);
			if(child.get_hasVisibleArea()) {
				var childBlendMode = child.get_blendMode() == "auto"?blendMode:child.get_blendMode();
				childMatrix.copyFrom(transformationMatrix);
				starling_core_RenderSupport.transformMatrixForObject(childMatrix,child);
				quadBatchID = starling_display_QuadBatch.compileObject(child,quadBatches,quadBatchID,childMatrix,alpha * objectAlpha,childBlendMode);
			}
		}
	} else if(quad != null || batch != null) {
		var texture;
		var smoothing;
		var tinted;
		var numQuads;
		if(quad != null) {
			var image = js_Boot.__instanceof(quad,starling_display_Image)?quad:null;
			if(image != null) {
				texture = image.get_texture();
			} else {
				texture = null;
			}
			if(image != null) {
				smoothing = image.get_smoothing();
			} else {
				smoothing = null;
			}
			tinted = quad.get_tinted();
			numQuads = 1;
		} else {
			texture = batch.mTexture;
			smoothing = batch.mSmoothing;
			tinted = batch.mTinted;
			numQuads = batch.mNumQuads;
		}
		quadBatch = quadBatches.get(quadBatchID);
		if(quadBatch.isStateChange(tinted,alpha * objectAlpha,texture,smoothing,blendMode,numQuads)) {
			++quadBatchID;
			if(quadBatches.get_length() <= quadBatchID) {
				quadBatches.push(new starling_display_QuadBatch(true));
			}
			quadBatch = quadBatches.get(quadBatchID);
			quadBatch.reset();
			quadBatch.set_ownsTexture(false);
		}
		if(quad != null) {
			quadBatch.addQuad(quad,alpha,texture,smoothing,transformationMatrix,blendMode);
		} else {
			quadBatch.addQuadBatch(batch,alpha,transformationMatrix,blendMode);
		}
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported display object: " + Type.getClassName(object == null?null:js_Boot.getClass(object))));
	}
	if(isRootObject) {
		i = quadBatches.get_length() - 1;
		while(i > quadBatchID) {
			quadBatches.pop().dispose();
			--i;
		}
	}
	return quadBatchID;
};
starling_display_QuadBatch.getImageProgramName = function(tinted,mipMap,repeat,format,smoothing) {
	if(smoothing == null) {
		smoothing = "bilinear";
	}
	if(repeat == null) {
		repeat = false;
	}
	if(mipMap == null) {
		mipMap = true;
	}
	if(format == null) {
		format = 1;
	}
	var bitField = 0;
	if(tinted) {
		bitField = bitField | 1;
	}
	if(mipMap) {
		bitField = bitField | 2;
	}
	if(repeat) {
		bitField = bitField | 4;
	}
	if(smoothing == "none") {
		bitField = bitField | 8;
	} else if(smoothing == "trilinear") {
		bitField = bitField | 16;
	}
	if(format == 3) {
		bitField = bitField | 32;
	} else if(format == 4) {
		bitField = bitField | 64;
	}
	var name = starling_display_QuadBatch.sProgramNameCache.h[bitField];
	if(name == null) {
		name = "QB_i." + StringTools.hex(bitField);
		starling_display_QuadBatch.sProgramNameCache.h[bitField] = name;
	}
	return name;
};
starling_display_QuadBatch.__super__ = starling_display_DisplayObject;
starling_display_QuadBatch.prototype = $extend(starling_display_DisplayObject.prototype,{
	mNumQuads: null
	,mSyncRequired: null
	,mBatchable: null
	,mForceTinted: null
	,mOwnsTexture: null
	,mTinted: null
	,mTexture: null
	,mSmoothing: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mVertexData: null
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		this.destroyBuffers();
		this.mVertexData.set_numVertices(0);
		this.mIndexData = null;
		this.mNumQuads = 0;
		if(this.mTexture != null && this.mOwnsTexture) {
			this.mTexture.dispose();
		}
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,onContextCreated: function(event) {
		this.createBuffers();
	}
	,onVertexDataChanged: function() {
		this.mSyncRequired = true;
	}
	,clone: function() {
		var clone = new starling_display_QuadBatch();
		clone.mVertexData = this.mVertexData.clone(0,this.mNumQuads * 4);
		clone.mIndexData = this.mIndexData.slice(0,this.mNumQuads * 6);
		clone.mNumQuads = this.mNumQuads;
		clone.mTinted = this.mTinted;
		clone.mTexture = this.mTexture;
		clone.mSmoothing = this.mSmoothing;
		clone.mSyncRequired = true;
		clone.mForceTinted = this.mForceTinted;
		clone.set_blendMode(this.get_blendMode());
		clone.set_alpha(this.get_alpha());
		return clone;
	}
	,expand: function() {
		var oldCapacity = this.get_capacity();
		if(oldCapacity >= 16383) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Exceeded maximum number of quads!"));
		}
		this.set_capacity(oldCapacity < 8?16:oldCapacity * 2);
	}
	,createBuffers: function() {
		this.destroyBuffers();
		var numVertices = this.mVertexData.get_numVertices();
		var numIndices = this.mIndexData.get_length();
		var context = starling_core_Starling.get_current().get_context();
		if(numVertices == 0) {
			return;
		}
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		this.mVertexBuffer = context.createVertexBuffer(numVertices,8);
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,numVertices);
		this.mIndexBuffer = context.createIndexBuffer(numIndices);
		this.mIndexBuffer.uploadFromVector(this.mIndexData,0,numIndices);
		this.mSyncRequired = false;
	}
	,destroyBuffers: function() {
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
			this.mVertexBuffer = null;
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
			this.mIndexBuffer = null;
		}
	}
	,syncBuffers: function() {
		if(this.mVertexBuffer == null) {
			this.createBuffers();
		} else {
			this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,this.mVertexData.get_numVertices());
			this.mSyncRequired = false;
		}
	}
	,renderCustom: function(mvpMatrix,parentAlpha,blendMode) {
		if(parentAlpha == null) {
			parentAlpha = 1.0;
		}
		if(this.mNumQuads == 0) {
			return;
		}
		if(this.mSyncRequired) {
			this.syncBuffers();
		}
		var pma = this.mVertexData.get_premultipliedAlpha();
		var context = starling_core_Starling.get_current().get_context();
		var tinted = this.mTinted || parentAlpha != 1.0;
		starling_display_QuadBatch.sRenderAlpha.set(0,starling_display_QuadBatch.sRenderAlpha.set(1,starling_display_QuadBatch.sRenderAlpha.set(2,pma?parentAlpha:1.0)));
		starling_display_QuadBatch.sRenderAlpha.set(3,parentAlpha);
		starling_core_RenderSupport.setBlendFactors(pma,blendMode != null?blendMode:this.get_blendMode());
		context.setProgram(this.getProgram(tinted));
		if(tinted) {
			context.setProgramConstantsFromVector(1,0,starling_display_QuadBatch.sRenderAlpha,1);
		}
		context.setProgramConstantsFromMatrix(1,1,mvpMatrix,true);
		context.setVertexBufferAt(0,this.mVertexBuffer,0,2);
		if(this.mTexture == null || tinted) {
			context.setVertexBufferAt(1,this.mVertexBuffer,2,4);
		}
		if(this.mTexture != null) {
			context.setTextureAt(0,this.mTexture.get_base());
			context.setVertexBufferAt(2,this.mVertexBuffer,6,2);
		}
		context.drawTriangles(this.mIndexBuffer,0,this.mNumQuads * 2);
		if(this.mTexture != null) {
			context.setTextureAt(0,null);
			context.setVertexBufferAt(2,null);
		}
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(0,null);
	}
	,reset: function() {
		if(this.mTexture != null && this.mOwnsTexture) {
			this.mTexture.dispose();
		}
		this.mNumQuads = 0;
		this.mTexture = null;
		this.mSmoothing = null;
		this.mSyncRequired = true;
	}
	,addImage: function(image,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) {
			parentAlpha = 1.0;
		}
		this.addQuad(image,parentAlpha,image.get_texture(),image.get_smoothing(),modelViewMatrix,blendMode);
	}
	,addQuad: function(quad,parentAlpha,texture,smoothing,modelViewMatrix,blendMode) {
		if(parentAlpha == null) {
			parentAlpha = 1.0;
		}
		if(modelViewMatrix == null) {
			modelViewMatrix = quad.get_transformationMatrix();
		}
		var alpha = parentAlpha * quad.get_alpha();
		var vertexID = this.mNumQuads * 4;
		if(this.mNumQuads + 1 > this.mVertexData.get_numVertices() / 4) {
			this.expand();
		}
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null?blendMode:quad.get_blendMode());
			this.mTexture = texture;
			this.mTinted = this.mForceTinted || quad.get_tinted() || parentAlpha != 1.0;
			this.mSmoothing = smoothing;
			this.mVertexData.setPremultipliedAlpha(quad.get_premultipliedAlpha());
		}
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,modelViewMatrix);
		if(alpha != 1.0) {
			this.mVertexData.scaleAlpha(vertexID,alpha,4);
		}
		this.mSyncRequired = true;
		this.mNumQuads++;
	}
	,addQuadBatch: function(quadBatch,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) {
			parentAlpha = 1.0;
		}
		if(modelViewMatrix == null) {
			modelViewMatrix = quadBatch.get_transformationMatrix();
		}
		var alpha = parentAlpha * quadBatch.get_alpha();
		var vertexID = this.mNumQuads * 4;
		var numQuads = quadBatch.get_numQuads();
		if(this.mNumQuads + numQuads > this.get_capacity()) {
			this.set_capacity(this.mNumQuads + numQuads);
		}
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null?blendMode:quadBatch.get_blendMode());
			this.mTexture = quadBatch.mTexture;
			this.mTinted = this.mForceTinted || quadBatch.mTinted || parentAlpha != 1.0;
			this.mSmoothing = quadBatch.mSmoothing;
			this.mVertexData.setPremultipliedAlpha(quadBatch.mVertexData.get_premultipliedAlpha(),false);
		}
		quadBatch.mVertexData.copyTransformedTo(this.mVertexData,vertexID,modelViewMatrix,0,numQuads * 4);
		if(alpha != 1.0) {
			this.mVertexData.scaleAlpha(vertexID,alpha,numQuads * 4);
		}
		this.mSyncRequired = true;
		this.mNumQuads += numQuads;
	}
	,isStateChange: function(tinted,parentAlpha,texture,smoothing,blendMode,numQuads) {
		if(numQuads == null) {
			numQuads = 1;
		}
		if(this.mNumQuads == 0) {
			return false;
		} else if(this.mNumQuads + numQuads > 16383) {
			return true;
		} else if(this.mTexture == null && texture == null) {
			return this.get_blendMode() != blendMode;
		} else if(this.mTexture != null && texture != null) {
			if(!(this.mTexture.get_base() != texture.get_base() || this.mTexture.get_repeat() != texture.get_repeat() || this.mSmoothing != smoothing || this.mTinted != (this.mForceTinted || tinted || parentAlpha != 1.0))) {
				return this.get_blendMode() != blendMode;
			} else {
				return true;
			}
		} else {
			return true;
		}
	}
	,transformQuad: function(quadID,matrix) {
		this.mVertexData.transformVertex(quadID * 4,matrix,4);
		this.mSyncRequired = true;
	}
	,getVertexColor: function(quadID,vertexID) {
		return this.mVertexData.getColor(quadID * 4 + vertexID);
	}
	,setVertexColor: function(quadID,vertexID,color) {
		this.mVertexData.setColor(quadID * 4 + vertexID,color);
		this.mSyncRequired = true;
	}
	,getVertexAlpha: function(quadID,vertexID) {
		return this.mVertexData.getAlpha(quadID * 4 + vertexID);
	}
	,setVertexAlpha: function(quadID,vertexID,alpha) {
		this.mVertexData.setAlpha(quadID * 4 + vertexID,alpha);
		this.mSyncRequired = true;
	}
	,getQuadColor: function(quadID) {
		return this.mVertexData.getColor(quadID * 4);
	}
	,setQuadColor: function(quadID,color) {
		var _g = 0;
		while(_g < 4) this.mVertexData.setColor(quadID * 4 + _g++,color);
		this.mSyncRequired = true;
	}
	,getQuadAlpha: function(quadID) {
		return this.mVertexData.getAlpha(quadID * 4);
	}
	,setQuadAlpha: function(quadID,alpha) {
		var _g = 0;
		while(_g < 4) this.mVertexData.setAlpha(quadID * 4 + _g++,alpha);
		this.mSyncRequired = true;
	}
	,setQuad: function(quadID,quad) {
		var matrix = quad.get_transformationMatrix();
		var alpha = quad.get_alpha();
		var vertexID = quadID * 4 | 0;
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,matrix);
		if(alpha != 1.0) {
			this.mVertexData.scaleAlpha(vertexID,alpha,4);
		}
		this.mSyncRequired = true;
	}
	,getQuadBounds: function(quadID,transformationMatrix,resultRect) {
		return this.mVertexData.getBounds(transformationMatrix,quadID * 4,4,resultRect);
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		return this.mVertexData.getBounds(targetSpace == this?null:this.getTransformationMatrix(targetSpace,starling_display_QuadBatch.sHelperMatrix),0,this.mNumQuads * 4,resultRect);
	}
	,render: function(support,parentAlpha) {
		if(this.mNumQuads != 0) {
			if(this.mBatchable) {
				support.batchQuadBatch(this,parentAlpha);
			} else {
				support.finishQuadBatch();
				support.raiseDrawCount();
				this.renderCustom(support.get_mvpMatrix3D(),this.get_alpha() * parentAlpha,support.get_blendMode());
			}
		}
	}
	,get_numQuads: function() {
		return this.mNumQuads;
	}
	,get_tinted: function() {
		if(!this.mTinted) {
			return this.mForceTinted;
		} else {
			return true;
		}
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		return this.mBatchable = value;
	}
	,get_forceTinted: function() {
		return this.mForceTinted;
	}
	,set_forceTinted: function(value) {
		return this.mForceTinted = value;
	}
	,get_ownsTexture: function() {
		return this.mOwnsTexture;
	}
	,set_ownsTexture: function(value) {
		return this.mOwnsTexture = value;
	}
	,get_capacity: function() {
		return this.mVertexData.get_numVertices() / 4 | 0;
	}
	,set_capacity: function(value) {
		var oldCapacity = this.get_capacity();
		if(value == oldCapacity) {
			return this.mVertexData.get_numVertices() / 4 | 0;
		} else if(value == 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Capacity must be > 0"));
		} else if(value > 16383) {
			value = 16383;
		}
		if(this.mNumQuads > value) {
			this.mNumQuads = value;
		}
		this.mVertexData.set_numVertices(value * 4);
		this.mIndexData.set_length(value * 6);
		var _g1 = oldCapacity;
		var _g = value;
		while(_g1 < _g) {
			var i = _g1++;
			this.mIndexData.set(i * 6,i * 4);
			this.mIndexData.set(i * 6 + 1,i * 4 + 1);
			this.mIndexData.set(i * 6 + 2,i * 4 + 2);
			this.mIndexData.set(i * 6 + 3,i * 4 + 1);
			this.mIndexData.set(i * 6 + 4,i * 4 + 3);
			this.mIndexData.set(i * 6 + 5,i * 4 + 2);
		}
		this.destroyBuffers();
		this.mSyncRequired = true;
		return this.mVertexData.get_numVertices() / 4 | 0;
	}
	,getProgram: function(tinted) {
		var target = starling_core_Starling.get_current();
		var programName = "QB_q";
		if(this.mTexture != null) {
			programName = starling_display_QuadBatch.getImageProgramName(tinted,this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.mTexture.get_format(),this.mSmoothing);
		}
		var program = target.getProgram(programName);
		if(program == null) {
			var vertexShader;
			var fragmentShader;
			if(this.mTexture == null) {
				vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n";
				fragmentShader = "mov oc, v0       \n";
			} else {
				if(tinted) {
					vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n" + "mov v1, va2      \n";
				} else {
					vertexShader = "m44 op, va0, vc1 \n" + "mov v1, va2      \n";
				}
				if(tinted) {
					fragmentShader = "tex ft1,  v1, fs0 <???> \n" + "mul  oc, ft1,  v0       \n";
				} else {
					fragmentShader = "tex  oc,  v1, fs0 <???> \n";
				}
				fragmentShader = StringTools.replace(fragmentShader,"<???>",starling_core_RenderSupport.getTextureLookupFlags(this.mTexture.get_format(),this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.get_smoothing()));
			}
			program = target.registerProgramFromSource(programName,vertexShader,fragmentShader);
		}
		return program;
	}
	,__class__: starling_display_QuadBatch
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{set_capacity:"set_capacity",get_capacity:"get_capacity",set_ownsTexture:"set_ownsTexture",get_ownsTexture:"get_ownsTexture",set_forceTinted:"set_forceTinted",get_forceTinted:"get_forceTinted",set_batchable:"set_batchable",get_batchable:"get_batchable",get_premultipliedAlpha:"get_premultipliedAlpha",get_smoothing:"get_smoothing",get_texture:"get_texture",get_tinted:"get_tinted",get_numQuads:"get_numQuads"})
});
var starling_display_Sprite3D = function() {
	starling_display_DisplayObjectContainer.call(this);
	this.mScaleZ = 1.0;
	this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0.0;
	this.mTransformationMatrix = new openfl_geom_Matrix();
	this.mTransformationMatrix3D = new openfl_geom_Matrix3D();
	this.setIs3D(true);
	this.addEventListener("added",$bind(this,this.onAddedChild));
	this.addEventListener("removed",$bind(this,this.onRemovedChild));
};
$hxClasses["starling.display.Sprite3D"] = starling_display_Sprite3D;
starling_display_Sprite3D.__name__ = ["starling","display","Sprite3D"];
starling_display_Sprite3D.__super__ = starling_display_DisplayObjectContainer;
starling_display_Sprite3D.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mRotationX: null
	,mRotationY: null
	,mScaleZ: null
	,mPivotZ: null
	,mZ: null
	,mTransformationChanged: null
	,render: function(support,parentAlpha) {
		if(this.mZ > -1e-005 && this.mZ < 0.00001 && this.mRotationX > -1e-005 && this.mRotationX < 0.00001 && this.mRotationY > -1e-005 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-005 && this.mPivotZ < 0.00001) {
			starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
		} else {
			support.finishQuadBatch();
			support.pushMatrix3D();
			support.transformMatrix3D(this);
			starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
			support.finishQuadBatch();
			support.popMatrix3D();
		}
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(this.mZ > -1e-005 && this.mZ < 0.00001 && this.mRotationX > -1e-005 && this.mRotationX < 0.00001 && this.mRotationY > -1e-005 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-005 && this.mPivotZ < 0.00001) {
			return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		} else {
			if(forTouch && (!this.get_visible() || !this.get_touchable())) {
				return null;
			}
			starling_display_Sprite3D.sHelperMatrix.copyFrom(this.get_transformationMatrix3D());
			starling_display_Sprite3D.sHelperMatrix.invert();
			this.get_stage().getCameraPosition(this,starling_display_Sprite3D.sHelperPoint);
			starling_utils_MatrixUtil.transformCoords3D(starling_display_Sprite3D.sHelperMatrix,localPoint.x,localPoint.y,0,starling_display_Sprite3D.sHelperPointAlt);
			starling_utils_MathUtil.intersectLineWithXYPlane(starling_display_Sprite3D.sHelperPoint,starling_display_Sprite3D.sHelperPointAlt,localPoint);
			return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		}
	}
	,onAddedChild: function(event) {
		this.recursivelySetIs3D(js_Boot.__cast(event.target , starling_display_DisplayObject),true);
	}
	,onRemovedChild: function(event) {
		this.recursivelySetIs3D(js_Boot.__cast(event.target , starling_display_DisplayObject),false);
	}
	,recursivelySetIs3D: function(object,value) {
		if(js_Boot.__instanceof(object,starling_display_Sprite3D)) {
			return;
		}
		if(js_Boot.__instanceof(object,starling_display_DisplayObjectContainer)) {
			var container = object;
			var numChildren = container.get_numChildren();
			var _g1 = 0;
			while(_g1 < numChildren) this.recursivelySetIs3D(container.getChildAt(_g1++),value);
		}
		object.setIs3D(value);
	}
	,updateMatrices: function() {
		var x = this.get_x();
		var y = this.get_y();
		var scaleX = this.get_scaleX();
		var scaleY = this.get_scaleY();
		var pivotX = this.get_pivotX();
		var pivotY = this.get_pivotY();
		var rotationZ = this.get_rotation();
		this.mTransformationMatrix3D.identity();
		if(scaleX != 1.0 || scaleY != 1.0 || this.mScaleZ != 1.0) {
			this.mTransformationMatrix3D.appendScale(this.mScaleX,this.mScaleY,this.mScaleZ);
		}
		if(this.mRotationX != 0.0) {
			this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(this.mRotationX),new openfl_geom_Vector3D(1,0,0));
		}
		if(this.mRotationY != 0.0) {
			this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(this.mRotationY),new openfl_geom_Vector3D(0,1,0));
		}
		if(rotationZ != 0.0) {
			this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(rotationZ),new openfl_geom_Vector3D(0,0,1));
		}
		if(x != 0.0 || y != 0.0 || this.mZ != 0.0) {
			this.mTransformationMatrix3D.appendTranslation(x,y,this.mZ);
		}
		if(pivotX != 0.0 || pivotY != 0.0 || this.mPivotZ != 0.0) {
			this.mTransformationMatrix3D.prependTranslation(-pivotX,-pivotY,-this.mPivotZ);
		}
		if(this.mZ > -1e-005 && this.mZ < 0.00001 && this.mRotationX > -1e-005 && this.mRotationX < 0.00001 && this.mRotationY > -1e-005 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-005 && this.mPivotZ < 0.00001) {
			starling_utils_MatrixUtil.convertTo2D(this.mTransformationMatrix3D,this.mTransformationMatrix);
		} else {
			this.mTransformationMatrix.identity();
		}
	}
	,get_is2D: function() {
		if(this.mZ > -1e-005 && this.mZ < 0.00001 && this.mRotationX > -1e-005 && this.mRotationX < 0.00001 && this.mRotationY > -1e-005 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-005) {
			return this.mPivotZ < 0.00001;
		} else {
			return false;
		}
	}
	,get_transformationMatrix: function() {
		if(this.mTransformationChanged) {
			this.updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_transformationMatrix.call(this,value);
		this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0;
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_transformationMatrix.call(this);
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationChanged) {
			this.updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix3D;
	}
	,set_x: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_x.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_x.call(this);
	}
	,set_y: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_y.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_y.call(this);
	}
	,get_z: function() {
		return this.mZ;
	}
	,set_z: function(value) {
		this.mZ = value;
		this.mTransformationChanged = true;
		return this.mZ;
	}
	,set_pivotX: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_pivotX.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_pivotX.call(this);
	}
	,set_pivotY: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_pivotY.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_pivotY.call(this);
	}
	,get_pivotZ: function() {
		return this.mPivotZ;
	}
	,set_pivotZ: function(value) {
		this.mPivotZ = value;
		this.mTransformationChanged = true;
		return this.mPivotZ;
	}
	,set_scaleX: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_scaleX.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_scaleX.call(this);
	}
	,set_scaleY: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_scaleY.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_scaleY.call(this);
	}
	,get_scaleZ: function() {
		return this.mScaleZ;
	}
	,set_scaleZ: function(value) {
		this.mScaleZ = value;
		this.mTransformationChanged = true;
		return this.mScaleZ;
	}
	,set_skewX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("3D objects do not support skewing"));
	}
	,set_skewY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("3D objects do not support skewing"));
	}
	,set_rotation: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_rotation.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_rotation.call(this);
	}
	,get_rotationX: function() {
		return this.mRotationX;
	}
	,set_rotationX: function(value) {
		this.mRotationX = starling_utils_MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return this.mRotationX;
	}
	,get_rotationY: function() {
		return this.mRotationY;
	}
	,set_rotationY: function(value) {
		this.mRotationY = starling_utils_MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return this.mRotationY;
	}
	,get_rotationZ: function() {
		return this.get_rotation();
	}
	,set_rotationZ: function(value) {
		return this.set_rotation(value);
	}
	,__class__: starling_display_Sprite3D
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_scaleZ:"set_scaleZ",get_scaleZ:"get_scaleZ",set_pivotZ:"set_pivotZ",get_pivotZ:"get_pivotZ",set_z:"set_z",get_z:"get_z",get_is2D:"get_is2D"})
});
var starling_display_Stage = function(width,height,color) {
	if(color == null) {
		color = 0;
	}
	starling_display_DisplayObjectContainer.call(this);
	this.mWidth = width;
	this.mHeight = height;
	this.mColor = color;
	this.mFieldOfView = 1.0;
	this.mProjectionOffset = new openfl_geom_Point();
	this.mCameraPosition = new openfl_geom_Vector3D();
	this.mEnterFrameEvent = new starling_events_EnterFrameEvent("enterFrame",0.0);
	this.mEnterFrameListeners = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.display.Stage"] = starling_display_Stage;
starling_display_Stage.__name__ = ["starling","display","Stage"];
starling_display_Stage.__super__ = starling_display_DisplayObjectContainer;
starling_display_Stage.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mWidth: null
	,mHeight: null
	,mColor: null
	,mFieldOfView: null
	,mProjectionOffset: null
	,mCameraPosition: null
	,mEnterFrameEvent: null
	,mEnterFrameListeners: null
	,advanceTime: function(passedTime) {
		this.mEnterFrameEvent.reset("enterFrame",false,passedTime);
		this.broadcastEvent(this.mEnterFrameEvent);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.get_visible() || !this.get_touchable())) {
			return null;
		}
		if(localPoint.x < 0 || localPoint.x > this.mWidth || localPoint.y < 0 || localPoint.y > this.mHeight) {
			return null;
		}
		var target = starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		if(target == null) {
			target = this;
		}
		return target;
	}
	,drawToBitmapData: function(destination,transparent) {
		if(transparent == null) {
			transparent = true;
		}
		var support = new starling_core_RenderSupport();
		var star = starling_core_Starling.get_current();
		if(destination == null) {
			destination = new openfl_display_BitmapData(star.get_backBufferWidth() * star.get_backBufferPixelsPerPoint(),star.get_backBufferHeight() * star.get_backBufferPixelsPerPoint(),transparent);
		}
		support.set_renderTarget(null);
		support.setProjectionMatrix(0,0,this.mWidth,this.mHeight,this.mWidth,this.mHeight,this.get_cameraPosition());
		if(transparent) {
			support.clear();
		} else {
			support.clear(this.mColor,1);
		}
		this.render(support,1.0);
		support.finishQuadBatch();
		support.dispose();
		starling_core_Starling.get_current().get_context().drawToBitmapData(destination);
		starling_core_Starling.get_current().get_context().present();
		return destination;
	}
	,getCameraPosition: function(space,result) {
		this.getTransformationMatrix3D(space,starling_display_Stage.sHelperMatrix);
		return starling_utils_MatrixUtil.transformCoords3D(starling_display_Stage.sHelperMatrix,this.mWidth / 2 + this.mProjectionOffset.x,this.mHeight / 2 + this.mProjectionOffset.y,-this.get_focalLength(),result);
	}
	,addEnterFrameListener: function(listener) {
		this.mEnterFrameListeners.push(listener);
	}
	,removeEnterFrameListener: function(listener) {
		var index = this.mEnterFrameListeners.indexOf(listener,0);
		if(index >= 0) {
			this.mEnterFrameListeners.splice(index,1);
		}
	}
	,getChildEventListeners: function(object,eventType,listeners) {
		if(eventType == "enterFrame" && object == this) {
			var length = this.mEnterFrameListeners.get_length();
			var _g1 = 0;
			while(_g1 < length) {
				var i = _g1++;
				listeners.set(listeners.get_length(),this.mEnterFrameListeners.get(i));
			}
		} else {
			starling_display_DisplayObjectContainer.prototype.getChildEventListeners.call(this,object,eventType,listeners);
		}
	}
	,set_width: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set width of stage"));
	}
	,set_height: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set height of stage"));
	}
	,set_x: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set x-coordinate of stage"));
	}
	,set_y: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set y-coordinate of stage"));
	}
	,set_scaleX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot scale stage"));
	}
	,set_scaleY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot scale stage"));
	}
	,set_rotation: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot rotate stage"));
	}
	,set_skewX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot skew stage"));
	}
	,set_skewY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot skew stage"));
	}
	,set_filter: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot add filter to stage. Add it to 'root' instead!"));
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		return this.mColor = value;
	}
	,get_stageWidth: function() {
		return this.mWidth;
	}
	,set_stageWidth: function(value) {
		return this.mWidth = value;
	}
	,get_stageHeight: function() {
		return this.mHeight;
	}
	,set_stageHeight: function(value) {
		return this.mHeight = value;
	}
	,get_focalLength: function() {
		return this.mWidth / (2 * Math.tan(this.mFieldOfView / 2));
	}
	,set_focalLength: function(value) {
		return this.mFieldOfView = 2 * Math.atan(this.get_stageWidth() / (2 * value));
	}
	,get_fieldOfView: function() {
		return this.mFieldOfView;
	}
	,set_fieldOfView: function(value) {
		return this.mFieldOfView = value;
	}
	,get_projectionOffset: function() {
		return this.mProjectionOffset;
	}
	,set_projectionOffset: function(value) {
		this.mProjectionOffset.setTo(value.x,value.y);
		return this.mProjectionOffset;
	}
	,get_cameraPosition: function() {
		return this.getCameraPosition(null,this.mCameraPosition);
	}
	,__class__: starling_display_Stage
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{get_cameraPosition:"get_cameraPosition",set_projectionOffset:"set_projectionOffset",get_projectionOffset:"get_projectionOffset",set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView",set_focalLength:"set_focalLength",get_focalLength:"get_focalLength",set_stageHeight:"set_stageHeight",get_stageHeight:"get_stageHeight",set_stageWidth:"set_stageWidth",get_stageWidth:"get_stageWidth",set_color:"set_color",get_color:"get_color"})
});
var starling_errors_AbstractMethodError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "Method needs to be implemented in subclass";
	}
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.AbstractMethodError"] = starling_errors_AbstractMethodError;
starling_errors_AbstractMethodError.__name__ = ["starling","errors","AbstractMethodError"];
starling_errors_AbstractMethodError.__super__ = openfl_errors_Error;
starling_errors_AbstractMethodError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_AbstractMethodError
});
var starling_errors_MissingContextError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "Starling context is missing";
	}
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.MissingContextError"] = starling_errors_MissingContextError;
starling_errors_MissingContextError.__name__ = ["starling","errors","MissingContextError"];
starling_errors_MissingContextError.__super__ = openfl_errors_Error;
starling_errors_MissingContextError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_MissingContextError
});
var starling_errors_NotSupportedError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.NotSupportedError"] = starling_errors_NotSupportedError;
starling_errors_NotSupportedError.__name__ = ["starling","errors","NotSupportedError"];
starling_errors_NotSupportedError.__super__ = openfl_errors_Error;
starling_errors_NotSupportedError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_NotSupportedError
});
var starling_events_Event = function(type,bubbles,data) {
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.data = data;
};
$hxClasses["starling.events.Event"] = starling_events_Event;
starling_events_Event.__name__ = ["starling","events","Event"];
starling_events_Event.fromPool = function(type,bubbles,data) {
	if(bubbles == null) {
		bubbles = false;
	}
	if(starling_events_Event.sEventPool.get_length() != 0) {
		return starling_events_Event.sEventPool.pop().reset(type,bubbles,data);
	} else {
		return new starling_events_Event(type,bubbles,data);
	}
};
starling_events_Event.toPool = function(event) {
	event.data = event.target = event.currentTarget = null;
	starling_events_Event.sEventPool.set(starling_events_Event.sEventPool.get_length(),event);
};
starling_events_Event.prototype = {
	stopPropagation: function() {
		this.stopsPropagation = true;
	}
	,stopImmediatePropagation: function() {
		this.stopsPropagation = this.stopsImmediatePropagation = true;
	}
	,toString: function() {
		return starling_utils_StringUtil.formatString("[{0} type=\"{1}\" bubbles={2}]",[Type.getClassName(js_Boot.getClass(this)).split("::").pop(),this.type,this.bubbles]);
	}
	,bubbles: null
	,target: null
	,currentTarget: null
	,type: null
	,data: null
	,setTarget: function(value) {
		this.target = value;
	}
	,setCurrentTarget: function(value) {
		this.currentTarget = value;
	}
	,setData: function(value) {
		this.data = value;
	}
	,stopsPropagation: null
	,stopsImmediatePropagation: null
	,reset: function(type,bubbles,data) {
		if(bubbles == null) {
			bubbles = false;
		}
		this.type = type;
		this.bubbles = bubbles;
		this.data = data;
		this.target = this.currentTarget = null;
		this.stopsPropagation = this.stopsImmediatePropagation = false;
		return this;
	}
	,__class__: starling_events_Event
};
var starling_events_EnterFrameEvent = function(type,passedTime,bubbles) {
	if(bubbles == null) {
		bubbles = false;
	}
	starling_events_Event.call(this,type,bubbles,passedTime);
};
$hxClasses["starling.events.EnterFrameEvent"] = starling_events_EnterFrameEvent;
starling_events_EnterFrameEvent.__name__ = ["starling","events","EnterFrameEvent"];
starling_events_EnterFrameEvent.__super__ = starling_events_Event;
starling_events_EnterFrameEvent.prototype = $extend(starling_events_Event.prototype,{
	get_passedTime: function() {
		return this.data;
	}
	,__class__: starling_events_EnterFrameEvent
	,__properties__: {get_passedTime:"get_passedTime"}
});
var starling_events_KeyboardEvent = function(type,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(keyLocation == null) {
		keyLocation = 0;
	}
	if(keyCode == null) {
		keyCode = 0;
	}
	if(charCode == null) {
		charCode = 0;
	}
	starling_events_Event.call(this,type,false,keyCode);
	this.mCharCode = charCode;
	this.mKeyCode = keyCode;
	this.mKeyLocation = keyLocation;
	this.mCtrlKey = ctrlKey;
	this.mAltKey = altKey;
	this.mShiftKey = shiftKey;
};
$hxClasses["starling.events.KeyboardEvent"] = starling_events_KeyboardEvent;
starling_events_KeyboardEvent.__name__ = ["starling","events","KeyboardEvent"];
starling_events_KeyboardEvent.__super__ = starling_events_Event;
starling_events_KeyboardEvent.prototype = $extend(starling_events_Event.prototype,{
	mCharCode: null
	,mKeyCode: null
	,mKeyLocation: null
	,mAltKey: null
	,mCtrlKey: null
	,mShiftKey: null
	,mIsDefaultPrevented: null
	,preventDefault: function() {
		this.mIsDefaultPrevented = true;
	}
	,isDefaultPrevented: function() {
		return this.mIsDefaultPrevented;
	}
	,get_charCode: function() {
		return this.mCharCode;
	}
	,get_keyCode: function() {
		return this.mKeyCode;
	}
	,get_keyLocation: function() {
		return this.mKeyLocation;
	}
	,get_altKey: function() {
		return this.mAltKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,__class__: starling_events_KeyboardEvent
	,__properties__: {get_shiftKey:"get_shiftKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey",get_keyLocation:"get_keyLocation",get_keyCode:"get_keyCode",get_charCode:"get_charCode"}
});
var starling_events_ResizeEvent = function(type,width,height,bubbles) {
	if(bubbles == null) {
		bubbles = false;
	}
	starling_events_Event.call(this,type,bubbles,new openfl_geom_Point(width,height));
};
$hxClasses["starling.events.ResizeEvent"] = starling_events_ResizeEvent;
starling_events_ResizeEvent.__name__ = ["starling","events","ResizeEvent"];
starling_events_ResizeEvent.__super__ = starling_events_Event;
starling_events_ResizeEvent.prototype = $extend(starling_events_Event.prototype,{
	get_width: function() {
		return (js_Boot.__cast(this.data , openfl_geom_Point)).x | 0;
	}
	,get_height: function() {
		return (js_Boot.__cast(this.data , openfl_geom_Point)).y | 0;
	}
	,__class__: starling_events_ResizeEvent
	,__properties__: {get_height:"get_height",get_width:"get_width"}
});
var starling_events_Touch = function(id) {
	this.mID = id;
	this.mTapCount = 0;
	this.mPhase = "hover";
	this.mPressure = this.mWidth = this.mHeight = 1.0;
	this.mBubbleChain = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.events.Touch"] = starling_events_Touch;
starling_events_Touch.__name__ = ["starling","events","Touch"];
starling_events_Touch.prototype = {
	mID: null
	,mGlobalX: null
	,mGlobalY: null
	,mPreviousGlobalX: null
	,mPreviousGlobalY: null
	,mTapCount: null
	,mPhase: null
	,mTarget: null
	,mTimestamp: null
	,mPressure: null
	,mWidth: null
	,mHeight: null
	,mCancelled: null
	,mBubbleChain: null
	,getLocation: function(space,resultPoint) {
		starling_events_Touch.sHelperPoint.setTo(this.mGlobalX,this.mGlobalY);
		return space.globalToLocal(starling_events_Touch.sHelperPoint,resultPoint);
	}
	,getPreviousLocation: function(space,resultPoint) {
		starling_events_Touch.sHelperPoint.setTo(this.mPreviousGlobalX,this.mPreviousGlobalY);
		return space.globalToLocal(starling_events_Touch.sHelperPoint,resultPoint);
	}
	,getMovement: function(space,resultPoint) {
		if(resultPoint == null) {
			resultPoint = new openfl_geom_Point();
		}
		this.getLocation(space,resultPoint);
		var x = resultPoint.x;
		var y = resultPoint.y;
		this.getPreviousLocation(space,resultPoint);
		resultPoint.setTo(x - resultPoint.x,y - resultPoint.y);
		return resultPoint;
	}
	,isTouching: function(target) {
		return this.mBubbleChain.indexOf(target,0) != -1;
	}
	,toString: function() {
		return starling_utils_StringUtil.formatString("Touch {0}: globalX={1}, globalY={2}, phase={3}",[this.mID,this.mGlobalX,this.mGlobalY,this.mPhase]);
	}
	,clone: function() {
		var clone = new starling_events_Touch(this.mID);
		clone.mGlobalX = this.mGlobalX;
		clone.mGlobalY = this.mGlobalY;
		clone.mPreviousGlobalX = this.mPreviousGlobalX;
		clone.mPreviousGlobalY = this.mPreviousGlobalY;
		clone.mPhase = this.mPhase;
		clone.mTapCount = this.mTapCount;
		clone.mTimestamp = this.mTimestamp;
		clone.mPressure = this.mPressure;
		clone.mWidth = this.mWidth;
		clone.mHeight = this.mHeight;
		clone.mCancelled = this.mCancelled;
		clone.set_target(this.mTarget);
		return clone;
	}
	,updateBubbleChain: function() {
		if(this.mTarget != null) {
			var length = 1;
			var element = this.mTarget;
			this.mBubbleChain.set_length(1);
			this.mBubbleChain.set(0,element);
			while(true) {
				element = element.get_parent();
				if(!(element != null)) {
					break;
				}
				this.mBubbleChain.set(length++,element);
			}
		} else {
			this.mBubbleChain.set_length(0);
		}
	}
	,get_id: function() {
		return this.mID;
	}
	,get_previousGlobalX: function() {
		return this.mPreviousGlobalX;
	}
	,get_previousGlobalY: function() {
		return this.mPreviousGlobalY;
	}
	,get_globalX: function() {
		return this.mGlobalX;
	}
	,set_globalX: function(value) {
		this.mPreviousGlobalX = this.mGlobalX != this.mGlobalX?value:this.mGlobalX;
		return this.mGlobalX = value;
	}
	,get_globalY: function() {
		return this.mGlobalY;
	}
	,set_globalY: function(value) {
		this.mPreviousGlobalY = this.mGlobalY != this.mGlobalY?value:this.mGlobalY;
		return this.mGlobalY = value;
	}
	,get_tapCount: function() {
		return this.mTapCount;
	}
	,set_tapCount: function(value) {
		return this.mTapCount = value;
	}
	,get_phase: function() {
		return this.mPhase;
	}
	,set_phase: function(value) {
		return this.mPhase = value;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,set_target: function(value) {
		if(this.mTarget != value) {
			this.mTarget = value;
			this.updateBubbleChain();
		}
		return this.mTarget;
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,set_timestamp: function(value) {
		return this.mTimestamp = value;
	}
	,get_pressure: function() {
		return this.mPressure;
	}
	,set_pressure: function(value) {
		return this.mPressure = value;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,set_width: function(value) {
		return this.mWidth = value;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,set_height: function(value) {
		return this.mHeight = value;
	}
	,get_cancelled: function() {
		return this.mCancelled;
	}
	,set_cancelled: function(value) {
		return this.mCancelled = value;
	}
	,dispatchEvent: function(event) {
		if(this.mTarget != null) {
			event.dispatch(this.mBubbleChain);
		}
	}
	,get_bubbleChain: function() {
		return this.mBubbleChain.copy();
	}
	,__class__: starling_events_Touch
	,__properties__: {get_bubbleChain:"get_bubbleChain",set_cancelled:"set_cancelled",get_cancelled:"get_cancelled",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_pressure:"set_pressure",get_pressure:"get_pressure",set_timestamp:"set_timestamp",get_timestamp:"get_timestamp",set_target:"set_target",get_target:"get_target",set_phase:"set_phase",get_phase:"get_phase",set_tapCount:"set_tapCount",get_tapCount:"get_tapCount",set_globalY:"set_globalY",get_globalY:"get_globalY",set_globalX:"set_globalX",get_globalX:"get_globalX",get_previousGlobalY:"get_previousGlobalY",get_previousGlobalX:"get_previousGlobalX",get_id:"get_id"}
};
var starling_events_TouchEvent = function(type,touches,shiftKey,ctrlKey,bubbles) {
	if(bubbles == null) {
		bubbles = true;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	starling_events_Event.call(this,type,bubbles,touches);
	this.mShiftKey = shiftKey;
	this.mCtrlKey = ctrlKey;
	this.mTimestamp = -1.0;
	this.mVisitedObjects = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var numTouches = touches.get_length();
	var _g1 = 0;
	while(_g1 < numTouches) {
		var i = _g1++;
		if(touches.get(i).get_timestamp() > this.mTimestamp) {
			this.mTimestamp = touches.get(i).get_timestamp();
		}
	}
};
$hxClasses["starling.events.TouchEvent"] = starling_events_TouchEvent;
starling_events_TouchEvent.__name__ = ["starling","events","TouchEvent"];
starling_events_TouchEvent.__super__ = starling_events_Event;
starling_events_TouchEvent.prototype = $extend(starling_events_Event.prototype,{
	mShiftKey: null
	,mCtrlKey: null
	,mTimestamp: null
	,mVisitedObjects: null
	,getTouches: function(target,phase,result) {
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var allTouches = this.data;
		var numTouches = allTouches.get_length();
		var _g1 = 0;
		while(_g1 < numTouches) {
			var touch = js_Boot.__cast(allTouches.get(_g1++) , starling_events_Touch);
			var correctTarget = touch.isTouching(target);
			var correctPhase = phase == null || phase == touch.get_phase();
			if(correctTarget && correctPhase) {
				result.set(result.get_length(),touch);
			}
		}
		return result;
	}
	,getTouch: function(target,phase,id) {
		if(id == null) {
			id = -1;
		}
		this.getTouches(target,phase,starling_events_TouchEvent.sTouches);
		var numTouches = starling_events_TouchEvent.sTouches.get_length();
		if(numTouches > 0) {
			var touch = null;
			if(id < 0) {
				touch = starling_events_TouchEvent.sTouches.get(0);
			} else {
				var _g1 = 0;
				while(_g1 < numTouches) {
					var i = _g1++;
					if(starling_events_TouchEvent.sTouches.get(i).get_id() == id) {
						touch = starling_events_TouchEvent.sTouches.get(i);
						break;
					}
				}
			}
			starling_events_TouchEvent.sTouches.set_length(0);
			return touch;
		} else {
			return null;
		}
	}
	,interactsWith: function(target) {
		var result = false;
		this.getTouches(target,null,starling_events_TouchEvent.sTouches);
		var i = starling_events_TouchEvent.sTouches.get_length() - 1;
		while(i >= 0) {
			if(starling_events_TouchEvent.sTouches.get(i).get_phase() != "ended") {
				result = true;
				break;
			}
			--i;
		}
		starling_events_TouchEvent.sTouches.set_length(0);
		return result;
	}
	,dispatch: function(chain) {
		if(chain != null && chain.get_length() != 0) {
			var chainLength = this.bubbles?chain.get_length():1;
			var previousTarget = this.target;
			this.setTarget(chain.get(0));
			var _g1 = 0;
			var _g = chainLength;
			while(_g1 < _g) {
				var chainElement = js_Boot.__cast(chain.get(_g1++) , starling_events_EventDispatcher);
				if(this.mVisitedObjects.indexOf(chainElement,0) == -1) {
					var stopPropagation = chainElement.invokeEvent(this);
					this.mVisitedObjects.set(this.mVisitedObjects.get_length(),chainElement);
					if(stopPropagation) {
						break;
					}
				}
			}
			this.setTarget(previousTarget);
		}
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,get_touches: function() {
		return this.data.concat(null);
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,__class__: starling_events_TouchEvent
	,__properties__: {get_ctrlKey:"get_ctrlKey",get_shiftKey:"get_shiftKey",get_touches:"get_touches",get_timestamp:"get_timestamp"}
});
var starling_events_TouchMarker = function() {
	starling_display_Sprite.call(this);
	this.mCenter = new openfl_geom_Point();
	this.mTexture = this.createTexture();
	var _g = 0;
	while(_g < 2) {
		++_g;
		var marker = new starling_display_Image(this.mTexture);
		marker.set_pivotX(this.mTexture.get_width() / 2);
		marker.set_pivotY(this.mTexture.get_height() / 2);
		marker.set_touchable(false);
		this.addChild(marker);
	}
};
$hxClasses["starling.events.TouchMarker"] = starling_events_TouchMarker;
starling_events_TouchMarker.__name__ = ["starling","events","TouchMarker"];
starling_events_TouchMarker.__super__ = starling_display_Sprite;
starling_events_TouchMarker.prototype = $extend(starling_display_Sprite.prototype,{
	mCenter: null
	,mTexture: null
	,dispose: function() {
		this.mTexture.dispose();
		starling_display_Sprite.prototype.dispose.call(this);
	}
	,moveMarker: function(x,y,withCenter) {
		if(withCenter == null) {
			withCenter = false;
		}
		if(withCenter) {
			this.mCenter.x += x - this.get_realMarker().get_x();
			this.mCenter.y += y - this.get_realMarker().get_y();
		}
		this.get_realMarker().set_x(x);
		this.get_realMarker().set_y(y);
		this.get_mockMarker().set_x(2 * this.mCenter.x - x);
		this.get_mockMarker().set_y(2 * this.mCenter.y - y);
	}
	,moveCenter: function(x,y) {
		this.mCenter.x = x;
		this.mCenter.y = y;
		this.moveMarker(this.get_realX(),this.get_realY());
	}
	,createTexture: function() {
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var radius = 12 * scale;
		var width = 32 * scale | 0;
		var height = 32 * scale | 0;
		var thickness = 1.5 * scale;
		var shape = new openfl_display_Shape();
		shape.get_graphics().lineStyle(thickness,0,0.3);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius + thickness);
		shape.get_graphics().beginFill(16777215,0.4);
		shape.get_graphics().lineStyle(thickness,16777215);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius);
		shape.get_graphics().endFill();
		var bmpData = new openfl_display_BitmapData(width,height,true,0);
		bmpData.draw(shape);
		return starling_textures_Texture.fromBitmapData(bmpData,false,false,scale);
	}
	,get_realMarker: function() {
		return js_Boot.__cast(this.getChildAt(0) , starling_display_Image);
	}
	,get_mockMarker: function() {
		return js_Boot.__cast(this.getChildAt(1) , starling_display_Image);
	}
	,get_realX: function() {
		return this.get_realMarker().get_x();
	}
	,get_realY: function() {
		return this.get_realMarker().get_y();
	}
	,get_mockX: function() {
		return this.get_mockMarker().get_x();
	}
	,get_mockY: function() {
		return this.get_mockMarker().get_y();
	}
	,__class__: starling_events_TouchMarker
	,__properties__: $extend(starling_display_Sprite.prototype.__properties__,{get_mockY:"get_mockY",get_mockX:"get_mockX",get_realY:"get_realY",get_realX:"get_realX",get_mockMarker:"get_mockMarker",get_realMarker:"get_realMarker"})
});
var starling_events_TouchPhase = function() { };
$hxClasses["starling.events.TouchPhase"] = starling_events_TouchPhase;
starling_events_TouchPhase.__name__ = ["starling","events","TouchPhase"];
var starling_events_TouchProcessor = function(stage) {
	this.mMultitapDistance = 25;
	this.mMultitapTime = 0.3;
	this.mCtrlDown = false;
	this.mShiftDown = false;
	this.mRoot = this.mStage = stage;
	this.mElapsedTime = 0.0;
	this.mCurrentTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mQueue = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mLastTaps = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mStage.addEventListener("keyDown",$bind(this,this.onKey));
	this.mStage.addEventListener("keyUp",$bind(this,this.onKey));
	this.monitorInterruptions(true);
};
$hxClasses["starling.events.TouchProcessor"] = starling_events_TouchProcessor;
starling_events_TouchProcessor.__name__ = ["starling","events","TouchProcessor"];
starling_events_TouchProcessor.prototype = {
	mStage: null
	,mRoot: null
	,mElapsedTime: null
	,mTouchMarker: null
	,mLastTaps: null
	,mShiftDown: null
	,mCtrlDown: null
	,mMultitapTime: null
	,mMultitapDistance: null
	,mQueue: null
	,mCurrentTouches: null
	,dispose: function() {
		this.monitorInterruptions(false);
		this.mStage.removeEventListener("keyDown",$bind(this,this.onKey));
		this.mStage.removeEventListener("keyUp",$bind(this,this.onKey));
		if(this.mTouchMarker != null) {
			this.mTouchMarker.dispose();
		}
	}
	,advanceTime: function(passedTime) {
		var touch;
		this.mElapsedTime += passedTime;
		starling_events_TouchProcessor.sUpdatedTouches.set_length(0);
		if(this.mLastTaps.get_length() > 0) {
			var i = this.mLastTaps.get_length() - 1;
			while(i >= 0) {
				if(this.mElapsedTime - this.mLastTaps.get(i).get_timestamp() > this.mMultitapTime) {
					this.mLastTaps.splice(i,1);
				}
				--i;
			}
		}
		while(this.mQueue.get_length() > 0) {
			var _g = 0;
			var _g1 = this.mCurrentTouches;
			while(_g < _g1.get_length()) {
				var touch1 = _g1.get(_g);
				++_g;
				if(touch1.get_phase() == "began" || touch1.get_phase() == "moved") {
					touch1.set_phase("stationary");
				}
			}
			while(this.mQueue.get_length() > 0 && !this.containsTouchWithID(starling_events_TouchProcessor.sUpdatedTouches,this.mQueue.get(this.mQueue.get_length() - 1)[0])) {
				var touchArgs = this.mQueue.pop();
				touch = this.createOrUpdateTouch(touchArgs[0],touchArgs[1],touchArgs[2],touchArgs[3],touchArgs[4],touchArgs[5],touchArgs[6]);
				starling_events_TouchProcessor.sUpdatedTouches.set(starling_events_TouchProcessor.sUpdatedTouches.get_length(),touch);
			}
			this.processTouches(starling_events_TouchProcessor.sUpdatedTouches,this.mShiftDown,this.mCtrlDown);
			var i1 = this.mCurrentTouches.get_length() - 1;
			while(i1 >= 0) {
				if(this.mCurrentTouches.get(i1).get_phase() == "ended") {
					this.mCurrentTouches.splice(i1,1);
				}
				--i1;
			}
			starling_events_TouchProcessor.sUpdatedTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
	}
	,processTouches: function(touches,shiftDown,ctrlDown) {
		starling_events_TouchProcessor.sHoveringTouchData.set_length(0);
		var touchEvent = new starling_events_TouchEvent("touch",this.mCurrentTouches,shiftDown,ctrlDown);
		var _g = 0;
		while(_g < touches.get_length()) {
			var touch = touches.get(_g);
			++_g;
			if(touch.get_phase() == "hover" && touch.get_target() != null) {
				starling_events_TouchProcessor.sHoveringTouchData.set(starling_events_TouchProcessor.sHoveringTouchData.get_length(),{ touch : touch, target : touch.get_target(), bubbleChain : touch.get_bubbleChain()});
			}
			if(touch.get_phase() == "hover" || touch.get_phase() == "began") {
				starling_events_TouchProcessor.sHelperPoint.setTo(touch.get_globalX(),touch.get_globalY());
				touch.set_target(this.mRoot.hitTest(starling_events_TouchProcessor.sHelperPoint,true));
			}
		}
		var _g1 = 0;
		var _g11 = starling_events_TouchProcessor.sHoveringTouchData;
		while(_g1 < _g11.get_length()) {
			var touchData = _g11.get(_g1);
			++_g1;
			if((js_Boot.__cast(touchData.touch , starling_events_Touch)).get_target() != touchData.target) {
				touchEvent.dispatch(touchData.bubbleChain);
			}
		}
		var _g2 = 0;
		while(_g2 < touches.get_length()) {
			var touch1 = touches.get(_g2);
			++_g2;
			touch1.dispatchEvent(touchEvent);
		}
	}
	,enqueue: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) {
			height = 1.0;
		}
		if(width == null) {
			width = 1.0;
		}
		if(pressure == null) {
			pressure = 1.0;
		}
		this.mQueue.unshift([touchID,phase,globalX,globalY,pressure,width,height]);
		if(this.mCtrlDown && this.get_simulateMultitouch() && touchID == 0) {
			this.mTouchMarker.moveMarker(globalX,globalY,this.mShiftDown);
			this.mQueue.unshift([1,phase,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()]);
		}
	}
	,enqueueMouseLeftStage: function() {
		var mouse = this.getCurrentTouch(0);
		if(mouse == null || mouse.get_phase() != "hover") {
			return;
		}
		var exitX = mouse.get_globalX();
		var exitY = mouse.get_globalY();
		var distLeft = mouse.get_globalX();
		var distRight = this.mStage.get_stageWidth() - distLeft;
		var distTop = mouse.get_globalY();
		var minDist = starling_utils_MathUtil.min([distLeft,distRight,distTop,this.mStage.get_stageHeight() - distTop]);
		if(minDist == distLeft) {
			exitX = -1;
		} else if(minDist == distRight) {
			exitX = this.mStage.get_stageWidth() + 1;
		} else if(minDist == distTop) {
			exitY = -1;
		} else {
			exitY = this.mStage.get_stageHeight() + 1;
		}
		this.enqueue(0,"hover",exitX,exitY);
	}
	,cancelTouches: function() {
		if(this.mCurrentTouches.get_length() > 0) {
			var _g = 0;
			var _g1 = this.mCurrentTouches;
			while(_g < _g1.get_length()) {
				var touch = _g1.get(_g);
				++_g;
				if(touch.get_phase() == "began" || touch.get_phase() == "moved" || touch.get_phase() == "stationary") {
					touch.set_phase("ended");
					touch.set_cancelled(true);
				}
			}
			this.processTouches(this.mCurrentTouches,this.mShiftDown,this.mCtrlDown);
		}
		this.mCurrentTouches.set_length(0);
		this.mQueue.set_length(0);
	}
	,createOrUpdateTouch: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) {
			height = 1.0;
		}
		if(width == null) {
			width = 1.0;
		}
		if(pressure == null) {
			pressure = 1.0;
		}
		var touch = this.getCurrentTouch(touchID);
		if(touch == null) {
			touch = new starling_events_Touch(touchID);
			this.addCurrentTouch(touch);
		}
		touch.set_globalX(globalX);
		touch.set_globalY(globalY);
		touch.set_phase(phase);
		touch.set_timestamp(this.mElapsedTime);
		touch.set_pressure(pressure);
		touch.set_width(width);
		touch.set_height(height);
		if(phase == "began") {
			this.updateTapCount(touch);
		}
		return touch;
	}
	,updateTapCount: function(touch) {
		var nearbyTap = null;
		var minSqDist = this.mMultitapDistance * this.mMultitapDistance;
		var _g = 0;
		var _g1 = this.mLastTaps;
		while(_g < _g1.get_length()) {
			var tap = _g1.get(_g);
			++_g;
			if(Math.pow(tap.get_globalX() - touch.get_globalX(),2) + Math.pow(tap.get_globalY() - touch.get_globalY(),2) <= minSqDist) {
				nearbyTap = tap;
				break;
			}
		}
		if(nearbyTap != null) {
			touch.set_tapCount(nearbyTap.get_tapCount() + 1);
			this.mLastTaps.splice(this.mLastTaps.indexOf(nearbyTap,0),1);
		} else {
			touch.set_tapCount(1);
		}
		this.mLastTaps.push(touch.clone());
	}
	,addCurrentTouch: function(touch) {
		var i = this.mCurrentTouches.get_length() - 1;
		while(i >= 0) {
			if(this.mCurrentTouches.get(i).get_id() == touch.get_id()) {
				this.mCurrentTouches.splice(i,1);
			}
			--i;
		}
		this.mCurrentTouches.push(touch);
	}
	,getCurrentTouch: function(touchID) {
		var _g = 0;
		var _g1 = this.mCurrentTouches;
		while(_g < _g1.get_length()) {
			var touch = _g1.get(_g);
			++_g;
			if(touch.get_id() == touchID) {
				return touch;
			}
		}
		return null;
	}
	,containsTouchWithID: function(touches,touchID) {
		var _g = 0;
		while(_g < touches.get_length()) {
			var touch = touches.get(_g);
			++_g;
			if(touch.get_id() == touchID) {
				return true;
			}
		}
		return false;
	}
	,get_simulateMultitouch: function() {
		return this.mTouchMarker != null;
	}
	,set_simulateMultitouch: function(value) {
		if(this.get_simulateMultitouch() == value) {
			return this.mTouchMarker != null;
		}
		if(value) {
			this.mTouchMarker = new starling_events_TouchMarker();
			this.mTouchMarker.set_visible(false);
			this.mStage.addChild(this.mTouchMarker);
		} else {
			this.mTouchMarker.removeFromParent(true);
			this.mTouchMarker = null;
		}
		return this.mTouchMarker != null;
	}
	,get_multitapTime: function() {
		return this.mMultitapTime;
	}
	,set_multitapTime: function(value) {
		return this.mMultitapTime = value;
	}
	,get_multitapDistance: function() {
		return this.mMultitapDistance;
	}
	,set_multitapDistance: function(value) {
		return this.mMultitapDistance = value;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,set_root: function(value) {
		return this.mRoot = value;
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_numCurrentTouches: function() {
		return this.mCurrentTouches.get_length();
	}
	,onKey: function(event) {
		if(event.get_keyCode() == 17 || event.get_keyCode() == 15) {
			var wasCtrlDown = this.mCtrlDown;
			this.mCtrlDown = event.type == "keyDown";
			if(this.get_simulateMultitouch() && wasCtrlDown != this.mCtrlDown) {
				this.mTouchMarker.set_visible(this.mCtrlDown);
				this.mTouchMarker.moveCenter(this.mStage.get_stageWidth() / 2,this.mStage.get_stageHeight() / 2);
				var mouseTouch = this.getCurrentTouch(0);
				var mockedTouch = this.getCurrentTouch(1);
				if(mouseTouch != null) {
					this.mTouchMarker.moveMarker(mouseTouch.get_globalX(),mouseTouch.get_globalY());
				}
				if(wasCtrlDown && mockedTouch != null && mockedTouch.get_phase() != "ended") {
					this.mQueue.unshift([1,"ended",mockedTouch.get_globalX(),mockedTouch.get_globalY()]);
				} else if(this.mCtrlDown && mouseTouch != null) {
					if(mouseTouch.get_phase() == "hover" || mouseTouch.get_phase() == "ended") {
						this.mQueue.unshift([1,"hover",this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()]);
					} else {
						this.mQueue.unshift([1,"began",this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()]);
					}
				}
			}
		} else if(event.get_keyCode() == 16) {
			this.mShiftDown = event.type == "keyDown";
		}
	}
	,monitorInterruptions: function(enable) {
		try {
			if(enable) {
				openfl_Lib.current.stage.addEventListener("deactivate",$bind(this,this.onInterruption),false,0,true);
			} else {
				openfl_Lib.current.stage.removeEventListener("deactivate",$bind(this,this.onInterruption));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			} else throw(e);
		}
	}
	,onInterruption: function(event) {
		this.cancelTouches();
	}
	,__class__: starling_events_TouchProcessor
	,__properties__: {get_numCurrentTouches:"get_numCurrentTouches",get_stage:"get_stage",set_root:"set_root",get_root:"get_root",set_multitapDistance:"set_multitapDistance",get_multitapDistance:"get_multitapDistance",set_multitapTime:"set_multitapTime",get_multitapTime:"get_multitapTime",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch"}
};
var starling_filters_FragmentFilter = function(numPasses,resolution) {
	if(resolution == null) {
		resolution = 1.0;
	}
	if(numPasses == null) {
		numPasses = 1;
	}
	this.mHelperRect2 = new openfl_geom_Rectangle();
	this.mHelperRect = new openfl_geom_Rectangle();
	this.mHelperMatrix3D = new openfl_geom_Matrix3D();
	this.mHelperMatrix = new openfl_geom_Matrix();
	this.mMvpConstantID = 0;
	this.mBaseTextureID = 0;
	this.mTexCoordsAtID = 1;
	this.mVertexPosAtID = 0;
	if(numPasses < 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("At least one pass is required."));
	}
	this.mNumPasses = numPasses;
	this.mMarginX = this.mMarginY = 0.0;
	this.mOffsetX = this.mOffsetY = 0;
	this.mResolution = resolution;
	this.mPassTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMode = "replace";
	this.mVertexData = new starling_utils_VertexData(4);
	this.mVertexData.setTexCoords(0,0,0);
	this.mVertexData.setTexCoords(1,1,0);
	this.mVertexData.setTexCoords(2,0,1);
	this.mVertexData.setTexCoords(3,1,1);
	var a = [0,1,2,1,3,2];
	var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	this.mIndexData = vector;
	if(starling_core_Starling.get_current().get_contextValid()) {
		this.createPrograms();
	}
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.filters.FragmentFilter"] = starling_filters_FragmentFilter;
starling_filters_FragmentFilter.__name__ = ["starling","filters","FragmentFilter"];
starling_filters_FragmentFilter.prototype = {
	mVertexPosAtID: null
	,mTexCoordsAtID: null
	,mBaseTextureID: null
	,mMvpConstantID: null
	,mNumPasses: null
	,mPassTextures: null
	,mMode: null
	,mResolution: null
	,mMarginX: null
	,mMarginY: null
	,mOffsetX: null
	,mOffsetY: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mCacheRequested: null
	,mCache: null
	,mHelperMatrix: null
	,mHelperMatrix3D: null
	,mHelperRect: null
	,mHelperRect2: null
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
		}
		this.disposePassTextures();
		this.disposeCache();
	}
	,onContextCreated: function(event) {
		this.mVertexBuffer = null;
		this.mIndexBuffer = null;
		this.disposePassTextures();
		this.createPrograms();
		if(this.mCache != null) {
			this.cache();
		}
	}
	,render: function(object,support,parentAlpha) {
		if(this.get_mode() == "above") {
			object.render(support,parentAlpha);
		}
		if(this.mCacheRequested) {
			this.mCacheRequested = false;
			this.mCache = this.renderPasses(object,support,1.0,true);
			this.disposePassTextures();
		}
		if(this.mCache != null) {
			this.mCache.render(support,parentAlpha);
		} else {
			this.renderPasses(object,support,parentAlpha,false);
		}
		if(this.get_mode() == "below") {
			object.render(support,parentAlpha);
		}
	}
	,renderPasses: function(object,support,parentAlpha,intoCache) {
		if(intoCache == null) {
			intoCache = false;
		}
		var passTexture;
		var cacheTexture = null;
		var context = starling_core_Starling.get_current().get_context();
		var targetSpace = object.get_stage();
		var stage = starling_core_Starling.get_current().get_stage();
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var projMatrix = this.mHelperMatrix;
		var projMatrix3D = this.mHelperMatrix3D;
		var bounds = this.mHelperRect;
		var boundsPot = this.mHelperRect2;
		var previousStencilRefValue;
		var previousRenderTarget;
		var intersectWithStage;
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		if(!intoCache && this.mOffsetX == 0) {
			intersectWithStage = this.mOffsetY == 0;
		} else {
			intersectWithStage = false;
		}
		this.calculateBounds(object,targetSpace,this.mResolution * scale,intersectWithStage,bounds,boundsPot);
		if(bounds.isEmpty()) {
			this.disposePassTextures();
			if(intoCache) {
				return new starling_display_QuadBatch();
			} else {
				return null;
			}
		}
		this.updateBuffers(context,boundsPot);
		this.updatePassTextures(boundsPot.width,boundsPot.height,this.mResolution * scale);
		support.finishQuadBatch();
		support.raiseDrawCount(this.mNumPasses);
		support.pushMatrix();
		support.pushMatrix3D();
		support.pushClipRect(boundsPot,false);
		projMatrix.copyFrom(support.get_projectionMatrix());
		projMatrix3D.copyFrom(support.get_projectionMatrix3D());
		previousRenderTarget = support.get_renderTarget();
		previousStencilRefValue = support.get_stencilReferenceValue();
		if(previousRenderTarget != null && !starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement()) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("To nest filters, you need at least Flash Player / AIR version 15."));
		}
		if(intoCache) {
			cacheTexture = starling_textures_Texture.empty(boundsPot.width,boundsPot.height,true,false,true,this.mResolution * scale);
		}
		support.set_renderTarget(this.mPassTextures.get(0));
		support.clear();
		support.set_blendMode("normal");
		support.set_stencilReferenceValue(0);
		support.setProjectionMatrix(bounds.x,bounds.y,boundsPot.width,boundsPot.height,stage.get_stageWidth(),stage.get_stageHeight(),stage.get_cameraPosition());
		object.render(support,parentAlpha);
		support.finishQuadBatch();
		starling_core_RenderSupport.setBlendFactors(true);
		support.loadIdentity();
		context.setVertexBufferAt(this.mVertexPosAtID,this.mVertexBuffer,0,2);
		context.setVertexBufferAt(this.mTexCoordsAtID,this.mVertexBuffer,6,2);
		var _g1 = 0;
		var _g = this.mNumPasses;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < this.mNumPasses - 1) {
				support.set_renderTarget(this.getPassTexture(i + 1));
				support.clear();
			} else if(intoCache) {
				support.set_renderTarget(cacheTexture);
				support.clear();
			} else {
				support.popClipRect();
				support.set_projectionMatrix(projMatrix);
				support.set_projectionMatrix3D(projMatrix3D);
				support.set_renderTarget(previousRenderTarget);
				support.translateMatrix(this.mOffsetX,this.mOffsetY);
				support.set_stencilReferenceValue(previousStencilRefValue);
				support.set_blendMode(object.get_blendMode());
				support.applyBlendMode(true);
			}
			passTexture = this.getPassTexture(i);
			context.setProgramConstantsFromMatrix(1,this.mMvpConstantID,support.get_mvpMatrix3D(),true);
			context.setTextureAt(this.mBaseTextureID,passTexture.get_base());
			this.activate(i,context,passTexture);
			context.drawTriangles(this.mIndexBuffer,0,2);
			this.deactivate(i,context,passTexture);
		}
		context.setVertexBufferAt(this.mVertexPosAtID,null);
		context.setVertexBufferAt(this.mTexCoordsAtID,null);
		context.setTextureAt(this.mBaseTextureID,null);
		support.popMatrix();
		support.popMatrix3D();
		if(intoCache) {
			support.get_projectionMatrix().copyFrom(projMatrix);
			support.get_projectionMatrix3D().copyFrom(projMatrix3D);
			support.set_renderTarget(previousRenderTarget);
			support.popClipRect();
			var quadBatch = new starling_display_QuadBatch();
			var image = new starling_display_Image(cacheTexture);
			object.getTransformationMatrix(targetSpace,starling_filters_FragmentFilter.sTransformationMatrix).invert();
			starling_utils_MatrixUtil.prependTranslation(starling_filters_FragmentFilter.sTransformationMatrix,bounds.x + this.mOffsetX,bounds.y + this.mOffsetY);
			quadBatch.addImage(image,1.0,starling_filters_FragmentFilter.sTransformationMatrix);
			quadBatch.set_ownsTexture(true);
			return quadBatch;
		} else {
			return null;
		}
	}
	,updateBuffers: function(context,bounds) {
		this.mVertexData.setPosition(0,bounds.x,bounds.y);
		this.mVertexData.setPosition(1,bounds.get_right(),bounds.y);
		this.mVertexData.setPosition(2,bounds.x,bounds.get_bottom());
		this.mVertexData.setPosition(3,bounds.get_right(),bounds.get_bottom());
		if(this.mVertexBuffer == null) {
			this.mVertexBuffer = context.createVertexBuffer(4,8);
			this.mIndexBuffer = context.createIndexBuffer(6);
			this.mIndexBuffer.uploadFromVector(this.mIndexData,0,6);
		}
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,4);
	}
	,updatePassTextures: function(width,height,scale) {
		var numPassTextures = this.mNumPasses > 1?2:1;
		if(this.mPassTextures.get_length() != numPassTextures || Math.abs(this.mPassTextures.get(0).get_nativeWidth() - width * scale) > 0.1 || Math.abs(this.mPassTextures.get(0).get_nativeHeight() - height * scale) > 0.1) {
			this.disposePassTextures();
			var _g1 = 0;
			var _g = numPassTextures;
			while(_g1 < _g) this.mPassTextures.set(_g1++,starling_textures_Texture.empty(width,height,true,false,true,scale));
		}
	}
	,getPassTexture: function(pass) {
		return this.mPassTextures.get(pass % 2);
	}
	,calculateBounds: function(object,targetSpace,scale,intersectWithStage,resultRect,resultPotRect) {
		var stage;
		var marginX = this.mMarginX;
		var marginY = this.mMarginY;
		if(js_Boot.__instanceof(targetSpace,starling_display_Stage)) {
			stage = targetSpace;
			if(object == stage || object == object.get_root()) {
				marginY = 0;
				marginX = marginY;
				resultRect.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
			} else {
				object.getBounds(stage,resultRect);
			}
			if(intersectWithStage) {
				starling_filters_FragmentFilter.sStageBounds.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
				starling_utils_RectangleUtil.intersect(resultRect,starling_filters_FragmentFilter.sStageBounds,resultRect);
			}
		} else {
			object.getBounds(targetSpace,resultRect);
		}
		if(!resultRect.isEmpty()) {
			resultRect.inflate(marginX,marginY);
			var minSize = 64 / scale | 0;
			resultPotRect.setTo(resultRect.x,resultRect.y,starling_utils_PowerOfTwo.getNextPowerOfTwo((resultRect.width > minSize?resultRect.width:minSize) * scale | 0) / scale,starling_utils_PowerOfTwo.getNextPowerOfTwo((resultRect.height > minSize?resultRect.height:minSize) * scale | 0) / scale);
		}
	}
	,disposePassTextures: function() {
		var _g = 0;
		var _g1 = this.mPassTextures;
		while(_g < _g1.get_length()) {
			var texture = _g1.get(_g);
			++_g;
			texture.dispose();
		}
		this.mPassTextures.set_length(0);
	}
	,disposeCache: function() {
		if(this.mCache != null) {
			this.mCache.dispose();
			this.mCache = null;
		}
	}
	,createPrograms: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Method has to be implemented in subclass!"));
	}
	,activate: function(pass,context,texture) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Method has to be implemented in subclass!"));
	}
	,deactivate: function(pass,context,texture) {
	}
	,assembleAgal: function(fragmentShader,vertexShader) {
		if(fragmentShader == null) {
			fragmentShader = "tex oc, v0, fs0 <2d, clamp, linear, mipnone>";
		}
		if(vertexShader == null) {
			vertexShader = "m44 op, va0, vc0 \n" + "mov v0, va1      \n";
		}
		return starling_core_RenderSupport.assembleAgal(vertexShader,fragmentShader);
	}
	,cache: function() {
		this.mCacheRequested = true;
		this.disposeCache();
	}
	,clearCache: function() {
		this.mCacheRequested = false;
		this.disposeCache();
	}
	,compile: function(object) {
		var support;
		var stage = object.get_stage();
		var quadBatch;
		support = new starling_core_RenderSupport();
		object.getTransformationMatrix(stage,support.get_modelViewMatrix());
		quadBatch = this.renderPasses(object,support,1.0,true);
		support.dispose();
		return quadBatch;
	}
	,get_isCached: function() {
		if(this.mCache == null) {
			return this.mCacheRequested;
		} else {
			return true;
		}
	}
	,get_resolution: function() {
		return this.mResolution;
	}
	,set_resolution: function(value) {
		if(value <= 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Resolution must be > 0"));
		} else {
			this.mResolution = value;
		}
		return this.mResolution;
	}
	,get_mode: function() {
		return this.mMode;
	}
	,set_mode: function(value) {
		return this.mMode = value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		return this.mOffsetX = value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		return this.mOffsetY = value;
	}
	,get_marginX: function() {
		return this.mMarginX;
	}
	,set_marginX: function(value) {
		return this.mMarginX = value;
	}
	,get_marginY: function() {
		return this.mMarginY;
	}
	,set_marginY: function(value) {
		return this.mMarginY = value;
	}
	,set_numPasses: function(value) {
		return this.mNumPasses = value;
	}
	,get_numPasses: function() {
		return this.mNumPasses;
	}
	,get_vertexPosAtID: function() {
		return this.mVertexPosAtID;
	}
	,set_vertexPosAtID: function(value) {
		return this.mVertexPosAtID = value;
	}
	,get_texCoordsAtID: function() {
		return this.mTexCoordsAtID;
	}
	,set_texCoordsAtID: function(value) {
		return this.mTexCoordsAtID = value;
	}
	,get_baseTextureID: function() {
		return this.mBaseTextureID;
	}
	,set_baseTextureID: function(value) {
		return this.mBaseTextureID = value;
	}
	,get_mvpConstantID: function() {
		return this.mMvpConstantID;
	}
	,set_mvpConstantID: function(value) {
		return this.mMvpConstantID = value;
	}
	,__class__: starling_filters_FragmentFilter
	,__properties__: {set_mvpConstantID:"set_mvpConstantID",get_mvpConstantID:"get_mvpConstantID",set_baseTextureID:"set_baseTextureID",get_baseTextureID:"get_baseTextureID",set_texCoordsAtID:"set_texCoordsAtID",get_texCoordsAtID:"get_texCoordsAtID",set_vertexPosAtID:"set_vertexPosAtID",get_vertexPosAtID:"get_vertexPosAtID",set_numPasses:"set_numPasses",get_numPasses:"get_numPasses",set_marginY:"set_marginY",get_marginY:"get_marginY",set_marginX:"set_marginX",get_marginX:"get_marginX",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_mode:"set_mode",get_mode:"get_mode",set_resolution:"set_resolution",get_resolution:"get_resolution",get_isCached:"get_isCached"}
};
var starling_filters_FragmentFilterMode = function() { };
$hxClasses["starling.filters.FragmentFilterMode"] = starling_filters_FragmentFilterMode;
starling_filters_FragmentFilterMode.__name__ = ["starling","filters","FragmentFilterMode"];
var starling_text_BitmapChar = function(id,texture,xOffset,yOffset,xAdvance) {
	this.mCharID = id;
	this.mTexture = texture;
	this.mXOffset = xOffset;
	this.mYOffset = yOffset;
	this.mXAdvance = xAdvance;
	this.mKernings = null;
};
$hxClasses["starling.text.BitmapChar"] = starling_text_BitmapChar;
starling_text_BitmapChar.__name__ = ["starling","text","BitmapChar"];
starling_text_BitmapChar.prototype = {
	mTexture: null
	,mCharID: null
	,mXOffset: null
	,mYOffset: null
	,mXAdvance: null
	,mKernings: null
	,addKerning: function(charID,amount) {
		if(this.mKernings == null) {
			this.mKernings = new haxe_ds_IntMap();
		}
		this.mKernings.h[charID] = amount;
	}
	,getKerning: function(charID) {
		if(this.mKernings == null || this.mKernings.h[charID] == null) {
			return 0.0;
		} else {
			return this.mKernings.h[charID];
		}
	}
	,createImage: function() {
		return new starling_display_Image(this.mTexture);
	}
	,get_charID: function() {
		return this.mCharID;
	}
	,get_xOffset: function() {
		return this.mXOffset;
	}
	,get_yOffset: function() {
		return this.mYOffset;
	}
	,get_xAdvance: function() {
		return this.mXAdvance;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_width: function() {
		return this.mTexture.get_width();
	}
	,get_height: function() {
		return this.mTexture.get_height();
	}
	,__class__: starling_text_BitmapChar
	,__properties__: {get_height:"get_height",get_width:"get_width",get_texture:"get_texture",get_xAdvance:"get_xAdvance",get_yOffset:"get_yOffset",get_xOffset:"get_xOffset",get_charID:"get_charID"}
};
var starling_text_BitmapFont = function(texture,fontXml) {
	if(texture == null && fontXml == null) {
		texture = starling_text_MiniBitmapFont.get_texture();
		fontXml = starling_text_MiniBitmapFont.get_xml();
	} else if(texture != null && fontXml == null) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("fontXml cannot be null!"));
	}
	this.mName = "unknown";
	this.mLineHeight = this.mSize = this.mBaseline = 14;
	this.mOffsetX = this.mOffsetY = 0.0;
	this.mTexture = texture;
	this.mChars = new haxe_ds_IntMap();
	this.mHelperImage = new starling_display_Image(texture);
	this.parseFontXml(fontXml);
};
$hxClasses["starling.text.BitmapFont"] = starling_text_BitmapFont;
starling_text_BitmapFont.__name__ = ["starling","text","BitmapFont"];
starling_text_BitmapFont.prototype = {
	mTexture: null
	,mChars: null
	,mName: null
	,mSize: null
	,mLineHeight: null
	,mBaseline: null
	,mOffsetX: null
	,mOffsetY: null
	,mHelperImage: null
	,dispose: function() {
		if(this.mTexture != null) {
			this.mTexture.dispose();
		}
	}
	,parseFontXml: function(fontXml) {
		var scale = this.mTexture.get_scale();
		var frame = this.mTexture.get_frame();
		var frameX = frame != null?frame.x:0;
		var frameY = frame != null?frame.y:0;
		var info = fontXml.elementsNamed("info").next();
		if(info == null) {
			fontXml = fontXml.firstElement();
			info = fontXml.elementsNamed("info").next();
		}
		var common = fontXml.elementsNamed("common").next();
		this.mName = info.get("face");
		var x = info.get("size");
		this.mSize = parseFloat(x) / scale;
		var x1 = common.get("lineHeight");
		this.mLineHeight = parseFloat(x1) / scale;
		var x2 = common.get("base");
		this.mBaseline = parseFloat(x2) / scale;
		if(info.get("smooth") == "0") {
			this.set_smoothing("none");
		}
		if(this.mSize <= 0) {
			haxe_Log.trace("[Starling] Warning: invalid font size in '" + this.mName + "' font.",{ fileName : "BitmapFont.hx", lineNumber : 144, className : "starling.text.BitmapFont", methodName : "parseFontXml"});
			this.mSize = this.mSize == 0.0?16.0:this.mSize * -1.0;
		}
		var tmp = fontXml.elementsNamed("chars").next().elementsNamed("char");
		while(tmp.hasNext()) {
			var charElement = tmp.next();
			var id = Std.parseInt(charElement.get("id"));
			var x3 = charElement.get("xoffset");
			var xOffset = parseFloat(x3) / scale;
			var x4 = charElement.get("yoffset");
			var yOffset = parseFloat(x4) / scale;
			var x5 = charElement.get("xadvance");
			var xAdvance = parseFloat(x5) / scale;
			var region = new openfl_geom_Rectangle();
			var x6 = charElement.get("x");
			region.x = parseFloat(x6) / scale + frameX;
			var x7 = charElement.get("y");
			region.y = parseFloat(x7) / scale + frameY;
			var x8 = charElement.get("width");
			region.width = parseFloat(x8) / scale;
			var x9 = charElement.get("height");
			region.height = parseFloat(x9) / scale;
			this.addChar(id,new starling_text_BitmapChar(id,starling_textures_Texture.fromTexture(this.mTexture,region),xOffset,yOffset,xAdvance));
		}
		if(fontXml.exists("kernings")) {
			var tmp1 = fontXml.elementsNamed("kernings").next().elementsNamed("kerning");
			while(tmp1.hasNext()) {
				var kerningElement = tmp1.next();
				var first = Std.parseInt(kerningElement.get("first"));
				var second = Std.parseInt(kerningElement.get("second"));
				var x10 = kerningElement.get("amount");
				var amount = parseFloat(x10) / scale;
				if(this.mChars.h.hasOwnProperty(second)) {
					this.getChar(second).addKerning(first,amount);
				}
			}
		}
	}
	,getChar: function(charID) {
		return this.mChars.h[charID];
	}
	,addChar: function(charID,bitmapChar) {
		this.mChars.h[charID] = bitmapChar;
	}
	,getCharIDs: function(result) {
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		var tmp = this.mChars.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			result.set(result.get_length(),key);
		}
		return result;
	}
	,hasChars: function(text) {
		if(text == null) {
			return true;
		}
		var charID;
		var numChars = text.length;
		var _g1 = 0;
		while(_g1 < numChars) {
			charID = HxOverrides.cca(text,_g1++);
			if(charID != 32 && charID != 9 && charID != 10 && charID != 13 && this.getChar(charID) == null) {
				return false;
			}
		}
		return true;
	}
	,createSprite: function(width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) {
			kerning = true;
		}
		if(autoScale == null) {
			autoScale = true;
		}
		if(vAlign == null) {
			vAlign = "center";
		}
		if(hAlign == null) {
			hAlign = "center";
		}
		if(color == null) {
			color = 16777215;
		}
		if(fontSize == null) {
			fontSize = -1;
		}
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning);
		var numChars = charLocations.get_length();
		var sprite = new starling_display_Sprite();
		var _g1 = 0;
		while(_g1 < numChars) {
			var charLocation = charLocations.get(_g1++);
			var $char = charLocation["char"].createImage();
			$char.set_x(charLocation.x);
			$char.set_y(charLocation.y);
			$char.set_scaleX($char.set_scaleY(charLocation.scale));
			$char.set_color(color);
			sprite.addChild($char);
		}
		starling_text_CharLocation.rechargePool();
		return sprite;
	}
	,fillQuadBatch: function(quadBatch,width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning,leading) {
		if(leading == null) {
			leading = 0;
		}
		if(kerning == null) {
			kerning = true;
		}
		if(autoScale == null) {
			autoScale = true;
		}
		if(vAlign == null) {
			vAlign = "center";
		}
		if(hAlign == null) {
			hAlign = "center";
		}
		if(color == null) {
			color = 16777215;
		}
		if(fontSize == null) {
			fontSize = -1;
		}
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning,leading);
		var numChars = charLocations.get_length();
		this.mHelperImage.set_color(color);
		var _g1 = 0;
		while(_g1 < numChars) {
			var charLocation = charLocations.get(_g1++);
			this.mHelperImage.set_texture(charLocation["char"].get_texture());
			this.mHelperImage.readjustSize();
			this.mHelperImage.set_x(charLocation.x);
			this.mHelperImage.set_y(charLocation.y);
			this.mHelperImage.set_scaleX(this.mHelperImage.set_scaleY(charLocation.scale));
			quadBatch.addImage(this.mHelperImage);
		}
		starling_text_CharLocation.rechargePool();
	}
	,arrangeChars: function(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning,leading) {
		if(leading == null) {
			leading = 0;
		}
		if(kerning == null) {
			kerning = true;
		}
		if(autoScale == null) {
			autoScale = true;
		}
		if(vAlign == null) {
			vAlign = "center";
		}
		if(hAlign == null) {
			hAlign = "center";
		}
		if(fontSize == null) {
			fontSize = -1;
		}
		if(text == null || text.length == 0) {
			return starling_text_CharLocation.vectorFromPool();
		}
		if(fontSize < 0) {
			fontSize *= -this.mSize;
		}
		var finished = false;
		var charLocation;
		var numChars;
		var containerWidth = 0.0;
		var containerHeight = 0.0;
		var scale = 0.0;
		var currentX = 0;
		var currentY = 0;
		while(!finished) {
			starling_utils_ArrayUtil.clear(starling_text_BitmapFont.sLines);
			scale = fontSize / this.mSize;
			containerWidth = width / scale;
			containerHeight = height / scale;
			if(this.mLineHeight <= containerHeight) {
				var lastWhiteSpace = -1;
				var lastCharID = -1;
				var currentLine = starling_text_CharLocation.vectorFromPool();
				numChars = text.length;
				var i = 0;
				while(i < numChars) {
					var lineFull = false;
					var charID = HxOverrides.cca(text,i);
					var $char = this.getChar(charID);
					if(charID == 10 || charID == 13) {
						lineFull = true;
					} else if($char == null) {
						haxe_Log.trace("[Starling] Missing character: " + charID,{ fileName : "BitmapFont.hx", lineNumber : 324, className : "starling.text.BitmapFont", methodName : "arrangeChars"});
					} else {
						if(charID == 32 || charID == 9) {
							lastWhiteSpace = i;
						}
						if(kerning) {
							currentX += $char.getKerning(lastCharID);
						}
						charLocation = starling_text_CharLocation.instanceFromPool($char);
						charLocation.x = currentX + $char.get_xOffset();
						charLocation.y = currentY + $char.get_yOffset();
						currentLine.set(currentLine.get_length(),charLocation);
						currentX += $char.get_xAdvance();
						lastCharID = charID;
						if(charLocation.x + $char.get_width() > containerWidth) {
							if(autoScale && lastWhiteSpace == -1) {
								break;
							}
							var numCharsToRemove = lastWhiteSpace == -1?1:i - lastWhiteSpace;
							var _g1 = 0;
							var _g = numCharsToRemove;
							while(_g1 < _g) {
								++_g1;
								currentLine.pop();
							}
							if(currentLine.get_length() == 0) {
								break;
							}
							i -= numCharsToRemove;
							lineFull = true;
						}
					}
					if(i == numChars - 1) {
						starling_text_BitmapFont.sLines[starling_text_BitmapFont.sLines.length] = currentLine;
						finished = true;
					} else if(lineFull) {
						starling_text_BitmapFont.sLines[starling_text_BitmapFont.sLines.length] = currentLine;
						if(lastWhiteSpace == i) {
							currentLine.pop();
						}
						if(currentY + leading + 2 * this.mLineHeight <= containerHeight) {
							currentLine = starling_text_CharLocation.vectorFromPool();
							currentX = 0;
							currentY += this.mLineHeight + leading;
							lastWhiteSpace = -1;
							lastCharID = -1;
						} else {
							break;
						}
					}
					++i;
				}
			}
			if(autoScale && !finished && fontSize > 3) {
				--fontSize;
			} else {
				finished = true;
			}
		}
		var finalLocations = starling_text_CharLocation.vectorFromPool();
		var numLines = starling_text_BitmapFont.sLines.length;
		var bottom = currentY + this.mLineHeight;
		var yOffset = 0;
		if(vAlign == "bottom") {
			yOffset = containerHeight - bottom | 0;
		} else if(vAlign == "center") {
			yOffset = (containerHeight - bottom) / 2 | 0;
		}
		var _g11 = 0;
		while(_g11 < numLines) {
			var line = starling_text_BitmapFont.sLines[_g11++];
			numChars = line.get_length();
			if(numChars == 0) {
				continue;
			}
			var xOffset = 0;
			var lastLocation = line.get(line.get_length() - 1);
			var right = lastLocation.x - lastLocation["char"].get_xOffset() + lastLocation["char"].get_xAdvance();
			if(hAlign == "right") {
				xOffset = containerWidth - right | 0;
			} else if(hAlign == "center") {
				xOffset = (containerWidth - right) / 2 | 0;
			}
			var _g3 = 0;
			var _g2 = numChars;
			while(_g3 < _g2) {
				charLocation = line.get(_g3++);
				charLocation.x = scale * (charLocation.x + xOffset + this.mOffsetX);
				charLocation.y = scale * (charLocation.y + yOffset + this.mOffsetY);
				charLocation.scale = scale;
				if(charLocation["char"].get_width() > 0 && charLocation["char"].get_height() > 0) {
					finalLocations.set(finalLocations.get_length(),charLocation);
				}
			}
		}
		return finalLocations;
	}
	,get_name: function() {
		return this.mName;
	}
	,get_size: function() {
		return this.mSize;
	}
	,get_lineHeight: function() {
		return this.mLineHeight;
	}
	,set_lineHeight: function(value) {
		this.mLineHeight = value;
	}
	,get_smoothing: function() {
		return this.mHelperImage.get_smoothing();
	}
	,set_smoothing: function(value) {
		return this.mHelperImage.set_smoothing(value);
	}
	,get_baseline: function() {
		return this.mBaseline;
	}
	,set_baseline: function(value) {
		return this.mBaseline = value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		return this.mOffsetX = value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		return this.mOffsetY = value;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,__class__: starling_text_BitmapFont
	,__properties__: {set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_baseline:"set_baseline",get_baseline:"get_baseline",set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",get_lineHeight:"get_lineHeight",get_size:"get_size",get_name:"get_name"}
};
var starling_text_CharLocation = function($char) {
	this.reset($char);
};
$hxClasses["starling.text.CharLocation"] = starling_text_CharLocation;
starling_text_CharLocation.__name__ = ["starling","text","CharLocation"];
starling_text_CharLocation.instanceFromPool = function($char) {
	var instance = starling_text_CharLocation.sInstancePool.get_length() > 0?starling_text_CharLocation.sInstancePool.pop():new starling_text_CharLocation($char);
	instance.reset($char);
	starling_text_CharLocation.sInstanceLoan.set(starling_text_CharLocation.sInstanceLoan.get_length(),instance);
	return instance;
};
starling_text_CharLocation.vectorFromPool = function() {
	var vector = starling_text_CharLocation.sVectorPool.length > 0?starling_text_CharLocation.sVectorPool.pop():openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	vector.set_length(0);
	starling_text_CharLocation.sVectorLoan[starling_text_CharLocation.sVectorLoan.length] = vector;
	return vector;
};
starling_text_CharLocation.rechargePool = function() {
	var instance;
	var vector;
	while(starling_text_CharLocation.sInstanceLoan.get_length() > 0) {
		instance = starling_text_CharLocation.sInstanceLoan.pop();
		instance["char"] = null;
		starling_text_CharLocation.sInstancePool.set(starling_text_CharLocation.sInstancePool.get_length(),instance);
	}
	while(starling_text_CharLocation.sVectorLoan.length > 0) {
		vector = starling_text_CharLocation.sVectorLoan.pop();
		vector.set_length(0);
		starling_text_CharLocation.sVectorPool[starling_text_CharLocation.sVectorPool.length] = vector;
	}
};
starling_text_CharLocation.prototype = {
	'char': null
	,scale: null
	,x: null
	,y: null
	,reset: function($char) {
		this["char"] = $char;
		return this;
	}
	,__class__: starling_text_CharLocation
};
var starling_text_MiniBitmapFont = function() { };
$hxClasses["starling.text.MiniBitmapFont"] = starling_text_MiniBitmapFont;
starling_text_MiniBitmapFont.__name__ = ["starling","text","MiniBitmapFont"];
starling_text_MiniBitmapFont.__properties__ = {get_xml:"get_xml",get_texture:"get_texture"}
starling_text_MiniBitmapFont.get_texture = function() {
	var bitmapData = starling_text_MiniBitmapFont.getBitmapData();
	var texture = starling_textures_Texture.fromBitmapData(bitmapData,false);
	bitmapData.dispose();
	bitmapData = null;
	texture.get_root().set_onRestore(function() {
		bitmapData = starling_text_MiniBitmapFont.getBitmapData();
		texture.get_root().uploadBitmapData(bitmapData);
		bitmapData.dispose();
		bitmapData = null;
	});
	return texture;
};
starling_text_MiniBitmapFont.getBitmapData = function() {
	var bmpData = new openfl_display_BitmapData(128,64);
	var bmpBytes = new openfl_utils_ByteArrayData(0);
	var numBytes = starling_text_MiniBitmapFont.BITMAP_DATA.length;
	var _g1 = 0;
	while(_g1 < numBytes) bmpBytes.writeUnsignedInt(starling_text_MiniBitmapFont.BITMAP_DATA[_g1++]);
	bmpBytes.uncompress();
	bmpData.setPixels(new openfl_geom_Rectangle(0,0,128,64),bmpBytes);
	bmpBytes.clear();
	return bmpData;
};
starling_text_MiniBitmapFont.get_xml = function() {
	return starling_text_MiniBitmapFont.XML_DATA;
};
var starling_text_TextField = function(width,height,text,fontName,fontSize,color,bold) {
	if(bold == null) {
		bold = false;
	}
	if(color == null) {
		color = 0;
	}
	if(fontSize == null) {
		fontSize = 12;
	}
	if(fontName == null) {
		fontName = "_sans";
	}
	starling_display_DisplayObjectContainer.call(this);
	this.mText = text != null?text:"";
	this.mFontSize = fontSize;
	this.mColor = color;
	this.mHAlign = "center";
	this.mVAlign = "center";
	this.mBorder = null;
	this.mKerning = true;
	this.mLeading = 0.0;
	this.mBold = bold;
	this.mAutoSize = "none";
	this.mHitArea = new openfl_geom_Rectangle(0,0,width,height);
	this.set_fontName(fontName);
	this.addEventListener("flatten",$bind(this,this.onFlatten));
};
$hxClasses["starling.text.TextField"] = starling_text_TextField;
starling_text_TextField.__name__ = ["starling","text","TextField"];
starling_text_TextField.__properties__ = {get_bitmapFonts:"get_bitmapFonts",set_defaultTextureFormat:"set_defaultTextureFormat",get_defaultTextureFormat:"get_defaultTextureFormat"}
starling_text_TextField.get_defaultTextureFormat = function() {
	return starling_text_TextField.sDefaultTextureFormat;
};
starling_text_TextField.set_defaultTextureFormat = function(value) {
	return starling_text_TextField.sDefaultTextureFormat = value;
};
starling_text_TextField.registerBitmapFont = function(bitmapFont,name) {
	if(name == null) {
		name = bitmapFont.get_name();
	}
	starling_text_TextField.get_bitmapFonts().set(starling_text_TextField.convertToLowerCase(name),bitmapFont);
	return name;
};
starling_text_TextField.unregisterBitmapFont = function(name,dispose) {
	if(dispose == null) {
		dispose = true;
	}
	name = starling_text_TextField.convertToLowerCase(name);
	if(dispose && starling_text_TextField.get_bitmapFonts().get(name) != null) {
		starling_text_TextField.get_bitmapFonts().get(name).dispose();
	}
	starling_text_TextField.get_bitmapFonts().remove(name);
};
starling_text_TextField.getBitmapFont = function(name) {
	return starling_text_TextField.get_bitmapFonts().get(starling_text_TextField.convertToLowerCase(name));
};
starling_text_TextField.get_bitmapFonts = function() {
	var fonts = starling_core_Starling.get_current().get_contextData().get("starling.display.TextField.BitmapFonts");
	if(fonts == null) {
		fonts = new haxe_ds_StringMap();
		starling_core_Starling.get_current().get_contextData().set("starling.display.TextField.BitmapFonts",fonts);
	}
	return fonts;
};
starling_text_TextField.convertToLowerCase = function(string) {
	var _this = starling_text_TextField.sStringCache;
	var result = __map_reserved[string] != null?_this.getReserved(string):_this.h[string];
	if(result == null) {
		result = string.toLowerCase();
		var _this1 = starling_text_TextField.sStringCache;
		if(__map_reserved[string] != null) {
			_this1.setReserved(string,result);
		} else {
			_this1.h[string] = result;
		}
	}
	return result;
};
starling_text_TextField.__super__ = starling_display_DisplayObjectContainer;
starling_text_TextField.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mFontSize: null
	,mColor: null
	,mText: null
	,mFontName: null
	,mHAlign: null
	,mVAlign: null
	,mBold: null
	,mItalic: null
	,mUnderline: null
	,mAutoScale: null
	,mAutoSize: null
	,mKerning: null
	,mLeading: null
	,mNativeFilters: null
	,mRequiresRedraw: null
	,mIsHtmlText: null
	,mTextBounds: null
	,mBatchable: null
	,mHitArea: null
	,mBorder: null
	,mImage: null
	,mQuadBatch: null
	,dispose: function() {
		this.removeEventListener("flatten",$bind(this,this.onFlatten));
		if(this.mImage != null) {
			this.mImage.get_texture().dispose();
		}
		if(this.mQuadBatch != null) {
			this.mQuadBatch.dispose();
		}
		starling_display_DisplayObjectContainer.prototype.dispose.call(this);
	}
	,onFlatten: function(e) {
		if(this.mRequiresRedraw) {
			this.redraw();
		}
	}
	,render: function(support,parentAlpha) {
		if(this.mRequiresRedraw) {
			this.redraw();
		}
		starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
	}
	,redraw: function() {
		if(this.mRequiresRedraw) {
			if(starling_text_TextField.getBitmapFont(this.mFontName) != null) {
				this.createComposedContents();
			} else {
				this.createRenderedContents();
			}
			this.updateBorder();
			this.mRequiresRedraw = false;
		}
	}
	,createRenderedContents: function() {
		var _gthis = this;
		if(this.mQuadBatch != null) {
			this.mQuadBatch.removeFromParent(true);
			this.mQuadBatch = null;
		}
		if(this.mTextBounds == null) {
			this.mTextBounds = new openfl_geom_Rectangle();
		}
		var texture;
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var bitmapData = this.renderText(scale,this.mTextBounds);
		var format = starling_text_TextField.sDefaultTextureFormat;
		var maxTextureSize = starling_textures_Texture.get_maxSize();
		var shrinkHelper = 0;
		while(bitmapData.width > maxTextureSize || bitmapData.height > maxTextureSize) {
			scale *= Math.min((maxTextureSize - shrinkHelper) / bitmapData.width,(maxTextureSize - shrinkHelper) / bitmapData.height);
			bitmapData.dispose();
			bitmapData = this.renderText(scale,this.mTextBounds);
			++shrinkHelper;
		}
		this.mHitArea.width = bitmapData.width / scale;
		this.mHitArea.height = bitmapData.height / scale;
		texture = starling_textures_Texture.fromBitmapData(bitmapData,false,false,scale,format);
		texture.get_root().set_onRestore(function() {
			if(_gthis.mTextBounds == null) {
				_gthis.mTextBounds = new openfl_geom_Rectangle();
			}
			bitmapData = _gthis.renderText(scale,_gthis.mTextBounds);
			texture.get_root().uploadBitmapData(bitmapData);
			bitmapData.dispose();
			bitmapData = null;
		});
		bitmapData.dispose();
		bitmapData = null;
		if(this.mImage == null) {
			this.mImage = new starling_display_Image(texture);
			this.mImage.set_touchable(false);
			this.addChild(this.mImage);
		} else {
			this.mImage.get_texture().dispose();
			this.mImage.set_texture(texture);
			this.mImage.readjustSize();
		}
	}
	,formatText: function(textField,textFormat) {
	}
	,requireRedraw: function() {
		this.mRequiresRedraw = true;
	}
	,renderText: function(scale,resultTextBounds) {
		var width = this.mHitArea.width * scale;
		var height = this.mHitArea.height * scale;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = 2147483647;
			hAlign = "left";
		}
		if(this.get_isVerticalAutoSize()) {
			height = 2147483647;
			vAlign = "top";
		}
		var textFormat = new openfl_text_TextFormat(this.mFontName,this.mFontSize * scale | 0,this.mColor,this.mBold,this.mItalic,this.mUnderline,null,null,openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(hAlign));
		textFormat.kerning = this.mKerning;
		textFormat.leading = this.mLeading | 0;
		starling_text_TextField.sNativeTextField.set_defaultTextFormat(textFormat);
		starling_text_TextField.sNativeTextField.set_width(width);
		starling_text_TextField.sNativeTextField.set_height(height);
		starling_text_TextField.sNativeTextField.set_antiAliasType(0);
		starling_text_TextField.sNativeTextField.set_selectable(false);
		starling_text_TextField.sNativeTextField.set_multiline(true);
		starling_text_TextField.sNativeTextField.set_wordWrap(true);
		if(this.mIsHtmlText) {
			starling_text_TextField.sNativeTextField.set_htmlText(this.mText);
		} else {
			starling_text_TextField.sNativeTextField.set_text(this.mText);
		}
		starling_text_TextField.sNativeTextField.set_embedFonts(true);
		starling_text_TextField.sNativeTextField.set_filters(this.mNativeFilters);
		if(starling_text_TextField.sNativeTextField.get_textWidth() == 0.0 || starling_text_TextField.sNativeTextField.get_textHeight() == 0.0) {
			starling_text_TextField.sNativeTextField.set_embedFonts(false);
		}
		this.formatText(starling_text_TextField.sNativeTextField,textFormat);
		if(this.mAutoScale) {
			this.autoScaleNativeTextField(starling_text_TextField.sNativeTextField);
		}
		var textWidth = starling_text_TextField.sNativeTextField.get_textWidth();
		var textHeight = starling_text_TextField.sNativeTextField.get_textHeight();
		if(this.get_isHorizontalAutoSize()) {
			width = Math.ceil(textWidth + 5);
			starling_text_TextField.sNativeTextField.set_width(width);
		}
		if(this.get_isVerticalAutoSize()) {
			height = Math.ceil(textHeight + 4);
			starling_text_TextField.sNativeTextField.set_height(height);
		}
		if(width < 1) {
			width = 1.0;
		}
		if(height < 1) {
			height = 1.0;
		}
		var textOffsetX = 0.0;
		if(hAlign == "left") {
			textOffsetX = 2;
		} else if(hAlign == "center") {
			textOffsetX = (width - textWidth) / 2.0;
		} else if(hAlign == "right") {
			textOffsetX = width - textWidth - 2;
		}
		var textOffsetY = 0.0;
		if(vAlign == "top") {
			textOffsetY = 2;
		} else if(vAlign == "center") {
			textOffsetY = (height - textHeight) / 2.0;
		} else if(vAlign == "bottom") {
			textOffsetY = height - textHeight - 2;
		}
		var filterOffset = this.calculateFilterOffset(starling_text_TextField.sNativeTextField,hAlign,vAlign);
		var bitmapData = new openfl_display_BitmapData(width | 0,height | 0,true,0);
		bitmapData.drawWithQuality(starling_text_TextField.sNativeTextField,new openfl_geom_Matrix(1,0,0,1,filterOffset.x,filterOffset.y + (textOffsetY | 0) - 2),null,null,null,false,3);
		starling_text_TextField.sNativeTextField.set_text("");
		resultTextBounds.setTo((textOffsetX + filterOffset.x) / scale,(textOffsetY + filterOffset.y) / scale,textWidth / scale,textHeight / scale);
		return bitmapData;
	}
	,autoScaleNativeTextField: function(textField) {
		var size = textField.get_defaultTextFormat().size | 0;
		var maxHeight = textField.get_height() - 4 | 0;
		var maxWidth = textField.get_width() - 4 | 0;
		while(textField.get_textWidth() > maxWidth || textField.get_textHeight() > maxHeight) {
			if(size <= 4) {
				break;
			}
			var format = textField.get_defaultTextFormat();
			format.size = size--;
			textField.set_defaultTextFormat(format);
			if(this.mIsHtmlText) {
				textField.set_htmlText(this.mText);
			} else {
				textField.set_text(this.mText);
			}
		}
	}
	,calculateFilterOffset: function(textField,hAlign,vAlign) {
		var resultOffset = new openfl_geom_Point();
		var filters = textField.get_filters();
		if(filters != null && filters.length > 0) {
			var textWidth = textField.get_textWidth();
			var textHeight = textField.get_textHeight();
			var bounds = new openfl_geom_Rectangle();
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				var blurX = 0;
				var blurY = 0;
				var angleDeg = 0;
				var distance = 0;
				if(js_Boot.__instanceof(filter,openfl_filters_BlurFilter)) {
					var f = filter;
					blurX = f.blurX;
					blurY = f.blurY;
				} else if(js_Boot.__instanceof(filter,openfl_filters_DropShadowFilter)) {
					var f1 = filter;
					blurX = f1.blurX;
					blurY = f1.blurY;
				}
				var angle = starling_utils_MathUtil.deg2rad(angleDeg);
				var marginX = blurX * 1.33;
				var marginY = blurY * 1.33;
				bounds = bounds.union(new openfl_geom_Rectangle(Math.cos(angle) * distance - marginX / 2.0,Math.sin(angle) * distance - marginY / 2.0,textWidth + marginX,textHeight + marginY));
			}
			if(hAlign == "left" && bounds.x < 0) {
				resultOffset.x = -bounds.x;
			} else if(hAlign == "right" && bounds.y > 0) {
				resultOffset.x = -(bounds.get_right() - textWidth);
			}
			if(vAlign == "top" && bounds.y < 0) {
				resultOffset.y = -bounds.y;
			} else if(vAlign == "bottom" && bounds.y > 0) {
				resultOffset.y = -(bounds.get_bottom() - textHeight);
			}
		}
		return resultOffset;
	}
	,createComposedContents: function() {
		if(this.mImage != null) {
			this.mImage.removeFromParent(true);
			this.mImage.get_texture().dispose();
			this.mImage = null;
		}
		if(this.mQuadBatch == null) {
			this.mQuadBatch = new starling_display_QuadBatch();
			this.mQuadBatch.set_touchable(false);
			this.addChild(this.mQuadBatch);
		} else {
			this.mQuadBatch.reset();
		}
		var bitmapFont = starling_text_TextField.getBitmapFont(this.mFontName);
		if(bitmapFont == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Bitmap font not registered: " + this.mFontName));
		}
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = 2147483647;
			hAlign = "left";
		}
		if(this.get_isVerticalAutoSize()) {
			height = 2147483647;
			vAlign = "top";
		}
		bitmapFont.fillQuadBatch(this.mQuadBatch,width,height,this.mText,this.mFontSize,this.mColor,hAlign,vAlign,this.mAutoScale,this.mKerning,this.mLeading);
		this.mQuadBatch.set_batchable(this.mBatchable);
		if(this.mAutoSize != "none") {
			this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch,this.mTextBounds);
			if(this.get_isHorizontalAutoSize()) {
				this.mHitArea.width = this.mTextBounds.x + this.mTextBounds.width;
			}
			if(this.get_isVerticalAutoSize()) {
				this.mHitArea.height = this.mTextBounds.y + this.mTextBounds.height;
			}
		} else {
			this.mTextBounds = null;
		}
	}
	,updateBorder: function() {
		if(this.mBorder == null) {
			return;
		}
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var topLine = js_Boot.__cast(this.mBorder.getChildAt(0) , starling_display_Quad);
		var rightLine = js_Boot.__cast(this.mBorder.getChildAt(1) , starling_display_Quad);
		var bottomLine = js_Boot.__cast(this.mBorder.getChildAt(2) , starling_display_Quad);
		var leftLine = js_Boot.__cast(this.mBorder.getChildAt(3) , starling_display_Quad);
		topLine.set_width(width);
		topLine.set_height(1);
		bottomLine.set_width(width);
		bottomLine.set_height(1);
		leftLine.set_width(1);
		leftLine.set_height(height);
		rightLine.set_width(1);
		rightLine.set_height(height);
		rightLine.set_x(width - 1);
		bottomLine.set_y(height - 1);
		topLine.set_color(rightLine.set_color(bottomLine.set_color(leftLine.set_color(this.mColor))));
	}
	,get_isHorizontalAutoSize: function() {
		if(this.mAutoSize != "horizontal") {
			return this.mAutoSize == "bothDirections";
		} else {
			return true;
		}
	}
	,get_isVerticalAutoSize: function() {
		if(this.mAutoSize != "vertical") {
			return this.mAutoSize == "bothDirections";
		} else {
			return true;
		}
	}
	,get_textBounds: function() {
		if(this.mRequiresRedraw) {
			this.redraw();
		}
		if(this.mTextBounds == null) {
			this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch);
		}
		return this.mTextBounds.clone();
	}
	,getBounds: function(targetSpace,resultRect) {
		if(this.mRequiresRedraw) {
			this.redraw();
		}
		this.getTransformationMatrix(targetSpace,starling_text_TextField.sHelperMatrix);
		return starling_utils_RectangleUtil.getBounds(this.mHitArea,starling_text_TextField.sHelperMatrix,resultRect);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.get_visible() || !this.get_touchable())) {
			return null;
		} else if(this.mHitArea.containsPoint(localPoint) && this.hitTestMask(localPoint)) {
			return this;
		} else {
			return null;
		}
	}
	,set_width: function(value) {
		this.mHitArea.width = value;
		this.mRequiresRedraw = true;
		return starling_display_DisplayObjectContainer.prototype.get_width.call(this);
	}
	,set_height: function(value) {
		this.mHitArea.height = value;
		this.mRequiresRedraw = true;
		return starling_display_DisplayObjectContainer.prototype.get_height.call(this);
	}
	,get_text: function() {
		return this.mText;
	}
	,set_text: function(value) {
		if(value == null) {
			value = "";
		}
		if(this.mText != value) {
			this.mText = value;
			this.mRequiresRedraw = true;
		}
		return this.mText;
	}
	,get_fontName: function() {
		return this.mFontName;
	}
	,set_fontName: function(value) {
		if(this.mFontName != value) {
			if(value == "mini" && starling_text_TextField.get_bitmapFonts().get(value) == null) {
				starling_text_TextField.registerBitmapFont(new starling_text_BitmapFont());
			}
			this.mFontName = value;
			this.mRequiresRedraw = true;
		}
		return this.mFontName;
	}
	,get_fontSize: function() {
		return this.mFontSize;
	}
	,set_fontSize: function(value) {
		if(this.mFontSize != value) {
			this.mFontSize = value;
			this.mRequiresRedraw = true;
		}
		return this.mFontSize;
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		if(this.mColor != value) {
			this.mColor = value;
			this.mRequiresRedraw = true;
		}
		return this.mColor;
	}
	,get_hAlign: function() {
		return this.mHAlign;
	}
	,set_hAlign: function(value) {
		if(!starling_utils_HAlign.isValid(value)) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid horizontal align: " + value));
		}
		if(this.mHAlign != value) {
			this.mHAlign = value;
			this.mRequiresRedraw = true;
		}
		return this.mHAlign;
	}
	,get_vAlign: function() {
		return this.mVAlign;
	}
	,set_vAlign: function(value) {
		if(!starling_utils_VAlign.isValid(value)) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid vertical align: " + value));
		}
		if(this.mVAlign != value) {
			this.mVAlign = value;
			this.mRequiresRedraw = true;
		}
		return this.mVAlign;
	}
	,get_border: function() {
		return this.mBorder != null;
	}
	,set_border: function(value) {
		if(value && this.mBorder == null) {
			this.mBorder = new starling_display_Sprite();
			this.addChild(this.mBorder);
			var _g = 0;
			while(_g < 4) {
				++_g;
				this.mBorder.addChild(new starling_display_Quad(1.0,1.0));
			}
			this.updateBorder();
		} else if(!value && this.mBorder != null) {
			this.mBorder.removeFromParent(true);
			this.mBorder = null;
		}
		return this.mBorder != null;
	}
	,get_bold: function() {
		return this.mBold;
	}
	,set_bold: function(value) {
		if(this.mBold != value) {
			this.mBold = value;
			this.mRequiresRedraw = true;
		}
		return this.mBold;
	}
	,get_italic: function() {
		return this.mItalic;
	}
	,set_italic: function(value) {
		if(this.mItalic != value) {
			this.mItalic = value;
			this.mRequiresRedraw = true;
		}
		return this.mItalic;
	}
	,get_underline: function() {
		return this.mUnderline;
	}
	,set_underline: function(value) {
		if(this.mUnderline != value) {
			this.mUnderline = value;
			this.mRequiresRedraw = true;
		}
		return this.mUnderline;
	}
	,get_kerning: function() {
		return this.mKerning;
	}
	,set_kerning: function(value) {
		if(this.mKerning != value) {
			this.mKerning = value;
			this.mRequiresRedraw = true;
		}
		return this.mKerning;
	}
	,get_autoScale: function() {
		return this.mAutoScale;
	}
	,set_autoScale: function(value) {
		if(this.mAutoScale != value) {
			this.mAutoScale = value;
			this.mRequiresRedraw = true;
		}
		return this.mAutoScale;
	}
	,get_autoSize: function() {
		return this.mAutoSize;
	}
	,set_autoSize: function(value) {
		if(this.mAutoSize != value) {
			this.mAutoSize = value;
			this.mRequiresRedraw = true;
		}
		return this.get_autoSize();
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		this.mBatchable = value;
		if(this.mQuadBatch != null) {
			this.mQuadBatch.set_batchable(value);
		}
		return this.mBatchable;
	}
	,get_nativeFilters: function() {
		return this.mNativeFilters;
	}
	,set_nativeFilters: function(value) {
		this.mNativeFilters = value.slice();
		this.mRequiresRedraw = true;
		return this.mNativeFilters;
	}
	,get_isHtmlText: function() {
		return this.mIsHtmlText;
	}
	,set_isHtmlText: function(value) {
		if(this.mIsHtmlText != value) {
			this.mIsHtmlText = value;
			this.mRequiresRedraw = true;
		}
		return this.mIsHtmlText;
	}
	,get_leading: function() {
		return this.mLeading;
	}
	,set_leading: function(value) {
		if(this.mLeading != value) {
			this.mLeading = value;
			this.mRequiresRedraw = true;
		}
		return this.mLeading;
	}
	,__class__: starling_text_TextField
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_leading:"set_leading",get_leading:"get_leading",set_isHtmlText:"set_isHtmlText",get_isHtmlText:"get_isHtmlText",set_nativeFilters:"set_nativeFilters",get_nativeFilters:"get_nativeFilters",set_batchable:"set_batchable",get_batchable:"get_batchable",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_autoScale:"set_autoScale",get_autoScale:"get_autoScale",set_kerning:"set_kerning",get_kerning:"get_kerning",set_underline:"set_underline",get_underline:"get_underline",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_border:"set_border",get_border:"get_border",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_color:"set_color",get_color:"get_color",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_text:"set_text",get_text:"get_text",get_textBounds:"get_textBounds",get_isVerticalAutoSize:"get_isVerticalAutoSize",get_isHorizontalAutoSize:"get_isHorizontalAutoSize"})
});
var starling_text_TextFieldAutoSize = function() { };
$hxClasses["starling.text.TextFieldAutoSize"] = starling_text_TextFieldAutoSize;
starling_text_TextFieldAutoSize.__name__ = ["starling","text","TextFieldAutoSize"];
var starling_textures_AtfData = function(data) {
	if(!starling_textures_AtfData.isAtfData(data)) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid ATF data"));
	}
	if(data.b[6] == 255) {
		data.position = 12;
	} else {
		data.position = 6;
	}
	var format = data.readUnsignedByte();
	switch(format & 127) {
	case 0:case 1:
		this.mFormat = 1;
		break;
	case 2:case 3:case 12:
		this.mFormat = 3;
		break;
	case 4:case 5:case 13:
		this.mFormat = 4;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid ATF format"));
	}
	this.mWidth = Math.pow(2,data.readUnsignedByte()) | 0;
	this.mHeight = Math.pow(2,data.readUnsignedByte()) | 0;
	this.mNumTextures = data.readUnsignedByte();
	this.mIsCubeMap = (format & 128) != 0;
	this.mData = data;
	if(data.b[5] != 0 && data.b[6] == 255) {
		var emptyMipmaps = (data.b[5] & 1) == 1;
		var numTextures = data.b[5] >> 1 & 127;
		this.mNumTextures = emptyMipmaps?1:numTextures;
	}
};
$hxClasses["starling.textures.AtfData"] = starling_textures_AtfData;
starling_textures_AtfData.__name__ = ["starling","textures","AtfData"];
starling_textures_AtfData.isAtfData = function(data) {
	if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) < 3) {
		return false;
	} else {
		var signature = "";
		var _g = 0;
		while(_g < 3) signature += String.fromCharCode(data.b[_g++]);
		return signature == "ATF";
	}
};
starling_textures_AtfData.prototype = {
	mFormat: null
	,mWidth: null
	,mHeight: null
	,mNumTextures: null
	,mIsCubeMap: null
	,mData: null
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_numTextures: function() {
		return this.mNumTextures;
	}
	,get_isCubeMap: function() {
		return this.mIsCubeMap;
	}
	,get_data: function() {
		return this.mData;
	}
	,__class__: starling_textures_AtfData
	,__properties__: {get_data:"get_data",get_isCubeMap:"get_isCubeMap",get_numTextures:"get_numTextures",get_height:"get_height",get_width:"get_width",get_format:"get_format"}
};
var starling_textures_Texture = function() {
};
$hxClasses["starling.textures.Texture"] = starling_textures_Texture;
starling_textures_Texture.__name__ = ["starling","textures","Texture"];
starling_textures_Texture.__properties__ = {get_maxSize:"get_maxSize"}
starling_textures_Texture.fromData = function(data,options) {
	var texture = null;
	if(js_Boot.__instanceof(data,openfl_display_Bitmap)) {
		data = (js_Boot.__cast(data , openfl_display_Bitmap)).bitmapData;
	}
	if(options == null) {
		options = new starling_textures_TextureOptions();
	}
	if(js_Boot.__instanceof(data,Class)) {
		texture = starling_textures_Texture.fromEmbeddedAsset(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat());
	} else if(js_Boot.__instanceof(data,openfl_display_BitmapData)) {
		texture = starling_textures_Texture.fromBitmapData(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat());
	} else if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
		texture = starling_textures_Texture.fromAtfData(data,options.get_scale(),options.get_mipMapping(),options.get_onReady(),options.get_repeat());
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Unsupported 'data' type: " + Type.getClassName(data)));
	}
	return texture;
};
starling_textures_Texture.fromEmbeddedAsset = function(assetClass,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scale == null) {
		scale = 1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = true;
	}
	if(format == null) {
		format = 1;
	}
	var texture;
	var asset = Type.createEmptyInstance(assetClass);
	if(js_Boot.__instanceof(asset,openfl_display_Bitmap)) {
		texture = starling_textures_Texture.fromBitmap(asset,mipMapping,optimizeForRenderToTexture,scale,format,repeat);
		texture.get_root().set_onRestore(function() {
			var tmp = Type.createInstance(assetClass,[]);
			texture.get_root().uploadBitmap(tmp);
		});
	} else if(js_Boot.__instanceof(asset,openfl_utils_ByteArrayData)) {
		texture = starling_textures_Texture.fromAtfData(asset,scale,mipMapping,null,repeat);
		texture.get_root().set_onRestore(function() {
			var tmp1 = Type.createInstance(assetClass,[]);
			texture.get_root().uploadAtfData(tmp1);
		});
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid asset type: " + Type.getClassName(asset)));
	}
	return texture;
};
starling_textures_Texture.fromBitmap = function(bitmap,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scale == null) {
		scale = 1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(generateMipMaps == null) {
		generateMipMaps = true;
	}
	if(format == null) {
		format = 1;
	}
	return starling_textures_Texture.fromBitmapData(bitmap.bitmapData,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
};
starling_textures_Texture.fromBitmapData = function(data,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scale == null) {
		scale = 1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(generateMipMaps == null) {
		generateMipMaps = true;
	}
	if(format == null) {
		format = 1;
	}
	var texture = starling_textures_Texture.empty(data.width / scale,data.height / scale,true,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
	texture.get_root().uploadBitmapData(data);
	texture.get_root().set_onRestore(function() {
		texture.get_root().uploadBitmapData(data);
	});
	return texture;
};
starling_textures_Texture.fromAtfData = function(data,scale,useMipMaps,async,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(useMipMaps == null) {
		useMipMaps = true;
	}
	if(scale == null) {
		scale = 1;
	}
	if(data == null) {
		return null;
	}
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) {
		throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	}
	var atfData = new starling_textures_AtfData(data);
	var concreteTexture = new starling_textures_ConcreteTexture(context.createTexture(atfData.get_width(),atfData.get_height(),atfData.get_format(),false),atfData.get_format(),atfData.get_width(),atfData.get_height(),useMipMaps && atfData.get_numTextures() > 1,false,false,scale,repeat);
	concreteTexture.uploadAtfData(data,0,async);
	concreteTexture.set_onRestore(function() {
		concreteTexture.uploadAtfData(data,0);
	});
	return concreteTexture;
};
starling_textures_Texture.fromNetStream = function(stream,scale,onComplete) {
	if(scale == null) {
		scale = 1;
	}
	if(stream.client == stream && !Object.prototype.hasOwnProperty.call(stream,"onMetaData")) {
		stream.client = { onMetaData : function(md) {
		}};
	}
	return starling_textures_Texture.fromVideoAttachment("NetStream",stream,scale,onComplete);
};
starling_textures_Texture.fromVideoAttachment = function(type,attachment,scale,onComplete) {
	var TEXTURE_READY = "textureReady";
	if(!starling_utils_SystemUtil.get_supportsVideoTexture()) {
		throw new js__$Boot_HaxeError(new starling_errors_NotSupportedError("Video Textures are not supported on this platform"));
	}
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) {
		throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	}
	var texture = null;
	var tmp;
	var tmp1;
	if(context == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(context.__properties__) {
			tmp = context.__properties__["get_" + "createVideoTexture"];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = context[tmp]();
		} else {
			tmp1 = context.createVideoTexture;
		}
	}
	var base = tmp1.apply(context,[]);
	var field = "attach" + type;
	var tmp3;
	var tmp4;
	if(base == null) {
		tmp4 = null;
	} else {
		var tmp5;
		if(base.__properties__) {
			tmp3 = base.__properties__["get_" + field];
			tmp5 = tmp3;
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			tmp4 = base[tmp3]();
		} else {
			tmp4 = base[field];
		}
	}
	tmp4.apply(base,[attachment]);
	base.addEventListener(TEXTURE_READY,function(event) {
		if(onComplete != null) {
			onComplete(texture);
		}
	});
	texture = new starling_textures_ConcreteVideoTexture(base,scale);
	texture.set_onRestore(function() {
		texture.get_root().attachVideo(type,attachment);
	});
	return texture;
};
starling_textures_Texture.fromColor = function(width,height,color,optimizeForRenderToTexture,scale,format) {
	if(scale == null) {
		scale = -1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(color == null) {
		color = -1;
	}
	if(format == null) {
		format = 1;
	}
	var texture = starling_textures_Texture.empty(width,height,true,false,optimizeForRenderToTexture,scale,format);
	texture.get_root().clear(color,starling_utils_Color.getAlpha(color) / 255.0);
	texture.get_root().set_onRestore(function() {
		texture.get_root().clear(color,starling_utils_Color.getAlpha(color) / 255.0);
	});
	return texture;
};
starling_textures_Texture.empty = function(width,height,premultipliedAlpha,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scale == null) {
		scale = -1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = true;
	}
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	if(scale <= 0) {
		scale = starling_core_Starling.get_current().get_contentScaleFactor();
	}
	if(format == null) {
		format = 1;
	}
	var actualWidth;
	var actualHeight;
	var nativeTexture;
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) {
		throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	}
	var origWidth = width * scale;
	var origHeight = height * scale;
	if(!mipMapping && !repeat && starling_core_Starling.get_current().get_profile() != 1 && format != 3) {
		actualWidth = Math.ceil(origWidth - 0.000000001);
		actualHeight = Math.ceil(origHeight - 0.000000001);
		nativeTexture = context.createRectangleTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	} else {
		actualWidth = starling_utils_PowerOfTwo.getNextPowerOfTwo(origWidth | 0);
		actualHeight = starling_utils_PowerOfTwo.getNextPowerOfTwo(origHeight | 0);
		nativeTexture = context.createTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	}
	var concreteTexture = new starling_textures_ConcreteTexture(nativeTexture,format,actualWidth,actualHeight,mipMapping,premultipliedAlpha,optimizeForRenderToTexture,scale,repeat);
	concreteTexture.set_onRestore($bind(concreteTexture,concreteTexture.clear));
	if(actualWidth - origWidth < 0.001 && actualHeight - origHeight < 0.001) {
		return concreteTexture;
	} else {
		return new starling_textures_SubTexture(concreteTexture,new openfl_geom_Rectangle(0,0,width,height),true);
	}
};
starling_textures_Texture.fromTexture = function(texture,region,frame,rotated) {
	if(rotated == null) {
		rotated = false;
	}
	return new starling_textures_SubTexture(texture,region,false,frame,rotated);
};
starling_textures_Texture.get_maxSize = function() {
	var target = starling_core_Starling.get_current();
	var profile = target != null?target.get_profile():0;
	if(profile == 0 || profile == 1) {
		return 2048;
	} else {
		return 4096;
	}
};
starling_textures_Texture.prototype = {
	dispose: function() {
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) {
			count = -1;
		}
		if(stride == null) {
			stride = 0;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
	}
	,get_frame: function() {
		return null;
	}
	,get_repeat: function() {
		return false;
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_nativeWidth: function() {
		return 0;
	}
	,get_nativeHeight: function() {
		return 0;
	}
	,get_scale: function() {
		return 1.0;
	}
	,get_base: function() {
		return null;
	}
	,get_root: function() {
		return null;
	}
	,get_format: function() {
		return 1;
	}
	,get_mipMapping: function() {
		return false;
	}
	,get_premultipliedAlpha: function() {
		return false;
	}
	,__class__: starling_textures_Texture
	,__properties__: {get_premultipliedAlpha:"get_premultipliedAlpha",get_mipMapping:"get_mipMapping",get_format:"get_format",get_root:"get_root",get_base:"get_base",get_scale:"get_scale",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",get_height:"get_height",get_width:"get_width",get_repeat:"get_repeat",get_frame:"get_frame"}
};
var starling_textures_ConcreteTexture = function(base,format,width,height,mipMapping,premultipliedAlpha,optimizedForRenderTexture,scale,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scale == null) {
		scale = 1;
	}
	if(optimizedForRenderTexture == null) {
		optimizedForRenderTexture = false;
	}
	starling_textures_Texture.call(this);
	this.mScale = scale <= 0?1.0:scale;
	this.mBase = base;
	this.mFormat = format;
	this.mWidth = width;
	this.mHeight = height;
	this.mMipMapping = mipMapping;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.mOptimizedForRenderTexture = optimizedForRenderTexture;
	this.mRepeat = repeat;
	this.mOnRestore = null;
	this.mDataUploaded = false;
	this.mTextureReadyCallback = null;
};
$hxClasses["starling.textures.ConcreteTexture"] = starling_textures_ConcreteTexture;
starling_textures_ConcreteTexture.__name__ = ["starling","textures","ConcreteTexture"];
starling_textures_ConcreteTexture.__super__ = starling_textures_Texture;
starling_textures_ConcreteTexture.prototype = $extend(starling_textures_Texture.prototype,{
	mBase: null
	,mFormat: null
	,mWidth: null
	,mHeight: null
	,mMipMapping: null
	,mPremultipliedAlpha: null
	,mOptimizedForRenderTexture: null
	,mScale: null
	,mRepeat: null
	,mOnRestore: null
	,mDataUploaded: null
	,mTextureReadyCallback: null
	,dispose: function() {
		if(this.mBase != null) {
			this.mBase.removeEventListener("textureReady",$bind(this,this.onTextureReady));
			this.mBase.dispose();
		}
		this.set_onRestore(null);
		starling_textures_Texture.prototype.dispose.call(this);
	}
	,uploadBitmap: function(bitmap) {
		this.uploadBitmapData(bitmap.bitmapData);
	}
	,uploadBitmapData: function(data) {
		var potData = null;
		if(data.width != this.mWidth || data.height != this.mHeight) {
			potData = new openfl_display_BitmapData(this.mWidth,this.mHeight,true,0);
			potData.copyPixels(data,data.rect,starling_textures_ConcreteTexture.sOrigin);
			data = potData;
		}
		if(js_Boot.__instanceof(this.mBase,openfl_display3D_textures_Texture)) {
			var potTexture = this.mBase;
			potTexture.uploadFromBitmapData(data);
			if(this.mMipMapping && data.width > 1 && data.height > 1) {
				var currentWidth = data.width >> 1;
				var currentHeight = data.height >> 1;
				var level = 1;
				var canvas = new openfl_display_BitmapData(currentWidth,currentHeight,true,0);
				var transform = new openfl_geom_Matrix(.5,0,0,.5);
				var bounds = new openfl_geom_Rectangle();
				while(currentWidth >= 1 || currentHeight >= 1) {
					bounds.width = currentWidth;
					bounds.height = currentHeight;
					canvas.fillRect(bounds,0);
					canvas.draw(data,transform,null,null,null,true);
					potTexture.uploadFromBitmapData(canvas,level++);
					transform.scale(0.5,0.5);
					currentWidth >>= 1;
					currentHeight >>= 1;
				}
				canvas.dispose();
			}
		} else if(js_Boot.__instanceof(this.mBase,openfl_display3D_textures_RectangleTexture)) {
			this.mBase.uploadFromBitmapData(data);
		}
		if(potData != null) {
			potData.dispose();
		}
		this.mDataUploaded = true;
	}
	,uploadAtfData: function(data,offset,async) {
		if(offset == null) {
			offset = 0;
		}
		var isAsync = Reflect.isFunction(async) || async == true;
		var potTexture = js_Boot.__instanceof(this.mBase,openfl_display3D_textures_Texture)?this.mBase:null;
		if(potTexture == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("This texture type does not support ATF data"));
		}
		if(Reflect.isFunction(async)) {
			this.mTextureReadyCallback = async;
			this.mBase.addEventListener("textureReady",$bind(this,this.onTextureReady));
		}
		potTexture.uploadCompressedTextureFromByteArray(data,offset,isAsync);
		this.mDataUploaded = true;
	}
	,attachNetStream: function(netStream,onComplete) {
		this.attachVideo("NetStream",netStream,onComplete);
	}
	,attachVideo: function(type,attachment,onComplete) {
		var o = this.mBase;
		if(Type.getClassName(o == null?null:js_Boot.getClass(o)) == "flash.display3D.textures.VideoTexture") {
			this.mDataUploaded = true;
			this.mTextureReadyCallback = onComplete;
			var o1 = this.mBase;
			var field = "attach" + type;
			var tmp;
			var tmp1;
			if(o1 == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(o1.__properties__) {
					tmp = o1.__properties__["get_" + field];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = o1[tmp]();
				} else {
					tmp1 = o1[field];
				}
			}
			tmp1.apply(this.mBase,attachment);
			this.mBase.addEventListener("textureReady",$bind(this,this.onTextureReady));
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("This texture type does not support " + type + " data"));
		}
	}
	,onTextureReady: function(event) {
		this.mBase.removeEventListener("textureReady",$bind(this,this.onTextureReady));
		if(this.mTextureReadyCallback != null) {
			this.mTextureReadyCallback(this);
		}
		this.mTextureReadyCallback = null;
	}
	,onContextCreated: function() {
		this.createBase();
		if(this.mOnRestore != null) {
			this.mOnRestore();
		}
		if(!this.mDataUploaded) {
			this.clear();
		}
	}
	,createBase: function() {
		var context = starling_core_Starling.get_current().get_context();
		var o = this.mBase;
		var classType = o == null?null:js_Boot.getClass(o);
		if(js_Boot.__instanceof(classType,openfl_display3D_textures_Texture)) {
			this.mBase = context.createTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture);
		} else if(js_Boot.__instanceof(classType,openfl_display3D_textures_RectangleTexture)) {
			this.mBase = context.createRectangleTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture);
		} else {
			throw new js__$Boot_HaxeError(new starling_errors_NotSupportedError("Texture type not supported: " + Type.getClassName(classType)));
		}
		this.mDataUploaded = false;
	}
	,clear: function(color,alpha) {
		if(alpha == null) {
			alpha = 0.0;
		}
		if(color == null) {
			color = 0;
		}
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		if(this.mPremultipliedAlpha && alpha < 1.0) {
			color = starling_utils_Color.rgb(starling_utils_Color.getRed(color) * alpha | 0,starling_utils_Color.getGreen(color) * alpha | 0,starling_utils_Color.getBlue(color) * alpha | 0);
		}
		context.setRenderToTexture(this.mBase);
		try {
			starling_core_RenderSupport._clear(color,alpha);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			} else throw(e);
		}
		context.setRenderToBackBuffer();
		this.mDataUploaded = true;
	}
	,get_optimizedForRenderTexture: function() {
		return this.mOptimizedForRenderTexture;
	}
	,get_onRestore: function() {
		return this.mOnRestore;
	}
	,set_onRestore: function(value) {
		starling_core_Starling.get_current().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		if(starling_core_Starling.get_handleLostContext() && value != null) {
			this.mOnRestore = value;
			starling_core_Starling.get_current().addEventListener("context3DCreate",$bind(this,this.onContextCreated));
		} else {
			this.mOnRestore = null;
		}
		return this.mOnRestore;
	}
	,get_base: function() {
		return this.mBase;
	}
	,get_root: function() {
		return this;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth / this.mScale;
	}
	,get_height: function() {
		return this.mHeight / this.mScale;
	}
	,get_nativeWidth: function() {
		return this.mWidth;
	}
	,get_nativeHeight: function() {
		return this.mHeight;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,__class__: starling_textures_ConcreteTexture
	,__properties__: $extend(starling_textures_Texture.prototype.__properties__,{set_onRestore:"set_onRestore",get_onRestore:"get_onRestore",get_optimizedForRenderTexture:"get_optimizedForRenderTexture"})
});
var starling_textures_ConcreteVideoTexture = function(base,scale) {
	if(scale == null) {
		scale = 1;
	}
	var format = 1;
	var tmp;
	var tmp1;
	if(base == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(base.__properties__) {
			tmp = base.__properties__["get_" + "videoWidth"];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = base[tmp]();
		} else {
			tmp1 = base.videoWidth;
		}
	}
	var width = tmp1;
	var tmp3;
	var tmp4;
	if(base == null) {
		tmp4 = null;
	} else {
		var tmp5;
		if(base.__properties__) {
			tmp3 = base.__properties__["get_" + "videoHeight"];
			tmp5 = tmp3;
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			tmp4 = base[tmp3]();
		} else {
			tmp4 = base.videoHeight;
		}
	}
	var height = tmp4;
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	starling_textures_ConcreteTexture.call(this,base,format,width,height,false,false,false,scale,false);
};
$hxClasses["starling.textures.ConcreteVideoTexture"] = starling_textures_ConcreteVideoTexture;
starling_textures_ConcreteVideoTexture.__name__ = ["starling","textures","ConcreteVideoTexture"];
starling_textures_ConcreteVideoTexture.__super__ = starling_textures_ConcreteTexture;
starling_textures_ConcreteVideoTexture.prototype = $extend(starling_textures_ConcreteTexture.prototype,{
	get_nativeWidth: function() {
		var o = this.get_base();
		var tmp;
		if(o == null) {
			return null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "videoWidth"];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o.videoWidth;
			}
		}
	}
	,get_nativeHeight: function() {
		var o = this.get_base();
		var tmp;
		if(o == null) {
			return null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "videoHeight"];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o.videoHeight;
			}
		}
	}
	,get_width: function() {
		return this.get_nativeWidth() / this.get_scale();
	}
	,get_height: function() {
		return this.get_nativeHeight() / this.get_scale();
	}
	,__class__: starling_textures_ConcreteVideoTexture
});
var starling_textures_SubTexture = function(parent,region,ownsParent,frame,rotated) {
	if(rotated == null) {
		rotated = false;
	}
	if(ownsParent == null) {
		ownsParent = false;
	}
	starling_textures_Texture.call(this);
	this.mParent = parent;
	this.mRegion = region != null?region.clone():new openfl_geom_Rectangle(0,0,parent.get_width(),parent.get_height());
	this.mFrame = frame != null?frame.clone():null;
	this.mOwnsParent = ownsParent;
	this.mRotated = rotated;
	this.mWidth = rotated?this.mRegion.height:this.mRegion.width;
	this.mHeight = rotated?this.mRegion.width:this.mRegion.height;
	this.mTransformationMatrix = new openfl_geom_Matrix();
	if(rotated) {
		this.mTransformationMatrix.translate(0,-1);
		this.mTransformationMatrix.rotate(Math.PI / 2.0);
	}
	if(this.mFrame != null && (this.mFrame.x > 0 || this.mFrame.y > 0 || this.mFrame.get_right() < this.mWidth || this.mFrame.get_bottom() < this.mHeight)) {
		haxe_Log.trace("[Starling] Warning: frames inside the texture's region are unsupported.",{ fileName : "SubTexture.hx", lineNumber : 84, className : "starling.textures.SubTexture", methodName : "new"});
	}
	this.mTransformationMatrix.scale(this.mRegion.width / this.mParent.get_width(),this.mRegion.height / this.mParent.get_height());
	this.mTransformationMatrix.translate(this.mRegion.x / this.mParent.get_width(),this.mRegion.y / this.mParent.get_height());
};
$hxClasses["starling.textures.SubTexture"] = starling_textures_SubTexture;
starling_textures_SubTexture.__name__ = ["starling","textures","SubTexture"];
starling_textures_SubTexture.__super__ = starling_textures_Texture;
starling_textures_SubTexture.prototype = $extend(starling_textures_Texture.prototype,{
	mParent: null
	,mOwnsParent: null
	,mRegion: null
	,mFrame: null
	,mRotated: null
	,mWidth: null
	,mHeight: null
	,mTransformationMatrix: null
	,dispose: function() {
		if(this.mOwnsParent) {
			this.mParent.dispose();
		}
		starling_textures_Texture.prototype.dispose.call(this);
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
		this.adjustTexCoords(vertexData.get_rawData(),vertexID * 8 + 6,6,count);
		if(this.mFrame != null) {
			if(count != 4) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Textures with a frame can only be used on quads"));
			}
			var deltaRight = this.mFrame.width + this.mFrame.x - this.mWidth;
			var deltaBottom = this.mFrame.height + this.mFrame.y - this.mHeight;
			vertexData.translateVertex(vertexID,-this.mFrame.x,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 1,-deltaRight,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 2,-this.mFrame.x,-deltaBottom);
			vertexData.translateVertex(vertexID + 3,-deltaRight,-deltaBottom);
		}
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) {
			count = -1;
		}
		if(stride == null) {
			stride = 0;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		if(count < 0) {
			count = (texCoords.get_length() - startIndex - 2) / (stride + 2) + 1 | 0;
		}
		var endIndex = startIndex + count * (2 + stride);
		var texture = this;
		var u;
		var v;
		starling_textures_SubTexture.sMatrix.identity();
		while(texture != null) {
			starling_textures_SubTexture.sMatrix.concat(texture.mTransformationMatrix);
			if(js_Boot.__instanceof(texture.get_parent(),starling_textures_SubTexture)) {
				texture = texture.get_parent();
			} else {
				texture = null;
			}
		}
		var i = startIndex;
		while(i < endIndex) {
			u = texCoords.get(i);
			v = texCoords.get(i + 1);
			starling_utils_MatrixUtil.transformCoords(starling_textures_SubTexture.sMatrix,u,v,starling_textures_SubTexture.sTexCoords);
			texCoords.set(i,starling_textures_SubTexture.sTexCoords.x);
			texCoords.set(i + 1,starling_textures_SubTexture.sTexCoords.y);
			i += 2 + stride;
		}
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_ownsParent: function() {
		return this.mOwnsParent;
	}
	,get_rotated: function() {
		return this.mRotated;
	}
	,get_region: function() {
		return this.mRegion;
	}
	,get_clipping: function() {
		var topLeft = new openfl_geom_Point();
		var bottomRight = new openfl_geom_Point();
		starling_utils_MatrixUtil.transformCoords(this.mTransformationMatrix,0.0,0.0,topLeft);
		starling_utils_MatrixUtil.transformCoords(this.mTransformationMatrix,1.0,1.0,bottomRight);
		var clipping = new openfl_geom_Rectangle(topLeft.x,topLeft.y,bottomRight.x - topLeft.x,bottomRight.y - topLeft.y);
		starling_utils_RectangleUtil.normalize(clipping);
		return clipping;
	}
	,get_transformationMatrix: function() {
		return this.mTransformationMatrix;
	}
	,get_base: function() {
		return this.mParent.get_base();
	}
	,get_root: function() {
		return this.mParent.get_root();
	}
	,get_format: function() {
		return this.mParent.get_format();
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_nativeWidth: function() {
		return this.mWidth * this.get_scale();
	}
	,get_nativeHeight: function() {
		return this.mHeight * this.get_scale();
	}
	,get_mipMapping: function() {
		return this.mParent.get_mipMapping();
	}
	,get_premultipliedAlpha: function() {
		return this.mParent.get_premultipliedAlpha();
	}
	,get_scale: function() {
		return this.mParent.get_scale();
	}
	,get_repeat: function() {
		return this.mParent.get_repeat();
	}
	,get_frame: function() {
		return this.mFrame;
	}
	,__class__: starling_textures_SubTexture
	,__properties__: $extend(starling_textures_Texture.prototype.__properties__,{get_transformationMatrix:"get_transformationMatrix",get_clipping:"get_clipping",get_region:"get_region",get_rotated:"get_rotated",get_ownsParent:"get_ownsParent",get_parent:"get_parent"})
});
var starling_textures_RenderTexture = function(width,height,persistent,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scale == null) {
		scale = -1;
	}
	if(persistent == null) {
		persistent = true;
	}
	if(format == null) {
		format = 1;
	}
	if(scale <= 0) {
		scale = starling_core_Starling.get_current().get_contentScaleFactor();
	}
	var legalWidth = width;
	var legalHeight = height;
	if(!this.get_supportsNonPotDimensions()) {
		legalWidth = starling_utils_PowerOfTwo.getNextPowerOfTwo(width * scale | 0) / scale;
		legalHeight = starling_utils_PowerOfTwo.getNextPowerOfTwo(height * scale | 0) / scale;
	}
	this.mActiveTexture = starling_textures_Texture.empty(legalWidth,legalHeight,true,false,true,scale,format,repeat);
	this.mActiveTexture.get_root().set_onRestore(($_=this.mActiveTexture.get_root(),$bind($_,$_.clear)));
	starling_textures_SubTexture.call(this,this.mActiveTexture,new openfl_geom_Rectangle(0,0,width,height),true,null,false);
	var rootWidth = this.mActiveTexture.get_root().get_width();
	var rootHeight = this.mActiveTexture.get_root().get_height();
	this.mIsPersistent = persistent;
	this.mSupport = new starling_core_RenderSupport();
	this.mSupport.setProjectionMatrix(0,0,rootWidth,rootHeight,width,height);
	if(persistent && (!starling_textures_RenderTexture.optimizePersistentBuffers || !starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement())) {
		this.mBufferTexture = starling_textures_Texture.empty(legalWidth,legalHeight,true,false,true,scale,format,repeat);
		this.mBufferTexture.get_root().set_onRestore(($_=this.mBufferTexture.get_root(),$bind($_,$_.clear)));
		this.mHelperImage = new starling_display_Image(this.mBufferTexture);
		this.mHelperImage.set_smoothing("none");
	}
};
$hxClasses["starling.textures.RenderTexture"] = starling_textures_RenderTexture;
starling_textures_RenderTexture.__name__ = ["starling","textures","RenderTexture"];
starling_textures_RenderTexture.__super__ = starling_textures_SubTexture;
starling_textures_RenderTexture.prototype = $extend(starling_textures_SubTexture.prototype,{
	mActiveTexture: null
	,mBufferTexture: null
	,mHelperImage: null
	,mDrawing: null
	,mBufferReady: null
	,mIsPersistent: null
	,mSupport: null
	,dispose: function() {
		this.mSupport.dispose();
		this.mActiveTexture.dispose();
		if(this.get_isDoubleBuffered()) {
			this.mBufferTexture.dispose();
			this.mHelperImage.dispose();
		}
		starling_textures_SubTexture.prototype.dispose.call(this);
	}
	,draw: function(object,matrix,alpha,antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(object == null) {
			return;
		}
		if(this.mDrawing) {
			this.render(object,matrix,alpha);
		} else {
			this.renderBundled($bind(this,this.render),object,matrix,alpha,antiAliasing);
		}
	}
	,drawBundled: function(drawingBlock,antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		this.renderBundled(drawingBlock,null,null,1.0,antiAliasing);
	}
	,haxegonpreviousRenderTarget: null
	,bundlelock: function(antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		if(starling_core_Starling.get_current().get_context() == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		if(!starling_core_Starling.get_current().get_contextValid()) {
			return;
		}
		if(this.get_isDoubleBuffered()) {
			var tmpTexture = this.mActiveTexture;
			this.mActiveTexture = this.mBufferTexture;
			this.mBufferTexture = tmpTexture;
			this.mHelperImage.set_texture(this.mBufferTexture);
		}
		this.haxegonpreviousRenderTarget = this.mSupport.get_renderTarget();
		starling_textures_RenderTexture.sClipRect.setTo(0,0,this.mActiveTexture.get_width(),this.mActiveTexture.get_height());
		this.mSupport.pushClipRect(starling_textures_RenderTexture.sClipRect);
		this.mSupport.setRenderTarget(this.mActiveTexture,antiAliasing);
		if(this.get_isDoubleBuffered() || !this.get_isPersistent() || !this.mBufferReady) {
			this.mSupport.clear();
		}
		if(this.get_isDoubleBuffered() && this.mBufferReady) {
			this.mHelperImage.render(this.mSupport,1.0);
		} else {
			this.mBufferReady = true;
		}
		this.mDrawing = true;
	}
	,bundleunlock: function() {
		this.mDrawing = false;
		this.mSupport.finishQuadBatch();
		starling_core_Starling.get_current().mStoredDrawCount += this.mSupport.get_drawCount();
		this.mSupport.nextFrame();
		this.mSupport.set_renderTarget(this.haxegonpreviousRenderTarget);
		this.mSupport.popClipRect();
	}
	,render: function(object,matrix,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		var filter = object.get_filter();
		var mask = object.get_mask();
		this.mSupport.loadIdentity();
		this.mSupport.set_blendMode(object.get_blendMode() == "auto"?"normal":object.get_blendMode());
		if(matrix != null) {
			this.mSupport.prependMatrix(matrix);
		} else {
			this.mSupport.transformMatrix(object);
		}
		if(mask != null) {
			this.mSupport.pushMask(mask);
		}
		if(filter != null) {
			filter.render(object,this.mSupport,alpha);
		} else {
			object.render(this.mSupport,alpha);
		}
		if(mask != null) {
			this.mSupport.popMask();
		}
	}
	,renderBundled: function(renderBlock,object,matrix,alpha,antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(starling_core_Starling.get_current().get_context() == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		if(!starling_core_Starling.get_current().get_contextValid()) {
			return;
		}
		if(this.get_isDoubleBuffered()) {
			var tmpTexture = this.mActiveTexture;
			this.mActiveTexture = this.mBufferTexture;
			this.mBufferTexture = tmpTexture;
			this.mHelperImage.set_texture(this.mBufferTexture);
		}
		var previousRenderTarget = this.mSupport.get_renderTarget();
		starling_textures_RenderTexture.sClipRect.setTo(0,0,this.mActiveTexture.get_width(),this.mActiveTexture.get_height());
		this.mSupport.pushClipRect(starling_textures_RenderTexture.sClipRect);
		this.mSupport.setRenderTarget(this.mActiveTexture,antiAliasing);
		if(this.get_isDoubleBuffered() || !this.get_isPersistent() || !this.mBufferReady) {
			this.mSupport.clear();
		}
		if(this.get_isDoubleBuffered() && this.mBufferReady) {
			this.mHelperImage.render(this.mSupport,1.0);
		} else {
			this.mBufferReady = true;
		}
		this.mDrawing = true;
		renderBlock(object,matrix,alpha);
		this.mDrawing = false;
		this.mSupport.finishQuadBatch();
		starling_core_Starling.get_current().mStoredDrawCount += this.mSupport.get_drawCount();
		this.mSupport.nextFrame();
		this.mSupport.set_renderTarget(previousRenderTarget);
		this.mSupport.popClipRect();
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 0.0;
		}
		if(rgb == null) {
			rgb = 0;
		}
		if(!starling_core_Starling.get_current().get_contextValid()) {
			return;
		}
		var previousRenderTarget = this.mSupport.get_renderTarget();
		this.mSupport.set_renderTarget(this.mActiveTexture);
		this.mSupport.clear(rgb,alpha);
		this.mSupport.set_renderTarget(previousRenderTarget);
		this.mBufferReady = true;
	}
	,get_supportsNonPotDimensions: function() {
		return true;
	}
	,get_isDoubleBuffered: function() {
		return this.mBufferTexture != null;
	}
	,get_isPersistent: function() {
		return this.mIsPersistent;
	}
	,get_base: function() {
		return this.mActiveTexture.get_base();
	}
	,get_root: function() {
		return this.mActiveTexture.get_root();
	}
	,__class__: starling_textures_RenderTexture
	,__properties__: $extend(starling_textures_SubTexture.prototype.__properties__,{get_isPersistent:"get_isPersistent",get_isDoubleBuffered:"get_isDoubleBuffered",get_supportsNonPotDimensions:"get_supportsNonPotDimensions"})
});
var starling_textures_TextureAtlas = function(texture,atlasXml) {
	this.mSubTextures = new haxe_ds_StringMap();
	this.mAtlasTexture = texture;
	if(atlasXml != null) {
		this.parseAtlasXml(atlasXml);
	}
};
$hxClasses["starling.textures.TextureAtlas"] = starling_textures_TextureAtlas;
starling_textures_TextureAtlas.__name__ = ["starling","textures","TextureAtlas"];
starling_textures_TextureAtlas.parseBool = function(value) {
	if(value != null) {
		return value.toLowerCase() == "true";
	} else {
		return false;
	}
};
starling_textures_TextureAtlas.prototype = {
	mAtlasTexture: null
	,mSubTextures: null
	,mSubTextureNames: null
	,dispose: function() {
		this.mAtlasTexture.dispose();
	}
	,getXmlFloat: function(xml,attributeName) {
		var value = xml.get(attributeName);
		if(value != null) {
			return parseFloat(value);
		} else {
			return 0;
		}
	}
	,parseAtlasXml: function(atlasXml) {
		var scale = this.mAtlasTexture.get_scale();
		var region = new openfl_geom_Rectangle();
		var frame = new openfl_geom_Rectangle();
		var tmp = atlasXml.elementsNamed("SubTexture");
		while(tmp.hasNext()) {
			var subTexture = tmp.next();
			var name = subTexture.get("name");
			var x = this.getXmlFloat(subTexture,"x") / scale;
			var y = this.getXmlFloat(subTexture,"y") / scale;
			var width = this.getXmlFloat(subTexture,"width") / scale;
			var height = this.getXmlFloat(subTexture,"height") / scale;
			var frameX = this.getXmlFloat(subTexture,"frameX") / scale;
			var frameY = this.getXmlFloat(subTexture,"frameY") / scale;
			var frameWidth = this.getXmlFloat(subTexture,"frameWidth") / scale;
			var frameHeight = this.getXmlFloat(subTexture,"frameHeight") / scale;
			var rotated = starling_textures_TextureAtlas.parseBool(subTexture.get("rotated"));
			region.setTo(x,y,width,height);
			frame.setTo(frameX,frameY,frameWidth,frameHeight);
			if(frameWidth > 0 && frameHeight > 0) {
				this.addRegion(name,region,frame,rotated);
			} else {
				this.addRegion(name,region,null,rotated);
			}
		}
	}
	,getTexture: function(name) {
		var _this = this.mSubTextures;
		return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var _g = 0;
		var _g1 = this.getNames(prefix,starling_textures_TextureAtlas.sNames);
		while(_g < _g1.get_length()) {
			var name = _g1.get(_g);
			++_g;
			result.set(result.get_length(),this.getTexture(name));
		}
		starling_textures_TextureAtlas.sNames.set_length(0);
		return result;
	}
	,getNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(this.mSubTextureNames == null) {
			this.mSubTextureNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			var tmp = this.mSubTextures.keys();
			while(tmp.hasNext()) {
				var name = tmp.next();
				this.mSubTextureNames.set(this.mSubTextureNames.get_length(),name);
			}
			this.mSubTextureNames.sort($bind(this,this.compare));
		}
		var _g = 0;
		var _g1 = this.mSubTextureNames;
		while(_g < _g1.get_length()) {
			var name1 = _g1.get(_g);
			++_g;
			if(name1.indexOf(prefix) == 0) {
				result.set(result.get_length(),name1);
			}
		}
		return result;
	}
	,getRegion: function(name) {
		var _this = this.mSubTextures;
		var subTexture = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
		if(subTexture != null) {
			return subTexture.get_region();
		} else {
			return null;
		}
	}
	,getFrame: function(name) {
		var _this = this.mSubTextures;
		var subTexture = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
		if(subTexture != null) {
			return subTexture.get_frame();
		} else {
			return null;
		}
	}
	,getRotation: function(name) {
		var _this = this.mSubTextures;
		var subTexture = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
		if(subTexture != null) {
			return subTexture.get_rotated();
		} else {
			return false;
		}
	}
	,addRegion: function(name,region,frame,rotated) {
		if(rotated == null) {
			rotated = false;
		}
		var v = new starling_textures_SubTexture(this.mAtlasTexture,region,false,frame,rotated);
		var _this = this.mSubTextures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,v);
		} else {
			_this.h[name] = v;
		}
		this.mSubTextureNames = null;
	}
	,removeRegion: function(name) {
		var _this = this.mSubTextures;
		var subTexture = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
		if(subTexture != null) {
			subTexture.dispose();
		}
		this.mSubTextures.remove(name);
		this.mSubTextureNames = null;
	}
	,get_texture: function() {
		return this.mAtlasTexture;
	}
	,compare: function(a,b) {
		if(a < b) {
			return -1;
		} else if(a > b) {
			return 1;
		} else {
			return 0;
		}
	}
	,__class__: starling_textures_TextureAtlas
	,__properties__: {get_texture:"get_texture"}
};
var starling_textures_TextureOptions = function(scale,mipMapping,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	if(scale == null) {
		scale = 1.0;
	}
	this.mRepeat = false;
	this.mOnReady = null;
	this.mOptimizeForRenderToTexture = false;
	if(format == null) {
		format = 1;
	}
	this.mScale = scale;
	this.mFormat = format;
	this.mMipMapping = mipMapping;
	this.mRepeat = repeat;
};
$hxClasses["starling.textures.TextureOptions"] = starling_textures_TextureOptions;
starling_textures_TextureOptions.__name__ = ["starling","textures","TextureOptions"];
starling_textures_TextureOptions.prototype = {
	mScale: null
	,mFormat: null
	,mMipMapping: null
	,mOptimizeForRenderToTexture: null
	,mOnReady: null
	,mRepeat: null
	,clone: function() {
		var clone = new starling_textures_TextureOptions(this.mScale,this.mMipMapping,this.mFormat,this.mRepeat);
		clone.mOptimizeForRenderToTexture = this.mOptimizeForRenderToTexture;
		clone.mOnReady = this.mOnReady;
		return clone;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,set_scale: function(value) {
		this.mScale = value > 0?value:starling_core_Starling.get_current().get_contentScaleFactor();
		return this.mScale;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,set_format: function(value) {
		return this.mFormat = value;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,set_mipMapping: function(value) {
		return this.mMipMapping = value;
	}
	,get_optimizeForRenderToTexture: function() {
		return this.mOptimizeForRenderToTexture;
	}
	,set_optimizeForRenderToTexture: function(value) {
		return this.mOptimizeForRenderToTexture = value;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,set_repeat: function(value) {
		return this.mRepeat = value;
	}
	,get_onReady: function() {
		return this.mOnReady;
	}
	,set_onReady: function(value) {
		return this.mOnReady = value;
	}
	,__class__: starling_textures_TextureOptions
	,__properties__: {set_onReady:"set_onReady",get_onReady:"get_onReady",set_repeat:"set_repeat",get_repeat:"get_repeat",set_optimizeForRenderToTexture:"set_optimizeForRenderToTexture",get_optimizeForRenderToTexture:"get_optimizeForRenderToTexture",set_mipMapping:"set_mipMapping",get_mipMapping:"get_mipMapping",set_format:"set_format",get_format:"get_format",set_scale:"set_scale",get_scale:"get_scale"}
};
var starling_textures_TextureSmoothing = function() { };
$hxClasses["starling.textures.TextureSmoothing"] = starling_textures_TextureSmoothing;
starling_textures_TextureSmoothing.__name__ = ["starling","textures","TextureSmoothing"];
starling_textures_TextureSmoothing.isValid = function(smoothing) {
	if(!(smoothing == "none" || smoothing == "bilinear")) {
		return smoothing == "trilinear";
	} else {
		return true;
	}
};
var starling_utils_ArrayUtil = function() { };
$hxClasses["starling.utils.ArrayUtil"] = starling_utils_ArrayUtil;
starling_utils_ArrayUtil.__name__ = ["starling","utils","ArrayUtil"];
starling_utils_ArrayUtil.resize = function(arr,newLength,defaultValue) {
	var length = arr.length;
	if(newLength < length) {
		arr.splice(newLength,length - newLength);
	} else if(newLength > length) {
		var _g1 = length;
		while(_g1 < newLength) arr[_g1++] = defaultValue;
	}
};
starling_utils_ArrayUtil.clear = function(arr) {
	arr.splice(0,arr.length);
};
starling_utils_ArrayUtil.insertAt = function(array,index,object) {
	var i;
	var length = array.length;
	if(index < 0) {
		index += length + 1;
	}
	if(index < 0) {
		index = 0;
	}
	i = index - 1;
	while(i >= length) {
		array[i] = null;
		--i;
	}
	i = length;
	while(i > index) {
		array[i] = array[i - 1];
		--i;
	}
	array[index] = object;
};
starling_utils_ArrayUtil.removeAt = function(array,index) {
	var i;
	var length = array.length;
	if(index < 0) {
		index += length;
	}
	if(index < 0) {
		index = 0;
	} else if(index >= length) {
		index = length - 1;
	}
	var object = array[index];
	i = index + 1;
	while(i < length) {
		array[i - 1] = array[i];
		++i;
	}
	starling_utils_ArrayUtil.resize(array,array.length - 1);
	return object;
};
var starling_utils_AssetManager = function(scaleFactor,useMipmaps) {
	if(useMipmaps == null) {
		useMipmaps = false;
	}
	if(scaleFactor == null) {
		scaleFactor = 1;
	}
	this.mNumLoadingQueues = 0;
	starling_events_EventDispatcher.call(this);
	this.mDefaultTextureOptions = new starling_textures_TextureOptions(scaleFactor,useMipmaps);
	this.mTextures = new haxe_ds_StringMap();
	this.mAtlases = new haxe_ds_StringMap();
	this.mSounds = new haxe_ds_StringMap();
	this.mXmls = new haxe_ds_StringMap();
	this.mObjects = new haxe_ds_StringMap();
	this.mByteArrays = new haxe_ds_StringMap();
	this.mNumConnections = 3;
	this.mVerbose = true;
	this.mQueue = [];
};
$hxClasses["starling.utils.AssetManager"] = starling_utils_AssetManager;
starling_utils_AssetManager.__name__ = ["starling","utils","AssetManager"];
starling_utils_AssetManager.__super__ = starling_events_EventDispatcher;
starling_utils_AssetManager.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mStarling: null
	,mNumLostTextures: null
	,mNumRestoredTextures: null
	,mNumLoadingQueues: null
	,mDefaultTextureOptions: null
	,mCheckPolicyFile: null
	,mKeepAtlasXmls: null
	,mKeepFontXmls: null
	,mNumConnections: null
	,mVerbose: null
	,mQueue: null
	,mTextures: null
	,mAtlases: null
	,mSounds: null
	,mXmls: null
	,mObjects: null
	,mByteArrays: null
	,dispose: function() {
		var _this = this.mTextures;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) tmp.next().dispose();
		var _this1 = this.mAtlases;
		var tmp1 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(tmp1.hasNext()) tmp1.next().dispose();
		var _this2 = this.mByteArrays;
		var tmp2 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(tmp2.hasNext()) tmp2.next().clear();
	}
	,getTexture: function(name) {
		var _this = this.mTextures;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			var _this1 = this.mTextures;
			return __map_reserved[name] != null?_this1.getReserved(name):_this1.h[name];
		} else {
			var _this2 = this.mAtlases;
			var tmp = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(tmp.hasNext()) {
				var texture = tmp.next().getTexture(name);
				if(texture != null) {
					return texture;
				}
			}
			return null;
		}
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var _g = 0;
		var _g1 = this.getTextureNames(prefix,starling_utils_AssetManager.sNames);
		while(_g < _g1.get_length()) {
			var name = _g1.get(_g);
			++_g;
			result.set(result.get_length(),this.getTexture(name));
		}
		starling_utils_AssetManager.sNames.set_length(0);
		return result;
	}
	,getTextureNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		result = this.getDictionaryKeys(this.mTextures,prefix,result);
		var _this = this.mAtlases;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) tmp.next().getNames(prefix,result);
		result.sort($bind(this,this.compare));
		return result;
	}
	,getTextureAtlas: function(name) {
		var _this = this.mAtlases;
		return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	}
	,getTextureAtlasNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mAtlases,prefix,result);
	}
	,getSound: function(name) {
		var _this = this.mSounds;
		return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	}
	,getSoundNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mSounds,prefix,result);
	}
	,playSound: function(name,startTime,loops,transform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		var _this = this.mSounds;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			return this.getSound(name).play(startTime,loops,transform);
		} else {
			return null;
		}
	}
	,getXml: function(name) {
		var _this = this.mXmls;
		return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	}
	,getXmlNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mXmls,prefix,result);
	}
	,getObject: function(name) {
		var _this = this.mObjects;
		return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	}
	,getObjectNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mObjects,prefix,result);
	}
	,getByteArray: function(name) {
		var _this = this.mByteArrays;
		return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	}
	,getByteArrayNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mByteArrays,prefix,result);
	}
	,addTexture: function(name,texture) {
		this.log("Adding texture '" + name + "'");
		var _this = this.mTextures;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous texture will be replaced.");
			var _this1 = this.mTextures;
			(__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).dispose();
		}
		var _this2 = this.mTextures;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,texture);
		} else {
			_this2.h[name] = texture;
		}
	}
	,addTextureAtlas: function(name,atlas) {
		this.log("Adding texture atlas '" + name + "'");
		var _this = this.mAtlases;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous atlas will be replaced.");
			var _this1 = this.mAtlases;
			(__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).dispose();
		}
		var _this2 = this.mAtlases;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,atlas);
		} else {
			_this2.h[name] = atlas;
		}
	}
	,addSound: function(name,sound) {
		this.log("Adding sound '" + name + "'");
		var _this = this.mSounds;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous sound will be replaced.");
		}
		var _this1 = this.mSounds;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,sound);
		} else {
			_this1.h[name] = sound;
		}
	}
	,addXml: function(name,xml) {
		this.log("Adding XML '" + name + "'");
		var _this = this.mXmls;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous XML will be replaced.");
		}
		var _this1 = this.mXmls;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,xml);
		} else {
			_this1.h[name] = xml;
		}
	}
	,addObject: function(name,object) {
		this.log("Adding object '" + name + "'");
		var _this = this.mObjects;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous object will be replaced.");
		}
		var _this1 = this.mObjects;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,object);
		} else {
			_this1.h[name] = object;
		}
	}
	,addByteArray: function(name,byteArray) {
		this.log("Adding byte array '" + name + "'");
		var _this = this.mByteArrays;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous byte array will be replaced.");
			var _this1 = this.mByteArrays;
			(__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).clear();
		}
		var _this2 = this.mByteArrays;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,byteArray);
		} else {
			_this2.h[name] = byteArray;
		}
	}
	,removeTexture: function(name,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this.log("Removing texture '" + name + "'");
		var tmp;
		if(dispose) {
			var _this = this.mTextures;
			if(__map_reserved[name] != null) {
				tmp = _this.existsReserved(name);
			} else {
				tmp = _this.h.hasOwnProperty(name);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.mTextures;
			(__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).dispose();
		}
		this.mTextures.remove(name);
	}
	,removeTextureAtlas: function(name,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this.log("Removing texture atlas '" + name + "'");
		var tmp;
		if(dispose) {
			var _this = this.mAtlases;
			if(__map_reserved[name] != null) {
				tmp = _this.existsReserved(name);
			} else {
				tmp = _this.h.hasOwnProperty(name);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.mAtlases;
			(__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).dispose();
		}
		this.mAtlases.remove(name);
	}
	,removeSound: function(name) {
		this.log("Removing sound '" + name + "'");
		this.mSounds.remove(name);
	}
	,removeXml: function(name,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this.log("Removing xml '" + name + "'");
		this.mXmls.remove(name);
	}
	,removeObject: function(name) {
		this.log("Removing object '" + name + "'");
		this.mObjects.remove(name);
	}
	,removeByteArray: function(name,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this.log("Removing byte array '" + name + "'");
		var tmp;
		if(dispose) {
			var _this = this.mByteArrays;
			if(__map_reserved[name] != null) {
				tmp = _this.existsReserved(name);
			} else {
				tmp = _this.h.hasOwnProperty(name);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.mByteArrays;
			(__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).clear();
		}
		this.mByteArrays.remove(name);
	}
	,purgeQueue: function() {
		starling_utils_ArrayUtil.clear(this.mQueue);
		this.dispatchEventWith("cancel");
	}
	,purge: function() {
		this.log("Purging all assets, emptying queue");
		this.purgeQueue();
		this.dispose();
		this.mTextures = new haxe_ds_StringMap();
		this.mAtlases = new haxe_ds_StringMap();
		this.mSounds = new haxe_ds_StringMap();
		this.mXmls = new haxe_ds_StringMap();
		this.mObjects = new haxe_ds_StringMap();
		this.mByteArrays = new haxe_ds_StringMap();
	}
	,enqueue: function(rawAssets) {
		var _g = 0;
		while(_g < rawAssets.length) {
			var rawAsset = rawAssets[_g];
			++_g;
			if((rawAsset instanceof Array) && rawAsset.__enum__ == null) {
				this.enqueue(rawAsset);
			} else if(typeof(rawAsset) == "string" || js_Boot.__instanceof(rawAsset,openfl_net_URLRequest)) {
				this.enqueueWithName(rawAsset);
			} else {
				this.log("Ignoring unsupported asset type: " + Type.getClassName(rawAsset));
			}
		}
	}
	,enqueueWithName: function(asset,name,options) {
		if(name == null) {
			name = this.getName(asset);
		}
		if(options == null) {
			options = this.mDefaultTextureOptions.clone();
		} else {
			options = options.clone();
		}
		this.log("Enqueuing '" + name + "'");
		this.mQueue.push({ name : name, asset : asset, options : options});
		return name;
	}
	,loadQueue: function(onProgress) {
		var _gthis = this;
		if(onProgress == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Argument 'onProgress' must not be null"));
		}
		if(this.mQueue.length == 0) {
			onProgress(1.0);
			return;
		}
		this.mStarling = starling_core_Starling.get_current();
		if(this.mStarling == null || this.mStarling.get_context() == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("The Starling instance needs to be ready before assets can be loaded."));
		}
		var PROGRESS_PART_ASSETS = 0.9;
		var PROGRESS_PART_XMLS = 1.0 - PROGRESS_PART_ASSETS;
		var canceled = false;
		var xmls = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var assetInfos = this.mQueue.slice();
		var assetCount = this.mQueue.length;
		var assetProgress = [];
		var assetIndex = 0;
		var loadNextQueueElement = null;
		var cancel = null;
		var loadQueueElement = null;
		var updateAssetProgress = null;
		var processXmls = null;
		var processXml = null;
		var finish = null;
		loadNextQueueElement = function() {
			if(assetIndex < assetInfos.length) {
				var index = assetIndex++;
				loadQueueElement(index,assetInfos[index]);
			}
		};
		loadQueueElement = function(index1,assetInfo) {
			if(canceled) {
				return;
			}
			var onElementProgress = function(progress) {
				updateAssetProgress(index1,progress * 0.8);
			};
			var onElementLoaded = function() {
				updateAssetProgress(index1,1.0);
				--assetCount;
				if(assetCount > 0) {
					loadNextQueueElement();
				} else {
					processXmls();
				}
			};
			_gthis.processRawAsset(assetInfo.name,assetInfo.asset,assetInfo.options,xmls,onElementProgress,onElementLoaded);
		};
		updateAssetProgress = function(index2,progress1) {
			assetProgress[index2] = progress1;
			var sum = 0.0;
			var len = assetProgress.length;
			var _g1 = 0;
			while(_g1 < len) sum += assetProgress[_g1++];
			onProgress(sum / len * PROGRESS_PART_ASSETS);
		};
		processXmls = function() {
			xmls.sort(function(a,b) {
				if(a.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + a.nodeType);
				}
				if(a.nodeName.split(":").pop() == "TextureAtlas") {
					return -1;
				} else {
					return 1;
				}
			});
			haxe_Timer.delay(function() {
				processXml(0);
			},1);
		};
		processXml = function(index3) {
			if(canceled) {
				return;
			} else if(index3 == xmls.get_length()) {
				finish();
				return;
			}
			var name;
			var texture;
			var xml = xmls.get(index3);
			if(xml.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
			}
			var rootNode = xml.nodeName;
			var xmlProgress = (index3 + 1) / (xmls.get_length() + 1);
			if(rootNode == "TextureAtlas") {
				name = _gthis.getName(xml.get("imagePath"));
				texture = _gthis.getTexture(name);
				if(texture != null) {
					_gthis.addTextureAtlas(name,new starling_textures_TextureAtlas(texture,xml));
					_gthis.removeTexture(name,false);
					if(_gthis.mKeepAtlasXmls) {
						_gthis.addXml(name,xml);
					}
				} else {
					_gthis.log("Cannot create atlas: texture '" + name + "' is missing.");
				}
			} else if(rootNode == "font") {
				name = _gthis.getName(xml.elementsNamed("pages").next().elementsNamed("page").next().get("file"));
				texture = _gthis.getTexture(name);
				if(texture != null) {
					_gthis.log("Adding bitmap font '" + name + "'");
					starling_text_TextField.registerBitmapFont(new starling_text_BitmapFont(texture,xml),name);
					_gthis.removeTexture(name,false);
					if(_gthis.mKeepFontXmls) {
						_gthis.addXml(name,xml);
					}
				} else {
					_gthis.log("Cannot create bitmap font: texture '" + name + "' is missing.");
				}
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("XML contents not recognized: " + rootNode));
			}
			onProgress(PROGRESS_PART_ASSETS + PROGRESS_PART_XMLS * xmlProgress);
			haxe_Timer.delay(function() {
				processXml(index3 + 1);
			},1);
		};
		cancel = function() {
			_gthis.removeEventListener("cancel",cancel);
			_gthis.mNumLoadingQueues--;
			canceled = true;
		};
		finish = function() {
			haxe_Timer.delay(function() {
				if(!canceled) {
					cancel();
					onProgress(1.0);
				}
			},1);
		};
		var _g11 = 0;
		var _g = assetCount;
		while(_g11 < _g) assetProgress[_g11++] = 0.0;
		var _g12 = 0;
		var _g2 = this.mNumConnections;
		while(_g12 < _g2) {
			++_g12;
			loadNextQueueElement();
		}
		starling_utils_ArrayUtil.clear(this.mQueue);
		this.mNumLoadingQueues++;
		this.addEventListener("cancel",cancel);
	}
	,processRawAsset: function(name,rawAsset,options,xmls,onProgress,onComplete) {
		var _gthis = this;
		var canceled = false;
		var cancel = null;
		var progress = null;
		var process = null;
		process = function(asset) {
			var texture = null;
			var bytes;
			var object = null;
			var xml = null;
			_gthis.mStarling.makeCurrent();
			if(!canceled) {
				if(asset == null) {
					onComplete();
				} else if(js_Boot.__instanceof(asset,openfl_media_Sound)) {
					_gthis.addSound(name,asset);
					onComplete();
				} else if(js_Boot.__instanceof(asset,Xml)) {
					xml = asset;
					xml = xml.firstElement();
					var tmp;
					if(xml.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
					}
					if(xml.nodeName != "TextureAtlas") {
						if(xml.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
						}
						tmp = xml.nodeName == "font";
					} else {
						tmp = true;
					}
					if(tmp) {
						xmls.push(xml);
					} else {
						_gthis.addXml(name,xml);
					}
					onComplete();
				} else if(starling_core_Starling.get_handleLostContext() && _gthis.mStarling.get_context().driverInfo == "Disposed") {
					_gthis.log("Context lost while processing assets, retrying ...");
					haxe_Timer.delay(function() {
						process(asset);
					},1);
					return;
				} else if(js_Boot.__instanceof(asset,openfl_display_Bitmap)) {
					texture = starling_textures_Texture.fromData(asset,options);
					texture.get_root().set_onRestore(function() {
						_gthis.mNumLostTextures++;
						_gthis.loadRawAsset(rawAsset,null,function(asset1) {
							try {
								if(asset1 == null) {
									throw new js__$Boot_HaxeError(new openfl_errors_Error("Reload failed"));
								}
								texture.get_root().uploadBitmap(js_Boot.__cast(asset1 , openfl_display_Bitmap));
								asset1.bitmapData.dispose();
							} catch( e ) {
								haxe_CallStack.lastException = e;
								if (e instanceof js__$Boot_HaxeError) e = e.val;
								if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
									_gthis.log("Texture restoration failed for '" + name + "': " + e.message);
								} else throw(e);
							}
							_gthis.mNumRestoredTextures++;
							if(_gthis.mNumLostTextures == _gthis.mNumRestoredTextures) {
								_gthis.dispatchEventWith("texturesRestored");
							}
						});
					});
					asset.bitmapData.dispose();
					_gthis.addTexture(name,texture);
					onComplete();
				} else if(js_Boot.__instanceof(asset,openfl_utils_ByteArrayData)) {
					bytes = asset;
					if(starling_textures_AtfData.isAtfData(bytes)) {
						options.set_onReady(_gthis.prependCallback(options.get_onReady(),function() {
							_gthis.addTexture(name,texture);
							onComplete();
						}));
						texture = starling_textures_Texture.fromData(bytes,options);
						texture.get_root().set_onRestore(function() {
							_gthis.mNumLostTextures++;
							_gthis.loadRawAsset(rawAsset,null,function(asset2) {
								try {
									if(asset2 == null) {
										throw new js__$Boot_HaxeError(new openfl_errors_Error("Reload failed"));
									}
									texture.get_root().uploadAtfData(js_Boot.__cast(asset2 , openfl_utils_ByteArrayData),0,true);
									asset2.clear();
								} catch( e1 ) {
									haxe_CallStack.lastException = e1;
									if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
									if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
										_gthis.log("Texture restoration failed for '" + name + "': " + e1.message);
									} else throw(e1);
								}
								_gthis.mNumRestoredTextures++;
								if(_gthis.mNumLostTextures == _gthis.mNumRestoredTextures) {
									_gthis.dispatchEventWith("texturesRestored");
								}
							});
						});
						bytes.clear();
					} else if(_gthis.byteArrayStartsWith(bytes,"{") || _gthis.byteArrayStartsWith(bytes,"[")) {
						try {
							object = JSON.parse(bytes.readUTFBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes)));
						} catch( e2 ) {
							haxe_CallStack.lastException = e2;
							if (e2 instanceof js__$Boot_HaxeError) e2 = e2.val;
							if( js_Boot.__instanceof(e2,openfl_errors_Error) ) {
								_gthis.log("Could not parse JSON: " + e2.message);
								_gthis.dispatchEventWith("parseError",false,name);
							} else throw(e2);
						}
						if(object) {
							_gthis.addObject(name,object);
						}
						bytes.clear();
						onComplete();
					} else if(_gthis.byteArrayStartsWith(bytes,"<")) {
						try {
							xml = Xml.parse(bytes.toString());
						} catch( e3 ) {
							haxe_CallStack.lastException = e3;
							if (e3 instanceof js__$Boot_HaxeError) e3 = e3.val;
							if( js_Boot.__instanceof(e3,openfl_errors_Error) ) {
								_gthis.log("Could not parse XML: " + e3.message);
								_gthis.dispatchEventWith("parseError",false,name);
							} else throw(e3);
						}
						process(xml);
						bytes.clear();
					} else {
						_gthis.addByteArray(name,bytes);
						onComplete();
					}
				} else {
					_gthis.addObject(name,asset);
					onComplete();
				}
			}
			asset = null;
			_gthis.removeEventListener("cancel",cancel);
		};
		var process1 = process;
		progress = function(ratio) {
			if(!canceled) {
				onProgress(ratio);
			}
		};
		cancel = function() {
			canceled = true;
		};
		this.addEventListener("cancel",cancel);
		this.loadRawAsset(rawAsset,progress,process1);
	}
	,loadRawAsset: function(rawAsset,onProgress,onComplete) {
		var _gthis = this;
		var extension = null;
		var loaderInfo = null;
		var urlLoader = null;
		var urlRequest = null;
		var url = null;
		var complete = null;
		var onIoError = null;
		var onSecurityError = null;
		var onHttpResponseStatus = null;
		var onLoadProgress = null;
		var onUrlLoaderComplete = null;
		var onLoaderComplete = null;
		onIoError = function(event) {
			_gthis.log("IO error: " + event.text);
			_gthis.dispatchEventWith("ioError",false,url);
			complete(null);
		};
		onSecurityError = function(event1) {
			_gthis.log("security error: " + event1.text);
			_gthis.dispatchEventWith("securityError",false,url);
			complete(null);
		};
		onHttpResponseStatus = function(event2) {
			if(extension == null) {
				var contentType = _gthis.getHttpHeader(event2.responseHeaders,"Content-Type");
				if(contentType != null && new EReg("(audio|image)/","").split(contentType) != null) {
					extension = contentType.split("/").pop();
				}
			}
		};
		onLoadProgress = function(event3) {
			if(onProgress != null && event3.bytesTotal > 0) {
				onProgress(event3.bytesLoaded / event3.bytesTotal);
			}
		};
		onUrlLoaderComplete = function(event4) {
			var bytes = _gthis.transformData(js_Boot.__cast(urlLoader.data , openfl_utils_ByteArrayData),url);
			var sound;
			if(bytes == null) {
				complete(null);
				return;
			}
			if(extension != null) {
				extension = extension.toLowerCase();
			}
			switch(extension) {
			case "gif":case "jpeg":case "jpg":case "png":
				var loaderContext = new openfl_system_LoaderContext(_gthis.mCheckPolicyFile);
				var loader = new openfl_display_Loader();
				loaderInfo = loader.contentLoaderInfo;
				loaderInfo.addEventListener("ioError",onIoError);
				loaderInfo.addEventListener("complete",onLoaderComplete);
				loader.loadBytes(bytes,loaderContext);
				break;
			case "mp3":case "mpeg":
				sound = new openfl_media_Sound();
				sound.loadCompressedDataFromByteArray(bytes,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes));
				bytes.clear();
				complete(sound);
				break;
			default:
				complete(bytes);
			}
		};
		onLoaderComplete = function(event5) {
			urlLoader.data.clear();
			complete(event5.target.content);
		};
		complete = function(asset) {
			if(urlLoader != null) {
				urlLoader.removeEventListener("ioError",onIoError);
				urlLoader.removeEventListener("securityError",onSecurityError);
				urlLoader.removeEventListener("httpResponseStatus",onHttpResponseStatus);
				urlLoader.removeEventListener("progress",onLoadProgress);
				urlLoader.removeEventListener("complete",onUrlLoaderComplete);
			}
			if(loaderInfo != null) {
				loaderInfo.removeEventListener("ioError",onIoError);
				loaderInfo.removeEventListener("complete",onLoaderComplete);
			}
			onComplete(asset);
		};
		if(js_Boot.__instanceof(rawAsset,Class)) {
			haxe_Timer.delay(function() {
				Type.createInstance(rawAsset,[]);
			},1);
		} else if(typeof(rawAsset) == "string" || js_Boot.__instanceof(rawAsset,openfl_net_URLRequest)) {
			if(js_Boot.__instanceof(rawAsset,openfl_net_URLRequest)) {
				urlRequest = rawAsset;
			} else {
				urlRequest = null;
			}
			if(urlRequest == null) {
				urlRequest = new openfl_net_URLRequest(js_Boot.__cast(rawAsset , String));
			}
			url = urlRequest.url;
			extension = this.getExtensionFromUrl(url);
			urlLoader = new openfl_net_URLLoader();
			urlLoader.dataFormat = 0;
			urlLoader.addEventListener("ioError",onIoError);
			urlLoader.addEventListener("securityError",onSecurityError);
			urlLoader.addEventListener("httpResponseStatus",onHttpResponseStatus);
			urlLoader.addEventListener("progress",onLoadProgress);
			urlLoader.addEventListener("complete",onUrlLoaderComplete);
			urlLoader.load(urlRequest);
		}
	}
	,getName: function(rawAsset) {
		var name = null;
		if(typeof(rawAsset) == "string") {
			name = js_Boot.__cast(rawAsset , String);
		} else if(js_Boot.__instanceof(rawAsset,openfl_net_URLRequest)) {
			name = (js_Boot.__cast(rawAsset , openfl_net_URLRequest)).url;
		}
		if(name != null) {
			name = name.replace(new RegExp("%20","g".split("u").join(""))," ");
			name = this.getBasenameFromUrl(name);
			if(name != null) {
				return name;
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Could not extract name from String '" + Std.string(rawAsset) + "'"));
			}
		} else {
			name = Type.getClassName(rawAsset);
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Cannot extract names for objects of type '" + name + "'"));
		}
	}
	,transformData: function(data,url) {
		return data;
	}
	,log: function(message) {
		if(this.mVerbose) {
			haxe_Log.trace("[AssetManager] " + message,{ fileName : "AssetManager.hx", lineNumber : 1191, className : "starling.utils.AssetManager", methodName : "log"});
		}
	}
	,byteArrayStartsWith: function(bytes,$char) {
		var start = 0;
		var length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
		var wanted = HxOverrides.cca($char,0);
		if(length >= 4 && (bytes.b[0] == 0 && bytes.b[1] == 0 && bytes.b[2] == 254 && bytes.b[3] == 255) || bytes.b[0] == 255 && bytes.b[1] == 254 && bytes.b[2] == 0 && bytes.b[3] == 0) {
			start = 4;
		} else if(length >= 3 && bytes.b[0] == 239 && bytes.b[1] == 187 && bytes.b[2] == 191) {
			start = 3;
		} else if(length >= 2 && (bytes.b[0] == 254 && bytes.b[1] == 255) || bytes.b[0] == 255 && bytes.b[1] == 254) {
			start = 2;
		}
		var _g1 = start;
		while(_g1 < length) {
			var $byte = bytes.b[_g1++];
			if($byte == 0 || $byte == 10 || $byte == 13 || $byte == 32) {
				continue;
			} else {
				return $byte == wanted;
			}
		}
		return false;
	}
	,getDictionaryKeys: function(dictionary,prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var tmp = dictionary.keys();
		while(tmp.hasNext()) {
			var name = tmp.next();
			if(name.indexOf(prefix) == 0) {
				result.set(result.get_length(),name);
			}
		}
		result.sort($bind(this,this.compare));
		return result;
	}
	,getHttpHeader: function(headers,headerName) {
		if(headers != null) {
			var _g = 0;
			while(_g < headers.length) {
				var header = headers[_g];
				++_g;
				if(header.name == headerName) {
					return header.value;
				}
			}
		}
		return null;
	}
	,getBasenameFromUrl: function(url) {
		if(starling_utils_AssetManager.NAME_REGEX.match(url)) {
			return starling_utils_AssetManager.NAME_REGEX.matched(1);
		} else {
			return null;
		}
	}
	,getExtensionFromUrl: function(url) {
		if(starling_utils_AssetManager.NAME_REGEX.match(url)) {
			return starling_utils_AssetManager.NAME_REGEX.matched(2);
		} else {
			return null;
		}
	}
	,prependCallback: function(oldCallback,newCallback) {
		if(oldCallback == null) {
			return newCallback;
		} else if(newCallback == null) {
			return oldCallback;
		} else {
			return function() {
				newCallback();
				oldCallback();
			};
		}
	}
	,compare: function(a,b) {
		if(a < b) {
			return -1;
		} else if(a > b) {
			return 1;
		} else {
			return 0;
		}
	}
	,get_queue: function() {
		return this.mQueue;
	}
	,get_numQueuedAssets: function() {
		return this.mQueue.length;
	}
	,get_verbose: function() {
		return this.mVerbose;
	}
	,set_verbose: function(value) {
		return this.mVerbose = value;
	}
	,get_isLoading: function() {
		return this.mNumLoadingQueues > 0;
	}
	,get_useMipMaps: function() {
		return this.mDefaultTextureOptions.get_mipMapping();
	}
	,set_useMipMaps: function(value) {
		return this.mDefaultTextureOptions.set_mipMapping(value);
	}
	,get_textureRepeat: function() {
		return this.mDefaultTextureOptions.get_repeat();
	}
	,set_textureRepeat: function(value) {
		return this.mDefaultTextureOptions.set_repeat(value);
	}
	,get_scaleFactor: function() {
		return this.mDefaultTextureOptions.get_scale();
	}
	,set_scaleFactor: function(value) {
		return this.mDefaultTextureOptions.set_scale(value);
	}
	,get_textureFormat: function() {
		return this.mDefaultTextureOptions.get_format();
	}
	,set_textureFormat: function(value) {
		return this.mDefaultTextureOptions.set_format(value);
	}
	,get_checkPolicyFile: function() {
		return this.mCheckPolicyFile;
	}
	,set_checkPolicyFile: function(value) {
		return this.mCheckPolicyFile = value;
	}
	,get_keepAtlasXmls: function() {
		return this.mKeepAtlasXmls;
	}
	,set_keepAtlasXmls: function(value) {
		return this.mKeepAtlasXmls = value;
	}
	,get_keepFontXmls: function() {
		return this.mKeepFontXmls;
	}
	,set_keepFontXmls: function(value) {
		return this.mKeepFontXmls = value;
	}
	,get_numConnections: function() {
		return this.mNumConnections;
	}
	,set_numConnections: function(value) {
		return this.mNumConnections = value;
	}
	,__class__: starling_utils_AssetManager
	,__properties__: {set_numConnections:"set_numConnections",get_numConnections:"get_numConnections",set_keepFontXmls:"set_keepFontXmls",get_keepFontXmls:"get_keepFontXmls",set_keepAtlasXmls:"set_keepAtlasXmls",get_keepAtlasXmls:"get_keepAtlasXmls",set_checkPolicyFile:"set_checkPolicyFile",get_checkPolicyFile:"get_checkPolicyFile",set_textureFormat:"set_textureFormat",get_textureFormat:"get_textureFormat",set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",set_textureRepeat:"set_textureRepeat",get_textureRepeat:"get_textureRepeat",set_useMipMaps:"set_useMipMaps",get_useMipMaps:"get_useMipMaps",get_isLoading:"get_isLoading",set_verbose:"set_verbose",get_verbose:"get_verbose",get_numQueuedAssets:"get_numQueuedAssets",get_queue:"get_queue"}
});
var starling_utils_Color = function() { };
$hxClasses["starling.utils.Color"] = starling_utils_Color;
starling_utils_Color.__name__ = ["starling","utils","Color"];
starling_utils_Color.getAlpha = function(color) {
	return color >>> 24 & 255;
};
starling_utils_Color.getRed = function(color) {
	return color >>> 16 & 255;
};
starling_utils_Color.getGreen = function(color) {
	return color >>> 8 & 255;
};
starling_utils_Color.getBlue = function(color) {
	return color & 255;
};
starling_utils_Color.rgb = function(red,green,blue) {
	return red << 16 | green << 8 | blue;
};
starling_utils_Color.argb = function(alpha,red,green,blue) {
	return alpha << 24 | red << 16 | green << 8 | blue;
};
var starling_utils_HAlign = function() { };
$hxClasses["starling.utils.HAlign"] = starling_utils_HAlign;
starling_utils_HAlign.__name__ = ["starling","utils","HAlign"];
starling_utils_HAlign.isValid = function(hAlign) {
	if(!(hAlign == "left" || hAlign == "center")) {
		return hAlign == "right";
	} else {
		return true;
	}
};
var starling_utils_MathUtil = function() { };
$hxClasses["starling.utils.MathUtil"] = starling_utils_MathUtil;
starling_utils_MathUtil.__name__ = ["starling","utils","MathUtil"];
starling_utils_MathUtil.intersectLineWithXYPlane = function(pointA,pointB,resultPoint) {
	if(resultPoint == null) {
		resultPoint = new openfl_geom_Point();
	}
	var vectorX = pointB.x - pointA.x;
	var vectorY = pointB.y - pointA.y;
	var lambda = -pointA.z / (pointB.z - pointA.z);
	resultPoint.x = pointA.x + lambda * vectorX;
	resultPoint.y = pointA.y + lambda * vectorY;
	return resultPoint;
};
starling_utils_MathUtil.normalizeAngle = function(angle) {
	angle %= starling_utils_MathUtil.TWO_PI;
	if(angle < -Math.PI) {
		angle += starling_utils_MathUtil.TWO_PI;
	}
	if(angle > Math.PI) {
		angle -= starling_utils_MathUtil.TWO_PI;
	}
	return angle;
};
starling_utils_MathUtil.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
starling_utils_MathUtil.min = function(values) {
	if(values.length == 0) {
		return 0.0;
	}
	var min = values[0];
	var _g1 = 1;
	var _g = values.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	return min;
};
starling_utils_MathUtil.deg2rad = function(deg) {
	return deg / 180.0 * Math.PI;
};
starling_utils_MathUtil.rad2deg = function(rad) {
	return rad / Math.PI * 180.0;
};
var starling_utils_MatrixUtil = function() { };
$hxClasses["starling.utils.MatrixUtil"] = starling_utils_MatrixUtil;
starling_utils_MatrixUtil.__name__ = ["starling","utils","MatrixUtil"];
starling_utils_MatrixUtil.convertTo3D = function(matrix,resultMatrix) {
	if(resultMatrix == null) {
		resultMatrix = new openfl_geom_Matrix3D();
	}
	starling_utils_MatrixUtil.sRawData.set(0,matrix.a);
	starling_utils_MatrixUtil.sRawData.set(1,matrix.b);
	starling_utils_MatrixUtil.sRawData.set(4,matrix.c);
	starling_utils_MatrixUtil.sRawData.set(5,matrix.d);
	starling_utils_MatrixUtil.sRawData.set(12,matrix.tx);
	starling_utils_MatrixUtil.sRawData.set(13,matrix.ty);
	resultMatrix.copyRawDataFrom(starling_utils_MatrixUtil.sRawData);
	return resultMatrix;
};
starling_utils_MatrixUtil.convertTo2D = function(matrix3D,resultMatrix) {
	if(resultMatrix == null) {
		resultMatrix = new openfl_geom_Matrix();
	}
	matrix3D.copyRawDataTo(starling_utils_MatrixUtil.sRawData2);
	resultMatrix.a = starling_utils_MatrixUtil.sRawData2.get(0);
	resultMatrix.b = starling_utils_MatrixUtil.sRawData2.get(1);
	resultMatrix.c = starling_utils_MatrixUtil.sRawData2.get(4);
	resultMatrix.d = starling_utils_MatrixUtil.sRawData2.get(5);
	resultMatrix.tx = starling_utils_MatrixUtil.sRawData2.get(12);
	resultMatrix.ty = starling_utils_MatrixUtil.sRawData2.get(13);
	return resultMatrix;
};
starling_utils_MatrixUtil.transformPoint = function(matrix,point,resultPoint) {
	return starling_utils_MatrixUtil.transformCoords(matrix,point.x,point.y,resultPoint);
};
starling_utils_MatrixUtil.transformPoint3D = function(matrix,point,resultPoint) {
	return starling_utils_MatrixUtil.transformCoords3D(matrix,point.x,point.y,point.z,resultPoint);
};
starling_utils_MatrixUtil.transformCoords = function(matrix,x,y,resultPoint) {
	if(resultPoint == null) {
		resultPoint = new openfl_geom_Point();
	}
	resultPoint.x = matrix.a * x + matrix.c * y + matrix.tx;
	resultPoint.y = matrix.d * y + matrix.b * x + matrix.ty;
	return resultPoint;
};
starling_utils_MatrixUtil.transformCoords3D = function(matrix,x,y,z,resultPoint) {
	if(resultPoint == null) {
		resultPoint = new openfl_geom_Vector3D();
	}
	matrix.copyRawDataTo(starling_utils_MatrixUtil.sRawData2);
	resultPoint.x = x * starling_utils_MatrixUtil.sRawData2.get(0) + y * starling_utils_MatrixUtil.sRawData2.get(4) + z * starling_utils_MatrixUtil.sRawData2.get(8) + starling_utils_MatrixUtil.sRawData2.get(12);
	resultPoint.y = x * starling_utils_MatrixUtil.sRawData2.get(1) + y * starling_utils_MatrixUtil.sRawData2.get(5) + z * starling_utils_MatrixUtil.sRawData2.get(9) + starling_utils_MatrixUtil.sRawData2.get(13);
	resultPoint.z = x * starling_utils_MatrixUtil.sRawData2.get(2) + y * starling_utils_MatrixUtil.sRawData2.get(6) + z * starling_utils_MatrixUtil.sRawData2.get(10) + starling_utils_MatrixUtil.sRawData2.get(14);
	resultPoint.w = x * starling_utils_MatrixUtil.sRawData2.get(3) + y * starling_utils_MatrixUtil.sRawData2.get(7) + z * starling_utils_MatrixUtil.sRawData2.get(11) + starling_utils_MatrixUtil.sRawData2.get(15);
	return resultPoint;
};
starling_utils_MatrixUtil.skew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY - matrix.b * sinX,matrix.a * sinY + matrix.b * cosX,matrix.c * cosY - matrix.d * sinX,matrix.c * sinY + matrix.d * cosX,matrix.tx * cosY - matrix.ty * sinX,matrix.tx * sinY + matrix.ty * cosX);
};
starling_utils_MatrixUtil.prependMatrix = function(base,prep) {
	base.setTo(base.a * prep.a + base.c * prep.b,base.b * prep.a + base.d * prep.b,base.a * prep.c + base.c * prep.d,base.b * prep.c + base.d * prep.d,base.tx + base.a * prep.tx + base.c * prep.ty,base.ty + base.b * prep.tx + base.d * prep.ty);
};
starling_utils_MatrixUtil.prependTranslation = function(matrix,tx,ty) {
	matrix.tx += matrix.a * tx + matrix.c * ty;
	matrix.ty += matrix.b * tx + matrix.d * ty;
};
starling_utils_MatrixUtil.prependScale = function(matrix,sx,sy) {
	matrix.setTo(matrix.a * sx,matrix.b * sx,matrix.c * sy,matrix.d * sy,matrix.tx,matrix.ty);
};
starling_utils_MatrixUtil.prependRotation = function(matrix,angle) {
	var sin = Math.sin(angle);
	var cos = Math.cos(angle);
	matrix.setTo(matrix.a * cos + matrix.c * sin,matrix.b * cos + matrix.d * sin,matrix.c * cos - matrix.a * sin,matrix.d * cos - matrix.b * sin,matrix.tx,matrix.ty);
};
starling_utils_MatrixUtil.prependSkew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY + matrix.c * sinY,matrix.b * cosY + matrix.d * sinY,matrix.c * cosX - matrix.a * sinX,matrix.d * cosX - matrix.b * sinX,matrix.tx,matrix.ty);
};
var starling_utils_Max = function() { };
$hxClasses["starling.utils.Max"] = starling_utils_Max;
starling_utils_Max.__name__ = ["starling","utils","Max"];
var starling_utils_PowerOfTwo = function() { };
$hxClasses["starling.utils.PowerOfTwo"] = starling_utils_PowerOfTwo;
starling_utils_PowerOfTwo.__name__ = ["starling","utils","PowerOfTwo"];
starling_utils_PowerOfTwo.getNextPowerOfTwo = function(number) {
	if(number > 0 && (number & number - 1) == 0) {
		return number;
	} else {
		var result = 1;
		while(result < number) result <<= 1;
		return result;
	}
};
var starling_utils_RectangleUtil = function() { };
$hxClasses["starling.utils.RectangleUtil"] = starling_utils_RectangleUtil;
starling_utils_RectangleUtil.__name__ = ["starling","utils","RectangleUtil"];
starling_utils_RectangleUtil.intersect = function(rect1,rect2,resultRect) {
	if(resultRect == null) {
		resultRect = new openfl_geom_Rectangle();
	}
	var left = rect1.x > rect2.x?rect1.x:rect2.x;
	var right = rect1.get_right() < rect2.get_right()?rect1.get_right():rect2.get_right();
	var top = rect1.y > rect2.y?rect1.y:rect2.y;
	var bottom = rect1.get_bottom() < rect2.get_bottom()?rect1.get_bottom():rect2.get_bottom();
	if(left > right || top > bottom) {
		resultRect.setEmpty();
	} else {
		resultRect.setTo(left,top,right - left,bottom - top);
	}
	return resultRect;
};
starling_utils_RectangleUtil.fit = function(rectangle,into,scaleMode,pixelPerfect,resultRect) {
	if(pixelPerfect == null) {
		pixelPerfect = false;
	}
	if(scaleMode == null) {
		scaleMode = "showAll";
	}
	if(!starling_utils_ScaleMode.isValid(scaleMode)) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid scaleMode: " + scaleMode));
	}
	if(resultRect == null) {
		resultRect = new openfl_geom_Rectangle();
	}
	var width = rectangle.width;
	var height = rectangle.height;
	var factorX = into.width / width;
	var factorY = into.height / height;
	var factor = 1.0;
	if(scaleMode == "showAll") {
		if(factorX < factorY) {
			factor = factorX;
		} else {
			factor = factorY;
		}
		if(pixelPerfect) {
			factor = starling_utils_RectangleUtil.nextSuitableScaleFactor(factor,false);
		}
	} else if(scaleMode == "noBorder") {
		if(factorX > factorY) {
			factor = factorX;
		} else {
			factor = factorY;
		}
		if(pixelPerfect) {
			factor = starling_utils_RectangleUtil.nextSuitableScaleFactor(factor,true);
		}
	}
	width *= factor;
	height *= factor;
	resultRect.setTo(into.x + (into.width - width) / 2,into.y + (into.height - height) / 2,width,height);
	return resultRect;
};
starling_utils_RectangleUtil.nextSuitableScaleFactor = function(factor,up) {
	var divisor = 1.0;
	if(up) {
		if(factor >= 0.5) {
			return Math.ceil(factor);
		} else {
			while(1.0 / (divisor + 1) > factor) ++divisor;
		}
	} else if(factor >= 1.0) {
		return Math.floor(factor);
	} else {
		while(1.0 / divisor > factor) ++divisor;
	}
	return 1.0 / divisor;
};
starling_utils_RectangleUtil.normalize = function(rect) {
	if(rect.width < 0) {
		rect.width = -rect.width;
		rect.x -= rect.width;
	}
	if(rect.height < 0) {
		rect.height = -rect.height;
		rect.y -= rect.height;
	}
};
starling_utils_RectangleUtil.getBounds = function(rectangle,transformationMatrix,resultRect) {
	if(resultRect == null) {
		resultRect = new openfl_geom_Rectangle();
	}
	var minX = 1.79e+308;
	var maxX = -1.79e+308;
	var minY = 1.79e+308;
	var maxY = -1.79e+308;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		starling_utils_MatrixUtil.transformCoords(transformationMatrix,starling_utils_RectangleUtil.sPositions[i].x * rectangle.width,starling_utils_RectangleUtil.sPositions[i].y * rectangle.height,starling_utils_RectangleUtil.sHelperPoint);
		if(minX > starling_utils_RectangleUtil.sHelperPoint.x) {
			minX = starling_utils_RectangleUtil.sHelperPoint.x;
		}
		if(maxX < starling_utils_RectangleUtil.sHelperPoint.x) {
			maxX = starling_utils_RectangleUtil.sHelperPoint.x;
		}
		if(minY > starling_utils_RectangleUtil.sHelperPoint.y) {
			minY = starling_utils_RectangleUtil.sHelperPoint.y;
		}
		if(maxY < starling_utils_RectangleUtil.sHelperPoint.y) {
			maxY = starling_utils_RectangleUtil.sHelperPoint.y;
		}
	}
	resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
	return resultRect;
};
var starling_utils_ScaleMode = function() { };
$hxClasses["starling.utils.ScaleMode"] = starling_utils_ScaleMode;
starling_utils_ScaleMode.__name__ = ["starling","utils","ScaleMode"];
starling_utils_ScaleMode.isValid = function(scaleMode) {
	if(!(scaleMode == "none" || scaleMode == "noBorder")) {
		return scaleMode == "showAll";
	} else {
		return true;
	}
};
var starling_utils_StringUtil = function() { };
$hxClasses["starling.utils.StringUtil"] = starling_utils_StringUtil;
starling_utils_StringUtil.__name__ = ["starling","utils","StringUtil"];
starling_utils_StringUtil.formatString = function(format,args) {
	var _g1 = 0;
	var _g = args.length;
	while(_g1 < _g) {
		var i = _g1++;
		format = format.replace(new RegExp("\\{" + i + "\\}","g".split("u").join("")),Std.string(args[i]));
	}
	return format;
};
var starling_utils_SystemUtil = function() { };
$hxClasses["starling.utils.SystemUtil"] = starling_utils_SystemUtil;
starling_utils_SystemUtil.__name__ = ["starling","utils","SystemUtil"];
starling_utils_SystemUtil.__properties__ = {get_supportsVideoTexture:"get_supportsVideoTexture",get_supportsDepthAndStencil:"get_supportsDepthAndStencil",get_supportsRelaxedTargetClearRequirement:"get_supportsRelaxedTargetClearRequirement",get_platform:"get_platform",get_isDesktop:"get_isDesktop",get_isAIR:"get_isAIR",get_isApplicationActive:"get_isApplicationActive"}
starling_utils_SystemUtil.initialize = function() {
	if(starling_utils_SystemUtil.sInitialized) {
		return;
	}
	starling_utils_SystemUtil.sInitialized = true;
	starling_utils_SystemUtil.sVersion = HxOverrides.substr(openfl_system_Capabilities.get_version(),4,null);
	try {
		var nativeApp = openfl_Lib.current;
		nativeApp.addEventListener("activate",starling_utils_SystemUtil.onActivate,false,0,true);
		nativeApp.addEventListener("deactivate",starling_utils_SystemUtil.onDeactivate,false,0,true);
		var windowConfig = lime_app_Application.current.__windows[0].config;
		starling_utils_SystemUtil.sSupportsDepthAndStencil = windowConfig.depthBuffer || windowConfig.stencilBuffer;
		starling_utils_SystemUtil.sAIR = true;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			starling_utils_SystemUtil.sAIR = false;
		} else throw(e);
	}
};
starling_utils_SystemUtil.onActivate = function(event) {
	starling_utils_SystemUtil.sApplicationActive = true;
	var _g = 0;
	var _g1 = starling_utils_SystemUtil.sWaitingCalls;
	while(_g < _g1.length) {
		var call = _g1[_g];
		++_g;
		try {
			call[0].apply(null,call[1]);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace("[Starling] Error in 'executeWhenApplicationIsActive' call: " + e.message,{ fileName : "SystemUtil.hx", lineNumber : 79, className : "starling.utils.SystemUtil", methodName : "onActivate"});
			} else throw(e);
		}
	}
	starling_utils_SystemUtil.sWaitingCalls = [];
};
starling_utils_SystemUtil.onDeactivate = function(event) {
	starling_utils_SystemUtil.sApplicationActive = false;
};
starling_utils_SystemUtil.executeWhenApplicationIsActive = function(call,args) {
	starling_utils_SystemUtil.initialize();
	if(starling_utils_SystemUtil.sApplicationActive) {
		call(args);
	} else {
		starling_utils_SystemUtil.sWaitingCalls.push([call,args]);
	}
};
starling_utils_SystemUtil.get_isApplicationActive = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sApplicationActive;
};
starling_utils_SystemUtil.get_isAIR = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sAIR;
};
starling_utils_SystemUtil.get_isDesktop = function() {
	starling_utils_SystemUtil.initialize();
	return true;
};
starling_utils_SystemUtil.get_platform = function() {
	starling_utils_SystemUtil.initialize();
	return "";
};
starling_utils_SystemUtil.get_version = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sVersion;
};
starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement = function() {
	return true;
};
starling_utils_SystemUtil.get_supportsDepthAndStencil = function() {
	return starling_utils_SystemUtil.sSupportsDepthAndStencil;
};
starling_utils_SystemUtil.get_supportsVideoTexture = function() {
	return openfl_display3D_Context3D.supportsVideoTexture;
};
var starling_utils_VAlign = function() { };
$hxClasses["starling.utils.VAlign"] = starling_utils_VAlign;
starling_utils_VAlign.__name__ = ["starling","utils","VAlign"];
starling_utils_VAlign.isValid = function(vAlign) {
	if(!(vAlign == "top" || vAlign == "center")) {
		return vAlign == "bottom";
	} else {
		return true;
	}
};
var terrylib_Astar = function() { };
$hxClasses["terrylib.Astar"] = terrylib_Astar;
terrylib_Astar.__name__ = ["terrylib","Astar"];
terrylib_Astar.init = function() {
	var _g = 0;
	while(_g < 100) terrylib_Astar.vmult.push(_g++ * 100 | 0);
	var _g1 = 0;
	while(_g1 < 100) {
		++_g1;
		var _g11 = 0;
		while(_g11 < 100) {
			++_g11;
			terrylib_Astar.contents.push(0);
			terrylib_Astar.openlist.push(0);
			terrylib_Astar.closedlist.push(0);
			terrylib_Astar.parentsquare.push(0);
			terrylib_Astar.fcost.push(0);
			terrylib_Astar.gcost.push(0);
			terrylib_Astar.pathx.push(0);
			terrylib_Astar.pathy.push(0);
		}
	}
	terrylib_Astar.mapwidth = 0;
	terrylib_Astar.mapheight = 0;
};
terrylib_Astar.getnextmove = function() {
	if(!terrylib_Astar.pathexists()) {
		return terrylib_Help.NODIRECTION;
	} else {
		if(terrylib_Astar.pathx[2] > terrylib_Astar.pathx[1]) {
			return terrylib_Help.RIGHT;
		}
		if(terrylib_Astar.pathx[2] < terrylib_Astar.pathx[1]) {
			return terrylib_Help.LEFT;
		}
		if(terrylib_Astar.pathy[2] > terrylib_Astar.pathy[1]) {
			return terrylib_Help.DOWN;
		}
		if(terrylib_Astar.pathy[2] < terrylib_Astar.pathy[1]) {
			return terrylib_Help.UP;
		}
	}
	return terrylib_Help.NODIRECTION;
};
terrylib_Astar.pathexists = function() {
	if(terrylib_Astar.pathlength < 2) {
		return false;
	}
	if(terrylib_Astar.pathx[0] == terrylib_Astar.pathx[terrylib_Astar.pathlength - 1] && terrylib_Astar.pathy[0] == terrylib_Astar.pathy[terrylib_Astar.pathlength - 1]) {
		return true;
	}
	return false;
};
terrylib_Astar.setmapcollision = function() {
	terrylib_Astar.changemapsize(terrylib_World.mapwidth,terrylib_World.mapheight);
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			var i = _g3++;
			if(terrylib_World.at(i,j) == gamecontrol_Localworld.DOOR) {
				terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 0;
			} else if(terrylib_World.collide(i,j)) {
				terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 1;
			} else {
				terrylib_Astar.contents[i + terrylib_Astar.vmult[j]] = 0;
			}
		}
	}
};
terrylib_Astar.setcollidepoint = function(x,y) {
	if(terrylib_Help.inbox(x,y,0,0,terrylib_Astar.mapwidth,terrylib_Astar.mapheight)) {
		terrylib_Astar.contents[x + terrylib_Astar.vmult[y]] = 1;
	}
};
terrylib_Astar.changemapsize = function(x,y) {
	if(terrylib_Astar.mapwidth != x || terrylib_Astar.mapheight != y) {
		terrylib_Astar.mapwidth = x;
		terrylib_Astar.mapheight = y;
		var _g1 = 0;
		var _g = terrylib_Astar.mapheight;
		while(_g1 < _g) {
			var i = _g1++;
			terrylib_Astar.vmult[i] = i * terrylib_Astar.mapwidth;
		}
	}
};
terrylib_Astar.onclosedlist = function(t) {
	var _g1 = 0;
	var _g = terrylib_Astar.cln;
	while(_g1 < _g) if(terrylib_Astar.closedlist[_g1++] == t) {
		return true;
	}
	return false;
};
terrylib_Astar.onopenlist = function(t) {
	var _g1 = 0;
	var _g = terrylib_Astar.oln;
	while(_g1 < _g) if(terrylib_Astar.openlist[_g1++] == t) {
		return true;
	}
	return false;
};
terrylib_Astar.blockcheck = function(t) {
	if(terrylib_Astar.contents[t] == 1) {
		return true;
	}
	return false;
};
terrylib_Astar.heuristic = function(t,xp,yp) {
	var x;
	var y;
	var xdist;
	var ydist;
	x = t % terrylib_Astar.mapwidth;
	y = (t - x) / terrylib_Astar.mapwidth | 0;
	xdist = Math.abs(x - xp) | 0;
	ydist = Math.abs(y - yp) | 0;
	if(xdist > ydist) {
		return 14 * ydist + 10 * (xdist - ydist) | 0;
	} else {
		return 14 * xdist + 10 * (ydist - xdist) | 0;
	}
};
terrylib_Astar.checksquare = function(t,cost,xp,yp) {
	if(!terrylib_Astar.onclosedlist(t)) {
		if(terrylib_Astar.onopenlist(t)) {
			if(terrylib_Astar.gcost[t] + cost < terrylib_Astar.gcost[terrylib_Astar.currentsquare]) {
				terrylib_Astar.parentsquare[t] = terrylib_Astar.currentsquare;
				terrylib_Astar.gcost[t] = cost + terrylib_Astar.gcost[terrylib_Astar.currentsquare];
				terrylib_Astar.fcost[t] = cost + terrylib_Astar.gcost[t] + terrylib_Astar.heuristic(t,xp,yp);
			}
		} else if(!terrylib_Astar.blockcheck(t)) {
			terrylib_Astar.openlist[terrylib_Astar.oln] = t;
			terrylib_Astar.oln++;
			terrylib_Astar.parentsquare[t] = terrylib_Astar.currentsquare;
			terrylib_Astar.gcost[t] = cost + terrylib_Astar.gcost[terrylib_Astar.currentsquare];
			terrylib_Astar.fcost[t] = cost + terrylib_Astar.gcost[t] + terrylib_Astar.heuristic(t,xp,yp);
		}
	}
};
terrylib_Astar.pathfind = function(x1,y1,x2,y2) {
	terrylib_Astar.pathx[0] = x1;
	terrylib_Astar.pathy[0] = y1;
	terrylib_Astar.findpath(x2,y2);
};
terrylib_Astar.findpath = function(xp,yp) {
	terrylib_Astar.oln = 1;
	terrylib_Astar.cln = 0;
	terrylib_Astar.currentsquare = terrylib_Astar.pathx[0] + terrylib_Astar.vmult[terrylib_Astar.pathy[0]];
	terrylib_Astar.openlist[0] = terrylib_Astar.currentsquare;
	terrylib_Astar.fcost[terrylib_Astar.currentsquare] = 0;
	terrylib_Astar.gcost[terrylib_Astar.currentsquare] = 0;
	terrylib_Astar.parentsquare[terrylib_Astar.currentsquare] = terrylib_Astar.currentsquare;
	while(terrylib_Astar.oln != 0) {
		terrylib_Astar.currentsquare = 0;
		terrylib_Astar.pathtemp = terrylib_Astar.fcost[terrylib_Astar.openlist[0]];
		var _g1 = 1;
		var _g = terrylib_Astar.oln;
		while(_g1 < _g) {
			var i = _g1++;
			if(terrylib_Astar.fcost[terrylib_Astar.openlist[i]] < terrylib_Astar.pathtemp) {
				terrylib_Astar.pathtemp = terrylib_Astar.fcost[terrylib_Astar.openlist[i]];
				terrylib_Astar.currentsquare = i;
			}
		}
		terrylib_Astar.closedlist[terrylib_Astar.cln] = terrylib_Astar.openlist[terrylib_Astar.currentsquare];
		terrylib_Astar.cln++;
		var _g11 = terrylib_Astar.currentsquare;
		var _g2 = terrylib_Astar.oln - 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			terrylib_Astar.openlist[i1] = terrylib_Astar.openlist[i1 + 1];
		}
		terrylib_Astar.oln--;
		terrylib_Astar.currentsquare = terrylib_Astar.closedlist[terrylib_Astar.cln - 1];
		if(terrylib_Astar.onclosedlist(xp + terrylib_Astar.vmult[yp])) {
			terrylib_Astar.pathx[1] = xp;
			terrylib_Astar.pathy[1] = yp;
			terrylib_Astar.pathtemp = 2;
			while(terrylib_Astar.pathx[terrylib_Astar.pathtemp - 1] != terrylib_Astar.pathx[0] || terrylib_Astar.pathy[terrylib_Astar.pathtemp - 1] != terrylib_Astar.pathy[0]) {
				terrylib_Astar.pathx[terrylib_Astar.pathtemp] = terrylib_Astar.parentsquare[terrylib_Astar.pathx[terrylib_Astar.pathtemp - 1] + terrylib_Astar.vmult[terrylib_Astar.pathy[terrylib_Astar.pathtemp - 1]]];
				terrylib_Astar.pathy[terrylib_Astar.pathtemp] = terrylib_Astar.pathx[terrylib_Astar.pathtemp];
				terrylib_Astar.pathx[terrylib_Astar.pathtemp] = terrylib_Astar.pathx[terrylib_Astar.pathtemp] % terrylib_Astar.mapwidth;
				terrylib_Astar.pathy[terrylib_Astar.pathtemp] = (terrylib_Astar.pathy[terrylib_Astar.pathtemp] - terrylib_Astar.pathx[terrylib_Astar.pathtemp]) / terrylib_Astar.mapwidth | 0;
				terrylib_Astar.pathtemp++;
			}
			terrylib_Astar.pathlength = terrylib_Astar.pathtemp;
			break;
		}
		terrylib_Astar.pathtemp = terrylib_Astar.currentsquare % terrylib_Astar.mapwidth;
		if(terrylib_Astar.currentsquare > terrylib_Astar.mapwidth - 1) {
			terrylib_Astar.checksquare(terrylib_Astar.currentsquare - terrylib_Astar.mapwidth,10,xp,yp);
		}
		if(terrylib_Astar.currentsquare > 0 && terrylib_Astar.pathtemp != 0) {
			terrylib_Astar.checksquare(terrylib_Astar.currentsquare - 1,10,xp,yp);
		}
		if(terrylib_Astar.currentsquare < terrylib_Astar.mapwidth * terrylib_Astar.mapheight && terrylib_Astar.pathtemp != terrylib_Astar.mapwidth - 1) {
			terrylib_Astar.checksquare(terrylib_Astar.currentsquare + 1,10,xp,yp);
		}
		if(terrylib_Astar.currentsquare < (terrylib_Astar.mapwidth - 1) * terrylib_Astar.mapheight) {
			terrylib_Astar.checksquare(terrylib_Astar.currentsquare + terrylib_Astar.mapwidth,10,xp,yp);
		}
	}
};
var terrylib_Flag = function() { };
$hxClasses["terrylib.Flag"] = terrylib_Flag;
terrylib_Flag.__name__ = ["terrylib","Flag"];
terrylib_Flag.init = function() {
	var _g = 0;
	while(_g < 300) {
		++_g;
		terrylib_Flag.flags.push(0);
	}
};
terrylib_Flag.resetflags = function() {
	var _g = 0;
	while(_g < 300) terrylib_Flag.flags[_g++] = 0;
};
terrylib_Flag.istrue = function(t) {
	var _this = terrylib_Flag.flagindex;
	if(!(__map_reserved[t] != null?_this.existsReserved(t):_this.h.hasOwnProperty(t))) {
		return false;
	} else {
		var _this1 = terrylib_Flag.flagindex;
		if(terrylib_Flag.flags[__map_reserved[t] != null?_this1.getReserved(t):_this1.h[t]] == 1) {
			return true;
		}
	}
	return false;
};
terrylib_Flag.isfalse = function(t) {
	return !terrylib_Flag.istrue(t);
};
terrylib_Flag.settrue = function(t) {
	var _this = terrylib_Flag.flagindex;
	if(!(__map_reserved[t] != null?_this.existsReserved(t):_this.h.hasOwnProperty(t))) {
		var value = terrylib_Flag.numflag;
		var _this1 = terrylib_Flag.flagindex;
		if(__map_reserved[t] != null) {
			_this1.setReserved(t,value);
		} else {
			_this1.h[t] = value;
		}
		terrylib_Flag.numflag++;
		var _this2 = terrylib_Flag.flagindex;
		terrylib_Flag.flags[__map_reserved[t] != null?_this2.getReserved(t):_this2.h[t]] = 1;
	} else {
		var _this3 = terrylib_Flag.flagindex;
		terrylib_Flag.flags[__map_reserved[t] != null?_this3.getReserved(t):_this3.h[t]] = 1;
	}
};
terrylib_Flag.setfalse = function(t) {
	var _this = terrylib_Flag.flagindex;
	if(!(__map_reserved[t] != null?_this.existsReserved(t):_this.h.hasOwnProperty(t))) {
		var value = terrylib_Flag.numflag;
		var _this1 = terrylib_Flag.flagindex;
		if(__map_reserved[t] != null) {
			_this1.setReserved(t,value);
		} else {
			_this1.h[t] = value;
		}
		terrylib_Flag.numflag++;
		var _this2 = terrylib_Flag.flagindex;
		terrylib_Flag.flags[__map_reserved[t] != null?_this2.getReserved(t):_this2.h[t]] = 0;
	} else {
		var _this3 = terrylib_Flag.flagindex;
		terrylib_Flag.flags[__map_reserved[t] != null?_this3.getReserved(t):_this3.h[t]] = 0;
	}
};
var terrylib_Help = function() { };
$hxClasses["terrylib.Help"] = terrylib_Help;
terrylib_Help.__name__ = ["terrylib","Help"];
terrylib_Help.init = function() {
	var _g = 0;
	while(_g < 360) {
		var i = _g++;
		terrylib_Help.sine[i] = Math.sin(i * 6.283 / 360);
		terrylib_Help.cosine[i] = Math.cos(i * 6.283 / 360);
		terrylib_Help.bresx.push(0);
		terrylib_Help.bresy.push(0);
		terrylib_Help.bresswap.push(0);
	}
	terrylib_Help.bressize = 0;
	terrylib_Help.glow = 0;
	terrylib_Help.glowdir = 0;
	terrylib_Help.longglow = 0;
	terrylib_Help.longglowdir = 0;
	terrylib_Help.fastglow = 0;
	terrylib_Help.fastglowdir = 0;
	terrylib_Help.slowsine = 0;
	terrylib_Help.tenseconds = 0;
};
terrylib_Help.randomdirection = function() {
	return Math.random() * 4 | 0;
};
terrylib_Help.convertcardinaltoangle = function(t) {
	if(t == terrylib_Help.UP) {
		return 90;
	}
	if(t == terrylib_Help.DOWN) {
		return 270;
	}
	if(t == terrylib_Help.LEFT) {
		return 180;
	}
	if(t == terrylib_Help.RIGHT) {
		return 0;
	}
	return 0;
};
terrylib_Help.oppositedirection = function(t) {
	if(t == terrylib_Help.UP) {
		return terrylib_Help.DOWN;
	}
	if(t == terrylib_Help.DOWN) {
		return terrylib_Help.UP;
	}
	if(t == terrylib_Help.LEFT) {
		return terrylib_Help.RIGHT;
	}
	if(t == terrylib_Help.RIGHT) {
		return terrylib_Help.LEFT;
	}
	return terrylib_Help.UP;
};
terrylib_Help.anticlockwise = function(t,times) {
	if(times == null) {
		times = 1;
	}
	if(times > 1) {
		t = terrylib_Help.anticlockwise(t,times - 1);
	}
	if(t == terrylib_Help.UP) {
		return terrylib_Help.LEFT;
	}
	if(t == terrylib_Help.LEFT) {
		return terrylib_Help.DOWN;
	}
	if(t == terrylib_Help.DOWN) {
		return terrylib_Help.RIGHT;
	}
	if(t == terrylib_Help.RIGHT) {
		return terrylib_Help.UP;
	}
	return terrylib_Help.UP;
};
terrylib_Help.clockwise = function(t,times) {
	if(times == null) {
		times = 1;
	}
	if(times > 1) {
		t = terrylib_Help.clockwise(t,times - 1);
	}
	if(t == terrylib_Help.UP) {
		return terrylib_Help.RIGHT;
	}
	if(t == terrylib_Help.RIGHT) {
		return terrylib_Help.DOWN;
	}
	if(t == terrylib_Help.DOWN) {
		return terrylib_Help.LEFT;
	}
	if(t == terrylib_Help.LEFT) {
		return terrylib_Help.UP;
	}
	return terrylib_Help.UP;
};
terrylib_Help.RGB = function(red,green,blue) {
	return blue | green << 8 | red << 16;
};
terrylib_Help.wrap = function(t,start,end) {
	while(t < start) t += end - start;
	return t % (end - start) + start;
};
terrylib_Help.getarctan = function(i,j) {
	return (360 - terrylib_Help.getarctan_rad(i,j) * 360 / 6.283) % 360;
};
terrylib_Help.getarctan_rad = function(i,j) {
	return Math.atan2(terrylib_Obj.entities[i].yp - terrylib_Obj.entities[j].yp,terrylib_Obj.entities[i].xp - terrylib_Obj.entities[j].xp);
};
terrylib_Help.fixangle = function(t) {
	while(t < 0) t += 360;
	while(t >= 360) t -= 360;
	return t;
};
terrylib_Help.seekangle = function(a,b,d) {
	if(terrylib_Help.fixangle(b - a) > terrylib_Help.fixangle(a - b)) {
		if(Math.abs(a - b) < d) {
			return b;
		}
		return terrylib_Help.fixangle(a - d);
	} else {
		if(Math.abs(a - b) < d) {
			return b;
		}
		return terrylib_Help.fixangle(a + d);
	}
};
terrylib_Help.toangle = function(a) {
	return (360 - a * 360 / 6.283 | 0) % 360;
};
terrylib_Help.torad = function(a) {
	return (Math.PI * 2 - a * (Math.PI * 2) / 360) % (Math.PI * 2);
};
terrylib_Help.sign = function(p1_x,p1_y,p2_x,p2_y,p3_x,p3_y) {
	return (p1_x - p3_x) * (p2_y - p3_y) - (p2_x - p3_x) * (p1_y - p3_y);
};
terrylib_Help.PointInTriangle = function(pt_x,pt_y,v1_x,v1_y,v2_x,v2_y,v3_x,v3_y) {
	var b1;
	var b2;
	var b3;
	b1 = terrylib_Help.sign(pt_x,pt_y,v1_x,v1_y,v2_x,v2_y) < 0.0;
	b2 = terrylib_Help.sign(pt_x,pt_y,v2_x,v2_y,v3_x,v3_y) < 0.0;
	b3 = terrylib_Help.sign(pt_x,pt_y,v3_x,v3_y,v1_x,v1_y) < 0.0;
	if(b1 == b2) {
		return b2 == b3;
	} else {
		return false;
	}
};
terrylib_Help.number = function(t) {
	switch(t) {
	case 0:
		return "Zero";
	case 1:
		return "One";
	case 2:
		return "Two";
	case 3:
		return "Three";
	case 4:
		return "Four";
	case 5:
		return "Five";
	case 6:
		return "Six";
	case 7:
		return "Seven";
	case 8:
		return "Eight";
	case 9:
		return "Nine";
	case 10:
		return "Ten";
	case 11:
		return "Eleven";
	case 12:
		return "Twelve";
	case 13:
		return "Thirteen";
	case 14:
		return "Fourteen";
	case 15:
		return "Fifteen";
	case 16:
		return "Sixteen";
	case 17:
		return "Seventeen";
	case 18:
		return "Eighteen";
	case 19:
		return "Nineteen";
	case 20:
		return "Twenty";
	case 30:
		return "Thirty";
	case 40:
		return "Forty";
	case 50:
		return "Fifty";
	case 60:
		return "Sixty";
	case 70:
		return "Seventy";
	case 80:
		return "Eighty";
	case 90:
		return "Ninety";
	}
	if(t > 20 && t < 30) {
		return terrylib_Help.number(20) + " " + terrylib_Help.number(t - 20);
	}
	if(t > 30 && t < 40) {
		return terrylib_Help.number(30) + " " + terrylib_Help.number(t - 30);
	}
	if(t > 40 && t < 50) {
		return terrylib_Help.number(40) + " " + terrylib_Help.number(t - 40);
	}
	if(t > 50 && t < 60) {
		return terrylib_Help.number(50) + " " + terrylib_Help.number(t - 50);
	}
	if(t > 60 && t < 70) {
		return terrylib_Help.number(60) + " " + terrylib_Help.number(t - 60);
	}
	if(t > 70 && t < 80) {
		return terrylib_Help.number(70) + " " + terrylib_Help.number(t - 70);
	}
	if(t > 80 && t < 90) {
		return terrylib_Help.number(80) + " " + terrylib_Help.number(t - 80);
	}
	if(t > 90 && t < 100) {
		return terrylib_Help.number(90) + " " + terrylib_Help.number(t - 90);
	}
	if(t >= 100 && t < 1000) {
		if(t % 100 == 0) {
			return terrylib_Help.number((t - t % 100) / 100 | 0) + " hundred";
		} else {
			return terrylib_Help.number((t - t % 100) / 100 | 0) + " hundred and " + terrylib_Help.number(t % 100);
		}
	}
	if(t >= 1000) {
		if(t % 1000 == 0) {
			return terrylib_Help.number((t - t % 1000) / 1000 | 0) + " thousand";
		} else if(t % 1000 < 100) {
			return terrylib_Help.number((t - t % 1000) / 1000 | 0) + " thousand and " + terrylib_Help.number(t % 1000);
		} else {
			return terrylib_Help.number((t - t % 1000) / 1000 | 0) + " thousand, " + terrylib_Help.number(t % 1000);
		}
	}
	return "Some";
};
terrylib_Help.updateglow = function() {
	terrylib_Help.tenseconds += 2;
	if(terrylib_Help.tenseconds >= 600) {
		terrylib_Help.tenseconds = 0;
	}
	terrylib_Help.slowsine += 2;
	if(terrylib_Help.slowsine >= 64) {
		terrylib_Help.slowsine = 0;
	}
	if(terrylib_Help.longglowdir == 0) {
		terrylib_Help.longglow += 2;
		if(terrylib_Help.longglow >= 2400) {
			terrylib_Help.longglowdir = 1;
		}
	} else {
		terrylib_Help.longglow -= 2;
		if(terrylib_Help.longglow < 1) {
			terrylib_Help.longglowdir = 0;
		}
	}
	if(terrylib_Help.glowdir == 0) {
		terrylib_Help.glow += 2;
		if(terrylib_Help.glow >= 63) {
			terrylib_Help.glowdir = 1;
		}
	} else {
		terrylib_Help.glow -= 2;
		if(terrylib_Help.glow < 1) {
			terrylib_Help.glowdir = 0;
		}
	}
	if(terrylib_Help.fastglowdir == 0) {
		terrylib_Help.fastglow += 4;
		if(terrylib_Help.fastglow >= 62) {
			terrylib_Help.fastglowdir = 1;
		}
	} else {
		terrylib_Help.fastglow -= 4;
		if(terrylib_Help.fastglow < 2) {
			terrylib_Help.fastglowdir = 0;
		}
	}
};
terrylib_Help.inbox = function(xc,yc,x1,y1,x2,y2) {
	if(xc >= x1 && xc <= x2) {
		if(yc >= y1 && yc <= y2) {
			return true;
		}
	}
	return false;
};
terrylib_Help.inboxw = function(xc,yc,x1,y1,x2,y2) {
	if(xc >= x1 && xc <= x1 + x2) {
		if(yc >= y1 && yc <= y1 + y2) {
			return true;
		}
	}
	return false;
};
terrylib_Help.twodigits = function(t) {
	if(t < 10) {
		return "0" + (t == null?"null":"" + t);
	}
	if(t > 100) {
		return Std.string(terrylib_Help.twodigits(t % 100));
	}
	if(t == null) {
		return "null";
	} else {
		return "" + t;
	}
};
terrylib_Help.threedigits = function(t) {
	if(t < 10) {
		return "00" + (t == null?"null":"" + t);
	}
	if(t < 100) {
		return "0" + (t == null?"null":"" + t);
	}
	if(t == null) {
		return "null";
	} else {
		return "" + t;
	}
};
terrylib_Help.thousand = function(t) {
	if(t < 1000) {
		return "$" + (t == null?"null":"" + t);
	} else if(t < 1000000) {
		return "$" + Std.string((t - t % 1000) / 1000) + "," + terrylib_Help.threedigits(t % 1000);
	} else {
		var temp = (t - t % 1000) / 1000 | 0;
		return "$" + Std.string((temp - temp % 1000) / 1000) + "," + terrylib_Help.threedigits(temp % 1000) + "," + terrylib_Help.threedigits(t % 1000);
	}
};
terrylib_Help.removenewlines = function(s) {
	return terrylib_Help.removefromstring(terrylib_Help.removefromstring(s,"\n"),"\r");
};
terrylib_Help.removefromstring = function(s,c) {
	if(terrylib_Help.Instr(s,c) == 0) {
		return s;
	} else {
		return terrylib_Help.removefromstring(terrylib_Help.getroot(s,c) + terrylib_Help.getbranch(s,c),c);
	}
};
terrylib_Help.isinstring = function(s,c) {
	if(s.indexOf(c,0) > -1) {
		return true;
	}
	return false;
};
terrylib_Help.Instr = function(s,c,start) {
	if(start == null) {
		start = 1;
	}
	return s.indexOf(c,start - 1) + 1;
};
terrylib_Help.Mid = function(s,start,length) {
	if(length == null) {
		length = 1;
	}
	if(start == null) {
		start = 0;
	}
	return HxOverrides.substr(s,start,length);
};
terrylib_Help.Left = function(s,length) {
	if(length == null) {
		length = 1;
	}
	return HxOverrides.substr(s,0,length);
};
terrylib_Help.Right = function(s,length) {
	if(length == null) {
		length = 1;
	}
	return HxOverrides.substr(s,s.length - length,length);
};
terrylib_Help.stringplusplus = function(t) {
	return terrylib_Help.Left(t,t.length - 1) + Std.string(Std.parseInt(terrylib_Help.Right(t,1)) + 1);
};
terrylib_Help.reversetext = function(t) {
	var t2 = "";
	var _g1 = 0;
	var _g = t.length;
	while(_g1 < _g) t2 += terrylib_Help.Mid(t,t.length - _g1++ - 1,1);
	return t2;
};
terrylib_Help.replacechar = function(t,ch,ch2) {
	if(ch2 == null) {
		ch2 = "";
	}
	if(ch == null) {
		ch = "|";
	}
	var fixedstring = "";
	var _g1 = 0;
	var _g = t.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Help.Mid(t,i) == ch) {
			fixedstring += ch2;
		} else {
			fixedstring += terrylib_Help.Mid(t,i);
		}
	}
	return fixedstring;
};
terrylib_Help.getlastbranch = function(n,ch) {
	var i = n.length - 1;
	while(i >= 0) {
		if(terrylib_Help.Mid(n,i,1) == ch) {
			return terrylib_Help.Mid(n,i + 1,n.length - i - 1);
		}
		--i;
	}
	return n;
};
terrylib_Help.getroot = function(n,ch) {
	var _g1 = 0;
	var _g = n.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Help.Mid(n,i,1) == ch) {
			return terrylib_Help.Mid(n,0,i);
		}
	}
	return n;
};
terrylib_Help.getbranch = function(n,ch) {
	var _g1 = 0;
	var _g = n.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Help.Mid(n,i,1) == ch) {
			return terrylib_Help.Mid(n,i + 1,n.length - i - 1);
		}
	}
	return n;
};
terrylib_Help.getbrackets = function(n) {
	while(terrylib_Help.Mid(n,0,1) != "(" && n.length > 0) n = terrylib_Help.Mid(n,1,n.length - 1);
	while(terrylib_Help.Mid(n,n.length - 1,1) != ")" && n.length > 0) n = terrylib_Help.Mid(n,0,n.length - 1);
	if(n.length <= 0) {
		return "";
	}
	return terrylib_Help.Mid(n,1,n.length - 2);
};
terrylib_Help.trimspaces = function(n) {
	while(terrylib_Help.Mid(n,0,1) == " " && n.length > 0) n = terrylib_Help.Mid(n,1,n.length - 1);
	while(terrylib_Help.Mid(n,n.length - 1,1) == " " && n.length > 0) n = terrylib_Help.Mid(n,0,n.length - 1);
	while(terrylib_Help.Mid(n,0,1) == "\t" && n.length > 0) n = terrylib_Help.Mid(n,1,n.length - 1);
	while(terrylib_Help.Mid(n,n.length - 1,1) == "\t" && n.length > 0) n = terrylib_Help.Mid(n,0,n.length - 1);
	if(n.length <= 0) {
		return "";
	}
	return n;
};
terrylib_Help.isNumber = function(t) {
	var f = parseFloat(t);
	if(isNaN(f)) {
		return false;
	} else {
		return true;
	}
};
terrylib_Help.randomletter = function(uppercase) {
	if(uppercase == null) {
		uppercase = false;
	}
	if(uppercase) {
		return terrylib_Help.randomletter(false).toUpperCase();
	}
	return terrylib_Help.letters[Math.random() * 26 | 0];
};
terrylib_Help.encodebase64 = function(t) {
	return haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(t));
};
terrylib_Help.decodebase64 = function(t) {
	return haxe_crypto_Base64.decode(t).toString();
};
terrylib_Help.bresenhamline = function(x0,y0,x1,y1) {
	var startx1 = x1;
	var starty1 = y1;
	terrylib_Help.bressize = 0;
	var swapXY = Math.abs(y1 - y0) > Math.abs(x1 - x0);
	var tmp;
	if(swapXY) {
		tmp = x0;
		x0 = y0;
		y0 = tmp;
		tmp = x1;
		x1 = y1;
		y1 = tmp;
	}
	if(x0 > x1) {
		tmp = x0;
		x0 = x1;
		x1 = tmp;
		tmp = y0;
		y0 = y1;
		y1 = tmp;
	}
	var deltax = x1 - x0;
	var deltay = Math.abs(y1 - y0) | 0;
	var error = deltax / 2 | 0;
	var y = y0;
	var ystep = y0 < y1?1:-1;
	if(swapXY) {
		var _g1 = x0;
		var _g = x1 + 1;
		while(_g1 < _g) {
			var x = _g1++;
			terrylib_Help.bresx[terrylib_Help.bressize] = y;
			terrylib_Help.bresy[terrylib_Help.bressize] = x;
			terrylib_Help.bressize++;
			error -= deltay;
			if(error < 0) {
				y += ystep;
				error += deltax;
			}
		}
	} else {
		var _g11 = x0;
		var _g2 = x1 + 1;
		while(_g11 < _g2) {
			terrylib_Help.bresx[terrylib_Help.bressize] = _g11++;
			terrylib_Help.bresy[terrylib_Help.bressize] = y;
			terrylib_Help.bressize++;
			error -= deltay;
			if(error < 0) {
				y += ystep;
				error += deltax;
			}
		}
	}
	if(startx1 == terrylib_Help.bresx[0] && starty1 == terrylib_Help.bresy[0]) {
		var _g12 = 0;
		var _g3 = terrylib_Help.bressize;
		while(_g12 < _g3) {
			var i = _g12++;
			terrylib_Help.bresswap[i] = terrylib_Help.bresx[i];
		}
		var _g13 = 0;
		var _g4 = terrylib_Help.bressize;
		while(_g13 < _g4) {
			var i1 = _g13++;
			terrylib_Help.bresx[i1] = terrylib_Help.bresswap[terrylib_Help.bressize - i1 - 1];
		}
		var _g14 = 0;
		var _g5 = terrylib_Help.bressize;
		while(_g14 < _g5) {
			var i2 = _g14++;
			terrylib_Help.bresswap[i2] = terrylib_Help.bresy[i2];
		}
		var _g15 = 0;
		var _g6 = terrylib_Help.bressize;
		while(_g15 < _g6) {
			var i3 = _g15++;
			terrylib_Help.bresy[i3] = terrylib_Help.bresswap[terrylib_Help.bressize - i3 - 1];
		}
	}
};
var terrylib_Lerp = function() { };
$hxClasses["terrylib.Lerp"] = terrylib_Lerp;
terrylib_Lerp.__name__ = ["terrylib","Lerp"];
terrylib_Lerp.init = function() {
	var _g = 0;
	while(_g < 100) {
		++_g;
		terrylib_Lerp.lerptimer.push(0);
		terrylib_Lerp.completelist.push("null");
	}
	terrylib_Lerp.numlerptimer = 0;
	terrylib_Lerp.numcompletelist = 0;
};
terrylib_Lerp.to = function(start,end,timer,type) {
	if(type == null) {
		type = "linear";
	}
	var _this = terrylib_Lerp.timerindex;
	var t = __map_reserved[timer] != null?_this.getReserved(timer):_this.h[timer];
	return terrylib_Lerp.to_value(start,end,terrylib_Lerp.lerptimer[t],terrylib_Lerp.lerptimermax[t],type) | 0;
};
terrylib_Lerp.from = function(start,end,timer,type) {
	if(type == null) {
		type = "linear";
	}
	return terrylib_Lerp.to(end,start,timer,type);
};
terrylib_Lerp.to_float = function(start,end,timer,type) {
	if(type == null) {
		type = "linear";
	}
	var _this = terrylib_Lerp.timerindex;
	var t = __map_reserved[timer] != null?_this.getReserved(timer):_this.h[timer];
	return terrylib_Lerp.to_value(start,end,terrylib_Lerp.lerptimer[t],terrylib_Lerp.lerptimermax[t],type);
};
terrylib_Lerp.from_float = function(start,end,timer,type) {
	if(type == null) {
		type = "linear";
	}
	return terrylib_Lerp.to_float(end,start,timer,type);
};
terrylib_Lerp.to_value = function(start,end,variable,max,type) {
	if(type == null) {
		type = "linear";
	}
	if(variable >= 0 && variable <= max) {
		switch(type) {
		case "back_in":
			return terrylib_util_Easing.easeInBack(variable,start,end - start,max);
		case "back_inout":
			return terrylib_util_Easing.easeInOutBack(variable,start,end - start,max);
		case "back_out":
			return terrylib_util_Easing.easeOutBack(variable,start,end - start,max);
		case "bounce_in":
			return terrylib_util_Easing.easeInBounce(variable,start,end - start,max);
		case "bounce_inout":
			return terrylib_util_Easing.easeInOutBounce(variable,start,end - start,max);
		case "bounce_out":
			return terrylib_util_Easing.easeOutBounce(variable,start,end - start,max);
		case "circular_in":
			return terrylib_util_Easing.easeInCircular(variable,start,end - start,max);
		case "circular_inout":
			return terrylib_util_Easing.easeInOutCircular(variable,start,end - start,max);
		case "circular_out":
			return terrylib_util_Easing.easeOutCircular(variable,start,end - start,max);
		case "cubic_in":
			return terrylib_util_Easing.easeInCubic(variable,start,end - start,max);
		case "cubic_inout":
			return terrylib_util_Easing.easeInOutCubic(variable,start,end - start,max);
		case "cubic_out":
			return terrylib_util_Easing.easeOutCubic(variable,start,end - start,max);
		case "expo_in":
			return terrylib_util_Easing.easeInExpo(variable,start,end - start,max);
		case "expo_inout":
			return terrylib_util_Easing.easeInOutExpo(variable,start,end - start,max);
		case "expo_out":
			return terrylib_util_Easing.easeOutExpo(variable,start,end - start,max);
		case "linear":
			return end + (start - end) * ((max - variable) / max);
		case "quad_in":
			return terrylib_util_Easing.easeInQuad(variable,start,end - start,max);
		case "quad_inout":
			return terrylib_util_Easing.easeInOutQuad(variable,start,end - start,max);
		case "quad_out":
			return terrylib_util_Easing.easeOutQuad(variable,start,end - start,max);
		case "quart_in":
			return terrylib_util_Easing.easeInQuart(variable,start,end - start,max);
		case "quart_inout":
			return terrylib_util_Easing.easeInOutQuart(variable,start,end - start,max);
		case "quart_out":
			return terrylib_util_Easing.easeOutQuart(variable,start,end - start,max);
		case "quint_in":
			return terrylib_util_Easing.easeInQuint(variable,start,end - start,max);
		case "quint_inout":
			return terrylib_util_Easing.easeInOutQuint(variable,start,end - start,max);
		case "quint_out":
			return terrylib_util_Easing.easeOutQuint(variable,start,end - start,max);
		case "sine_in":
			return terrylib_util_Easing.easeInSine(variable,start,end - start,max);
		case "sine_inout":
			return terrylib_util_Easing.easeInOutSine(variable,start,end - start,max);
		case "sine_out":
			return terrylib_util_Easing.easeOutSine(variable,start,end - start,max);
		}
		return start;
	} else {
		return start;
	}
};
terrylib_Lerp.from_value = function(end,start,variable,max,type) {
	if(type == null) {
		type = "linear";
	}
	return terrylib_Lerp.to_value(start,end,variable,max,type);
};
terrylib_Lerp.update = function() {
	var t;
	var tmp = terrylib_Lerp.timerindex.keys();
	while(tmp.hasNext()) {
		var i = tmp.next();
		var _this = terrylib_Lerp.timerindex;
		t = __map_reserved[i] != null?_this.getReserved(i):_this.h[i];
		if(terrylib_Lerp.lerptimer[t] < terrylib_Lerp.lerptimermax[t]) {
			terrylib_Lerp.lerptimer[t]++;
		} else {
			terrylib_Lerp.addtocomplete(i);
			terrylib_Lerp.timerindex.remove(i);
		}
	}
	t = terrylib_Lerp.numlerptimer - 1;
	while(t >= 0 && terrylib_Lerp.lerptimer[t] >= terrylib_Lerp.lerptimermax[t]) {
		terrylib_Lerp.numlerptimer--;
		--t;
	}
};
terrylib_Lerp.finished = function(name) {
	var _this = terrylib_Lerp.timerindex;
	if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
		return false;
	}
	return true;
};
terrylib_Lerp.justfinished = function(name) {
	if(terrylib_Lerp.incompletelist(name)) {
		terrylib_Lerp.removefromcomplete(name);
		return true;
	}
	return false;
};
terrylib_Lerp.start = function(name,time) {
	terrylib_Lerp.lerptimermax[terrylib_Lerp.numlerptimer] = time;
	terrylib_Lerp.lerptimer[terrylib_Lerp.numlerptimer] = 0;
	terrylib_Lerp.numlerptimer++;
	var value = terrylib_Lerp.numlerptimer - 1;
	var _this = terrylib_Lerp.timerindex;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,value);
	} else {
		_this.h[name] = value;
	}
	terrylib_Lerp.mode = name;
};
terrylib_Lerp.addtocomplete = function(t) {
	terrylib_Lerp.completelist[terrylib_Lerp.numcompletelist] = t;
	terrylib_Lerp.numcompletelist++;
};
terrylib_Lerp.removefromcomplete = function(t) {
	var _g1 = 0;
	var _g = terrylib_Lerp.numcompletelist;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Lerp.completelist[i] == t) {
			var _g3 = i;
			var _g2 = terrylib_Lerp.numcompletelist - 1;
			while(_g3 < _g2) {
				var j = _g3++;
				terrylib_Lerp.completelist[j] = terrylib_Lerp.completelist[j + 1];
			}
			terrylib_Lerp.numcompletelist -= 1;
		}
	}
};
terrylib_Lerp.incompletelist = function(t) {
	var _g1 = 0;
	var _g = terrylib_Lerp.numcompletelist;
	while(_g1 < _g) if(terrylib_Lerp.completelist[_g1++] == t) {
		return true;
	}
	return false;
};
var terrylib_Obj = function() { };
$hxClasses["terrylib.Obj"] = terrylib_Obj;
terrylib_Obj.__name__ = ["terrylib","Obj"];
terrylib_Obj.init = function() {
	terrylib_Obj.nentity = 0;
	terrylib_Obj.nparticles = 0;
	terrylib_Obj.nblocks = 0;
	terrylib_Obj.temprect = new openfl_geom_Rectangle();
	terrylib_Obj.temprect2 = new openfl_geom_Rectangle();
	terrylib_Obj.activedoor = "null";
	terrylib_Obj.roomname = "";
	terrylib_Obj.roomnamemode = 0;
	var _g = 0;
	while(_g < 500) {
		++_g;
		terrylib_Obj.entities.push(new config_Entclass());
		terrylib_Obj.initentities.push(new terrylib_util_Initentclass());
		terrylib_Obj.particles.push(new terrylib_util_Particleclass());
		terrylib_Obj.blocks.push(new terrylib_util_Blockclass());
	}
};
terrylib_Obj.loadtemplates = function() {
	terrylib_Obj.numtemplate = 0;
	var _g1 = 0;
	var _g = terrylib_Obj.templates.length;
	while(_g1 < _g) terrylib_Obj.addtemplate(terrylib_Obj.templates[_g1++].name);
};
terrylib_Obj.addtemplate = function(t) {
	var value = terrylib_Obj.numtemplate;
	var _this = terrylib_Obj.entindex;
	if(__map_reserved[t] != null) {
		_this.setReserved(t,value);
	} else {
		_this.h[t] = value;
	}
	terrylib_Obj.numtemplate++;
};
terrylib_Obj.getgridpoint = function(t,gridwidth) {
	t = (t - t % gridwidth) / gridwidth | 0;
	return t;
};
terrylib_Obj.createblock = function(t,xp,yp,w,h,trig,destx,desty,doorname) {
	if(doorname == null) {
		doorname = "";
	}
	if(desty == null) {
		desty = 0;
	}
	if(destx == null) {
		destx = 0;
	}
	if(trig == null) {
		trig = "null";
	}
	if(h == null) {
		h = 0;
	}
	if(w == null) {
		w = 0;
	}
	if(yp == null) {
		yp = 0;
	}
	if(xp == null) {
		xp = 0;
	}
	var i;
	var z;
	if(terrylib_Obj.nblocks == 0) {
		z = 0;
	} else {
		i = 0;
		z = -1;
		while(i < terrylib_Obj.nblocks) {
			if(!terrylib_Obj.blocks[i].active) {
				z = i;
				i = terrylib_Obj.nblocks;
			}
			++i;
		}
		if(z == -1) {
			z = terrylib_Obj.nblocks;
			terrylib_Obj.nblocks++;
		}
	}
	terrylib_Obj.blocks[z].clear();
	terrylib_Obj.blocks[z].active = true;
	switch(t) {
	case 0:
		terrylib_Obj.blocks[z].type = 0;
		terrylib_Obj.blocks[z].xp = xp;
		terrylib_Obj.blocks[z].yp = yp;
		terrylib_Obj.blocks[z].wp = w;
		terrylib_Obj.blocks[z].hp = h;
		terrylib_Obj.blocks[z].rectset(xp,yp,w,h);
		terrylib_Obj.nblocks++;
		break;
	case 1:
		terrylib_Obj.blocks[z].type = 1;
		terrylib_Obj.blocks[z].xp = xp;
		terrylib_Obj.blocks[z].yp = yp;
		terrylib_Obj.blocks[z].wp = w;
		terrylib_Obj.blocks[z].hp = h;
		terrylib_Obj.blocks[z].rectset(xp,yp,w,h);
		terrylib_Obj.blocks[z].trigger = trig;
		terrylib_Obj.nblocks++;
		break;
	case 2:
		terrylib_Obj.blocks[z].type = 2;
		terrylib_Obj.blocks[z].xp = xp;
		terrylib_Obj.blocks[z].yp = yp;
		terrylib_Obj.blocks[z].wp = w;
		terrylib_Obj.blocks[z].hp = h;
		terrylib_Obj.blocks[z].rectset(xp,yp,w,h);
		terrylib_Obj.nblocks++;
		break;
	case 3:
		terrylib_Obj.blocks[z].type = 3;
		terrylib_Obj.blocks[z].xp = xp;
		terrylib_Obj.blocks[z].yp = yp;
		terrylib_Obj.blocks[z].wp = w;
		terrylib_Obj.blocks[z].hp = h;
		terrylib_Obj.blocks[z].rectset(xp,yp,w,h);
		terrylib_Obj.blocks[z].trigger = trig;
		terrylib_Obj.blocks[z].destx = destx;
		terrylib_Obj.blocks[z].desty = desty;
		terrylib_Obj.blocks[z].doorname = doorname;
		terrylib_Obj.nblocks++;
		break;
	}
};
terrylib_Obj.createtrigger = function(xp,yp,trig) {
	if(trig == null) {
		trig = "null";
	}
	terrylib_Obj.createblock(1,xp * 12,yp * 12,12,12,trig);
};
terrylib_Obj.createdoor = function(xp,yp,trigs,destx,desty,dname) {
	if(dname == null) {
		dname = "";
	}
	terrylib_Obj.createblock(3,xp * 12,yp * 12,12,12,trigs,destx,desty,dname);
};
terrylib_Obj.removeallblocks = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nblocks;
	while(_g1 < _g) terrylib_Obj.blocks[_g1++].clear();
	terrylib_Obj.nblocks = 0;
};
terrylib_Obj.removeblock = function(t) {
	terrylib_Obj.blocks[t].clear();
	var i = terrylib_Obj.nblocks - 1;
	while(i >= 0 && !terrylib_Obj.blocks[i].active) {
		terrylib_Obj.nblocks--;
		--i;
	}
};
terrylib_Obj.removeblockat = function(x,y) {
	var _g1 = 0;
	var _g = terrylib_Obj.nblocks;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.blocks[i].xp == x && terrylib_Obj.blocks[i].yp == y) {
			terrylib_Obj.removeblock(i);
		}
	}
};
terrylib_Obj.activeblocks = function() {
	var t = 0;
	var _g1 = 0;
	var _g = terrylib_Obj.nblocks;
	while(_g1 < _g) if(terrylib_Obj.blocks[_g1++].active) {
		++t;
	}
	return t;
};
terrylib_Obj.removetrigger = function(t) {
	var _g1 = 0;
	var _g = terrylib_Obj.nblocks;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.blocks[i].type == 1) {
			if(terrylib_Obj.blocks[i].trigger == t) {
				terrylib_Obj.removeblock(i);
			}
		}
	}
};
terrylib_Obj.updateentitylogic = function(t) {
	terrylib_Obj.entities[t].oldxp = terrylib_Obj.entities[t].xp;
	terrylib_Obj.entities[t].oldyp = terrylib_Obj.entities[t].yp;
	terrylib_Obj.entities[t].vx = terrylib_Obj.entities[t].vx + terrylib_Obj.entities[t].ax;
	terrylib_Obj.entities[t].vy = terrylib_Obj.entities[t].vy + terrylib_Obj.entities[t].ay;
	terrylib_Obj.entities[t].ax = 0;
	if(terrylib_Obj.entities[t].jumping) {
		if(terrylib_Obj.entities[t].ay < 0) {
			terrylib_Obj.entities[t].ay++;
		}
		if(terrylib_Obj.entities[t].ay > -1) {
			terrylib_Obj.entities[t].ay = 0;
		}
		terrylib_Obj.entities[t].jumpframe--;
		if(terrylib_Obj.entities[t].jumpframe <= 0) {
			terrylib_Obj.entities[t].jumping = false;
		}
	} else if(terrylib_Obj.entities[t].gravity) {
		terrylib_Obj.entities[t].ay = 3;
	}
	terrylib_Obj.entities[t].newxp = terrylib_Obj.entities[t].xp + terrylib_Obj.entities[t].vx;
	terrylib_Obj.entities[t].newyp = terrylib_Obj.entities[t].yp + terrylib_Obj.entities[t].vy;
};
terrylib_Obj.entitymapcollision = function(t,tileset) {
	if(terrylib_Obj.testwallsx(t,terrylib_Obj.entities[t].newxp | 0,terrylib_Obj.entities[t].yp | 0)) {
		terrylib_Obj.entities[t].xp = terrylib_Obj.entities[t].newxp;
	} else {
		if(terrylib_Obj.entities[t].onwall > 0) {
			terrylib_Obj.entities[t].state = terrylib_Obj.entities[t].onwall;
		}
		if(terrylib_Obj.entities[t].onxwall > 0) {
			terrylib_Obj.entities[t].state = terrylib_Obj.entities[t].onxwall;
		}
	}
	if(terrylib_Obj.testwallsy(t,terrylib_Obj.entities[t].xp | 0,terrylib_Obj.entities[t].newyp | 0)) {
		terrylib_Obj.entities[t].yp = terrylib_Obj.entities[t].newyp;
	} else {
		if(terrylib_Obj.entities[t].onwall > 0) {
			terrylib_Obj.entities[t].state = terrylib_Obj.entities[t].onwall;
		}
		if(terrylib_Obj.entities[t].onywall > 0) {
			terrylib_Obj.entities[t].state = terrylib_Obj.entities[t].onywall;
		}
		terrylib_Obj.entities[t].jumpframe = 0;
	}
	if(terrylib_Obj.entitycollidefloor(t)) {
		terrylib_Obj.entities[t].onground = 2;
	} else {
		terrylib_Obj.entities[t].onground--;
	}
};
terrylib_Obj.getrule = function(t) {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) if(terrylib_Obj.entities[_g1++].rule == t) {
		return true;
	}
	return false;
};
terrylib_Obj.gettype = function(t) {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) if(terrylib_Obj.entities[_g1++].type == t) {
		return true;
	}
	return false;
};
terrylib_Obj.getplayer = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].rule == "player") {
			return i;
		}
	}
	return -1;
};
terrylib_Obj.getnpc = function(t) {
	if(t == "player") {
		return terrylib_Obj.getplayer();
	}
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].name == t) {
			return i;
		}
	}
	return -1;
};
terrylib_Obj.rectset = function(xi,yi,wi,hi) {
	terrylib_Obj.temprect.x = xi;
	terrylib_Obj.temprect.y = yi;
	terrylib_Obj.temprect.width = wi;
	terrylib_Obj.temprect.height = hi;
};
terrylib_Obj.rect2set = function(xi,yi,wi,hi) {
	terrylib_Obj.temprect2.x = xi;
	terrylib_Obj.temprect2.y = yi;
	terrylib_Obj.temprect2.width = wi;
	terrylib_Obj.temprect2.height = hi;
};
terrylib_Obj.entitycollide = function(a,b) {
	terrylib_Obj.tempx = terrylib_Obj.entities[a].xp + terrylib_Obj.entities[a].cx | 0;
	terrylib_Obj.tempy = terrylib_Obj.entities[a].yp + terrylib_Obj.entities[a].cy | 0;
	terrylib_Obj.tempw = terrylib_Obj.entities[a].w;
	terrylib_Obj.temph = terrylib_Obj.entities[a].h;
	terrylib_Obj.rectset(terrylib_Obj.tempx,terrylib_Obj.tempy,terrylib_Obj.tempw,terrylib_Obj.temph);
	terrylib_Obj.tempx = terrylib_Obj.entities[b].xp + terrylib_Obj.entities[b].cx | 0;
	terrylib_Obj.tempy = terrylib_Obj.entities[b].yp + terrylib_Obj.entities[b].cy | 0;
	terrylib_Obj.tempw = terrylib_Obj.entities[b].w;
	terrylib_Obj.temph = terrylib_Obj.entities[b].h;
	terrylib_Obj.rect2set(terrylib_Obj.tempx,terrylib_Obj.tempy,terrylib_Obj.tempw,terrylib_Obj.temph);
	if(terrylib_Obj.temprect.intersects(terrylib_Obj.temprect2)) {
		return true;
	}
	return false;
};
terrylib_Obj.checkdamage = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].rule == "player") {
			terrylib_Obj.tempx = terrylib_Obj.entities[i].xp + terrylib_Obj.entities[i].cx | 0;
			terrylib_Obj.tempy = terrylib_Obj.entities[i].yp + terrylib_Obj.entities[i].cy | 0;
			terrylib_Obj.tempw = terrylib_Obj.entities[i].w;
			terrylib_Obj.temph = terrylib_Obj.entities[i].h;
			terrylib_Obj.rectset(terrylib_Obj.tempx,terrylib_Obj.tempy,terrylib_Obj.tempw,terrylib_Obj.temph);
			var _g3 = 0;
			var _g2 = terrylib_Obj.nblocks;
			while(_g3 < _g2) {
				var j = _g3++;
				if(terrylib_Obj.blocks[j].type == 2 && terrylib_Obj.blocks[j].active) {
					if(terrylib_Obj.blocks[j].rect.intersects(terrylib_Obj.temprect)) {
						return true;
					}
				}
			}
		}
	}
	return false;
};
terrylib_Obj.checktrigger = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].rule == "player") {
			terrylib_Obj.tempx = terrylib_Obj.entities[i].xp + terrylib_Obj.entities[i].cx | 0;
			terrylib_Obj.tempy = terrylib_Obj.entities[i].yp + terrylib_Obj.entities[i].cy | 0;
			terrylib_Obj.tempw = terrylib_Obj.entities[i].w;
			terrylib_Obj.temph = terrylib_Obj.entities[i].h;
			terrylib_Obj.rectset(terrylib_Obj.tempx,terrylib_Obj.tempy,terrylib_Obj.tempw,terrylib_Obj.temph);
			var _g3 = 0;
			var _g2 = terrylib_Obj.nblocks;
			while(_g3 < _g2) {
				var j = _g3++;
				if(terrylib_Obj.blocks[j].type == 1 && terrylib_Obj.blocks[j].active) {
					if(terrylib_Obj.blocks[j].rect.intersects(terrylib_Obj.temprect)) {
						terrylib_Obj.activetrigger = terrylib_Obj.blocks[j].trigger;
						terrylib_Obj.blocks[j].active = false;
						return terrylib_Obj.blocks[j].trigger;
					}
				}
			}
		}
	}
	return "null";
};
terrylib_Obj.checkdoor = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].rule == "player") {
			terrylib_Obj.tempx = terrylib_Obj.entities[i].xp + terrylib_Obj.entities[i].cx | 0;
			terrylib_Obj.tempy = terrylib_Obj.entities[i].yp + terrylib_Obj.entities[i].cy | 0;
			terrylib_Obj.tempw = terrylib_Obj.entities[i].w;
			terrylib_Obj.temph = terrylib_Obj.entities[i].h;
			terrylib_Obj.rectset(terrylib_Obj.tempx,terrylib_Obj.tempy,terrylib_Obj.tempw,terrylib_Obj.temph);
			var _g3 = 0;
			var _g2 = terrylib_Obj.nblocks;
			while(_g3 < _g2) {
				var j = _g3++;
				if(terrylib_Obj.blocks[j].type == 3 && terrylib_Obj.blocks[j].active) {
					if(terrylib_Obj.blocks[j].rect.intersects(terrylib_Obj.temprect)) {
						terrylib_Obj.activetrigger = terrylib_Obj.blocks[j].trigger;
						terrylib_Obj.doortox = terrylib_Obj.blocks[j].destx;
						terrylib_Obj.doortoy = terrylib_Obj.blocks[j].desty;
						terrylib_Obj.actualdoor = j;
						return terrylib_Obj.blocks[j].trigger;
					}
				}
			}
		}
	}
	return "null";
};
terrylib_Obj.checkblocks = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nblocks;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.blocks[i].active) {
			if(terrylib_Obj.blocks[i].type == 0) {
				if(terrylib_Obj.blocks[i].rect.intersects(terrylib_Obj.temprect)) {
					return true;
				}
			}
		}
	}
	return false;
};
terrylib_Obj.checkwall = function() {
	if(terrylib_Obj.checkblocks()) {
		return true;
	}
	terrylib_Obj.tempx = terrylib_Obj.getgridpoint(terrylib_Obj.temprect.x | 0,12);
	terrylib_Obj.tempy = terrylib_Obj.getgridpoint(terrylib_Obj.temprect.y | 0,12);
	terrylib_Obj.tempw = terrylib_Obj.getgridpoint(terrylib_Obj.temprect.x + terrylib_Obj.temprect.width - 1 | 0,12);
	terrylib_Obj.temph = terrylib_Obj.getgridpoint(terrylib_Obj.temprect.y + terrylib_Obj.temprect.height - 1 | 0,12);
	if(terrylib_World.collide(terrylib_Obj.tempx,terrylib_Obj.tempy)) {
		return true;
	}
	if(terrylib_World.collide(terrylib_Obj.tempw,terrylib_Obj.tempy)) {
		return true;
	}
	if(terrylib_World.collide(terrylib_Obj.tempx,terrylib_Obj.temph)) {
		return true;
	}
	if(terrylib_World.collide(terrylib_Obj.tempw,terrylib_Obj.temph)) {
		return true;
	}
	if(terrylib_Obj.temprect.height >= 12) {
		terrylib_Obj.tpy1 = terrylib_Obj.getgridpoint(terrylib_Obj.temprect.y + 6 | 0,12);
		if(terrylib_World.collide(terrylib_Obj.tempx,terrylib_Obj.tpy1)) {
			return true;
		}
		if(terrylib_World.collide(terrylib_Obj.tempw,terrylib_Obj.tpy1)) {
			return true;
		}
		if(terrylib_Obj.temprect.height >= 18) {
			terrylib_Obj.tpy1 = terrylib_Obj.getgridpoint(terrylib_Obj.temprect.y + 12 | 0,12);
			if(terrylib_World.collide(terrylib_Obj.tempx,terrylib_Obj.tpy1)) {
				return true;
			}
			if(terrylib_World.collide(terrylib_Obj.tempw,terrylib_Obj.tpy1)) {
				return true;
			}
			if(terrylib_Obj.temprect.height >= 24) {
				terrylib_Obj.tpy1 = terrylib_Obj.getgridpoint(terrylib_Obj.temprect.y + 18 | 0,12);
				if(terrylib_World.collide(terrylib_Obj.tempx,terrylib_Obj.tpy1)) {
					return true;
				}
				if(terrylib_World.collide(terrylib_Obj.tempw,terrylib_Obj.tpy1)) {
					return true;
				}
			}
		}
	}
	if(terrylib_Obj.temprect.width >= 12) {
		terrylib_Obj.tpx1 = terrylib_Obj.getgridpoint(terrylib_Obj.temprect.x + 6 | 0,12);
		if(terrylib_World.collide(terrylib_Obj.tpx1,terrylib_Obj.tempy)) {
			return true;
		}
		if(terrylib_World.collide(terrylib_Obj.tpx1,terrylib_Obj.temph)) {
			return true;
		}
	}
	return false;
};
terrylib_Obj.entitycollidefloor = function(t) {
	terrylib_Obj.tempx = terrylib_Obj.entities[t].xp + terrylib_Obj.entities[t].cx | 0;
	terrylib_Obj.tempy = terrylib_Obj.entities[t].yp + terrylib_Obj.entities[t].cy + 1 | 0;
	terrylib_Obj.tempw = terrylib_Obj.entities[t].w;
	terrylib_Obj.temph = terrylib_Obj.entities[t].h;
	terrylib_Obj.rectset(terrylib_Obj.tempx,terrylib_Obj.tempy,terrylib_Obj.tempw,terrylib_Obj.temph);
	if(terrylib_Obj.checkwall()) {
		return true;
	}
	return false;
};
terrylib_Obj.testwallsx = function(t,tx,ty) {
	terrylib_Obj.tempx = tx + terrylib_Obj.entities[t].cx;
	terrylib_Obj.tempy = ty + terrylib_Obj.entities[t].cy;
	terrylib_Obj.tempw = terrylib_Obj.entities[t].w;
	terrylib_Obj.temph = terrylib_Obj.entities[t].h;
	terrylib_Obj.rectset(terrylib_Obj.tempx,terrylib_Obj.tempy,terrylib_Obj.tempw,terrylib_Obj.temph);
	if(terrylib_Obj.checkwall()) {
		if(terrylib_Obj.entities[t].vx > 1) {
			terrylib_Obj.entities[t].vx--;
			terrylib_Obj.entities[t].newxp = terrylib_Obj.entities[t].xp + terrylib_Obj.entities[t].vx | 0;
			return terrylib_Obj.testwallsx(t,terrylib_Obj.entities[t].newxp | 0,terrylib_Obj.entities[t].yp | 0);
		} else if(terrylib_Obj.entities[t].vx < -1) {
			terrylib_Obj.entities[t].vx++;
			terrylib_Obj.entities[t].newxp = terrylib_Obj.entities[t].xp + terrylib_Obj.entities[t].vx | 0;
			return terrylib_Obj.testwallsx(t,terrylib_Obj.entities[t].newxp | 0,terrylib_Obj.entities[t].yp | 0);
		} else {
			terrylib_Obj.entities[t].vx = 0;
			return false;
		}
	}
	return true;
};
terrylib_Obj.testwallsy = function(t,tx,ty) {
	terrylib_Obj.tempx = tx + terrylib_Obj.entities[t].cx;
	terrylib_Obj.tempy = ty + terrylib_Obj.entities[t].cy;
	terrylib_Obj.tempw = terrylib_Obj.entities[t].w;
	terrylib_Obj.temph = terrylib_Obj.entities[t].h;
	terrylib_Obj.rectset(terrylib_Obj.tempx,terrylib_Obj.tempy,terrylib_Obj.tempw,terrylib_Obj.temph);
	if(terrylib_Obj.checkwall()) {
		if(terrylib_Obj.entities[t].vy > 1) {
			terrylib_Obj.entities[t].vy--;
			terrylib_Obj.entities[t].newyp = terrylib_Obj.entities[t].yp + terrylib_Obj.entities[t].vy | 0;
			return terrylib_Obj.testwallsy(t,terrylib_Obj.entities[t].xp | 0,terrylib_Obj.entities[t].newyp | 0);
		} else if(terrylib_Obj.entities[t].vy < -1) {
			terrylib_Obj.entities[t].vy++;
			terrylib_Obj.entities[t].newyp = terrylib_Obj.entities[t].yp + terrylib_Obj.entities[t].vy | 0;
			return terrylib_Obj.testwallsy(t,terrylib_Obj.entities[t].xp | 0,terrylib_Obj.entities[t].newyp | 0);
		} else {
			terrylib_Obj.entities[t].vy = 0;
			return false;
		}
	}
	return true;
};
terrylib_Obj.applyfriction = function(t,xrate,yrate) {
	if(terrylib_Obj.entities[t].vx > 0) {
		terrylib_Obj.entities[t].vx -= xrate;
	}
	if(terrylib_Obj.entities[t].vx < 0) {
		terrylib_Obj.entities[t].vx += xrate;
	}
	if(terrylib_Obj.entities[t].vy > 0) {
		terrylib_Obj.entities[t].vy -= yrate;
	}
	if(terrylib_Obj.entities[t].vy < 0) {
		terrylib_Obj.entities[t].vy += yrate;
	}
	if(terrylib_Obj.entities[t].vy > 4) {
		terrylib_Obj.entities[t].vy = 4;
	}
	if(terrylib_Obj.entities[t].vy < -4) {
		terrylib_Obj.entities[t].vy = -4;
	}
	if(terrylib_Obj.entities[t].vx > 4) {
		terrylib_Obj.entities[t].vx = 4;
	}
	if(terrylib_Obj.entities[t].vx < -4) {
		terrylib_Obj.entities[t].vx = -4;
	}
	if(Math.abs(terrylib_Obj.entities[t].vx) <= xrate) {
		terrylib_Obj.entities[t].vx = 0;
	}
	if(Math.abs(terrylib_Obj.entities[t].vy) <= yrate) {
		terrylib_Obj.entities[t].vy = 0;
	}
};
terrylib_Obj.stopmovement = function(i) {
	terrylib_Obj.entities[i].vx = 0;
	terrylib_Obj.entities[i].vy = 0;
	terrylib_Obj.entities[i].ax = 0;
	terrylib_Obj.entities[i].ay = 0;
};
terrylib_Obj.cleanup = function() {
	var i = 0;
	i = terrylib_Obj.nentity - 1;
	while(i >= 0 && !terrylib_Obj.entities[i].active) {
		terrylib_Obj.nentity--;
		--i;
	}
	i = terrylib_Obj.nparticles - 1;
	while(i >= 0 && !terrylib_Obj.particles[i].active) {
		terrylib_Obj.nparticles--;
		--i;
	}
};
terrylib_Obj.createparticle = function(xp,yp,t,ax,ay,vx,vy) {
	if(vy == null) {
		vy = 0;
	}
	if(vx == null) {
		vx = 0;
	}
	if(ay == null) {
		ay = 0;
	}
	if(ax == null) {
		ax = 0;
	}
	var i;
	var z;
	if(terrylib_Obj.nparticles == 0) {
		z = 0;
		terrylib_Obj.nparticles++;
	} else {
		i = 0;
		z = -1;
		while(i < terrylib_Obj.nparticles) {
			if(!terrylib_Obj.particles[i].active) {
				z = i;
				i = terrylib_Obj.nparticles;
			}
			++i;
		}
		if(z == -1) {
			z = terrylib_Obj.nparticles;
			terrylib_Obj.nparticles++;
		}
	}
	terrylib_Obj.particles[z].clear();
	terrylib_Obj.particles[z].active = true;
	terrylib_Obj.particles[z].type = t;
	terrylib_Obj.particles[z].colour = 0;
	terrylib_Obj.particles[z].life = 0;
	terrylib_Obj.particles[z].xp = xp;
	terrylib_Obj.particles[z].yp = yp;
	terrylib_Obj.particles[z].ax = ax;
	terrylib_Obj.particles[z].ay = ay;
	terrylib_Obj.particles[z].vx = vx;
	terrylib_Obj.particles[z].vy = vy;
	objs_Particlelogic.initparticle(z);
};
terrylib_Obj.updateparticles = function() {
	var _g1 = 0;
	var _g = terrylib_Obj.nparticles;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.particles[i].active) {
			if(terrylib_Obj.particles[i].statedelay <= 0) {
				objs_Particlelogic.updateparticle(i);
			} else {
				terrylib_Obj.particles[i].statedelay--;
				if(terrylib_Obj.particles[i].statedelay < 0) {
					terrylib_Obj.particles[i].statedelay = 0;
				}
			}
		}
	}
	return true;
};
terrylib_Obj.createinitentity = function(xp,yp,t,para1,para2,para3) {
	if(para3 == null) {
		para3 = "";
	}
	if(para2 == null) {
		para2 = "";
	}
	if(para1 == null) {
		para1 = "";
	}
	var i = terrylib_Obj.ninitentities;
	terrylib_Obj.initentities[i].xp = xp;
	terrylib_Obj.initentities[i].yp = yp;
	terrylib_Obj.initentities[i].rule = t;
	terrylib_Obj.initentities[i].para1 = para1;
	terrylib_Obj.initentities[i].para2 = para2;
	terrylib_Obj.initentities[i].para3 = para3;
	terrylib_Obj.initentities[i].entity = -1;
	var _this = terrylib_Obj.entindex;
	terrylib_Obj.initentities[i].drawframe = terrylib_Obj.templates[__map_reserved[t] != null?_this.getReserved(t):_this.h[t]].init_drawframe;
	terrylib_Obj.initentities[i].para1_selection = 0;
	terrylib_Obj.initentities[i].para2_selection = 0;
	terrylib_Obj.initentities[i].para3_selection = 0;
	terrylib_Obj.ninitentities++;
	return i;
};
terrylib_Obj.copyinitentity = function(a,b) {
	terrylib_Obj.initentities[a].xp = terrylib_Obj.initentities[b].xp;
	terrylib_Obj.initentities[a].yp = terrylib_Obj.initentities[b].yp;
	terrylib_Obj.initentities[a].entity = terrylib_Obj.initentities[b].entity;
	terrylib_Obj.initentities[a].drawframe = terrylib_Obj.initentities[b].drawframe;
	terrylib_Obj.initentities[a].rule = terrylib_Obj.initentities[b].rule;
	terrylib_Obj.initentities[a].para1 = terrylib_Obj.initentities[b].para1;
	terrylib_Obj.initentities[a].para2 = terrylib_Obj.initentities[b].para2;
	terrylib_Obj.initentities[a].para3 = terrylib_Obj.initentities[b].para3;
	terrylib_Obj.initentities[a].para1_selection = terrylib_Obj.initentities[b].para1_selection;
	terrylib_Obj.initentities[a].para2_selection = terrylib_Obj.initentities[b].para2_selection;
	terrylib_Obj.initentities[a].para3_selection = terrylib_Obj.initentities[b].para3_selection;
};
terrylib_Obj.removeinitentity = function(t) {
	if(t != terrylib_Obj.ninitentities - 1) {
		var _g1 = t;
		var _g = terrylib_Obj.ninitentities;
		while(_g1 < _g) {
			var i = _g1++;
			terrylib_Obj.copyinitentity(i,i + 1);
		}
	}
	terrylib_Obj.ninitentities--;
};
terrylib_Obj.createentity = function(xp,yp,t,para1,para2,para3) {
	if(para3 == null) {
		para3 = "";
	}
	if(para2 == null) {
		para2 = "";
	}
	if(para1 == null) {
		para1 = "";
	}
	var i;
	var z;
	if(terrylib_Obj.nentity == 0) {
		z = 0;
		terrylib_Obj.nentity++;
	} else {
		i = 0;
		z = -1;
		while(i < terrylib_Obj.nentity) {
			if(!terrylib_Obj.entities[i].active) {
				z = i;
				i = terrylib_Obj.nentity;
			}
			++i;
		}
		if(z == -1) {
			z = terrylib_Obj.nentity;
			terrylib_Obj.nentity++;
		}
	}
	terrylib_Obj.entities[z].clear();
	terrylib_Obj.entities[z].active = true;
	terrylib_Obj.entities[z].rule = t;
	terrylib_Obj.entities[z].type = t;
	terrylib_Obj.entities[z].xp = xp;
	terrylib_Obj.entities[z].yp = yp;
	if(terrylib_Help.isNumber(para1)) {
		terrylib_Obj.entities[z].vx = Std.parseInt(para1);
	}
	if(terrylib_Help.isNumber(para2)) {
		terrylib_Obj.entities[z].vy = Std.parseInt(para2);
	}
	if(terrylib_Help.isNumber(para3)) {
		terrylib_Obj.entities[z].para = Std.parseInt(para3);
	}
	var _this = terrylib_Obj.entindex;
	terrylib_Obj.templates[__map_reserved[t] != null?_this.getReserved(t):_this.h[t]].create(z,xp,yp,para1,para2,para3);
	return z;
};
terrylib_Obj.randomwalk = function(i,repeat) {
	var dir = terrylib_Help.randomdirection();
	if(gamecontrol_Game.checkforentity(terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(dir),terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(dir)) == -1) {
		terrylib_Obj.entities[i].xp = terrylib_Obj.entities[i].xp + gamecontrol_Localworld.xstep(dir);
		terrylib_Obj.entities[i].yp = terrylib_Obj.entities[i].yp + gamecontrol_Localworld.ystep(dir);
	}
	if(repeat > 0) {
		terrylib_Obj.randomwalk(i,repeat - 1);
	}
};
terrylib_Obj.updateentities = function(i) {
	if(terrylib_Obj.entities[i].active) {
		if(terrylib_Obj.entities[i].statedelay <= 0) {
			var _this = terrylib_Obj.entindex;
			var key = terrylib_Obj.entities[i].rule;
			terrylib_Obj.templates[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]].update(i);
		} else {
			terrylib_Obj.entities[i].statedelay--;
			if(terrylib_Obj.entities[i].statedelay < 0) {
				terrylib_Obj.entities[i].statedelay = 0;
			}
		}
	}
	return true;
};
terrylib_Obj.animate_default = function(i) {
	terrylib_Obj.entities[i].drawframe = terrylib_Obj.entities[i].tile;
};
terrylib_Obj.animateentities = function(i) {
	if(terrylib_Obj.entities[i].active) {
		var _this = terrylib_Obj.entindex;
		var key = terrylib_Obj.entities[i].rule;
		terrylib_Obj.templates[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]].animate(i);
	}
};
terrylib_Obj.entitycollisioncheck = function() {
	var i;
	var j;
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i1 = _g1++;
		if(terrylib_Obj.entities[i1].active) {
			if(terrylib_Obj.entities[i1].checkcollision) {
				var _g3 = 0;
				var _g2 = terrylib_Obj.nentity;
				while(_g3 < _g2) {
					var j1 = _g3++;
					if(terrylib_Obj.entities[j1].active && i1 != j1) {
						var _this = terrylib_Obj.entindex;
						var key = terrylib_Obj.entities[i1].rule;
						terrylib_Obj.templates[__map_reserved[key] != null?_this.getReserved(key):_this.h[key]].collision(i1,j1);
					}
				}
			}
		}
	}
	j = terrylib_Obj.getplayer();
	if(j > -1) {
		if(!terrylib_Obj.testwallsx(j,terrylib_Obj.entities[j].xp | 0,terrylib_Obj.entities[j].yp | 0)) {
			terrylib_Obj.entities[j].yp -= 3;
		}
	}
	terrylib_Obj.activetrigger = "null";
	if(terrylib_Obj.checktrigger() > "null") {
		i = terrylib_Obj.getplayer();
		terrylib_Obj.stopmovement(i);
		gamecontrol_Script.load(terrylib_Obj.activetrigger);
	}
	terrylib_Obj.activedoor = "null";
	terrylib_Obj.activedoor = terrylib_Obj.checkdoor();
	if(terrylib_Obj.activedoor != "null") {
		terrylib_Obj.roomname = terrylib_Obj.blocks[terrylib_Obj.actualdoor].doorname;
		terrylib_Obj.roomnamemode = -1;
	}
};
var terrylib_Rand = function() { };
$hxClasses["terrylib.Rand"] = terrylib_Rand;
terrylib_Rand.__name__ = ["terrylib","Rand"];
terrylib_Rand.pbool = function() {
	return terrylib_Rand.prandom() < 0.5;
};
terrylib_Rand.poccasional = function() {
	return terrylib_Rand.prandom() < 0.2;
};
terrylib_Rand.prare = function() {
	return terrylib_Rand.prandom() < 0.05;
};
terrylib_Rand.psuperrare = function() {
	return terrylib_Rand.prandom() < 0.02;
};
terrylib_Rand.pint = function(from,to) {
	return from + Math.floor((to - from + 1) * terrylib_Rand.prandom());
};
terrylib_Rand.pfloat = function(from,to) {
	return from + (to - from) * terrylib_Rand.prandom();
};
terrylib_Rand.pshuffle = function(arr) {
	if(arr != null) {
		var _g1 = 0;
		var _g = arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var j = Math.floor((arr.length - 1 + 1) * terrylib_Rand.prandom());
			var a = arr[i];
			arr[i] = arr[j];
			arr[j] = a;
		}
	}
	return arr;
};
terrylib_Rand.ppickstring = function(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12) {
	if(s12 == null) {
		s12 = "";
	}
	if(s11 == null) {
		s11 = "";
	}
	if(s10 == null) {
		s10 = "";
	}
	if(s9 == null) {
		s9 = "";
	}
	if(s8 == null) {
		s8 = "";
	}
	if(s7 == null) {
		s7 = "";
	}
	if(s6 == null) {
		s6 = "";
	}
	if(s5 == null) {
		s5 = "";
	}
	if(s4 == null) {
		s4 = "";
	}
	if(s3 == null) {
		s3 = "";
	}
	terrylib_Rand.temp = 2;
	if(s3 != "") {
		terrylib_Rand.temp = 3;
	}
	if(s4 != "") {
		terrylib_Rand.temp = 4;
	}
	if(s5 != "") {
		terrylib_Rand.temp = 5;
	}
	if(s6 != "") {
		terrylib_Rand.temp = 6;
	}
	if(s7 != "") {
		terrylib_Rand.temp = 7;
	}
	if(s8 != "") {
		terrylib_Rand.temp = 8;
	}
	if(s9 != "") {
		terrylib_Rand.temp = 9;
	}
	if(s10 != "") {
		terrylib_Rand.temp = 10;
	}
	if(s11 != "") {
		terrylib_Rand.temp = 11;
	}
	if(s12 != "") {
		terrylib_Rand.temp = 12;
	}
	switch(1 + Math.floor((terrylib_Rand.temp - 1 + 1) * terrylib_Rand.prandom())) {
	case 1:
		return s1;
	case 2:
		return s2;
	case 3:
		return s3;
	case 4:
		return s4;
	case 5:
		return s5;
	case 6:
		return s6;
	case 7:
		return s7;
	case 8:
		return s8;
	case 9:
		return s9;
	case 10:
		return s10;
	case 11:
		return s11;
	case 12:
		return s12;
	}
	return s1;
};
terrylib_Rand.ppickint = function(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12) {
	if(s12 == null) {
		s12 = -10000;
	}
	if(s11 == null) {
		s11 = -10000;
	}
	if(s10 == null) {
		s10 = -10000;
	}
	if(s9 == null) {
		s9 = -10000;
	}
	if(s8 == null) {
		s8 = -10000;
	}
	if(s7 == null) {
		s7 = -10000;
	}
	if(s6 == null) {
		s6 = -10000;
	}
	if(s5 == null) {
		s5 = -10000;
	}
	if(s4 == null) {
		s4 = -10000;
	}
	if(s3 == null) {
		s3 = -10000;
	}
	terrylib_Rand.temp = 2;
	if(s3 != -10000) {
		terrylib_Rand.temp = 3;
	}
	if(s4 != -10000) {
		terrylib_Rand.temp = 4;
	}
	if(s5 != -10000) {
		terrylib_Rand.temp = 5;
	}
	if(s6 != -10000) {
		terrylib_Rand.temp = 6;
	}
	if(s7 != -10000) {
		terrylib_Rand.temp = 7;
	}
	if(s8 != -10000) {
		terrylib_Rand.temp = 8;
	}
	if(s9 != -10000) {
		terrylib_Rand.temp = 9;
	}
	if(s10 != -10000) {
		terrylib_Rand.temp = 10;
	}
	if(s11 != -10000) {
		terrylib_Rand.temp = 11;
	}
	if(s12 != -10000) {
		terrylib_Rand.temp = 12;
	}
	switch(1 + Math.floor((terrylib_Rand.temp - 1 + 1) * terrylib_Rand.prandom())) {
	case 1:
		return s1;
	case 2:
		return s2;
	case 3:
		return s3;
	case 4:
		return s4;
	case 5:
		return s5;
	case 6:
		return s6;
	case 7:
		return s7;
	case 8:
		return s8;
	case 9:
		return s9;
	case 10:
		return s10;
	case 11:
		return s11;
	case 12:
		return s12;
	}
	return s1;
};
terrylib_Rand.ppickfloat = function(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12) {
	if(s12 == null) {
		s12 = -10000;
	}
	if(s11 == null) {
		s11 = -10000;
	}
	if(s10 == null) {
		s10 = -10000;
	}
	if(s9 == null) {
		s9 = -10000;
	}
	if(s8 == null) {
		s8 = -10000;
	}
	if(s7 == null) {
		s7 = -10000;
	}
	if(s6 == null) {
		s6 = -10000;
	}
	if(s5 == null) {
		s5 = -10000;
	}
	if(s4 == null) {
		s4 = -10000;
	}
	if(s3 == null) {
		s3 = -10000;
	}
	terrylib_Rand.temp = 2;
	if(s3 != -10000) {
		terrylib_Rand.temp = 3;
	}
	if(s4 != -10000) {
		terrylib_Rand.temp = 4;
	}
	if(s5 != -10000) {
		terrylib_Rand.temp = 5;
	}
	if(s6 != -10000) {
		terrylib_Rand.temp = 6;
	}
	if(s7 != -10000) {
		terrylib_Rand.temp = 7;
	}
	if(s8 != -10000) {
		terrylib_Rand.temp = 8;
	}
	if(s9 != -10000) {
		terrylib_Rand.temp = 9;
	}
	if(s10 != -10000) {
		terrylib_Rand.temp = 10;
	}
	if(s11 != -10000) {
		terrylib_Rand.temp = 11;
	}
	if(s12 != -10000) {
		terrylib_Rand.temp = 12;
	}
	switch(1 + Math.floor((terrylib_Rand.temp - 1 + 1) * terrylib_Rand.prandom())) {
	case 1:
		return s1;
	case 2:
		return s2;
	case 3:
		return s3;
	case 4:
		return s4;
	case 5:
		return s5;
	case 6:
		return s6;
	case 7:
		return s7;
	case 8:
		return s8;
	case 9:
		return s9;
	case 10:
		return s10;
	case 11:
		return s11;
	case 12:
		return s12;
	}
	return s1;
};
terrylib_Rand.ppick = function(arr) {
	return arr[Math.floor((arr.length - 1 + 1) * terrylib_Rand.prandom())];
};
terrylib_Rand.prandom = function() {
	terrylib_Rand.seed = terrylib_Rand.seed * 16807 % 2147483647;
	return Math.abs(terrylib_Rand.seed / 2147483647);
};
terrylib_Rand.setseed = function(s) {
	terrylib_Rand.seed = Math.abs(s % 2147483647) | 0;
};
terrylib_Rand.initperlin = function(_perlinseed,_perlinoctaves,_falloff) {
	if(_falloff == null) {
		_falloff = 0.5;
	}
	if(_perlinoctaves == null) {
		_perlinoctaves = 4;
	}
	if(_perlinseed == null) {
		_perlinseed = 123;
	}
	terrylib_Rand.perlinoctaves = _perlinoctaves;
	terrylib_Rand.baseFactor = 0.015625;
	terrylib_Rand.seedOffset(_perlinseed);
	terrylib_Rand.octFreqPers(_falloff);
};
terrylib_Rand.perlinfill = function(bitmap,_x,_y,_z,_) {
	var baseX = _x * terrylib_Rand.baseFactor + terrylib_Rand.iXoffset;
	_y = _y * terrylib_Rand.baseFactor + terrylib_Rand.iYoffset;
	_z = _z * terrylib_Rand.baseFactor + terrylib_Rand.iZoffset;
	var width = bitmap.width;
	var height = bitmap.height;
	var p = terrylib_Rand.P;
	var octaves = terrylib_Rand.perlinoctaves;
	var aOctFreq = terrylib_Rand.aOctFreq;
	var aOctPers = terrylib_Rand.aOctPers;
	var _g1 = 0;
	while(_g1 < height) {
		var py = _g1++;
		_x = baseX;
		var _g3 = 0;
		while(_g3 < width) {
			var px = _g3++;
			var s = 0.;
			var _g5 = 0;
			while(_g5 < octaves) {
				var i = _g5++;
				var fFreq = aOctFreq[i];
				var fPers = aOctPers[i];
				var x = _x * fFreq;
				var y = _y * fFreq;
				var z = _z * fFreq;
				var xf = x - x % 1;
				var yf = y - y % 1;
				var zf = z - z % 1;
				var X = (xf | 0) & 255;
				var Y = (yf | 0) & 255;
				var Z = (zf | 0) & 255;
				x -= xf;
				y -= yf;
				z -= zf;
				var u = x * x * x * (x * (x * 6 - 15) + 10);
				var v = y * y * y * (y * (y * 6 - 15) + 10);
				var w = z * z * z * (z * (z * 6 - 15) + 10);
				var A = p[X] + Y;
				var AA = p[A] + Z;
				var AB = p[A + 1] + Z;
				var B = p[X + 1] + Y;
				var BA = p[B] + Z;
				var BB = p[B + 1] + Z;
				var x1 = x - 1;
				var y1 = y - 1;
				var z1 = z - 1;
				var hash = p[BB + 1] & 15;
				var g1 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z1:hash < 4?-y1:hash == 14?-x1:-z1);
				hash = p[AB + 1] & 15;
				var g2 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z1:hash < 4?-y1:hash == 14?-x:-z1);
				hash = p[BA + 1] & 15;
				var g3 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z1:hash < 4?-y:hash == 14?-x1:-z1);
				hash = p[AA + 1] & 15;
				var g4 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z1:hash < 4?-y:hash == 14?-x:-z1);
				hash = p[BB] & 15;
				var g5 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z:hash < 4?-y1:hash == 14?-x1:-z);
				hash = p[AB] & 15;
				var g6 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z:hash < 4?-y1:hash == 14?-x:-z);
				hash = p[BA] & 15;
				var g7 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z:hash < 4?-y:hash == 14?-x1:-z);
				hash = p[AA] & 15;
				var g8 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z:hash < 4?-y:hash == 14?-x:-z);
				g2 += u * (g1 - g2);
				g4 += u * (g3 - g4);
				g6 += u * (g5 - g6);
				g8 += u * (g7 - g8);
				g4 += v * (g2 - g4);
				g8 += v * (g6 - g8);
				s += (g8 + w * (g4 - g8)) * fPers;
			}
			var color = (s * terrylib_Rand.fPersMax + 1) * 128 | 0;
			bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
			_x += terrylib_Rand.baseFactor;
		}
		_y += terrylib_Rand.baseFactor;
	}
};
terrylib_Rand.octFreqPers = function(fPersistence) {
	var fFreq;
	var fPers;
	terrylib_Rand.aOctFreq = [];
	terrylib_Rand.aOctPers = [];
	terrylib_Rand.fPersMax = 0;
	var _g1 = 0;
	var _g = terrylib_Rand.perlinoctaves;
	while(_g1 < _g) {
		var i = _g1++;
		fFreq = Math.pow(2,i);
		fPers = Math.pow(fPersistence,i);
		terrylib_Rand.fPersMax += fPers;
		terrylib_Rand.aOctFreq.push(fFreq);
		terrylib_Rand.aOctPers.push(fPers);
	}
	terrylib_Rand.fPersMax = 1 / terrylib_Rand.fPersMax;
};
terrylib_Rand.seedOffset = function(iSeed) {
	iSeed = iSeed * 16807. % 2147483647 | 0;
	terrylib_Rand.iXoffset = iSeed;
	iSeed = iSeed * 16807. % 2147483647 | 0;
	terrylib_Rand.iYoffset = iSeed;
	iSeed = iSeed * 16807. % 2147483647 | 0;
	terrylib_Rand.iZoffset = iSeed;
};
var terrylib_StraightAstar = function() { };
$hxClasses["terrylib.StraightAstar"] = terrylib_StraightAstar;
terrylib_StraightAstar.__name__ = ["terrylib","StraightAstar"];
terrylib_StraightAstar.onclosedlist = function(t) {
	var _g1 = 0;
	var _g = terrylib_Astar.cln;
	while(_g1 < _g) if(terrylib_Astar.closedlist[_g1++] == t) {
		return true;
	}
	return false;
};
terrylib_StraightAstar.onopenlist = function(t) {
	var _g1 = 0;
	var _g = terrylib_Astar.oln;
	while(_g1 < _g) if(terrylib_Astar.openlist[_g1++] == t) {
		return true;
	}
	return false;
};
terrylib_StraightAstar.blockcheck = function(t) {
	if(terrylib_Astar.contents[t] == 1) {
		return true;
	}
	return false;
};
terrylib_StraightAstar.heuristic = function(t,dir,xp,yp) {
	var x;
	var y;
	var xdist;
	var ydist;
	x = t % terrylib_Astar.mapwidth;
	y = (t - x) / terrylib_Astar.mapwidth | 0;
	xdist = Math.abs(x - xp) | 0;
	ydist = Math.abs(y - yp) | 0;
	if(dir == terrylib_Help.LEFT || dir == terrylib_Help.RIGHT) {
		++xdist;
	}
	return xdist + ydist;
};
terrylib_StraightAstar.checksquare = function(t,dir,cost,xp,yp) {
	if(!terrylib_StraightAstar.onclosedlist(t)) {
		if(terrylib_StraightAstar.onopenlist(t)) {
			if(terrylib_Astar.gcost[t] + cost < terrylib_Astar.gcost[terrylib_Astar.currentsquare]) {
				terrylib_Astar.parentsquare[t] = terrylib_Astar.currentsquare;
				terrylib_Astar.gcost[t] = cost + terrylib_Astar.gcost[terrylib_Astar.currentsquare];
				terrylib_Astar.fcost[t] = cost + terrylib_Astar.gcost[t] + terrylib_StraightAstar.heuristic(t,dir,xp,yp);
			}
		} else if(!terrylib_StraightAstar.blockcheck(t)) {
			terrylib_Astar.openlist[terrylib_Astar.oln] = t;
			terrylib_Astar.oln++;
			terrylib_Astar.parentsquare[t] = terrylib_Astar.currentsquare;
			terrylib_Astar.gcost[t] = cost + terrylib_Astar.gcost[terrylib_Astar.currentsquare];
			terrylib_Astar.fcost[t] = cost + terrylib_Astar.gcost[t] + terrylib_StraightAstar.heuristic(t,dir,xp,yp);
		}
	}
};
terrylib_StraightAstar.pathfind = function(x1,y1,x2,y2) {
	terrylib_Astar.pathx[0] = x1;
	terrylib_Astar.pathy[0] = y1;
	terrylib_StraightAstar.findpath(x2,y2);
};
terrylib_StraightAstar.findpath = function(xp,yp) {
	terrylib_Astar.oln = 1;
	terrylib_Astar.cln = 0;
	terrylib_Astar.currentsquare = terrylib_Astar.pathx[0] + terrylib_Astar.vmult[terrylib_Astar.pathy[0]];
	terrylib_Astar.openlist[0] = terrylib_Astar.currentsquare;
	terrylib_Astar.fcost[terrylib_Astar.currentsquare] = 0;
	terrylib_Astar.gcost[terrylib_Astar.currentsquare] = 0;
	terrylib_Astar.parentsquare[terrylib_Astar.currentsquare] = terrylib_Astar.currentsquare;
	while(terrylib_Astar.oln != 0) {
		terrylib_Astar.currentsquare = 0;
		terrylib_Astar.pathtemp = terrylib_Astar.fcost[terrylib_Astar.openlist[0]];
		var _g1 = 1;
		var _g = terrylib_Astar.oln;
		while(_g1 < _g) {
			var i = _g1++;
			if(terrylib_Astar.fcost[terrylib_Astar.openlist[i]] < terrylib_Astar.pathtemp) {
				terrylib_Astar.pathtemp = terrylib_Astar.fcost[terrylib_Astar.openlist[i]];
				terrylib_Astar.currentsquare = i;
			}
		}
		terrylib_Astar.closedlist[terrylib_Astar.cln] = terrylib_Astar.openlist[terrylib_Astar.currentsquare];
		terrylib_Astar.cln++;
		var _g11 = terrylib_Astar.currentsquare;
		var _g2 = terrylib_Astar.oln - 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			terrylib_Astar.openlist[i1] = terrylib_Astar.openlist[i1 + 1];
		}
		terrylib_Astar.oln--;
		terrylib_Astar.currentsquare = terrylib_Astar.closedlist[terrylib_Astar.cln - 1];
		if(terrylib_Astar.onclosedlist(xp + terrylib_Astar.vmult[yp])) {
			terrylib_Astar.pathx[1] = xp;
			terrylib_Astar.pathy[1] = yp;
			terrylib_Astar.pathtemp = 2;
			while(terrylib_Astar.pathx[terrylib_Astar.pathtemp - 1] != terrylib_Astar.pathx[0] || terrylib_Astar.pathy[terrylib_Astar.pathtemp - 1] != terrylib_Astar.pathy[0]) {
				terrylib_Astar.pathx[terrylib_Astar.pathtemp] = terrylib_Astar.parentsquare[terrylib_Astar.pathx[terrylib_Astar.pathtemp - 1] + terrylib_Astar.vmult[terrylib_Astar.pathy[terrylib_Astar.pathtemp - 1]]];
				terrylib_Astar.pathy[terrylib_Astar.pathtemp] = terrylib_Astar.pathx[terrylib_Astar.pathtemp];
				terrylib_Astar.pathx[terrylib_Astar.pathtemp] = terrylib_Astar.pathx[terrylib_Astar.pathtemp] % terrylib_Astar.mapwidth;
				terrylib_Astar.pathy[terrylib_Astar.pathtemp] = (terrylib_Astar.pathy[terrylib_Astar.pathtemp] - terrylib_Astar.pathx[terrylib_Astar.pathtemp]) / terrylib_Astar.mapwidth | 0;
				terrylib_Astar.pathtemp++;
			}
			terrylib_Astar.pathlength = terrylib_Astar.pathtemp;
			break;
		}
		terrylib_Astar.pathtemp = terrylib_Astar.currentsquare % terrylib_Astar.mapwidth;
		if(terrylib_Astar.currentsquare > terrylib_Astar.mapwidth - 1) {
			terrylib_StraightAstar.checksquare(terrylib_Astar.currentsquare - terrylib_Astar.mapwidth,terrylib_Help.UP,10,xp,yp);
		}
		if(terrylib_Astar.currentsquare > 0 && terrylib_Astar.pathtemp != 0) {
			terrylib_StraightAstar.checksquare(terrylib_Astar.currentsquare - 1,terrylib_Help.LEFT,10,xp,yp);
		}
		if(terrylib_Astar.currentsquare < terrylib_Astar.mapwidth * terrylib_Astar.mapheight && terrylib_Astar.pathtemp != terrylib_Astar.mapwidth - 1) {
			terrylib_StraightAstar.checksquare(terrylib_Astar.currentsquare + 1,terrylib_Help.RIGHT,10,xp,yp);
		}
		if(terrylib_Astar.currentsquare < (terrylib_Astar.mapwidth - 1) * terrylib_Astar.mapheight) {
			terrylib_StraightAstar.checksquare(terrylib_Astar.currentsquare + terrylib_Astar.mapwidth,terrylib_Help.DOWN,10,xp,yp);
		}
	}
};
var terrylib_Textbox = function() { };
$hxClasses["terrylib.Textbox"] = terrylib_Textbox;
terrylib_Textbox.__name__ = ["terrylib","Textbox"];
terrylib_Textbox.init = function() {
	var _g = 0;
	while(_g < 30) {
		++_g;
		terrylib_Textbox.tb.push(new terrylib_util_Textboxclass());
	}
	terrylib_Textbox.ntextbox = 0;
	terrylib_Textbox.txname = "";
	terrylib_Textbox.activetb = -1;
	terrylib_Textbox.keepname = false;
	terrylib_Textbox.nameactive = false;
};
terrylib_Textbox.createtextbox = function(t,xp,yp,c) {
	if(terrylib_Textbox.ntextbox == 0) {
		terrylib_Textbox.m = 0;
		terrylib_Textbox.ntextbox++;
	} else {
		terrylib_Textbox.m = terrylib_Textbox.ntextbox;
		terrylib_Textbox.ntextbox++;
	}
	if(terrylib_Textbox.m < 20) {
		terrylib_Textbox.tb[terrylib_Textbox.m].clear();
		if(t == "") {
			terrylib_Textbox.tb[terrylib_Textbox.m].showname = false;
			terrylib_Textbox.tb[terrylib_Textbox.m].numlines = 0;
		} else {
			terrylib_Textbox.tb[terrylib_Textbox.m].showname = true;
			terrylib_Textbox.tb[terrylib_Textbox.m].line[0] = t;
			terrylib_Textbox.tb[terrylib_Textbox.m].numlines = 1;
		}
		terrylib_Textbox.tb[terrylib_Textbox.m].xp = xp;
		if(xp == -1) {
			terrylib_Textbox.tb[terrylib_Textbox.m].xp = haxegon_Gfx.screenwidthmid - (t.length / 2 + 1) * 8 | 0;
		}
		terrylib_Textbox.tb[terrylib_Textbox.m].yp = yp;
		terrylib_Textbox.tb[terrylib_Textbox.m].col = c;
		terrylib_Textbox.tb[terrylib_Textbox.m].resize();
	}
};
terrylib_Textbox.textboxcleanup = function() {
	var i = terrylib_Textbox.ntextbox - 1;
	while(i >= 0 && !terrylib_Textbox.tb[i].active) {
		terrylib_Textbox.ntextbox--;
		--i;
	}
};
terrylib_Textbox.textboxcenter = function() {
	terrylib_Textbox.tb[terrylib_Textbox.m].centerx();
	terrylib_Textbox.tb[terrylib_Textbox.m].centery();
};
terrylib_Textbox.textboxcenterx = function() {
	terrylib_Textbox.tb[terrylib_Textbox.m].centerx();
};
terrylib_Textbox.textboxwidth = function() {
	return terrylib_Textbox.tb[terrylib_Textbox.m].width;
};
terrylib_Textbox.textboxmove = function(xo,yo) {
	terrylib_Textbox.tb[terrylib_Textbox.m].xp += xo;
	terrylib_Textbox.tb[terrylib_Textbox.m].yp += yo;
};
terrylib_Textbox.textboxmoveto = function(xo) {
	terrylib_Textbox.tb[terrylib_Textbox.m].xp = xo;
};
terrylib_Textbox.textboxcentery = function() {
	terrylib_Textbox.tb[terrylib_Textbox.m].centery();
};
terrylib_Textbox.textboxadjust = function() {
	terrylib_Textbox.tb[terrylib_Textbox.m].adjust();
};
terrylib_Textbox.textboxposition = function(speaker) {
	terrylib_Textbox.speakernum = speaker;
	if(terrylib_Textbox.speakernum > -1) {
		terrylib_Textbox.tb[terrylib_Textbox.m].resize();
		terrylib_Textbox.reddotx = terrylib_Obj.entities[terrylib_Textbox.speakernum].xp - terrylib_World.camerax | 0;
		terrylib_Textbox.reddoty = terrylib_Obj.entities[terrylib_Textbox.speakernum].yp - terrylib_World.cameray - 4 | 0;
		terrylib_Textbox.reddotx -= terrylib_Textbox.tb[terrylib_Textbox.m].width / 2 | 0;
		if(terrylib_Obj.entities[terrylib_Textbox.speakernum].dir == 1) {
			terrylib_Textbox.reddoty += 37;
		} else {
			terrylib_Textbox.reddoty -= terrylib_Textbox.tb[terrylib_Textbox.m].height + 5;
		}
		terrylib_Textbox.tb[terrylib_Textbox.m].xp = terrylib_Textbox.reddotx;
		terrylib_Textbox.tb[terrylib_Textbox.m].yp = terrylib_Textbox.reddoty;
	}
	terrylib_Textbox.tb[terrylib_Textbox.m].adjust();
};
terrylib_Textbox.addline = function(t) {
	terrylib_Textbox.stringbreak = "";
	terrylib_Textbox.stringbreakcounter = 0;
	terrylib_Textbox.stringbreakline = 0;
	while(terrylib_Textbox.stringbreakcounter < haxegon_Text.width(t)) {
		terrylib_Textbox.stringbreak += terrylib_Help.Mid(t,terrylib_Textbox.stringbreakcounter);
		if(haxegon_Text.width(terrylib_Textbox.stringbreak) >= 240) {
			while(terrylib_Help.Mid(terrylib_Textbox.stringbreak,terrylib_Textbox.stringbreak.length - 1) != " ") {
				terrylib_Textbox.stringbreak = terrylib_Help.Mid(terrylib_Textbox.stringbreak,0,terrylib_Textbox.stringbreak.length - 1);
				terrylib_Textbox.stringbreakcounter--;
			}
			terrylib_Textbox.tb[terrylib_Textbox.m].addline(terrylib_Textbox.stringbreak);
			terrylib_Textbox.stringbreakline++;
			terrylib_Textbox.stringbreak = "";
		}
		terrylib_Textbox.stringbreakcounter++;
	}
	if(haxegon_Text.width(terrylib_Textbox.stringbreak) > 0) {
		terrylib_Textbox.tb[terrylib_Textbox.m].addline(terrylib_Textbox.stringbreak);
		terrylib_Textbox.stringbreakline++;
		terrylib_Textbox.stringbreak = "";
	}
};
terrylib_Textbox.starttextbox = function() {
	terrylib_Textbox.tb[terrylib_Textbox.m].textboxstate = terrylib_Textbox.STATE_BOXAPPEARING;
	terrylib_Textbox.tb[terrylib_Textbox.m].lerptimer = "textboxin_" + terrylib_Help.randomletter() + terrylib_Help.randomletter();
	terrylib_Lerp.start(terrylib_Textbox.tb[terrylib_Textbox.m].lerptimer,10);
	terrylib_Textbox.activetb = terrylib_Textbox.m;
};
terrylib_Textbox.textboxremove = function() {
	var _g1 = 0;
	var _g = terrylib_Textbox.ntextbox;
	while(_g1 < _g) terrylib_Textbox.tb[_g1++].remove();
};
terrylib_Textbox.textboxremovefast = function() {
	var _g1 = 0;
	var _g = terrylib_Textbox.ntextbox;
	while(_g1 < _g) terrylib_Textbox.tb[_g1++].removefast();
};
terrylib_Textbox.textboxactive = function() {
	var _g1 = 0;
	var _g = terrylib_Textbox.ntextbox;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Textbox.m != i) {
			terrylib_Textbox.tb[i].remove();
		}
	}
};
terrylib_Textbox.tbprint = function(cline,tbline,tbcursor,x,y,t,r,g,b) {
	if(b == null) {
		b = -1;
	}
	if(g == null) {
		g = -1;
	}
	if(x == -1) {
		x = haxegon_Gfx.screenwidthmid - haxegon_Text.width(t) / 2 | 0;
	}
	if(cline < tbline) {
		if(g == -1 && b == -1) {
			haxegon_Text.display(x,y + cline * 12,t,r);
		} else {
			haxegon_Text.display(x,y + cline * 12,t,haxegon_Col.rgb(r,g,b));
		}
	} else if(cline == tbline) {
		terrylib_Textbox.tempstring = "";
		var _g1 = 0;
		var _g = t.length;
		while(_g1 < _g) {
			var j = _g1++;
			if(tbcursor > j) {
				terrylib_Textbox.tempstring += t.charAt(j);
			}
		}
		if(g == -1 && b == -1) {
			haxegon_Text.display(x,y + cline * 12,terrylib_Textbox.tempstring,haxegon_Col.rgb((r >> 16 & 255) * 0.75 | 0,(r >> 8 & 255) * 0.75 | 0,(r & 255) * 0.75 | 0));
		} else {
			haxegon_Text.display(x,y + cline * 12,terrylib_Textbox.tempstring,haxegon_Col.rgb(r * 0.75 | 0,g * 0.75 | 0,b * 0.75 | 0));
		}
	}
};
terrylib_Textbox.updatetextboxes = function() {
	var _g1 = 0;
	var _g = terrylib_Textbox.ntextbox;
	while(_g1 < _g) {
		var i = _g1++;
		terrylib_Textbox.tb[i].update();
		if(terrylib_Textbox.tb[i].textboxstate == terrylib_Textbox.STATE_TEXTAPPEARING) {
			terrylib_Textbox.talktimer--;
			if(terrylib_Textbox.talktimer <= 0) {
				terrylib_Textbox.talktimer = 4;
			}
		} else if(terrylib_Textbox.tb[i].textboxstate == terrylib_Textbox.STATE_DELETING) {
			terrylib_Textbox.activetb = -1;
			terrylib_Textbox.tb[i].textboxstate = terrylib_Textbox.STATE_READY;
			terrylib_Textbox.tb[i].active = false;
		}
	}
};
var terrylib_World = function() { };
$hxClasses["terrylib.World"] = terrylib_World;
terrylib_World.__name__ = ["terrylib","World"];
terrylib_World.init = function() {
	terrylib_World.mapwidth = 0;
	terrylib_World.mapheight = 0;
	terrylib_World.changecamera("normal");
	terrylib_World.cameratransition = 0;
	terrylib_World.cameratransitionpos = 0;
	terrylib_World.oldcamerax = 0;
	terrylib_World.oldcameray = 0;
	terrylib_World.startscriptname = "";
	terrylib_World.startscript = false;
	terrylib_World.camerax = 0;
	terrylib_World.cameray = 0;
	terrylib_World.camerapointmode = false;
	terrylib_World.camerapointx = 0;
	terrylib_World.camerapointy = 0;
	terrylib_World.disablecamera = false;
	terrylib_World.stage = "";
	terrylib_World.level = "";
	terrylib_util_Tmap.init();
	var _g = 0;
	while(_g < 100) terrylib_World.vmult.push(_g++ * 100 | 0);
	var _g1 = 0;
	while(_g1 < 100) {
		++_g1;
		var _g11 = 0;
		while(_g11 < 100) {
			++_g11;
			terrylib_World.contents.push(0);
			terrylib_World.lighting.push(0);
			terrylib_World.heatmap.push(0);
			terrylib_World.highlight.push(0);
			terrylib_World.laser.push(0);
			terrylib_World.fog.push(0);
			terrylib_World.fire.push(0);
		}
	}
	var _g2 = 0;
	while(_g2 < 20) {
		++_g2;
		var _g12 = 0;
		while(_g12 < 50) {
			++_g12;
			terrylib_World.worldmap.push(0);
			terrylib_World.worldmapfog.push(0);
			terrylib_World.worldmapseed.push(0);
		}
	}
	var _g3 = 0;
	while(_g3 < 2000) {
		++_g3;
		terrylib_World.collisionarray.push(0);
	}
	gamecontrol_Localworld.initcollisionarray();
};
terrylib_World.sc = function(t) {
	terrylib_World.collisionarray[t] = 1;
};
terrylib_World.changecamera = function(newmode) {
	terrylib_World.cameramode = newmode;
};
terrylib_World.centercamera = function(xp,yp) {
	terrylib_World.camerax = xp - haxegon_Gfx.screenwidth / 2 | 0;
	terrylib_World.cameray = yp - haxegon_Gfx.screenheight / 2 | 0;
	if(terrylib_World.camerax < 0) {
		terrylib_World.camerax = 0;
	}
	if(terrylib_World.cameray < 0) {
		terrylib_World.cameray = 0;
	}
	if(terrylib_World.camerax > (terrylib_World.mapwidth - gamecontrol_Draw.screentilewidth) * 12) {
		terrylib_World.camerax = (terrylib_World.mapwidth - gamecontrol_Draw.screentilewidth) * 12 - 1;
	}
	if(terrylib_World.cameray > (terrylib_World.mapheight - gamecontrol_Draw.screentileheight) * 12) {
		terrylib_World.cameray = (terrylib_World.mapheight - gamecontrol_Draw.screentileheight) * 12 - 1;
	}
};
terrylib_World.cameracontrol = function() {
	switch(terrylib_World.cameramode) {
	case "disable":case "none":
		terrylib_World.disablecamera = true;
		break;
	case "normal":
		terrylib_World.disablecamera = false;
		var i = terrylib_Obj.getplayer();
		if(terrylib_World.camerapointmode || i < 0) {
			if(terrylib_World.cameratransition > 0) {
				terrylib_World.temp = terrylib_World.oldcamerax + haxegon_Gfx.screenwidth / 2 - (terrylib_World.oldcamerax - (terrylib_World.camerapointx * 12 - haxegon_Gfx.screenwidth / 2)) * terrylib_World.cameratransitionpos / terrylib_World.cameratransition | 0;
				terrylib_World.temp2 = terrylib_World.oldcameray + haxegon_Gfx.screenheight / 2 - (terrylib_World.oldcameray - (terrylib_World.camerapointy * 12 - haxegon_Gfx.screenheight / 2)) * terrylib_World.cameratransitionpos / terrylib_World.cameratransition | 0;
				terrylib_World.centercamera(terrylib_World.temp,terrylib_World.temp2);
				terrylib_World.cameratransitionpos++;
				if(terrylib_World.cameratransitionpos >= terrylib_World.cameratransition) {
					terrylib_World.cameratransition = 0;
					terrylib_World.cameratransitionpos = 0;
				}
			} else {
				terrylib_World.centercamera(terrylib_World.camerapointx * 12,terrylib_World.camerapointy * 12);
			}
		} else if(terrylib_World.cameratransition > 0) {
			terrylib_World.temp = terrylib_World.oldcamerax + haxegon_Gfx.screenwidth / 2 - (terrylib_World.oldcamerax - (terrylib_Obj.entities[i].xp - haxegon_Gfx.screenwidth / 2)) * terrylib_World.cameratransitionpos / terrylib_World.cameratransition | 0;
			terrylib_World.temp2 = terrylib_World.oldcameray + haxegon_Gfx.screenheight / 2 - (terrylib_World.oldcameray - (terrylib_Obj.entities[i].yp - haxegon_Gfx.screenheight / 2)) * terrylib_World.cameratransitionpos / terrylib_World.cameratransition | 0;
			terrylib_World.centercamera(terrylib_World.temp,terrylib_World.temp2);
			terrylib_World.cameratransitionpos++;
			if(terrylib_World.cameratransitionpos >= terrylib_World.cameratransition) {
				terrylib_World.cameratransition = 0;
				terrylib_World.cameratransitionpos = 0;
			}
		} else {
			terrylib_World.centercamera(terrylib_Obj.entities[i].xp | 0,terrylib_Obj.entities[i].yp | 0);
		}
		break;
	}
};
terrylib_World.changemapsize = function(x,y) {
	terrylib_World.mapwidth = x;
	terrylib_World.mapheight = y;
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var i = _g1++;
		terrylib_World.vmult[i] = i * terrylib_World.mapwidth;
	}
};
terrylib_World.setrowcollision = function(t) {
	var _g = 0;
	while(_g < 20) terrylib_World.collisionarray[t * 20 + _g++] = 1;
};
terrylib_World.collide = function(x,y) {
	if(x < 0 || y < 0 || x >= terrylib_World.mapwidth || y >= terrylib_World.mapheight) {
		return false;
	}
	if(terrylib_World.collisionarray[terrylib_World.contents[x + terrylib_World.vmult[y]]] == 1) {
		return true;
	}
	return false;
};
terrylib_World.fillcontent = function() {
	var i;
	var j;
	var t;
	var xp = 0;
	var yp = 0;
	var w = 0;
	var h = 0;
	var trig = "null";
	var destx = 0;
	var desty = 0;
	var doorname = "";
	var type;
	var para1;
	var para2;
	var para3;
	i = -3;
	j = 0;
	terrylib_World.mapheight = 100;
	terrylib_World.startindex = 0;
	terrylib_World.endindex = 0;
	while(j < terrylib_World.mapheight) {
		terrylib_World.currentchar = HxOverrides.substr(terrylib_World.levelstring,terrylib_World.endindex,1);
		if(terrylib_World.currentchar == ",") {
			if(i < 0) {
				if(i == -3) {
					terrylib_World.mapwidth = Std.parseInt(HxOverrides.substr(terrylib_World.levelstring,terrylib_World.startindex,terrylib_World.endindex - terrylib_World.startindex));
				}
				if(i == -2) {
					terrylib_World.mapheight = Std.parseInt(HxOverrides.substr(terrylib_World.levelstring,terrylib_World.startindex,terrylib_World.endindex - terrylib_World.startindex));
					terrylib_World.changemapsize(terrylib_World.mapwidth,terrylib_World.mapheight);
				}
				if(i == -1) {
					terrylib_World.tileset = HxOverrides.substr(terrylib_World.levelstring,terrylib_World.startindex,terrylib_World.endindex - terrylib_World.startindex);
					gamecontrol_Draw.screentilewidth = haxegon_Gfx.screenwidth / 12 | 0;
					gamecontrol_Draw.screentileheight = haxegon_Gfx.screenheight / 12 | 0;
				}
			} else {
				terrylib_World.contents[i + terrylib_World.vmult[j]] = Std.parseInt(HxOverrides.substr(terrylib_World.levelstring,terrylib_World.startindex,terrylib_World.endindex - terrylib_World.startindex));
			}
			terrylib_World.endindex++;
			terrylib_World.startindex = terrylib_World.endindex;
			++i;
			if(i >= terrylib_World.mapwidth) {
				i = 0;
				++j;
			}
		}
		terrylib_World.endindex++;
	}
	i = terrylib_World.popint();
	while(i > 0) {
		t = terrylib_World.popint();
		xp = terrylib_World.popint();
		yp = terrylib_World.popint();
		w = terrylib_World.popint();
		h = terrylib_World.popint();
		trig = terrylib_World.popstring();
		destx = terrylib_World.popint();
		desty = terrylib_World.popint();
		doorname = terrylib_World.popstring();
		terrylib_Obj.createblock(t,xp,yp,w,h,trig,destx,desty,doorname);
		--i;
	}
	terrylib_Obj.ninitentities = 0;
	i = terrylib_World.popint();
	while(i > 0) {
		xp = terrylib_World.popint();
		yp = terrylib_World.popint();
		type = terrylib_World.popstring();
		para1 = terrylib_World.popstring();
		para2 = terrylib_World.popstring();
		para3 = terrylib_World.popstring();
		terrylib_Obj.createinitentity(xp,yp,type,para1,para2,para3);
		--i;
	}
	var _g1 = 0;
	var _g = terrylib_Obj.ninitentities;
	while(_g1 < _g) {
		var i1 = _g1++;
		terrylib_Obj.initentities[i1].entity = terrylib_Obj.createentity(terrylib_Obj.initentities[i1].xp,terrylib_Obj.initentities[i1].yp,terrylib_Obj.initentities[i1].rule,terrylib_Obj.initentities[i1].para1,terrylib_Obj.initentities[i1].para2,terrylib_Obj.initentities[i1].para3);
	}
};
terrylib_World.popint = function() {
	var t;
	while(terrylib_World.endindex < terrylib_World.levelstring.length) {
		terrylib_World.currentchar = HxOverrides.substr(terrylib_World.levelstring,terrylib_World.endindex,1);
		if(terrylib_World.currentchar == ",") {
			t = Std.parseInt(HxOverrides.substr(terrylib_World.levelstring,terrylib_World.startindex,terrylib_World.endindex - terrylib_World.startindex));
			terrylib_World.endindex++;
			terrylib_World.startindex = terrylib_World.endindex;
			return t;
		}
		terrylib_World.endindex++;
	}
	return 0;
};
terrylib_World.popstring = function() {
	var t;
	while(terrylib_World.endindex < terrylib_World.levelstring.length) {
		terrylib_World.currentchar = HxOverrides.substr(terrylib_World.levelstring,terrylib_World.endindex,1);
		if(terrylib_World.currentchar == ",") {
			t = Std.string(HxOverrides.substr(terrylib_World.levelstring,terrylib_World.startindex,terrylib_World.endindex - terrylib_World.startindex));
			terrylib_World.endindex++;
			terrylib_World.startindex = terrylib_World.endindex;
			return t;
		}
		terrylib_World.endindex++;
	}
	return "null";
};
terrylib_World.anydoor = function(t) {
	if(t == gamecontrol_Localworld.LOCKEDDOOR) {
		return true;
	}
	if(t == gamecontrol_Localworld.DOOR) {
		return true;
	}
	if(t == gamecontrol_Localworld.OPENDOOR) {
		return true;
	}
	if(t == gamecontrol_Localworld.CONSIDERLOCKEDDOOR) {
		return true;
	}
	if(t == gamecontrol_Localworld.CONSIDERLOCKEDEXIT_A) {
		return true;
	}
	if(t == gamecontrol_Localworld.CONSIDERLOCKEDEXIT_B) {
		return true;
	}
	return false;
};
terrylib_World.placetile = function(xp,yp,t) {
	if(terrylib_Help.inboxw(xp,yp,0,0,terrylib_World.mapwidth,terrylib_World.mapheight)) {
		terrylib_World.contents[xp + terrylib_World.vmult[yp]] = t;
	}
};
terrylib_World.at = function(xp,yp,xoff,yoff) {
	if(yoff == null) {
		yoff = 0;
	}
	if(xoff == null) {
		xoff = 0;
	}
	xp *= 12;
	xp += xoff;
	xoff = xp % 12;
	xp = (xp - xoff) / 12 | 0;
	yp *= 12;
	yp += yoff;
	yoff = yp % 12;
	yp = (yp - yoff) / 12 | 0;
	if(xp >= 0 && yp >= 0 && xp < terrylib_World.mapwidth && yp < terrylib_World.mapheight) {
		return terrylib_World.contents[xp + terrylib_World.vmult[yp]];
	}
	return 0;
};
terrylib_World.change = function(t) {
	var s = terrylib_Help.getroot(t,"_");
	t = terrylib_Help.getbranch(t,"_");
	terrylib_Obj.removeallblocks();
	var _g1 = 0;
	var _g = terrylib_Obj.nentity;
	while(_g1 < _g) {
		var i = _g1++;
		if(terrylib_Obj.entities[i].rule != "player") {
			terrylib_Obj.entities[i].active = false;
		}
	}
	terrylib_Obj.cleanup();
	var i1 = terrylib_Obj.getplayer();
	terrylib_Obj.entities[i1].xp = terrylib_Obj.doortox * 12;
	terrylib_Obj.entities[i1].yp = terrylib_Obj.doortoy * 12;
	terrylib_Obj.entities[i1].vx = 0;
	terrylib_Obj.entities[i1].vy = 0;
	gamecontrol_Localworld.loadlevel(s,t);
};
terrylib_World.loadmapfromstring = function(s,t,givenlevelstring) {
	if(s != terrylib_World.stage) {
		terrylib_World.stage = s;
	}
	if(t != terrylib_World.level) {
		terrylib_World.level = t;
	}
	terrylib_World.levelstring = givenlevelstring;
	terrylib_World.fillcontent();
};
terrylib_World.loadmap = function(stagename,levelname) {
	return false;
};
terrylib_World.clearmap = function() {
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) terrylib_World.contents[_g3++ + terrylib_World.vmult[j]] = 1;
	}
};
terrylib_World.savemap = function(stagename,levelname) {
	if(stagename != terrylib_World.stage) {
		terrylib_World.stage = stagename;
	}
	if(levelname != terrylib_World.level) {
		terrylib_World.level = levelname;
	}
	if(terrylib_World.stage == "") {
		terrylib_World.filename = "levels/" + levelname + ".txt";
	} else {
		terrylib_World.filename = "levels/" + terrylib_World.stage + "/" + levelname + ".txt";
	}
	terrylib_World.levelstring = "";
	terrylib_World.levelstring += Std.string(terrylib_World.mapwidth) + "," + Std.string(terrylib_World.mapheight) + "," + terrylib_World.tileset + ",\n";
	var _g1 = 0;
	var _g = terrylib_World.mapheight;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = terrylib_World.mapwidth;
		while(_g3 < _g2) {
			terrylib_World.levelstring += Std.string(terrylib_World.contents[_g3++ + terrylib_World.vmult[j]]);
			terrylib_World.levelstring += ",";
		}
		terrylib_World.levelstring += "\n";
	}
	if(terrylib_Obj.nblocks > 0) {
		terrylib_World.levelstring += Std.string(terrylib_Obj.activeblocks()) + ",\n";
		var _g11 = 0;
		var _g4 = terrylib_Obj.nblocks;
		while(_g11 < _g4) {
			var i = _g11++;
			if(terrylib_Obj.blocks[i].active) {
				terrylib_World.levelstring += terrylib_Obj.blocks[i].type + ",";
				terrylib_World.levelstring += terrylib_Obj.blocks[i].xp + ",";
				terrylib_World.levelstring += terrylib_Obj.blocks[i].yp + ",";
				terrylib_World.levelstring += terrylib_Obj.blocks[i].wp + ",";
				terrylib_World.levelstring += terrylib_Obj.blocks[i].hp + ",";
				terrylib_World.levelstring += terrylib_Obj.blocks[i].trigger + ",";
				terrylib_World.levelstring += terrylib_Obj.blocks[i].destx + ",";
				terrylib_World.levelstring += terrylib_Obj.blocks[i].desty + ",";
				terrylib_World.levelstring += terrylib_Obj.blocks[i].doorname + ",";
				terrylib_World.levelstring += "\n";
			}
		}
	} else {
		terrylib_World.levelstring += "0,\n";
	}
	if(terrylib_Obj.ninitentities > 0) {
		terrylib_World.levelstring += Std.string(terrylib_Obj.ninitentities | 0) + ",\n";
		var _g12 = 0;
		var _g5 = terrylib_Obj.ninitentities;
		while(_g12 < _g5) {
			var i1 = _g12++;
			terrylib_World.levelstring += Std.string(terrylib_Obj.initentities[i1].xp | 0) + ",";
			terrylib_World.levelstring += Std.string(terrylib_Obj.initentities[i1].yp | 0) + ",";
			terrylib_World.levelstring += terrylib_Obj.initentities[i1].rule + ",";
			terrylib_World.levelstring += terrylib_Obj.initentities[i1].para1 + ",";
			terrylib_World.levelstring += terrylib_Obj.initentities[i1].para2 + ",";
			terrylib_World.levelstring += terrylib_Obj.initentities[i1].para3 + ",";
			terrylib_World.levelstring += "\n";
		}
	} else {
		terrylib_World.levelstring += "0,\n";
	}
	return terrylib_util_Fileaccess.write_levelstring(terrylib_World.filename);
};
var terrylib_util_Blockclass = function() {
	this.clear();
};
$hxClasses["terrylib.util.Blockclass"] = terrylib_util_Blockclass;
terrylib_util_Blockclass.__name__ = ["terrylib","util","Blockclass"];
terrylib_util_Blockclass.prototype = {
	clear: function() {
		this.active = false;
		this.type = 0;
		this.trigger = "null";
		this.xp = 0;
		this.yp = 0;
		this.wp = 0;
		this.hp = 0;
		this.rect = new openfl_geom_Rectangle();
		this.rect.x = this.xp;
		this.rect.y = this.yp;
		this.rect.width = this.wp;
		this.rect.height = this.hp;
		this.destx = 0;
		this.desty = 0;
		this.doorname = "";
	}
	,rectset: function(xi,yi,wi,hi) {
		this.rect.x = xi;
		this.rect.y = yi;
		this.rect.width = wi;
		this.rect.height = hi;
	}
	,active: null
	,rect: null
	,type: null
	,trigger: null
	,destx: null
	,desty: null
	,xp: null
	,yp: null
	,wp: null
	,hp: null
	,doorname: null
	,__class__: terrylib_util_Blockclass
};
var terrylib_util_Easing = function() { };
$hxClasses["terrylib.util.Easing"] = terrylib_util_Easing;
terrylib_util_Easing.__name__ = ["terrylib","util","Easing"];
terrylib_util_Easing.easeLinear = function(t,b,c,d) {
	return c * t / d + b;
};
terrylib_util_Easing.easeInSine = function(t,b,c,d) {
	return -c * Math.cos(t / d * terrylib_util_Easing.PI_D2) + c + b;
};
terrylib_util_Easing.easeOutSine = function(t,b,c,d) {
	return c * Math.sin(t / d * terrylib_util_Easing.PI_D2) + b;
};
terrylib_util_Easing.easeInOutSine = function(t,b,c,d) {
	return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
};
terrylib_util_Easing.easeInQuint = function(t,b,c,d) {
	t /= d;
	return c * t * t * t * t * t + b;
};
terrylib_util_Easing.easeOutQuint = function(t,b,c,d) {
	t = t / d - 1;
	return c * (t * t * t * t * t + 1) + b;
};
terrylib_util_Easing.easeInOutQuint = function(t,b,c,d) {
	t /= d / 2;
	if(t < 1) {
		return c / 2 * t * t * t * t * t + b;
	}
	var tmp = c / 2;
	t -= 2;
	return tmp * (t * t * t * t * t + 2) + b;
};
terrylib_util_Easing.easeInQuart = function(t,b,c,d) {
	t /= d;
	return c * t * t * t * t + b;
};
terrylib_util_Easing.easeOutQuart = function(t,b,c,d) {
	t = t / d - 1;
	return -c * (t * t * t * t - 1) + b;
};
terrylib_util_Easing.easeInOutQuart = function(t,b,c,d) {
	t /= d / 2;
	if(t < 1) {
		return c / 2 * t * t * t * t + b;
	}
	var tmp = -c / 2;
	t -= 2;
	return tmp * (t * t * t * t - 2) + b;
};
terrylib_util_Easing.easeInQuad = function(t,b,c,d) {
	t /= d;
	return c * t * t + b;
};
terrylib_util_Easing.easeOutQuad = function(t,b,c,d) {
	t /= d;
	return -c * t * (t - 2) + b;
};
terrylib_util_Easing.easeInOutQuad = function(t,b,c,d) {
	t /= d / 2;
	if(t < 1) {
		return c / 2 * t * t + b;
	}
	return -c / 2 * (--t * (t - 2) - 1) + b;
};
terrylib_util_Easing.easeInExpo = function(t,b,c,d) {
	if(t == 0) {
		return b;
	} else {
		return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
};
terrylib_util_Easing.easeOutExpo = function(t,b,c,d) {
	if(t == d) {
		return b + c;
	} else {
		return c * (-Math.pow(2,-10 * t / d) + 1) + b;
	}
};
terrylib_util_Easing.easeInOutExpo = function(t,b,c,d) {
	if(t == 0) {
		return b;
	}
	if(t == d) {
		return b + c;
	}
	t /= d / 2;
	if(t < 1) {
		return c / 2 * Math.pow(2,10 * (t - 1)) + b;
	}
	return c / 2 * (-Math.pow(2,-10 * --t) + 2) + b;
};
terrylib_util_Easing.easeInCircular = function(t,b,c,d) {
	t /= d;
	return -c * (Math.sqrt(1 - t * t) - 1) + b;
};
terrylib_util_Easing.easeOutCircular = function(t,b,c,d) {
	t = t / d - 1;
	return c * Math.sqrt(1 - t * t) + b;
};
terrylib_util_Easing.easeInOutCircular = function(t,b,c,d) {
	t /= d / 2;
	if(t < 1) {
		return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
	}
	var tmp = c / 2;
	t -= 2;
	return tmp * (Math.sqrt(1 - t * t) + 1) + b;
};
terrylib_util_Easing.easeInBack = function(t,b,c,d,s) {
	if(s == null) {
		s = 1.70158;
	}
	t /= d;
	return c * t * t * ((s + 1) * t - s) + b;
};
terrylib_util_Easing.easeOutBack = function(t,b,c,d,s) {
	if(s == null) {
		s = 1.70158;
	}
	t = t / d - 1;
	return c * (t * t * ((s + 1) * t + s) + 1) + b;
};
terrylib_util_Easing.easeInOutBack = function(t,b,c,d,s) {
	if(s == null) {
		s = 1.70158;
	}
	t /= d / 2;
	if(t < 1) {
		var tmp = c / 2;
		var tmp1 = t * t;
		s *= 1.525;
		return tmp * (tmp1 * ((s + 1) * t - s)) + b;
	}
	var tmp2 = c / 2;
	t -= 2;
	var tmp3 = t * t;
	s *= 1.525;
	return tmp2 * (tmp3 * ((s + 1) * t + s) + 2) + b;
};
terrylib_util_Easing.easeInBounce = function(t,b,c,d) {
	return c - terrylib_util_Easing.easeOutBounce(d - t,0,c,d) + b;
};
terrylib_util_Easing.easeOutBounce = function(t,b,c,d) {
	t /= d;
	if(t < 0.36363636363636365) {
		return c * (7.5625 * t * t) + b;
	} else if(t < 0.72727272727272729) {
		t -= 0.54545454545454541;
		return c * (7.5625 * t * t + .75) + b;
	} else if(t < 0.90909090909090906) {
		t -= 0.81818181818181823;
		return c * (7.5625 * t * t + .9375) + b;
	} else {
		t -= 0.95454545454545459;
		return c * (7.5625 * t * t + .984375) + b;
	}
};
terrylib_util_Easing.easeInOutBounce = function(t,b,c,d) {
	if(t < d / 2) {
		return terrylib_util_Easing.easeInBounce(t * 2,0,c,d) * .5 + b;
	} else {
		return terrylib_util_Easing.easeOutBounce(t * 2 - d,0,c,d) * .5 + c * .5 + b;
	}
};
terrylib_util_Easing.easeInCubic = function(t,b,c,d) {
	t /= d;
	return c * t * t * t + b;
};
terrylib_util_Easing.easeOutCubic = function(t,b,c,d) {
	t = t / d - 1;
	return c * (t * t * t + 1) + b;
};
terrylib_util_Easing.easeInOutCubic = function(t,b,c,d) {
	t /= d / 2;
	if(t < 1) {
		return c / 2 * t * t * t + b;
	}
	var tmp = c / 2;
	t -= 2;
	return tmp * (t * t * t + 2) + b;
};
var terrylib_util_Fileaccess = function() { };
$hxClasses["terrylib.util.Fileaccess"] = terrylib_util_Fileaccess;
terrylib_util_Fileaccess.__name__ = ["terrylib","util","Fileaccess"];
terrylib_util_Fileaccess.init = function() {
	var _g = 0;
	while(_g < 2000) {
		++_g;
		terrylib_util_Fileaccess.directorylisting.push("");
		terrylib_util_Fileaccess.subdirectorylisting.push("");
	}
	terrylib_util_Fileaccess.directorysize = 0;
	terrylib_util_Fileaccess.subdirectorysize = 0;
};
terrylib_util_Fileaccess.write_levelstring = function(filename) {
	haxe_Log.trace("Error (in write_levelstring): Cannot access files in flash",{ fileName : "Fileaccess.hx", lineNumber : 240, className : "terrylib.util.Fileaccess", methodName : "write_levelstring"});
	return false;
};
terrylib_util_Fileaccess.createdirectory = function(stagename,newdir) {
	haxe_Log.trace("Error (in createdirectory): Cannot access files in flash",{ fileName : "Fileaccess.hx", lineNumber : 245, className : "terrylib.util.Fileaccess", methodName : "createdirectory"});
};
terrylib_util_Fileaccess.getdirectorylisting = function(stagename) {
	haxe_Log.trace("Error (in getdirectorylisting): Cannot access files in flash",{ fileName : "Fileaccess.hx", lineNumber : 249, className : "terrylib.util.Fileaccess", methodName : "getdirectorylisting"});
};
terrylib_util_Fileaccess.loadscriptfile = function(filename) {
	haxe_Log.trace("Error (in loadscriptfile): Cannot access files in flash",{ fileName : "Fileaccess.hx", lineNumber : 253, className : "terrylib.util.Fileaccess", methodName : "loadscriptfile"});
	return false;
};
terrylib_util_Fileaccess.createscriptcache = function() {
	haxe_Log.trace("Error (in createscriptcache): Cannot access files in flash",{ fileName : "Fileaccess.hx", lineNumber : 258, className : "terrylib.util.Fileaccess", methodName : "createscriptcache"});
	return false;
};
terrylib_util_Fileaccess.createlevelcache = function() {
	haxe_Log.trace("Error (in createlevelcache): Cannot access files in flash",{ fileName : "Fileaccess.hx", lineNumber : 263, className : "terrylib.util.Fileaccess", methodName : "createlevelcache"});
	return false;
};
var terrylib_util_Initentclass = function() {
	this.clear();
};
$hxClasses["terrylib.util.Initentclass"] = terrylib_util_Initentclass;
terrylib_util_Initentclass.__name__ = ["terrylib","util","Initentclass"];
terrylib_util_Initentclass.prototype = {
	clear: function() {
		this.xp = 0;
		this.yp = 0;
		this.rule = "null";
		this.para1 = "";
		this.para2 = "";
		this.para3 = "";
		this.entity = -1;
		this.drawframe = 0;
		this.para1_selection = 0;
		this.para2_selection = 0;
		this.para3_selection = 0;
	}
	,xp: null
	,yp: null
	,rule: null
	,para1: null
	,para2: null
	,para3: null
	,para1_selection: null
	,para2_selection: null
	,para3_selection: null
	,entity: null
	,drawframe: null
	,__class__: terrylib_util_Initentclass
};
var terrylib_util_Particleclass = function() {
	this.clear();
};
$hxClasses["terrylib.util.Particleclass"] = terrylib_util_Particleclass;
terrylib_util_Particleclass.__name__ = ["terrylib","util","Particleclass"];
terrylib_util_Particleclass.prototype = {
	clear: function() {
		this.active = false;
		this.type = "null";
		this.tile = 0;
		this.life = 0;
		this.colour = 0;
		this.state = 0;
		this.statedelay = 0;
		this.xp = 0;
		this.yp = 0;
		this.ax = 0;
		this.ay = 0;
		this.vx = 0;
		this.vy = 0;
	}
	,active: null
	,type: null
	,tile: null
	,life: null
	,colour: null
	,state: null
	,statedelay: null
	,xp: null
	,yp: null
	,ax: null
	,ay: null
	,vx: null
	,vy: null
	,__class__: terrylib_util_Particleclass
};
var terrylib_util_Textboxclass = function() {
	this.line = [];
	this.firstcreate();
};
$hxClasses["terrylib.util.Textboxclass"] = terrylib_util_Textboxclass;
terrylib_util_Textboxclass.__name__ = ["terrylib","util","Textboxclass"];
terrylib_util_Textboxclass.prototype = {
	firstcreate: function() {
		var _g = 0;
		while(_g < 10) {
			++_g;
			this.line.push("");
		}
		this.xp = 0;
		this.yp = 0;
		this.width = 0;
		this.height = 0;
		this.numlines = 0;
		this.linewidth = 0;
		this.lerp = 0;
		this.active = false;
		this.showname = true;
		this.tbcursor = 0;
		this.tbline = 1;
		this.textboxstate = terrylib_Textbox.STATE_READY;
		this.col = 0;
	}
	,clear: function() {
		var _g = 0;
		while(_g < 12) this.line[_g++] = "";
		this.textrect = new openfl_geom_Rectangle();
		this.xp = 0;
		this.yp = 0;
		this.width = 0;
		this.height = 0;
		this.numlines = 1;
		this.linewidth = 0;
		this.lerp = 0;
		this.active = true;
		this.showname = true;
		this.tbcursor = 0;
		this.tbline = 1;
		this.textboxstate = terrylib_Textbox.STATE_READY;
	}
	,centerx: function() {
		this.resize();
		this.xp = haxegon_Gfx.screenwidth / 2 - this.width / 2 | 0;
		this.resize();
	}
	,centery: function() {
		this.resize();
		this.yp = haxegon_Gfx.screenheight / 2 - this.height / 2 | 0;
		this.resize();
	}
	,adjust: function() {
		this.resize();
		if(this.xp < 3) {
			this.xp = 3;
		}
		if(this.yp < 3) {
			this.yp = 3;
		}
		if(this.xp + this.width > haxegon_Gfx.screenwidth - 3) {
			this.xp = haxegon_Gfx.screenwidth - 3 - this.width;
		}
		if(this.yp + this.height > haxegon_Gfx.screenheight - 3) {
			this.yp = haxegon_Gfx.screenheight - 3 - this.height;
		}
		this.resize();
	}
	,update: function() {
		if(this.textboxstate == terrylib_Textbox.STATE_BOXAPPEARING) {
			this.lerp = terrylib_Lerp.to_float(0.0,1.0,this.lerptimer,"back_out");
			if(terrylib_Lerp.justfinished(this.lerptimer)) {
				this.lerp = 1;
				this.textboxstate = terrylib_Textbox.STATE_TEXTAPPEARING;
				this.tbcursor = 0;
				this.tbline = 0;
			}
		} else if(this.textboxstate == terrylib_Textbox.STATE_TEXTAPPEARING) {
			this.tbcursor += 3;
			if(this.tbcursor > this.line[this.tbline].length) {
				this.tbline++;
				this.tbcursor = 0;
				if(this.tbline >= this.numlines) {
					this.textboxstate = terrylib_Textbox.STATE_VISABLE;
				}
			}
		} else if(this.textboxstate == terrylib_Textbox.STATE_DISAPPEARING) {
			this.lerp -= .2;
			if(this.lerp <= 0) {
				this.lerp = 0;
			}
			if(this.lerp <= 0) {
				this.lerp = 0;
				this.textboxstate = terrylib_Textbox.STATE_DELETING;
				this.tbcursor = 0;
				this.tbline = 0;
			}
		}
	}
	,remove: function() {
		this.textboxstate = terrylib_Textbox.STATE_DISAPPEARING;
		this.lerp = 1;
	}
	,removefast: function() {
		this.textboxstate = terrylib_Textbox.STATE_DISAPPEARING;
		this.lerp = 0.4;
	}
	,resize: function() {
		this.max = 0;
		var _g1 = 0;
		var _g = this.numlines;
		while(_g1 < _g) {
			var iter = _g1++;
			if(haxegon_Text.width(this.line[iter]) > this.max) {
				this.max = haxegon_Text.width(this.line[iter]) | 0;
			}
		}
		this.linewidth = this.max;
		if(this.showname) {
			this.width = this.max + 44;
		} else {
			this.width = this.max + 32;
		}
		this.height = this.numlines * 12 + 16;
	}
	,addline: function(t) {
		this.line[this.numlines] = t;
		this.numlines++;
		this.resize();
		if(this.numlines >= 12) {
			this.numlines = 0;
		}
	}
	,line: null
	,xp: null
	,yp: null
	,linewidth: null
	,width: null
	,height: null
	,numlines: null
	,textrect: null
	,active: null
	,showname: null
	,tbcursor: null
	,tbline: null
	,textboxstate: null
	,col: null
	,lerp: null
	,lerptimer: null
	,iter: null
	,max: null
	,__class__: terrylib_util_Textboxclass
};
var terrylib_util_Tmap = function() { };
$hxClasses["terrylib.util.Tmap"] = terrylib_util_Tmap;
terrylib_util_Tmap.__name__ = ["terrylib","util","Tmap"];
terrylib_util_Tmap.init = function() {
	var _g = 0;
	while(_g < 100) {
		++_g;
		terrylib_util_Tmap.contents.push("");
	}
	terrylib_util_Tmap.index = 0;
};
terrylib_util_Tmap.reset = function() {
	terrylib_util_Tmap.index = 0;
};
terrylib_util_Tmap.push = function(t) {
	terrylib_util_Tmap.contents[terrylib_util_Tmap.index] = t;
	terrylib_util_Tmap.index++;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
Buildconfig.showtraces = false;
GameInput.heldkeys = [0,0,0,0];
Logic.endingstate = "start";
Logic.endingstatepara = 0;
Logic.endingstatedelay = 0;
Logic.turndelay = 0;
Perlinarray.perlinnoise = [[144,145,146,147,148,148,149,150,149,147,148,149,147,146,143,141,141,140,138,137,138,139,141,143,145,147,146,146,146,147,147,146,145,142,142,141,139,137,135,133,131,130,129,131,133,136,136,134,134,134,132,130,130,129,129,130,129,129,130,131,133,134,135,138,140,142,142,144,146,148,150,151,153,156,158,159,159,159,159,159,161,163,163,162,161,159,157,157,155,154,153,150,148,147,146,146,147,148,148,146,144,143,141,140,139,137,136,136,133,131,131,130,127,126,127,129,130,131,134,134,134,132,131,132,130,129,129,130,133,136,139,139,140,139,139,141,142,142,142,141,139,136,134,132,130,129,125,121,119,116,115,115,116,118,119,119,117,117,117,117,116,115,114,115,116,116,116,116,114,113,112,111,113,114,116,118,120,123,125,127,131,133,135,136,139,143,143,143,146,148,147,148,151,154,156,158,162,166,169,172,173,174,175,174,174,174,174,171,168,166,162,161,160,160,158,156,156,157,155,154,154,153,151,148,146,145,142,138,137,137,136,134,131,129,127,127,127,128,128,128],[140,142,143,144,145,147,149,149,148,147,147,147,147,146,143,141,140,140,140,138,140,141,141,144,145,146,146,146,146,148,149,147,145,144,143,141,138,137,136,133,131,129,129,131,134,136,135,133,133,133,131,129,128,128,129,130,130,129,130,131,133,133,134,137,140,142,143,145,146,148,152,153,154,156,158,159,160,160,159,160,161,162,163,164,164,162,159,159,157,156,156,153,152,151,150,149,149,148,148,147,145,144,143,142,140,137,135,135,133,129,129,129,127,126,128,130,132,133,135,136,135,134,133,132,131,130,128,127,130,133,135,137,138,137,137,137,139,139,138,137,135,134,133,131,129,128,126,123,121,118,116,114,114,115,117,117,117,117,117,117,116,115,114,114,114,115,115,114,113,112,110,109,112,114,116,117,120,122,123,126,130,133,136,139,141,144,145,145,147,148,150,152,154,156,159,160,163,167,169,172,174,176,177,176,175,176,176,173,172,170,166,164,161,161,161,161,162,160,158,157,157,156,153,149,146,144,142,139,138,137,136,134,131,129,128,128,128,128,129,129],[139,141,141,141,143,145,146,147,149,148,147,146,146,146,144,143,142,141,141,140,142,142,142,145,146,147,148,148,147,148,148,147,147,146,144,141,139,138,136,134,132,129,129,130,131,133,134,132,132,132,130,128,127,127,127,128,129,129,130,131,132,133,136,138,141,143,143,145,146,147,151,154,155,156,157,158,159,161,161,162,162,163,164,166,166,165,163,162,160,159,159,157,156,155,153,151,151,150,149,149,147,146,145,143,142,139,137,134,131,128,129,129,128,128,128,129,132,134,135,136,136,136,134,133,132,132,128,125,127,129,132,136,135,135,134,133,135,135,134,132,131,131,131,132,131,128,127,125,122,119,116,114,113,114,115,115,115,116,117,117,117,116,114,114,114,115,114,112,111,110,109,109,111,113,115,115,118,120,122,124,128,131,134,139,141,144,146,148,149,150,152,156,158,159,160,161,164,166,168,172,174,175,176,176,176,177,177,175,174,173,169,167,164,162,164,166,164,162,161,160,160,159,155,150,147,144,143,141,139,138,137,136,133,131,130,129,129,129,130,130],[138,139,140,140,142,143,144,146,148,147,145,145,145,145,145,144,143,142,142,141,141,142,143,147,148,149,149,148,148,147,146,145,145,145,144,141,140,138,136,134,132,129,128,128,129,130,131,132,131,131,130,127,127,127,127,127,128,129,130,131,132,134,137,139,141,143,144,144,145,147,150,153,154,154,156,158,161,164,165,164,164,164,164,166,168,167,166,165,163,163,163,161,159,159,157,156,155,154,152,151,150,149,147,146,143,141,139,134,130,128,128,128,128,128,128,129,131,134,136,136,137,137,134,133,132,131,129,126,126,128,130,133,133,132,131,131,132,132,131,129,129,131,131,131,130,128,126,124,122,120,117,115,113,113,114,113,113,115,116,116,117,116,113,114,114,115,115,113,111,110,109,109,111,114,115,115,117,119,121,123,126,129,133,138,141,143,147,150,150,152,155,158,160,162,162,163,165,167,168,170,173,175,176,176,177,178,177,176,176,175,172,170,167,165,165,167,166,163,163,162,162,161,157,152,149,147,145,142,139,138,138,137,135,133,131,130,130,131,131,131],[135,136,139,139,140,141,142,143,144,143,143,144,144,143,143,142,141,140,142,143,143,142,144,147,149,150,149,148,147,146,146,144,144,145,143,141,139,138,136,134,131,128,126,127,129,130,131,132,131,130,130,128,128,128,126,125,126,126,127,129,130,133,135,137,139,141,142,143,145,148,150,151,153,153,155,158,161,165,167,166,166,166,165,166,168,169,168,166,165,165,164,164,163,162,161,160,160,158,154,152,151,150,148,146,143,140,138,135,132,130,127,127,126,127,128,130,133,135,137,136,138,139,136,134,132,130,129,127,127,127,127,129,129,128,129,130,130,130,130,130,130,132,131,130,129,126,124,122,121,120,117,115,114,113,113,112,113,114,114,113,114,114,114,114,115,115,115,114,112,110,109,110,111,114,115,116,116,117,120,123,126,129,133,138,141,143,149,153,154,155,156,158,161,164,164,164,167,169,170,171,175,178,178,177,179,179,178,176,176,176,174,171,169,167,167,168,167,164,163,163,162,162,159,154,151,150,147,143,141,139,138,138,135,133,132,131,132,132,132,132],[134,135,137,138,137,138,139,141,142,141,142,143,143,143,142,141,140,141,143,143,143,144,145,147,149,151,150,148,147,146,145,143,143,144,142,141,139,137,135,133,129,126,126,127,129,131,131,130,130,129,130,130,130,129,126,125,124,124,125,126,128,131,134,135,137,139,140,142,145,147,149,150,152,153,155,159,162,166,168,168,168,168,167,167,168,169,169,168,167,165,165,166,165,164,164,164,163,161,157,154,153,152,149,146,143,140,138,135,134,131,128,127,127,128,129,132,135,137,137,139,140,140,137,134,133,131,129,127,126,126,125,125,125,125,128,129,129,130,130,129,130,131,131,129,127,124,122,121,119,118,117,116,115,115,113,112,113,113,112,112,112,113,114,114,115,115,114,113,112,110,110,109,110,113,115,117,117,117,120,124,127,129,133,137,140,144,149,154,157,158,158,159,161,164,166,167,169,170,171,173,176,179,180,180,181,181,179,177,176,176,175,173,170,168,169,169,167,165,165,163,163,163,161,157,154,151,148,145,142,139,137,138,137,135,133,131,132,131,131,132],[133,134,136,137,137,136,138,139,139,139,141,142,143,144,143,143,142,142,142,143,144,145,146,147,150,152,151,150,148,146,144,142,141,141,140,139,136,134,134,133,129,125,126,128,129,131,130,129,129,129,130,130,129,128,126,125,124,124,124,124,127,130,132,133,136,139,141,143,144,144,146,148,151,153,156,159,163,167,168,169,169,169,168,168,169,169,170,169,168,166,166,166,166,166,167,167,166,164,159,156,154,153,150,147,145,143,139,135,134,132,130,128,128,131,131,132,135,137,139,141,141,139,136,133,132,131,129,126,125,125,123,122,124,125,126,128,128,129,130,128,129,129,128,127,126,124,122,121,120,118,117,116,115,115,113,111,111,112,112,112,112,112,112,113,113,115,113,113,111,111,110,109,111,113,115,116,116,117,121,126,128,130,133,136,140,145,149,153,156,160,161,162,164,166,167,170,172,172,174,175,176,178,179,181,182,181,181,180,178,176,175,173,170,168,168,168,167,165,164,164,163,164,162,159,155,151,148,145,142,140,139,138,137,136,134,133,133,133,133,135],[132,133,134,135,135,134,136,138,138,138,139,142,143,143,144,144,144,142,142,144,146,148,148,148,151,152,152,151,149,146,144,142,141,140,140,139,136,134,134,134,130,126,125,127,129,130,128,129,130,129,130,129,127,126,124,125,124,123,123,124,127,129,131,133,136,139,143,143,142,142,143,146,150,154,157,158,161,166,168,169,169,169,168,168,168,169,170,170,169,168,167,166,167,168,168,167,165,164,161,157,154,152,150,148,147,144,140,136,135,133,132,131,130,132,133,134,135,137,140,141,140,138,135,132,131,129,128,125,124,123,122,122,124,125,125,126,126,127,128,128,129,126,125,126,126,125,123,121,120,119,117,116,114,113,113,112,111,111,112,112,112,111,111,112,114,114,112,112,111,111,111,111,112,114,115,116,117,119,122,126,129,131,132,136,141,146,149,152,155,159,163,165,167,167,167,170,172,174,175,176,178,178,178,180,181,183,183,181,179,177,174,171,171,169,168,168,167,166,165,164,164,165,163,160,155,151,148,145,142,140,140,140,139,137,137,136,136,135,135,137],[132,132,133,134,132,131,134,136,136,137,138,141,141,141,143,143,144,143,143,145,147,149,149,149,151,152,152,151,148,146,144,142,141,139,139,139,136,134,134,134,130,126,125,126,126,127,127,127,128,128,129,128,127,126,125,125,124,123,123,125,127,129,131,134,136,139,142,143,142,143,143,145,149,154,155,157,161,164,165,166,166,167,167,166,167,169,169,168,168,168,167,166,168,170,169,166,165,164,161,159,157,154,151,148,147,145,141,140,137,136,135,134,133,134,135,136,137,139,140,140,139,137,133,131,130,128,128,126,123,121,121,121,122,124,124,124,125,126,127,127,127,126,126,127,127,125,123,121,120,118,116,115,113,112,113,113,111,110,110,110,111,112,112,113,113,113,113,112,111,111,110,111,112,114,115,116,119,122,124,126,129,132,134,138,142,147,149,152,155,159,163,165,166,166,168,171,173,175,176,176,178,178,178,179,181,183,182,179,179,178,175,172,172,172,171,171,169,168,167,165,166,165,164,160,155,151,147,145,144,141,141,141,140,139,139,140,139,137,137,137],[132,131,132,132,130,129,131,133,134,135,137,139,139,140,142,144,145,145,146,148,148,150,150,150,152,152,152,150,147,145,143,141,139,137,136,136,135,135,135,133,130,127,126,125,126,126,126,127,127,128,130,128,126,125,125,125,124,124,125,126,128,130,132,134,138,141,143,143,143,143,143,144,149,152,154,156,160,162,162,163,164,165,166,166,167,168,168,167,167,167,166,167,169,170,169,165,163,161,159,159,158,155,152,147,146,144,143,142,141,139,137,136,135,135,136,138,139,139,140,140,138,135,132,131,129,128,128,126,123,122,120,121,122,123,123,123,124,125,127,127,127,127,127,128,128,127,124,121,119,118,116,113,112,111,112,112,112,111,109,109,109,110,111,112,113,114,114,112,111,111,110,110,112,114,116,117,120,124,125,126,129,132,135,139,143,147,149,151,154,159,163,164,165,167,169,171,174,176,178,178,178,179,179,179,180,181,180,179,179,177,176,174,174,174,173,173,171,170,167,165,166,165,163,159,155,151,149,146,144,143,143,142,141,141,141,142,142,140,139,139],[132,131,132,130,128,128,129,132,133,135,136,137,138,139,141,145,146,146,148,150,150,151,152,151,152,152,151,150,148,147,144,141,138,136,135,134,135,136,135,132,131,129,126,125,126,126,128,129,129,130,130,130,127,126,126,126,126,127,128,129,132,135,135,137,140,143,144,143,143,144,143,144,147,150,152,154,157,160,161,161,162,163,164,166,167,168,169,168,168,168,167,167,168,168,166,163,161,159,158,158,157,156,151,148,146,145,144,143,142,141,138,137,136,136,136,138,138,138,139,138,136,134,131,131,128,127,126,124,122,121,120,121,122,123,123,123,123,123,125,126,127,128,128,127,128,128,125,121,121,120,117,114,112,112,112,112,112,111,110,109,109,109,110,110,112,113,112,111,111,112,112,112,113,114,116,117,121,126,127,127,129,131,135,139,142,145,146,149,153,157,161,163,165,168,169,172,173,175,177,177,178,179,177,178,180,181,182,181,178,176,176,175,175,174,173,173,171,170,168,164,164,163,161,158,155,152,150,147,145,144,143,143,142,142,142,142,142,140,140,141],[132,132,132,130,128,127,127,130,132,133,135,136,137,139,140,143,146,149,150,151,151,151,152,153,152,151,150,149,148,147,145,142,138,135,134,134,135,135,135,133,132,130,128,127,128,129,130,131,132,131,131,131,129,128,128,129,129,131,132,132,135,137,138,141,143,145,146,145,145,145,145,144,146,149,152,154,156,159,160,161,162,163,163,166,167,168,169,168,168,168,166,167,167,166,164,162,160,158,158,157,156,155,152,149,148,146,146,144,142,142,140,139,138,137,136,137,137,137,137,136,136,135,133,130,128,127,125,123,121,119,119,120,122,124,125,124,123,124,124,125,127,129,129,127,128,129,126,123,122,122,119,116,114,112,112,112,112,111,110,109,109,110,111,111,111,112,112,112,111,111,113,114,114,113,114,117,121,125,128,129,130,130,134,138,140,142,143,146,151,155,160,163,165,167,170,172,173,174,176,177,177,176,175,177,180,181,182,181,179,176,175,176,175,173,171,171,170,170,168,165,163,161,159,157,155,152,150,149,147,144,143,143,142,142,141,141,141,140,140,142],[130,131,130,128,127,126,126,128,129,131,134,135,136,138,140,142,146,149,151,151,152,152,152,154,152,150,149,147,147,146,144,142,139,136,135,135,136,136,137,135,133,130,129,129,131,132,131,131,132,132,133,132,131,131,130,132,133,134,135,135,137,138,140,144,145,146,147,148,146,146,146,145,147,149,152,154,155,159,161,163,164,165,165,166,168,168,169,168,167,166,164,164,164,164,164,163,160,158,157,156,156,155,153,150,148,146,145,143,141,140,138,138,138,138,137,137,138,138,138,137,137,136,134,130,129,128,126,124,121,119,119,120,122,123,124,124,125,127,126,126,128,130,129,127,129,129,127,124,123,123,120,117,114,111,111,110,109,109,109,108,109,110,110,110,111,111,112,113,112,110,112,114,113,112,114,118,120,124,127,129,129,130,134,137,139,141,143,146,150,154,158,162,163,165,169,173,174,175,176,177,176,174,175,177,178,179,181,180,179,178,177,177,175,173,171,170,169,167,166,165,162,160,158,156,154,152,152,150,146,143,144,143,143,143,142,141,141,140,141,142],[128,129,128,127,126,125,125,126,127,129,133,134,134,136,138,141,144,148,150,152,154,153,153,154,152,149,148,148,147,145,145,144,141,139,138,138,139,139,138,135,132,131,130,130,132,134,133,131,132,132,133,134,134,134,133,134,135,137,138,138,139,140,142,145,146,148,149,148,149,148,146,145,147,149,152,153,154,158,162,164,165,166,165,166,168,169,168,167,165,164,162,162,162,163,164,162,159,157,156,156,156,155,154,151,149,146,144,142,139,138,137,137,139,139,138,138,138,139,139,137,136,135,133,132,131,130,128,125,122,120,120,120,121,121,123,125,127,127,127,128,129,130,129,128,130,129,127,125,124,123,120,118,115,111,110,109,108,107,108,109,109,109,110,111,110,111,112,113,113,112,112,113,113,113,115,118,120,123,127,128,128,130,133,136,139,141,143,145,149,153,156,158,160,164,168,171,172,174,176,176,176,174,173,175,177,178,180,179,178,178,178,178,176,174,172,169,167,166,164,163,160,158,156,155,154,153,153,150,147,145,145,144,144,143,142,141,140,139,140,142],[126,126,126,127,126,125,124,125,125,126,130,133,133,134,136,140,143,146,150,152,153,154,155,154,152,150,149,148,146,144,145,144,142,141,139,139,139,140,137,135,134,134,132,132,134,135,135,133,134,134,134,135,135,136,136,136,137,139,139,140,141,143,145,148,150,150,150,149,150,152,150,147,147,148,151,154,156,159,161,163,166,167,166,166,167,169,167,165,163,161,160,159,161,162,160,158,158,157,156,157,156,155,154,151,149,147,145,143,140,138,136,135,137,137,137,137,138,138,137,135,135,134,133,132,130,129,126,122,121,120,119,120,120,120,122,125,125,126,128,130,130,131,130,130,131,130,129,126,124,123,120,118,116,113,112,111,109,108,108,109,108,107,109,111,110,111,111,111,113,114,114,113,114,114,115,117,118,121,125,126,128,130,130,131,135,139,140,142,147,151,154,156,159,164,166,169,171,172,175,175,177,175,174,175,176,177,178,179,178,178,179,179,177,174,171,168,167,166,163,160,158,156,155,155,154,154,153,151,149,148,145,143,143,142,141,140,139,139,140,142],[124,124,124,125,125,125,124,124,124,126,130,131,132,133,135,139,142,146,150,151,152,154,155,155,153,151,150,150,146,144,144,143,140,140,139,139,138,137,136,135,136,135,133,133,134,136,137,135,135,136,136,137,138,139,139,139,139,140,142,144,145,145,147,150,151,151,149,149,151,152,152,150,148,148,151,154,157,158,160,162,165,166,166,166,166,168,166,164,162,160,158,157,158,159,157,155,156,156,155,155,155,155,153,150,148,146,143,142,140,137,135,134,135,136,136,135,135,135,134,132,132,132,131,129,127,126,123,119,119,119,120,120,120,120,121,123,124,126,129,131,130,131,130,130,131,131,130,127,124,121,119,117,115,114,112,111,109,108,107,107,107,106,107,110,110,110,110,111,112,113,114,113,114,114,115,116,117,120,122,123,126,128,128,129,132,135,137,140,145,149,153,155,159,162,165,168,170,172,174,175,176,176,176,176,177,178,179,179,179,180,180,179,176,172,169,168,167,165,161,159,158,157,156,155,154,154,153,152,150,147,144,142,142,142,142,140,139,139,140,141],[123,122,121,123,123,123,123,124,126,129,131,131,133,134,135,139,143,146,148,150,151,153,154,155,153,150,151,151,147,144,144,142,140,140,139,139,138,135,135,135,135,135,134,134,134,136,137,137,136,136,136,137,139,141,142,143,143,142,144,146,146,145,147,149,150,151,149,149,151,151,152,152,149,148,150,153,156,157,160,162,164,165,165,164,164,165,164,161,160,158,155,155,156,157,155,152,153,153,153,152,152,153,151,148,146,144,143,142,139,136,135,135,135,135,133,131,131,132,131,130,130,129,127,126,125,124,122,119,119,119,119,119,119,120,121,123,124,126,128,130,129,129,129,130,131,132,130,127,124,119,117,115,114,113,111,110,109,108,108,107,107,107,108,110,109,108,109,110,111,111,112,111,112,113,114,115,117,119,120,121,123,125,126,128,131,133,137,140,143,147,150,153,157,160,164,167,168,170,173,174,175,175,175,177,178,178,179,178,179,180,179,177,173,169,167,166,165,163,161,159,158,157,156,155,156,157,156,154,151,148,145,143,144,143,143,142,141,142,141,142],[121,120,120,120,120,122,124,125,127,130,131,132,134,135,136,140,144,146,147,148,149,151,153,153,151,151,151,151,148,144,143,141,139,139,139,138,136,134,134,134,134,134,134,134,134,136,137,138,138,136,136,139,140,142,145,145,145,144,144,145,145,145,147,148,149,151,150,150,151,152,153,152,150,149,151,153,156,158,160,162,163,163,163,161,160,160,160,158,157,155,153,153,155,154,153,152,152,152,151,150,149,150,150,147,144,142,142,141,139,137,135,135,134,134,132,128,127,128,128,127,128,126,123,123,122,122,120,119,120,120,118,118,119,120,122,124,126,127,128,127,128,128,128,128,129,130,130,127,123,119,115,112,112,112,111,110,108,108,108,108,108,107,108,110,110,109,109,109,110,109,108,108,109,110,112,113,114,117,118,120,122,123,124,126,129,132,135,139,143,146,149,152,155,158,163,165,167,169,170,172,174,175,175,177,179,180,180,179,179,179,178,175,171,168,166,165,164,162,162,161,159,158,157,157,158,159,158,155,151,148,147,146,146,145,144,144,144,144,143,144],[119,118,118,119,120,123,124,127,128,131,132,132,133,134,136,140,143,145,146,147,148,148,151,152,153,154,152,150,148,145,143,140,139,139,139,138,137,136,135,135,135,134,133,133,134,136,137,139,138,137,139,141,142,143,146,146,146,146,145,145,145,143,145,147,150,151,151,151,151,152,154,153,152,151,151,153,157,160,162,162,162,161,160,159,157,156,156,155,154,154,153,153,152,151,151,151,151,150,149,148,148,148,149,147,144,142,141,140,139,138,135,134,133,132,129,126,125,125,124,123,124,123,122,121,120,120,118,118,119,120,120,119,119,120,122,124,125,126,127,126,127,128,128,128,128,127,125,125,121,119,115,111,111,111,110,109,108,108,108,108,108,108,108,109,109,109,109,108,108,108,105,104,105,105,108,110,112,114,116,118,120,122,123,124,127,130,133,137,140,142,147,152,154,157,160,162,165,167,168,170,173,176,178,180,182,183,182,181,180,178,177,175,170,167,165,165,164,162,162,163,161,159,158,159,160,160,158,155,151,148,148,146,145,145,144,145,146,146,146,147],[117,116,116,118,120,123,125,126,127,129,130,131,131,133,136,138,141,143,144,146,147,148,149,151,154,155,153,150,148,146,143,140,141,141,141,140,139,138,138,137,136,134,133,134,135,137,137,138,137,138,140,140,142,144,146,146,145,145,145,145,144,143,145,147,150,152,153,153,153,154,155,154,153,151,150,153,157,161,163,162,161,158,157,157,156,154,154,153,152,153,153,153,151,148,148,149,149,147,146,146,148,148,148,147,145,141,139,138,138,138,135,132,130,128,126,125,123,122,120,120,120,120,121,120,117,117,116,116,118,120,121,119,119,121,124,125,124,125,126,126,127,129,129,129,128,125,121,119,118,116,112,110,110,110,109,108,108,108,108,107,107,107,107,108,107,106,107,107,106,105,102,102,102,103,105,106,108,111,113,116,118,120,121,123,126,129,133,136,138,141,145,150,153,155,158,161,164,165,166,169,173,177,179,180,182,183,182,182,179,177,177,175,170,167,166,166,164,162,162,163,162,160,158,159,161,161,159,156,153,150,149,147,145,144,143,144,146,147,148,149],[116,116,115,116,119,122,124,124,126,127,129,131,131,132,135,137,139,142,143,145,148,149,149,151,153,154,153,150,149,148,145,141,142,142,143,142,140,139,139,138,138,136,135,136,137,139,138,137,137,138,138,138,141,144,145,144,144,143,144,146,145,143,144,147,150,153,154,156,155,155,156,154,153,151,150,152,155,159,160,160,159,157,156,156,154,153,151,151,151,151,152,152,149,146,146,147,146,144,144,144,145,147,147,144,142,138,137,136,136,137,133,130,128,126,125,123,120,118,117,118,118,118,119,119,117,116,114,114,116,119,119,118,120,121,123,125,124,124,126,127,128,130,130,129,127,124,119,115,115,113,110,107,107,109,108,107,107,106,106,104,105,105,106,108,106,106,107,107,105,102,99,99,101,102,103,103,105,108,109,112,115,116,119,121,124,128,132,134,137,141,144,148,151,153,157,159,162,163,166,170,174,177,179,179,180,181,181,181,178,175,175,174,170,167,166,166,164,163,162,162,161,160,159,159,160,161,160,158,155,153,151,148,146,145,143,143,146,147,149,150],[116,115,114,116,118,120,123,124,124,125,128,130,131,131,133,136,138,140,141,145,148,149,149,150,152,153,153,151,150,149,146,143,144,144,144,143,141,140,140,141,141,138,137,137,138,138,138,137,137,137,137,138,141,143,144,143,143,144,145,146,145,144,144,145,149,152,154,156,156,156,156,154,152,151,150,151,153,156,157,157,157,155,154,154,153,151,150,150,150,149,149,149,148,145,144,143,142,142,143,143,142,144,143,141,139,136,135,134,134,134,131,128,126,124,122,119,117,115,114,116,116,116,117,117,116,114,112,112,114,116,117,118,119,120,122,124,123,124,126,128,129,130,130,128,126,122,117,113,112,110,107,105,104,104,104,105,106,105,104,103,103,103,105,107,107,106,106,106,103,100,98,97,98,99,101,102,104,105,106,108,111,114,118,120,123,127,131,134,137,141,144,146,149,151,155,157,160,163,167,171,175,179,180,179,179,179,179,179,177,175,174,173,170,166,165,165,164,163,162,161,159,159,158,159,161,161,161,159,157,156,153,149,147,146,144,144,145,147,149,150],[115,114,113,115,116,118,122,124,124,124,126,128,129,130,132,134,136,138,141,144,146,146,146,148,149,151,152,151,149,147,144,142,144,145,145,144,142,142,142,143,142,140,139,139,139,137,138,138,137,137,138,139,141,143,143,143,143,144,144,144,146,146,145,146,150,153,155,158,157,157,156,154,152,150,148,150,151,154,155,154,153,152,152,152,152,150,149,149,148,149,148,146,144,143,141,141,141,140,140,141,141,141,139,137,136,135,133,132,132,132,129,125,123,121,118,116,114,112,112,115,114,114,115,115,114,112,112,112,113,113,115,115,117,119,122,124,123,122,124,127,128,130,130,128,125,120,115,112,110,107,105,104,102,101,103,103,104,105,103,103,102,101,104,106,105,105,105,104,102,100,97,95,95,96,97,99,100,102,104,107,108,111,114,117,122,126,130,135,139,143,145,147,149,150,153,156,160,164,167,170,175,178,178,177,178,179,179,178,176,174,172,172,169,167,166,165,163,162,162,160,160,159,158,160,161,163,162,160,159,157,153,150,148,148,146,145,146,147,148,148],[115,113,112,113,115,116,120,123,124,123,125,127,128,129,131,131,132,136,140,142,143,143,143,146,148,151,151,149,146,143,141,141,142,144,146,146,144,143,143,144,142,140,141,140,138,138,140,140,139,138,139,140,141,143,143,142,142,143,143,143,144,145,145,146,150,153,156,157,156,156,155,154,152,149,147,147,149,152,153,152,151,150,150,149,149,149,148,146,147,147,147,144,141,140,138,138,139,138,139,140,139,138,136,134,134,134,134,132,130,129,128,125,121,117,116,114,111,108,109,111,111,110,110,111,111,110,110,110,111,112,112,113,115,118,121,123,122,120,121,124,126,127,127,125,122,117,112,111,108,105,105,103,101,100,101,102,103,103,103,102,102,102,105,106,104,104,103,103,102,99,97,96,95,94,94,96,97,100,103,105,108,109,111,115,120,125,129,134,138,143,146,148,149,151,153,157,161,164,166,168,172,175,176,177,178,179,180,177,176,173,170,169,168,168,168,165,163,162,163,162,161,160,160,160,161,162,162,161,158,156,152,149,148,149,148,147,147,148,148,148],[113,112,111,111,114,116,119,121,121,121,122,125,126,126,127,128,130,134,137,139,140,142,143,145,148,150,150,148,144,140,139,140,141,143,145,146,144,143,144,145,142,140,140,141,140,139,140,142,141,139,139,139,140,141,140,140,140,141,142,142,142,142,143,145,148,151,154,155,155,155,155,155,152,148,147,147,149,150,151,150,150,150,148,147,147,148,145,143,144,144,144,141,139,137,135,135,134,134,136,136,136,135,134,133,134,134,132,129,127,126,124,123,118,114,112,112,108,105,107,108,107,107,107,108,108,106,106,107,108,110,110,112,114,117,120,121,120,119,119,121,123,124,125,123,119,114,111,109,107,104,104,101,99,99,99,100,100,100,102,102,102,102,103,105,104,103,102,101,99,96,96,97,95,95,96,97,98,101,102,103,105,108,111,116,120,126,128,132,137,141,146,148,150,151,153,157,161,164,167,168,170,172,173,175,177,178,178,176,175,173,169,167,167,167,166,164,163,162,162,163,161,160,159,159,161,162,161,160,157,155,152,150,150,150,149,148,149,150,149,150],[112,111,111,112,114,116,118,119,118,118,120,123,124,124,125,126,129,132,135,135,136,139,141,145,148,149,148,145,142,139,138,138,139,141,143,144,144,144,145,144,142,141,141,142,141,141,141,142,142,140,138,137,137,138,137,137,137,139,141,140,140,141,142,144,145,148,153,155,155,154,154,154,152,149,147,147,148,148,148,148,148,148,146,144,144,143,142,141,141,141,140,138,136,134,131,130,130,130,132,133,132,131,132,133,134,132,129,126,124,121,120,119,116,112,111,110,107,104,104,105,105,104,106,107,105,103,103,103,104,108,109,111,114,116,118,119,118,118,117,119,120,121,123,121,117,113,110,108,106,104,102,100,98,97,98,98,97,98,101,101,101,102,102,103,103,102,101,99,97,95,97,97,96,97,99,99,100,102,103,103,104,107,112,116,121,126,129,132,137,141,145,148,152,153,154,157,160,163,166,167,168,169,169,172,175,177,177,176,173,171,168,166,166,166,165,165,163,161,160,162,161,160,159,160,161,161,159,159,157,155,153,151,150,151,150,149,150,151,151,152],[112,110,111,112,112,114,114,116,117,118,121,123,123,124,124,125,127,129,131,133,135,137,139,144,146,147,147,144,141,138,136,136,138,140,142,143,143,144,142,141,141,140,140,141,142,143,142,142,141,140,138,136,136,136,136,135,136,138,138,138,138,138,138,141,144,146,151,155,154,153,153,154,152,150,149,149,147,146,147,147,146,145,143,142,142,141,141,140,138,137,138,137,133,131,128,127,128,128,131,132,131,129,131,132,131,130,127,124,121,119,118,117,114,111,109,109,106,104,102,102,103,103,105,106,104,101,100,100,103,106,107,108,111,114,116,116,116,117,115,115,116,117,119,118,116,112,109,108,106,104,103,100,98,96,95,96,95,95,97,98,99,101,102,102,102,102,100,99,98,97,97,98,98,100,101,101,102,102,103,105,106,109,113,117,122,127,130,133,137,141,145,147,151,154,156,158,161,162,164,167,167,167,169,170,172,175,176,174,172,168,167,167,165,164,165,164,161,159,160,161,161,161,161,162,162,162,161,159,157,155,154,153,151,151,151,151,152,153,153,154],[113,112,113,112,113,113,113,115,117,120,123,124,123,122,123,123,124,127,129,131,134,136,138,141,144,145,145,142,140,137,136,137,137,138,140,142,142,142,140,139,139,138,138,140,142,143,142,140,140,140,138,136,136,136,136,136,137,137,137,137,137,137,137,140,144,147,150,152,152,152,152,151,150,150,151,149,147,145,145,145,143,142,141,140,140,139,138,136,135,134,134,134,131,128,126,126,126,127,129,130,129,128,129,130,129,127,125,122,120,118,118,116,113,109,106,107,105,103,102,101,103,104,106,105,103,101,100,99,102,105,105,106,108,112,114,114,114,114,112,113,114,115,116,115,114,112,109,107,105,104,103,100,97,95,94,94,94,94,95,96,98,100,102,102,102,102,100,99,99,97,96,97,99,101,101,102,103,103,103,105,107,111,115,119,123,127,131,136,139,141,145,148,152,156,158,160,161,162,163,165,167,167,168,168,170,174,174,172,170,166,165,166,165,164,164,163,161,160,160,161,161,162,163,164,163,162,162,161,159,157,156,155,153,151,151,152,153,154,153,155],[115,115,115,113,113,113,114,117,119,122,123,124,123,122,122,122,123,125,127,128,131,134,135,138,141,142,143,140,137,135,135,136,136,136,139,141,140,140,140,139,140,140,138,138,140,141,141,140,141,142,139,137,136,137,137,135,135,136,137,137,137,137,137,140,143,147,149,150,150,151,149,148,149,148,148,147,145,143,144,144,142,141,138,137,137,136,136,134,133,133,133,132,129,125,123,124,124,124,127,127,126,126,127,129,127,124,122,120,119,117,115,113,111,107,106,105,103,101,100,100,102,105,105,103,102,100,98,98,101,104,104,105,108,111,112,112,112,112,111,113,114,115,116,114,112,111,107,105,105,104,102,99,96,94,93,93,93,94,95,96,99,100,102,104,104,103,100,99,98,97,96,96,97,101,101,102,102,102,103,103,107,112,115,119,123,127,133,138,140,142,145,149,153,156,158,161,161,163,163,162,164,166,167,168,170,173,174,172,170,167,164,164,163,163,163,162,161,160,160,162,162,163,164,164,163,162,162,161,160,159,157,156,153,150,151,152,152,153,153,155],[117,116,115,114,113,114,116,119,120,122,123,124,123,122,121,120,121,123,125,127,129,131,132,135,137,140,141,139,136,132,132,135,135,136,138,140,139,139,140,141,141,140,139,138,138,140,140,141,142,142,139,137,136,136,136,134,134,135,136,136,136,136,136,139,142,145,147,147,148,148,147,146,146,146,145,144,142,142,143,144,143,141,137,135,135,135,134,133,132,132,133,131,128,125,122,120,120,122,124,125,124,124,125,127,124,122,122,120,117,114,113,112,109,106,104,103,100,98,98,99,101,103,103,101,99,97,96,98,100,101,102,104,107,109,110,111,111,110,111,112,113,114,115,113,111,109,105,104,104,102,101,98,96,93,93,93,92,93,95,97,99,100,103,106,106,103,99,97,97,97,95,94,97,99,101,101,102,103,103,104,107,110,115,120,124,129,134,140,142,143,145,149,153,157,159,162,162,163,163,162,163,165,166,167,170,173,174,172,170,167,165,162,161,161,162,161,161,160,161,163,164,164,165,163,161,162,163,162,161,160,158,156,154,152,151,152,152,153,154,156],[117,115,115,115,114,114,116,118,121,123,123,122,121,122,120,119,120,121,124,126,128,129,132,135,136,137,137,136,133,131,133,135,134,134,135,137,138,138,140,141,140,138,137,136,136,137,138,141,142,141,139,137,135,134,134,133,133,133,134,136,137,138,138,140,141,143,146,146,146,145,144,144,144,145,144,143,142,142,141,141,141,139,135,132,132,133,133,133,132,130,129,128,126,124,121,119,119,122,123,123,123,122,122,123,122,120,120,120,116,112,111,111,108,106,104,102,99,97,98,100,101,103,103,101,99,96,96,98,98,98,101,104,106,109,110,110,110,109,110,112,111,111,112,111,110,109,106,105,102,100,99,97,94,92,91,92,91,92,93,95,97,98,102,105,105,104,101,97,96,97,95,94,96,98,100,102,103,104,104,106,108,109,114,119,124,129,135,140,143,145,148,151,154,157,159,161,162,162,162,162,163,164,165,166,170,172,172,171,170,167,164,161,160,161,162,161,162,161,162,164,165,166,166,163,162,162,162,162,162,162,160,157,155,153,152,153,154,153,155,157],[116,113,113,115,115,116,116,118,121,122,121,121,121,123,122,120,120,122,124,126,128,130,133,137,137,136,134,134,132,132,134,133,133,132,132,133,135,136,138,138,137,135,135,135,135,135,136,137,139,139,137,135,133,132,132,131,131,131,131,134,135,136,138,139,139,141,143,144,144,143,142,143,144,144,144,142,140,140,139,139,139,137,133,131,132,133,132,131,130,127,125,125,124,122,120,118,119,121,122,121,120,119,119,120,120,119,118,117,114,111,109,107,105,104,103,101,98,96,98,100,101,102,103,103,101,98,98,99,98,98,100,104,106,108,108,107,108,108,109,109,109,108,109,109,109,108,108,105,102,100,98,96,94,91,89,90,91,93,93,93,95,97,99,101,102,103,101,98,97,97,96,95,96,98,100,102,103,105,106,107,109,110,114,119,125,131,135,139,142,146,150,152,154,156,158,160,160,161,162,163,163,164,164,165,168,169,169,168,169,168,164,161,161,161,162,162,162,160,161,163,164,165,165,164,163,162,160,160,161,162,160,157,154,153,153,154,154,155,157,158],[117,114,115,116,116,118,117,118,119,120,121,121,122,123,122,121,121,123,124,126,127,129,133,136,136,135,134,135,134,133,132,130,130,130,129,130,131,133,134,134,134,133,135,135,135,135,133,133,135,136,134,132,131,130,130,130,129,129,130,132,133,135,137,138,137,138,140,141,142,141,141,141,141,141,141,139,138,138,136,136,135,134,132,130,131,132,131,128,126,124,122,121,120,120,118,117,118,121,122,121,120,118,117,118,118,118,118,116,112,110,106,104,103,101,100,98,96,95,97,99,100,101,103,104,101,98,99,99,98,97,98,101,103,104,105,104,105,105,105,105,105,105,106,107,106,106,106,104,101,99,97,95,93,92,90,89,92,94,94,94,96,98,98,98,101,102,100,99,98,98,99,97,98,100,100,102,104,105,107,109,110,112,115,119,126,133,136,138,141,145,149,152,154,156,158,160,161,161,162,163,162,163,162,164,165,166,166,165,166,167,165,163,163,163,164,163,161,159,159,160,161,162,163,163,161,160,159,158,160,160,160,157,154,152,151,152,154,155,157,158],[116,116,117,117,118,118,117,117,117,118,120,120,121,123,123,123,123,124,125,125,127,128,132,136,137,135,135,134,133,132,129,127,127,127,127,126,127,129,130,131,130,131,133,135,135,134,131,130,132,133,132,130,129,128,128,128,128,128,129,132,133,134,137,137,136,136,137,139,139,138,139,139,138,138,138,137,135,134,133,132,131,132,131,129,129,130,130,127,123,120,118,118,116,115,115,115,118,120,120,120,118,115,114,115,116,117,117,114,111,108,104,102,100,99,98,97,94,94,96,99,100,101,103,104,102,99,98,98,97,97,97,98,99,101,101,100,100,101,101,101,102,103,104,104,104,103,103,102,100,98,97,95,93,92,91,92,93,95,95,95,96,97,96,97,99,101,100,99,99,100,101,100,101,102,101,102,105,106,108,110,113,115,118,123,128,134,136,136,139,143,147,150,153,155,158,160,161,160,161,161,160,161,161,162,163,163,163,163,165,165,164,164,164,164,164,163,160,157,156,157,158,158,160,161,159,158,157,156,157,158,159,157,154,151,150,151,154,155,157,159],[118,118,118,117,119,119,118,118,117,117,118,118,121,121,121,122,122,124,124,124,126,129,133,136,136,135,133,132,131,130,128,125,124,124,124,123,123,124,125,127,127,128,131,132,133,132,130,129,130,131,131,129,128,127,125,124,126,128,129,132,132,133,134,135,134,133,135,136,135,134,135,136,136,135,134,133,131,129,129,129,130,131,131,130,130,129,128,126,122,118,117,117,114,112,112,113,114,116,117,117,116,114,113,112,113,113,113,111,109,107,104,101,98,96,95,94,93,92,94,98,99,101,103,102,102,100,99,98,97,97,97,97,98,98,98,97,98,98,98,98,100,102,102,101,102,102,104,103,101,98,97,97,96,95,95,95,94,95,95,95,96,97,95,95,96,98,99,98,99,100,101,101,103,104,103,103,105,107,110,111,114,116,119,125,129,134,135,136,139,143,146,149,152,153,156,158,159,159,161,162,161,161,160,162,163,164,164,164,164,164,165,166,164,163,162,161,157,154,154,154,154,153,155,158,158,157,156,155,156,156,156,154,152,151,151,152,152,154,156,158],[119,118,117,118,118,117,118,118,116,116,116,117,119,118,118,120,122,124,124,125,127,130,133,133,133,132,130,129,129,128,125,122,121,122,122,122,121,119,120,124,125,126,127,129,129,129,128,128,128,129,130,128,126,124,123,123,125,127,130,133,133,133,132,133,132,133,134,133,132,131,131,131,131,130,129,129,127,125,124,126,129,130,130,129,129,127,125,124,122,118,116,115,113,111,111,110,111,113,113,113,112,111,110,108,108,110,110,108,107,106,104,102,98,95,94,94,93,93,94,97,99,101,101,101,100,99,97,96,94,95,95,96,96,95,96,96,96,94,94,96,99,101,102,102,102,103,105,104,101,98,96,97,98,98,98,97,95,95,96,96,96,95,95,95,95,97,98,99,100,99,99,102,103,105,106,106,107,110,113,114,115,117,120,125,129,134,135,137,139,143,146,149,151,152,153,155,158,160,162,162,161,160,160,162,164,164,165,164,163,164,166,166,163,161,159,158,155,154,153,153,152,152,152,154,155,156,155,154,154,154,154,152,151,151,151,151,151,153,156,158],[118,116,117,118,116,115,117,117,116,116,116,117,117,116,118,119,121,123,124,126,128,131,132,131,131,130,127,125,125,125,123,121,121,120,120,119,116,115,117,120,121,123,124,126,126,125,125,126,126,127,128,127,125,122,121,123,125,128,131,132,132,133,132,132,132,131,131,130,129,129,128,126,126,125,125,124,123,122,121,122,124,126,127,127,125,124,124,122,119,117,115,112,111,110,109,109,110,110,109,109,108,108,106,105,107,108,107,106,106,106,105,102,98,95,95,95,95,95,95,97,100,102,101,100,98,95,94,92,91,92,93,93,92,92,93,94,94,92,92,95,96,97,100,102,103,104,105,104,103,100,98,98,98,100,99,98,97,97,96,97,96,94,95,97,97,97,99,99,99,98,100,103,104,105,107,108,110,112,115,116,117,118,121,125,129,133,135,137,139,142,146,148,150,151,153,155,157,159,161,160,160,160,160,161,162,163,164,164,164,163,164,164,162,160,159,157,155,154,153,152,152,151,150,150,153,154,153,152,152,152,151,150,149,148,149,149,151,153,156,158],[117,115,116,117,116,115,117,117,116,115,116,117,117,117,118,118,121,123,124,126,128,131,132,131,130,127,124,122,122,122,121,120,120,120,118,114,112,112,114,115,117,120,121,122,122,122,122,122,124,125,126,126,124,121,121,123,125,128,131,131,131,132,132,131,130,129,128,127,127,125,123,123,123,122,121,120,119,118,117,118,120,123,124,124,122,121,121,120,117,114,113,111,110,109,108,109,110,108,106,105,103,102,103,103,105,106,105,106,106,105,104,101,97,96,96,97,96,95,96,98,101,103,101,97,96,93,90,89,88,89,90,89,88,88,90,92,93,90,90,91,93,95,98,101,103,104,105,105,104,103,100,98,98,100,101,100,99,98,97,97,96,95,96,97,98,98,98,99,99,100,101,103,104,105,107,110,112,114,116,117,118,119,121,125,130,134,135,137,139,142,146,148,148,150,152,154,157,159,160,160,161,161,159,159,160,162,163,163,164,163,163,163,161,159,158,157,155,153,152,152,151,149,148,148,150,151,151,150,149,149,149,147,146,146,147,147,149,152,154,157],[117,115,116,117,116,116,117,117,116,114,116,117,118,119,118,118,120,123,125,126,129,130,129,129,127,126,124,120,120,119,118,117,118,118,115,112,111,111,111,112,114,116,116,118,118,119,119,120,123,125,126,127,124,122,122,123,124,126,129,131,132,132,131,130,129,128,125,124,123,122,122,121,119,119,118,116,115,115,115,116,118,120,120,119,119,118,118,117,115,113,113,111,110,108,107,108,108,106,104,101,99,98,99,100,102,104,104,105,104,103,101,99,96,95,96,97,96,96,96,98,100,101,99,96,94,92,89,88,86,86,86,86,85,85,86,88,88,87,88,91,93,95,98,99,102,104,104,104,104,104,101,99,100,102,101,101,101,100,99,99,96,95,95,96,97,97,97,99,100,102,102,103,105,106,109,112,113,115,117,119,120,122,125,128,132,135,137,138,140,142,144,147,147,149,151,153,156,157,157,157,159,159,158,157,159,160,162,162,163,162,162,162,159,157,155,154,152,151,152,152,151,148,148,148,148,148,148,149,148,147,147,146,146,147,148,148,149,150,153,156],[118,117,117,116,117,118,117,117,116,115,117,118,119,119,119,119,121,123,125,126,127,126,125,126,126,125,124,120,118,116,115,114,114,114,112,110,110,109,109,110,110,112,113,115,117,117,117,119,122,125,127,126,125,123,122,122,123,125,128,130,132,132,131,129,129,127,123,122,122,122,122,120,118,117,115,114,113,113,113,114,116,117,117,117,117,118,117,115,113,113,113,111,109,107,104,105,105,104,101,99,98,97,96,97,99,101,102,101,100,100,98,97,96,96,97,97,96,95,95,96,97,99,98,95,93,91,89,88,86,85,84,84,82,82,84,85,85,85,88,91,94,95,97,98,100,102,103,104,105,106,104,103,104,104,103,102,103,103,102,100,97,96,95,95,96,96,95,97,99,103,104,104,105,108,112,112,113,114,117,121,123,125,128,130,134,137,138,139,140,141,142,145,147,148,151,152,153,154,153,154,157,158,158,157,158,160,162,161,160,160,159,158,157,156,152,150,149,150,152,150,149,148,149,148,147,146,145,147,146,145,145,145,146,148,149,150,150,150,151,155],[120,119,116,115,117,118,117,117,117,117,118,119,119,118,120,121,121,123,123,124,124,122,122,123,124,124,123,121,118,115,112,112,111,111,110,108,107,106,107,109,108,108,110,111,114,115,117,120,122,125,126,125,124,122,122,121,122,125,125,126,129,131,130,128,128,126,124,122,122,122,121,120,118,117,117,115,113,112,112,111,113,115,115,115,116,117,116,113,113,114,112,109,107,105,103,102,102,101,99,96,96,95,95,95,96,98,99,97,97,97,96,96,97,97,98,97,96,95,95,96,96,97,97,94,92,90,88,87,85,84,83,83,81,79,81,83,83,83,85,89,91,93,96,99,100,102,103,104,106,107,106,106,106,106,105,104,103,103,103,100,98,97,95,95,95,95,94,96,100,103,104,105,107,110,112,112,114,116,119,122,124,127,129,131,135,138,138,139,140,141,143,145,146,148,150,151,152,153,152,153,156,158,158,158,159,160,160,159,159,158,157,155,155,155,151,149,149,149,150,148,148,149,148,148,147,145,144,145,144,142,143,143,145,147,150,151,151,151,153,155],[122,120,116,114,116,116,116,117,119,119,120,120,119,120,122,123,122,123,122,121,121,120,120,120,121,122,123,121,118,115,111,108,108,108,107,106,105,106,107,107,106,106,107,109,112,114,116,118,121,124,125,124,123,122,122,122,122,122,122,123,125,127,128,128,128,127,126,123,122,122,120,120,119,118,117,116,115,113,112,110,112,113,113,115,115,116,114,113,114,113,110,108,105,103,101,100,99,99,99,97,96,95,95,95,94,96,96,95,95,95,95,97,99,98,97,96,95,95,95,94,94,95,95,93,92,90,88,87,85,84,82,81,78,77,78,81,81,82,83,86,89,91,94,97,99,101,102,103,106,107,107,107,107,109,107,104,102,103,103,101,99,97,96,95,94,94,94,96,100,103,105,108,110,112,112,113,114,116,119,123,126,128,131,133,134,136,137,138,140,142,144,145,146,148,150,151,151,151,152,152,155,157,157,158,160,160,158,156,157,156,154,153,153,152,150,149,148,148,149,148,148,147,147,148,147,144,143,143,142,141,141,143,145,148,151,152,152,153,155,156],[122,120,116,114,114,114,116,118,120,121,121,121,121,121,123,124,123,123,121,118,118,119,119,120,121,121,120,119,116,114,111,107,106,106,105,105,106,107,107,105,106,106,107,108,111,113,114,117,120,122,123,121,122,121,121,122,121,120,121,121,122,124,127,128,129,128,125,122,122,122,120,119,119,117,118,117,115,113,111,109,109,111,112,114,115,115,113,111,111,110,109,107,105,103,103,101,100,99,98,99,98,97,97,96,95,95,95,94,94,95,96,98,98,99,97,96,95,93,92,92,91,91,91,90,89,89,88,85,84,82,80,78,76,75,76,78,80,81,83,84,86,88,92,96,99,101,102,102,104,106,106,107,108,110,107,103,104,105,104,101,100,99,97,96,94,94,95,97,100,102,105,108,110,113,113,112,113,114,118,122,125,127,130,134,135,136,137,138,140,141,143,145,147,148,149,151,150,150,151,152,154,155,156,157,158,159,157,154,154,154,153,152,152,151,149,148,147,147,147,146,146,147,149,149,146,143,142,142,141,141,142,145,146,148,151,153,155,157,158,159],[121,119,116,115,114,114,116,118,121,122,122,122,122,122,123,124,123,122,120,118,118,119,119,119,121,119,116,114,113,113,111,107,106,105,104,104,105,106,106,105,105,105,106,107,109,112,113,116,119,121,121,120,121,121,120,119,118,118,118,119,121,123,125,126,126,126,124,121,121,121,120,119,119,119,118,116,114,113,112,109,109,111,112,113,113,112,111,110,109,109,109,107,105,105,106,104,101,99,97,98,99,98,97,97,97,96,95,95,95,96,98,98,98,99,97,95,94,93,92,91,90,89,89,88,88,87,86,84,82,80,77,76,75,73,73,75,77,79,81,84,85,85,89,93,96,99,101,101,102,104,105,106,107,109,107,105,106,106,104,101,100,100,99,98,96,96,97,99,101,103,105,107,111,114,114,112,113,115,119,122,124,127,130,134,135,136,137,138,139,141,142,145,146,146,147,150,149,149,150,151,152,153,153,154,155,157,155,153,153,153,152,152,151,149,147,146,146,146,145,144,145,148,150,150,147,144,143,143,142,141,142,146,148,150,152,155,157,159,161,161],[119,117,116,116,114,114,115,116,119,121,122,122,122,123,123,122,121,120,119,119,118,119,119,118,118,117,114,112,112,112,110,107,106,105,103,103,105,106,105,105,104,104,106,107,109,111,113,116,119,121,120,120,120,119,118,115,115,116,116,117,120,122,123,124,125,124,122,121,122,121,120,119,120,121,118,116,115,114,113,110,110,112,111,111,112,111,111,111,110,109,109,107,107,107,106,105,101,99,97,97,99,100,100,99,99,98,97,96,97,98,99,99,98,98,96,95,94,93,92,92,90,88,88,88,86,86,85,83,80,78,75,74,73,71,72,73,74,77,80,83,84,84,86,90,93,96,99,101,102,103,105,107,108,110,109,106,107,107,104,100,100,99,99,99,97,97,99,101,104,106,106,108,111,115,115,114,115,117,119,121,124,128,130,134,135,135,136,136,138,140,142,144,144,145,147,149,148,147,148,150,150,151,151,152,154,155,154,152,152,151,151,149,148,147,145,143,144,146,145,145,146,149,150,149,147,145,144,145,144,143,145,146,149,151,153,156,157,159,162,162],[117,116,116,115,115,115,115,116,118,120,121,121,121,122,122,121,120,119,119,119,118,118,118,116,116,115,113,111,111,110,110,108,106,104,103,102,104,105,104,104,103,104,106,107,109,111,112,116,120,122,121,120,119,118,117,114,113,113,115,117,120,121,122,122,123,123,122,122,122,122,121,120,119,120,118,115,114,114,113,111,111,111,111,111,112,110,111,112,112,112,109,108,108,107,106,104,102,100,98,98,99,101,102,102,101,100,98,99,100,100,100,100,98,98,97,96,96,94,92,92,90,88,87,86,84,83,84,81,77,76,74,72,71,71,71,71,72,75,78,81,83,84,85,87,89,92,96,100,102,103,105,106,109,110,109,108,109,109,105,100,99,99,99,100,99,99,101,103,106,108,108,108,112,115,116,117,118,119,120,121,123,127,130,133,134,135,135,136,137,138,140,142,142,144,146,147,146,145,145,147,148,148,149,151,153,153,153,152,151,150,150,147,145,144,143,143,143,144,145,146,148,150,150,149,147,145,145,146,145,145,147,148,150,152,153,155,158,160,162,162],[119,117,117,115,115,114,114,116,117,119,120,121,121,120,121,120,119,117,119,120,119,118,117,116,115,113,111,109,109,108,108,108,105,103,102,102,103,104,103,102,102,103,104,105,108,111,113,116,119,120,120,120,118,117,115,113,112,112,115,118,120,120,121,120,120,120,120,122,121,120,120,119,119,120,117,115,114,113,112,112,112,111,113,113,111,110,111,113,113,114,110,108,108,107,106,104,102,101,101,102,102,102,103,103,102,101,100,100,100,100,101,102,101,100,99,96,96,95,94,92,90,88,86,85,83,81,81,79,77,75,72,69,69,70,70,70,72,73,76,79,81,82,83,85,87,90,95,99,101,104,105,105,108,110,110,109,108,107,104,100,99,100,100,100,100,100,101,104,107,109,109,109,112,115,117,118,117,118,120,121,124,127,130,133,134,134,135,136,137,138,139,140,141,143,144,144,144,142,142,143,145,146,148,150,151,151,152,152,149,147,146,145,143,142,143,145,143,144,144,145,147,148,148,147,147,146,146,146,146,146,148,149,151,154,154,155,158,162,162,161],[121,119,118,116,115,114,114,115,115,117,118,119,118,118,120,119,118,116,116,118,117,116,116,116,114,111,109,109,109,107,106,106,104,103,102,102,102,103,104,103,102,102,104,106,108,111,114,115,117,119,118,118,117,116,114,112,112,114,117,117,119,119,120,120,121,121,119,120,120,118,118,118,119,118,116,115,115,113,111,110,111,113,114,113,112,112,113,113,113,113,110,107,107,107,108,106,104,104,105,105,105,104,104,104,104,103,102,102,102,102,102,104,104,102,100,96,95,95,94,92,89,86,84,83,81,79,78,78,76,73,70,67,67,68,69,69,70,72,74,77,79,81,80,82,86,89,93,96,99,101,103,104,106,108,109,108,106,104,102,101,101,101,101,101,100,100,101,104,106,109,110,110,112,115,117,117,116,116,119,122,125,127,130,133,135,135,135,136,137,138,139,140,141,143,143,142,142,140,140,140,141,144,146,148,149,150,150,149,146,144,144,143,142,142,143,144,143,142,144,144,145,144,144,144,145,146,147,146,146,147,150,151,152,154,157,158,160,161,163,163],[123,121,121,118,115,114,114,115,115,115,116,117,116,116,116,116,116,116,116,116,115,113,114,114,112,110,109,109,108,109,107,106,104,101,101,101,101,101,103,104,104,103,105,108,110,112,113,114,115,117,116,115,115,114,113,112,114,116,117,117,118,119,120,120,120,121,120,119,119,119,119,119,118,117,117,116,114,113,111,110,111,114,114,113,113,112,112,113,113,112,111,108,109,109,108,107,107,107,107,107,106,105,105,105,105,105,104,104,106,107,105,104,104,102,100,98,97,97,95,92,88,85,84,82,80,77,76,76,73,70,69,68,67,67,69,70,71,72,73,75,78,81,80,81,84,88,90,93,97,99,101,103,103,105,106,105,103,101,102,103,102,101,102,102,101,100,100,103,105,106,109,110,112,115,116,116,115,116,119,123,125,128,131,133,135,135,135,136,138,139,139,141,142,143,143,141,139,137,136,137,140,143,143,143,145,147,146,144,143,142,141,141,141,142,141,142,141,140,141,142,142,141,141,142,144,145,145,144,145,147,150,152,152,153,157,161,162,162,165,165],[125,124,123,120,116,114,114,115,114,114,114,115,115,113,113,113,113,114,115,116,114,112,112,112,110,109,110,110,109,109,109,108,105,102,100,100,100,100,102,104,105,105,106,109,111,113,113,112,114,115,114,112,112,112,112,113,116,117,118,118,119,119,119,120,119,119,119,118,119,119,120,119,119,119,118,115,114,113,111,109,111,112,113,113,113,112,111,111,112,112,111,111,111,111,110,109,109,109,109,108,107,107,107,107,106,106,107,107,110,111,109,106,104,102,101,99,98,98,96,93,89,86,84,82,81,79,76,74,72,69,68,68,69,69,70,71,72,72,74,75,77,78,79,80,83,85,88,91,95,98,101,102,102,103,104,102,100,100,102,103,102,102,103,103,102,100,99,101,102,103,105,107,110,113,113,114,114,115,119,123,125,128,131,133,134,134,135,136,138,140,141,143,143,143,143,141,138,135,134,135,138,140,140,140,140,142,142,140,139,138,138,139,139,141,141,141,140,139,139,139,139,137,137,139,142,143,143,143,143,145,147,150,151,153,156,160,162,163,165,165],[126,126,124,122,118,116,114,114,114,113,114,113,112,111,112,113,112,112,112,114,112,110,111,111,110,109,110,111,111,110,110,109,106,104,102,102,101,100,102,104,106,107,107,108,110,112,112,112,113,113,112,111,111,112,112,113,115,118,119,119,119,118,119,120,119,117,118,118,119,119,119,119,119,120,118,115,114,113,110,108,109,111,112,113,112,111,111,110,111,111,111,112,111,111,110,110,110,109,110,109,107,106,107,109,109,110,111,111,112,113,111,108,107,104,102,102,100,99,96,93,90,87,84,83,82,81,77,73,72,71,69,68,69,70,72,73,73,73,74,75,76,75,76,77,79,81,85,89,93,96,98,100,101,102,103,102,101,102,102,102,103,102,102,103,103,101,101,101,100,100,104,106,107,109,110,111,113,114,119,121,124,126,130,133,134,134,134,135,137,138,141,143,143,141,141,140,137,134,132,131,134,136,137,138,138,138,138,138,138,137,138,137,138,140,140,139,139,139,137,137,137,137,138,139,139,140,140,142,143,144,147,148,150,152,156,158,161,162,163,163],[127,126,125,123,119,116,113,112,113,114,114,112,112,112,113,112,111,111,110,112,111,109,109,110,110,110,111,111,110,111,111,110,108,106,105,105,103,101,102,105,106,107,107,108,109,110,111,111,111,110,110,110,111,112,111,112,115,118,121,121,119,118,118,118,116,115,115,116,117,117,117,117,117,117,117,115,114,112,108,108,109,110,111,112,111,111,111,111,111,111,111,112,111,109,109,110,110,109,110,108,107,106,106,108,111,112,114,113,113,114,113,112,110,106,105,104,102,100,98,95,92,88,85,83,83,83,80,76,75,74,72,70,71,72,73,74,75,75,75,75,74,74,74,75,76,79,83,86,89,93,95,98,99,101,102,102,102,102,102,103,104,102,100,102,103,103,101,101,100,100,103,104,104,104,105,108,111,115,118,120,121,123,128,132,134,133,135,136,138,138,140,142,141,139,138,138,136,133,129,128,130,132,135,136,135,135,133,135,136,137,137,136,138,139,140,139,139,138,136,136,137,137,139,138,137,137,137,140,142,143,146,147,148,151,154,157,159,160,162,161],[130,128,126,124,121,117,113,112,112,114,113,111,112,112,112,111,110,111,110,111,110,108,108,109,108,109,110,110,110,111,111,111,110,108,107,108,106,103,104,106,107,108,109,110,110,111,111,111,110,108,108,109,110,111,111,113,115,117,120,120,118,116,117,116,114,113,113,114,115,114,115,116,116,116,117,115,113,111,109,109,109,109,110,110,110,110,110,113,112,112,113,112,111,108,109,110,109,108,109,109,109,109,107,107,110,112,114,115,115,116,116,115,112,108,107,106,105,102,100,99,95,91,88,86,85,85,82,79,77,75,74,72,73,75,75,75,76,77,76,75,75,74,72,74,75,77,80,82,86,90,92,96,97,100,102,101,101,102,103,103,103,102,100,100,101,103,102,101,100,99,102,103,102,101,103,105,107,112,114,116,119,121,126,130,131,131,133,136,137,138,141,142,141,138,137,136,133,131,128,127,128,129,132,132,131,132,130,131,134,136,135,135,136,138,140,140,139,137,137,137,138,138,138,136,136,135,134,136,138,139,142,145,146,149,153,156,157,157,159,160],[132,130,128,125,121,117,114,112,112,113,113,112,112,113,112,111,110,110,110,110,109,107,107,108,107,107,109,110,111,111,111,113,111,110,109,109,108,106,105,107,109,110,112,111,111,112,111,110,108,107,107,108,109,110,112,114,116,117,119,119,117,115,115,115,113,112,112,113,114,113,113,115,116,116,115,114,112,110,109,109,108,108,110,109,108,108,110,112,112,113,114,112,111,110,109,109,108,109,111,111,110,109,108,107,110,113,115,116,117,118,118,116,113,110,108,108,107,106,103,102,98,95,92,88,87,86,83,82,79,77,76,74,74,76,77,77,77,76,75,75,75,73,72,73,74,75,77,80,84,87,89,93,96,99,101,101,101,102,103,105,104,103,100,100,100,101,101,101,100,100,102,103,101,101,102,102,103,107,110,113,115,118,123,128,129,129,131,134,136,137,141,141,140,137,135,134,132,130,127,125,126,127,128,129,128,128,128,129,132,133,134,135,136,137,139,139,138,137,137,137,138,138,138,136,135,134,132,132,134,136,139,141,144,147,150,154,154,155,157,159],[133,133,130,126,122,118,114,112,112,113,114,114,113,112,112,110,110,110,109,109,109,108,108,109,108,107,109,110,111,111,113,115,114,112,111,109,110,109,109,110,111,112,112,112,113,113,111,109,106,105,104,104,106,107,109,112,114,115,118,118,116,114,113,112,111,111,111,112,113,113,114,113,113,115,114,112,111,109,108,108,107,107,107,107,107,106,109,112,113,115,115,113,113,112,110,109,111,111,110,110,109,110,109,109,111,114,116,116,117,118,117,116,115,113,111,109,109,108,106,105,103,100,95,90,89,88,87,86,82,80,79,78,77,77,77,78,77,76,75,73,73,73,72,73,73,73,75,78,81,85,88,90,94,98,100,101,101,102,104,105,105,103,103,102,101,101,101,100,100,100,100,102,101,99,100,101,103,104,107,108,111,115,120,124,125,127,129,133,134,135,137,139,137,136,134,132,131,129,125,122,123,125,126,127,126,125,125,126,129,131,132,134,136,136,139,140,139,138,137,137,137,137,137,136,134,134,132,132,134,136,136,138,142,145,148,152,152,154,156,157],[135,134,131,128,125,120,115,113,112,113,113,113,112,111,110,110,110,109,108,110,110,110,111,111,109,107,110,111,111,112,114,116,115,114,113,111,111,112,113,114,113,112,112,112,113,114,112,110,107,105,103,103,105,106,107,109,112,114,116,115,113,113,112,110,110,111,112,112,113,113,114,114,113,113,113,112,110,109,108,107,106,106,106,107,107,106,108,111,114,116,117,115,115,114,112,112,113,113,111,110,110,111,112,112,114,115,117,117,118,118,117,117,116,115,114,112,110,109,108,107,106,102,98,94,93,91,89,87,83,80,80,80,78,76,76,77,77,75,72,70,71,71,71,71,71,72,74,77,81,85,87,90,95,98,100,101,102,103,103,103,104,104,105,104,103,102,102,100,99,99,100,100,100,98,98,101,102,103,104,104,108,113,118,121,122,124,127,130,130,131,133,135,135,133,132,131,128,127,124,121,122,124,126,125,124,124,124,125,127,130,132,132,134,136,138,139,139,138,137,136,136,135,135,135,134,133,133,133,134,134,134,136,140,143,145,148,150,151,154,154],[134,134,133,130,125,121,116,114,113,112,113,112,111,111,111,111,110,109,110,111,110,109,110,111,110,108,110,112,113,114,115,116,116,116,115,114,115,115,115,116,114,113,113,112,113,114,113,110,109,107,104,104,106,108,108,108,111,114,114,113,112,111,110,109,111,112,112,113,113,113,115,115,114,113,112,111,110,109,108,107,108,108,108,109,109,109,110,112,114,116,118,117,116,115,113,113,114,114,113,112,113,114,115,116,116,116,118,119,119,118,117,118,117,115,115,115,113,111,110,108,106,104,100,97,95,93,91,88,83,80,80,80,78,76,75,75,74,73,70,68,69,70,70,70,70,71,72,76,81,85,89,92,96,98,101,102,102,103,103,102,102,103,104,103,102,103,102,101,101,102,101,100,100,99,98,100,100,101,102,102,107,111,114,117,118,120,123,126,127,128,130,132,131,129,128,128,126,125,123,121,122,124,124,123,123,123,123,125,126,128,129,129,132,134,136,135,135,135,135,135,135,135,134,134,133,132,132,133,132,131,132,135,138,140,143,145,147,148,152,153],[134,134,134,130,125,121,117,114,112,112,112,111,110,111,112,112,110,110,111,111,110,110,111,112,111,110,110,113,114,115,117,117,117,118,117,117,118,117,116,117,115,113,114,113,114,114,113,112,110,108,106,106,109,110,108,108,110,113,113,111,111,110,109,110,112,113,114,113,113,114,115,117,115,114,113,112,111,109,108,109,111,111,111,112,113,112,113,114,115,117,117,117,116,115,114,115,115,115,115,115,115,117,119,119,118,119,120,119,118,117,116,117,117,116,117,118,117,114,111,108,107,106,103,99,96,95,92,87,83,80,79,79,78,76,74,73,71,70,69,67,68,69,69,69,69,70,72,77,81,86,90,92,96,99,100,100,101,102,102,100,100,101,102,103,102,102,102,103,104,104,101,100,100,99,98,99,100,100,100,102,106,108,111,113,114,116,120,123,124,125,128,128,126,124,124,124,123,122,122,122,123,123,123,123,123,122,122,125,126,127,127,127,129,132,133,133,133,133,133,133,133,133,133,133,132,130,130,132,132,130,130,133,135,138,141,143,145,147,150,150],[136,136,134,130,126,123,119,114,112,112,111,111,112,112,112,112,112,111,110,110,111,111,113,113,112,113,113,114,115,115,117,118,119,119,119,120,120,119,119,119,117,115,114,114,114,114,114,113,111,110,109,108,109,109,109,109,111,113,113,111,110,109,109,111,112,114,114,112,112,112,114,117,115,113,113,113,110,108,109,111,112,113,114,115,116,115,115,115,116,118,118,118,117,116,117,117,117,116,117,118,118,117,119,120,121,122,121,119,118,118,116,116,117,118,119,119,117,116,112,109,109,108,104,99,97,95,91,86,84,83,82,80,78,77,74,73,70,68,67,67,69,69,69,70,70,71,74,78,82,86,89,92,95,97,98,97,99,100,98,98,98,99,101,102,102,102,102,102,103,103,101,100,99,99,98,97,98,98,100,102,104,107,110,110,111,112,115,119,121,122,124,124,123,121,120,120,120,120,120,121,122,123,122,122,121,121,123,124,124,124,125,126,128,131,132,131,131,130,131,132,131,131,131,131,130,129,130,131,131,130,131,133,135,138,141,141,143,145,147,148],[137,137,134,129,127,124,122,117,113,111,110,111,112,113,114,114,114,112,110,110,112,114,114,114,113,114,115,116,116,117,118,120,121,120,120,121,121,119,119,120,118,116,115,115,115,115,114,112,111,111,112,110,110,110,109,109,111,113,113,112,111,109,109,111,112,114,115,114,113,112,113,115,115,113,114,112,109,108,110,111,111,112,115,116,117,118,119,118,117,117,118,119,118,118,119,120,120,119,119,119,119,119,119,121,122,122,122,119,118,118,116,116,117,118,118,118,117,116,114,111,112,111,107,101,97,95,90,87,86,85,84,82,79,78,76,74,71,69,67,67,68,69,70,71,71,72,76,79,82,86,89,92,94,95,95,96,97,97,96,95,96,97,100,101,101,101,101,102,102,102,100,99,99,99,99,98,98,99,100,101,102,105,108,108,108,108,110,115,118,119,120,120,120,119,118,119,119,120,120,120,120,121,121,121,121,121,122,121,121,121,122,124,127,129,131,130,130,130,129,130,130,130,132,131,130,129,131,132,131,130,130,132,135,139,142,143,143,145,147,148],[135,135,133,129,127,125,123,118,115,112,111,112,113,114,115,115,114,113,112,112,114,117,116,115,114,114,116,117,118,119,121,123,122,122,122,122,122,120,119,120,118,116,115,116,115,115,114,113,113,114,114,112,111,111,109,110,111,113,113,113,111,109,109,111,112,113,115,115,114,112,114,115,114,113,113,112,110,108,109,111,112,112,114,116,117,119,119,120,119,118,119,120,120,120,121,121,122,121,121,122,122,123,121,122,122,122,123,122,120,118,117,117,118,120,119,118,117,116,114,112,112,112,108,104,100,97,92,88,86,85,85,82,80,78,77,75,73,70,67,66,67,68,68,69,70,71,74,79,82,85,89,92,93,94,95,96,96,96,96,96,96,98,98,99,100,100,101,103,103,102,101,101,101,101,100,100,100,100,101,102,103,104,107,107,107,107,108,111,114,116,118,118,118,117,116,117,117,118,117,117,118,118,118,119,119,120,121,120,119,120,120,122,125,127,129,130,130,130,128,129,129,129,131,131,130,129,130,130,130,129,129,131,135,139,142,145,145,145,148,148],[133,133,132,130,129,126,123,119,116,114,113,112,113,114,116,116,116,115,114,115,117,118,117,116,114,114,117,118,119,121,123,125,125,124,125,125,123,122,121,120,118,116,115,115,115,115,115,114,115,115,115,114,113,113,111,110,112,113,113,112,111,109,109,110,111,113,114,114,113,113,114,114,114,113,113,113,111,109,110,111,112,112,114,115,116,118,119,122,122,121,122,122,122,123,124,122,122,123,123,124,125,125,124,124,123,124,125,125,123,120,117,118,119,120,120,118,116,116,113,112,112,111,109,106,103,100,94,90,87,86,85,82,80,78,78,77,76,72,67,66,66,67,68,69,69,70,73,77,82,86,89,92,94,95,96,96,95,96,96,96,96,97,98,98,98,98,100,103,103,104,103,103,103,104,103,101,101,101,101,102,104,105,106,107,106,106,105,107,109,112,115,116,116,115,114,114,116,116,115,114,116,117,117,116,117,119,121,120,118,118,119,119,122,125,128,129,129,128,128,128,129,129,130,131,131,130,129,128,127,127,128,131,135,139,143,145,146,147,148,149],[131,132,132,132,129,125,123,120,118,118,116,114,115,116,117,118,119,118,118,118,119,119,119,118,117,117,118,118,121,122,123,125,125,125,126,127,125,124,122,120,118,117,116,116,116,117,115,114,116,116,116,114,114,115,113,111,113,113,113,111,111,110,110,111,112,113,113,113,114,115,114,113,114,115,116,115,113,111,111,112,114,114,116,117,117,119,121,123,123,124,124,125,125,124,123,122,124,126,127,127,127,126,126,125,126,126,127,127,124,121,120,121,120,119,120,119,117,116,114,113,112,109,109,107,104,101,96,91,88,86,85,82,81,79,78,76,74,72,69,68,68,68,68,68,68,69,73,77,80,85,87,91,93,94,94,94,94,94,95,95,95,95,96,97,97,98,100,102,104,105,104,103,103,104,103,101,102,102,101,101,103,103,104,104,104,105,103,103,105,109,112,114,114,113,113,112,113,114,113,112,114,116,115,114,116,117,118,118,117,117,118,119,123,125,127,128,128,128,128,128,128,128,128,128,128,129,129,128,128,128,128,131,134,138,143,146,148,149,150,151],[130,131,133,131,128,124,121,120,121,122,121,119,118,118,119,120,120,120,120,120,120,121,121,121,120,119,119,120,123,123,123,124,125,126,127,128,126,126,125,123,121,118,117,117,118,117,116,115,117,117,117,117,116,118,117,115,114,115,114,112,111,111,111,113,113,113,112,114,115,116,116,115,117,118,118,118,116,112,111,113,116,117,118,118,119,121,122,123,124,126,127,127,127,125,124,124,126,129,130,130,130,128,127,128,129,130,130,129,126,124,123,123,121,121,122,120,119,117,115,113,112,108,106,104,103,101,97,93,89,86,84,83,82,80,77,74,73,72,70,70,70,70,70,68,67,70,73,77,79,83,85,88,92,94,93,93,93,94,95,96,95,95,97,98,98,98,99,101,101,103,104,104,103,102,102,102,101,101,101,100,101,100,100,100,101,102,100,100,102,106,109,111,111,111,111,111,111,112,111,111,111,113,114,114,115,115,115,117,116,116,117,120,123,124,125,126,127,128,128,126,126,126,125,125,126,128,129,128,128,130,131,132,135,139,143,147,148,148,149,148],[129,129,130,130,127,124,122,121,122,123,124,123,122,121,120,121,121,121,121,120,120,122,122,122,122,122,122,122,124,126,125,125,126,126,127,127,126,125,125,125,123,120,119,119,118,116,117,117,119,120,120,121,121,121,121,119,118,118,116,113,113,112,111,112,112,112,113,115,117,117,119,119,120,122,121,119,117,114,114,114,116,118,119,120,121,122,123,124,126,128,129,129,127,126,126,128,129,131,132,131,132,131,131,132,132,134,134,132,130,128,127,126,125,124,123,120,118,116,114,112,110,107,104,103,101,99,97,95,92,89,87,85,83,82,79,75,74,73,71,69,69,70,70,69,69,71,73,75,78,80,82,85,89,93,93,93,94,95,96,97,96,97,97,98,98,98,98,99,100,100,102,102,102,101,102,103,102,101,100,100,100,99,98,99,100,100,100,101,102,104,106,107,106,106,107,108,109,109,110,110,110,111,112,112,112,112,114,115,116,115,117,120,121,122,122,123,123,125,125,124,124,125,124,125,127,130,130,129,130,131,132,135,139,143,145,148,148,148,147,146],[129,128,129,128,126,123,122,123,123,125,126,127,127,125,122,123,123,122,122,121,121,122,123,122,122,123,123,124,126,127,126,125,126,125,125,125,125,125,126,125,124,124,122,120,119,118,119,120,121,122,122,123,124,125,124,122,121,120,118,116,115,113,112,111,112,112,113,116,118,120,121,121,123,124,123,121,118,117,116,115,115,118,120,122,124,125,125,127,129,131,131,130,129,128,129,131,131,133,133,133,133,134,134,135,135,137,137,135,134,132,131,129,128,126,124,120,117,114,112,112,109,105,102,101,99,97,96,95,93,92,88,86,84,82,80,77,76,75,72,69,68,69,70,70,70,71,73,75,77,79,80,83,86,91,94,95,95,96,96,98,98,98,98,99,99,98,98,98,98,98,100,101,100,100,103,104,102,100,100,100,100,100,98,97,98,99,100,100,101,103,103,102,102,102,103,104,106,108,108,108,109,110,110,110,110,110,112,115,116,117,118,119,120,121,120,119,120,121,123,122,122,123,124,125,128,130,130,130,131,132,134,138,142,145,147,149,149,148,147,145],[129,127,126,126,124,123,124,125,126,126,128,130,129,129,127,126,125,124,125,125,124,125,124,124,125,125,125,126,127,128,127,126,126,126,125,125,125,126,128,128,128,127,123,121,120,120,120,122,123,124,125,125,126,127,126,123,122,121,120,118,118,115,113,111,111,113,113,114,118,121,123,124,125,125,124,122,121,120,118,117,117,119,120,122,125,127,128,130,133,134,134,133,132,131,132,132,132,134,134,135,135,136,136,137,138,138,138,137,136,135,134,133,130,126,124,120,116,113,111,111,108,104,102,99,97,94,94,94,94,93,89,87,85,82,80,77,76,75,72,70,68,68,70,70,70,70,71,73,77,80,81,83,86,89,93,96,96,97,98,99,99,100,99,100,99,98,97,97,96,96,98,100,99,99,101,103,102,99,99,99,99,99,97,96,97,98,98,99,101,103,101,99,100,101,101,101,103,106,106,106,107,107,109,110,110,110,113,116,118,119,119,119,121,123,121,119,119,118,118,120,120,122,124,125,127,128,128,128,129,132,136,140,142,144,146,147,147,148,146,144],[128,125,123,124,124,125,127,128,128,127,128,130,131,132,131,129,129,128,128,128,128,128,127,127,127,126,125,126,128,128,128,127,126,126,126,126,127,128,129,130,130,129,126,123,123,124,123,123,125,126,126,126,127,128,128,125,125,123,122,121,120,117,114,112,112,113,114,114,117,121,124,125,124,123,122,122,124,124,121,120,120,121,122,123,125,128,131,133,135,136,135,135,135,135,134,133,134,134,133,134,135,137,139,140,140,140,140,140,140,138,136,135,131,126,123,120,116,112,109,108,105,104,103,99,96,94,94,93,94,94,91,88,85,82,80,78,75,74,73,71,70,70,70,71,71,69,69,72,76,80,82,84,86,89,93,95,95,97,99,100,99,99,99,99,98,97,97,96,95,94,95,98,98,99,101,102,101,98,97,97,98,100,98,96,96,98,98,99,101,100,99,98,99,100,100,100,100,103,105,105,105,106,108,109,109,111,113,116,118,120,120,119,121,124,123,120,119,117,115,117,119,122,124,124,126,125,125,127,129,132,136,139,141,142,144,145,145,146,146,145],[126,124,122,123,124,125,127,129,129,129,129,130,132,133,132,130,130,131,132,132,131,130,129,130,129,128,127,127,128,128,128,127,126,126,127,128,129,131,131,132,131,131,128,127,128,129,128,126,128,129,128,129,129,130,130,127,127,125,123,121,119,118,115,114,114,115,115,116,117,119,122,124,123,122,121,121,123,124,123,122,122,123,124,126,128,130,132,134,136,138,138,137,138,139,137,135,135,135,134,134,136,138,140,142,141,141,142,143,141,139,138,136,131,126,124,121,117,113,108,107,104,102,101,99,97,96,94,94,95,95,92,90,87,84,81,79,76,74,75,74,72,72,71,71,70,68,69,71,75,78,81,84,87,90,93,95,95,96,98,100,99,97,97,98,96,95,95,93,92,92,94,97,97,98,100,101,100,98,97,97,99,100,98,96,97,99,98,97,98,98,98,97,98,98,98,100,100,103,105,106,105,106,107,109,111,112,114,116,118,120,120,119,121,124,123,120,118,116,115,115,118,121,123,122,123,123,124,126,128,132,135,138,140,142,142,144,144,145,146,145],[124,123,123,123,123,124,126,128,130,131,130,131,132,134,134,132,132,133,134,135,134,133,133,133,132,131,129,128,128,129,129,127,126,126,128,131,132,133,134,133,132,132,131,130,132,132,131,130,131,132,130,130,131,132,132,130,129,126,123,121,119,118,117,117,117,116,116,116,117,119,121,122,122,121,121,121,121,122,124,125,126,127,126,129,130,132,133,134,136,138,138,139,140,141,140,137,137,137,135,135,137,138,140,141,142,143,144,144,143,141,140,136,132,128,126,122,119,114,109,105,103,102,100,100,99,97,96,96,98,97,94,91,89,87,83,79,77,77,78,77,74,73,73,72,71,68,69,71,73,76,80,84,87,89,92,94,94,95,96,98,97,96,96,97,95,93,91,89,88,89,92,95,96,97,98,100,100,99,99,99,100,100,98,98,99,100,99,97,97,98,98,98,97,97,97,99,101,103,105,106,106,106,108,110,112,114,115,116,118,119,119,119,121,123,121,119,116,114,114,115,117,120,122,121,121,121,121,124,126,130,134,138,140,141,141,142,143,143,143,143],[125,124,123,123,123,124,126,128,130,131,132,133,134,135,134,134,135,137,136,136,135,134,136,136,134,133,131,130,130,130,129,128,127,127,129,133,134,134,134,134,133,133,134,133,134,133,132,131,132,134,132,131,132,134,134,133,131,127,126,124,121,119,119,119,117,115,116,117,117,117,118,119,120,120,120,121,122,122,125,126,127,128,128,130,131,133,135,137,137,139,140,141,142,141,141,139,139,139,137,137,138,139,142,142,143,144,145,146,144,143,139,135,132,129,126,122,120,116,111,106,103,102,100,99,99,97,97,97,97,97,96,93,91,89,85,80,78,78,78,79,76,73,72,72,70,69,71,73,74,77,80,83,85,86,90,93,94,96,97,97,98,96,97,97,95,93,91,90,88,88,91,94,95,95,97,100,100,100,100,100,100,100,100,102,102,102,101,100,99,100,99,99,98,97,97,98,100,101,104,106,107,108,111,113,114,116,116,115,117,118,119,120,121,122,120,117,116,113,114,114,116,118,119,120,119,119,121,122,124,128,131,135,137,138,138,138,139,141,141,141],[126,125,125,124,123,123,125,126,128,132,135,136,135,135,135,136,137,139,138,137,138,138,139,137,136,134,132,132,131,130,131,131,129,128,129,132,134,135,134,134,134,134,135,135,135,133,132,133,133,134,134,133,134,134,134,133,130,127,126,125,123,120,119,118,115,114,114,114,114,113,113,116,119,120,120,121,122,123,125,126,127,128,129,131,133,136,138,140,140,141,143,144,142,141,140,140,140,140,139,138,138,141,143,143,143,143,143,144,143,141,136,132,131,128,124,120,119,116,113,108,104,102,100,99,98,98,97,96,97,97,95,92,91,89,86,82,79,78,79,78,76,73,70,71,71,72,73,74,75,77,80,81,83,85,88,90,93,95,97,97,98,98,98,98,96,94,93,92,90,90,93,94,95,95,95,99,101,102,104,103,103,103,102,103,103,103,103,102,101,102,102,101,99,98,97,98,99,101,104,107,109,111,114,115,117,118,117,116,117,118,120,120,120,120,119,117,116,114,114,114,116,117,117,117,118,119,119,120,122,125,127,130,133,135,135,135,137,140,140,140],[127,126,125,124,122,122,123,125,129,132,135,138,137,137,137,137,139,140,140,139,141,142,142,138,136,134,132,133,132,130,132,133,131,128,130,131,133,135,134,135,135,135,137,137,134,132,133,135,136,135,135,134,134,133,133,132,128,126,125,124,123,120,120,118,115,113,112,111,111,111,112,114,117,120,121,121,123,125,127,128,128,129,131,133,136,139,140,141,142,141,143,145,143,142,141,141,140,139,138,137,139,141,143,143,143,141,141,140,138,136,132,129,128,127,124,120,118,117,114,111,107,104,100,100,100,100,98,97,97,98,95,92,90,87,85,83,80,78,79,77,75,73,71,72,72,73,74,74,75,77,79,80,83,86,86,88,91,92,94,95,97,99,99,99,97,95,95,95,93,92,94,95,95,96,96,99,102,104,107,107,106,106,104,105,105,105,104,103,103,103,103,102,100,100,99,101,103,104,106,109,111,113,115,115,116,118,118,118,118,117,118,118,118,117,117,118,118,117,117,116,117,117,117,116,116,118,117,117,119,122,124,126,130,132,133,134,137,139,140,141],[128,127,124,123,122,121,123,127,131,133,136,138,137,137,137,138,140,141,141,141,142,144,144,141,136,135,134,134,134,133,133,134,133,131,131,131,132,133,133,135,137,137,138,137,135,133,134,136,138,138,137,136,135,133,133,130,126,124,124,124,122,120,120,117,114,112,111,110,110,110,111,114,117,119,120,121,123,125,128,129,130,131,133,136,140,141,142,143,143,142,143,144,143,142,142,142,141,139,138,139,140,141,143,143,142,140,139,136,134,132,128,126,125,125,122,119,116,115,114,111,108,106,102,102,102,102,100,98,98,97,94,91,90,87,85,83,79,77,77,77,75,73,72,72,73,74,74,74,76,77,79,81,84,86,86,87,90,91,92,94,97,100,100,99,98,97,98,98,97,96,96,96,96,97,98,100,103,106,110,110,110,108,106,106,105,106,105,103,103,103,103,103,103,102,102,104,106,107,108,111,113,115,116,116,115,116,117,117,116,115,115,115,116,116,117,119,120,119,119,118,119,118,117,115,115,116,116,116,118,121,121,123,126,130,131,133,136,139,140,141],[128,128,126,124,123,123,125,128,131,133,136,138,138,138,139,139,140,141,141,143,145,146,145,143,139,136,135,135,136,137,136,134,134,134,133,131,133,134,135,136,138,138,138,137,135,134,134,137,138,139,139,137,135,133,132,129,125,122,122,123,121,119,119,117,114,112,110,110,110,110,111,114,117,118,120,121,122,124,128,129,130,132,134,138,141,142,145,144,143,143,143,143,144,144,144,143,141,140,139,140,140,141,142,143,140,138,136,134,132,129,126,125,124,123,120,118,115,113,113,111,109,107,105,103,103,103,101,99,99,97,96,93,91,89,87,84,81,78,77,76,74,73,72,72,74,75,74,74,75,77,79,80,83,85,84,85,88,91,93,94,97,99,99,98,98,97,98,100,100,100,99,98,99,100,100,102,105,108,111,112,112,111,109,109,107,107,105,103,104,104,105,106,105,105,105,106,107,109,110,112,113,113,114,114,113,114,114,115,114,114,114,113,114,114,116,119,121,122,121,119,118,117,116,114,114,116,115,115,117,120,120,121,124,129,131,134,136,139,140,142],[126,127,126,124,124,124,126,128,130,132,135,137,138,139,141,141,141,141,141,143,146,147,146,144,141,138,136,137,138,140,139,136,136,137,136,135,135,136,137,138,138,137,137,137,136,134,134,136,138,140,141,139,136,134,133,129,125,121,121,121,120,118,117,117,116,113,110,111,111,111,111,114,116,118,119,120,123,126,129,129,130,132,133,137,141,144,146,144,142,141,140,142,144,144,144,143,141,139,138,139,140,140,141,141,139,137,135,131,129,126,124,122,121,120,119,118,115,113,112,111,110,109,108,107,105,104,102,101,101,99,97,96,94,92,90,87,83,79,77,76,76,75,74,73,73,75,75,74,74,77,78,80,83,84,84,85,88,91,93,94,96,98,99,99,98,98,98,100,100,101,102,102,102,102,102,104,108,110,112,113,113,114,113,113,111,110,108,106,106,107,108,106,106,106,107,108,109,109,111,112,113,112,112,112,113,114,113,112,111,112,113,113,114,114,115,118,121,122,122,119,117,116,115,115,115,115,115,114,116,119,120,121,125,129,132,134,135,137,139,141],[126,126,126,124,124,125,126,129,130,132,135,138,138,139,141,142,142,142,143,144,147,150,149,147,144,140,139,139,140,141,141,139,140,141,140,139,138,138,138,138,138,137,138,138,137,135,136,137,140,140,140,139,136,133,132,129,125,121,121,120,119,117,117,117,114,112,110,111,110,110,111,113,115,117,119,120,123,126,129,129,131,132,133,137,140,144,145,144,143,141,140,140,142,142,144,143,141,139,138,138,138,138,139,138,136,135,133,130,127,124,121,118,118,117,118,118,115,113,112,111,111,111,110,110,107,106,105,105,104,102,100,98,96,94,92,89,85,81,78,77,76,76,74,72,73,73,73,75,76,77,79,80,82,84,84,85,88,91,93,93,95,97,99,99,99,98,97,99,100,101,102,102,102,103,104,106,109,112,115,116,117,117,116,115,114,112,110,108,109,110,109,107,107,107,107,108,109,110,112,113,113,112,112,111,112,113,111,110,111,111,114,115,115,116,116,119,121,122,122,120,119,118,116,116,115,115,115,116,117,119,120,120,124,129,132,135,135,136,138,140],[126,126,125,125,125,125,126,128,129,132,135,138,139,140,141,143,143,144,144,146,149,151,151,149,146,143,141,140,141,141,141,141,141,143,144,143,142,141,140,138,138,138,138,138,137,137,137,138,140,140,139,137,134,132,131,128,124,121,121,120,118,117,117,114,112,110,110,110,110,110,109,111,114,117,118,120,123,126,129,129,130,131,134,138,141,145,146,145,143,140,139,139,139,140,143,143,141,138,136,136,134,134,136,136,134,132,129,127,124,121,118,115,114,114,115,116,114,113,112,113,113,113,112,111,109,107,107,108,108,106,103,99,97,96,94,91,87,83,80,78,76,76,74,73,74,74,74,75,76,78,79,80,82,84,85,86,88,92,93,93,95,97,98,99,100,98,97,98,99,101,102,102,102,104,106,108,111,114,117,118,119,119,119,118,116,114,113,111,111,112,109,108,108,107,107,109,110,111,113,112,112,112,112,110,110,112,111,110,111,112,116,117,117,116,117,119,121,121,122,120,119,118,116,115,115,115,116,117,118,119,120,121,124,128,133,134,135,136,138,140],[126,126,127,127,126,125,127,127,129,132,133,136,139,140,142,143,144,146,146,148,150,151,152,150,148,145,142,142,142,143,144,144,144,145,145,145,144,142,140,138,137,138,137,136,136,137,136,137,139,139,137,135,133,132,131,127,124,121,120,121,119,118,116,113,112,110,109,108,109,110,110,110,113,116,118,120,123,125,129,131,131,132,135,138,142,145,146,145,143,140,139,139,138,138,140,140,137,135,135,135,134,132,132,133,132,130,128,124,121,116,115,113,111,111,111,111,112,113,114,115,115,114,114,113,111,109,110,111,110,108,105,102,102,100,98,93,89,84,81,80,78,76,75,75,75,76,76,76,76,78,79,80,84,85,87,88,89,91,92,93,94,95,97,98,99,98,97,98,99,101,102,103,104,105,107,109,112,115,117,119,120,120,121,120,118,115,114,114,114,114,112,110,108,107,107,109,110,111,112,111,112,112,111,110,110,110,109,109,110,112,115,117,118,117,118,120,120,120,121,120,120,120,117,116,116,115,116,116,117,119,120,122,124,128,132,133,134,134,136,138],[126,128,130,129,128,129,130,130,131,132,133,135,138,140,142,142,144,147,147,148,151,152,152,150,148,146,144,144,145,146,146,146,145,146,145,144,144,142,140,138,137,137,136,135,135,136,135,135,137,137,135,133,132,132,131,128,125,121,119,121,121,120,118,115,113,112,109,108,109,110,110,111,113,116,117,120,122,125,128,130,132,134,138,141,143,145,146,146,144,141,140,140,139,138,138,138,135,133,133,134,132,130,129,130,129,128,127,123,119,115,113,111,110,108,107,108,110,112,114,115,114,114,114,114,113,111,112,113,111,109,107,106,106,104,101,96,91,87,83,81,79,78,77,77,78,78,78,78,78,78,78,80,84,87,89,90,90,91,92,93,93,94,96,97,98,97,98,99,100,101,102,104,106,107,109,110,112,115,117,119,120,120,121,121,119,115,114,114,115,115,114,112,110,109,108,109,111,111,111,111,111,111,111,110,110,108,107,107,109,111,113,115,116,117,119,121,120,120,121,120,120,120,118,117,117,117,119,119,119,119,120,123,125,127,130,132,133,134,134,137],[129,131,132,131,131,132,132,132,133,132,132,135,136,139,140,141,144,147,147,147,150,153,152,150,150,149,147,147,148,150,149,148,147,147,147,144,144,143,141,140,139,137,136,135,135,135,134,134,134,135,134,132,132,133,132,129,126,122,121,121,121,120,119,116,114,113,109,108,109,110,110,111,113,115,117,120,122,125,129,131,133,135,138,142,143,144,147,147,145,142,141,141,140,139,139,137,134,132,131,131,129,126,125,126,126,125,124,120,116,113,111,108,107,105,105,107,109,111,113,114,114,114,115,115,114,113,114,115,113,111,109,107,107,106,104,99,94,90,86,83,83,83,80,78,80,81,81,81,79,79,79,81,85,88,90,91,90,91,92,93,94,94,96,97,96,96,97,99,100,101,103,105,106,107,109,111,113,115,117,121,121,122,122,121,119,116,114,114,114,115,115,113,113,112,110,110,111,111,111,111,110,109,109,109,108,108,107,108,109,110,112,113,114,115,117,120,121,121,121,121,120,120,119,119,119,120,121,122,122,122,123,124,125,126,129,130,131,132,132,135],[131,133,135,133,133,134,135,136,135,134,133,133,135,138,140,141,144,146,146,147,150,151,151,151,152,151,151,151,151,151,150,150,151,151,148,145,143,142,141,141,139,137,136,136,135,133,132,132,132,132,132,132,132,132,131,130,128,125,123,121,120,120,119,116,114,112,108,107,108,109,109,110,112,115,117,120,123,126,130,131,134,136,139,142,144,144,146,148,146,144,143,143,141,141,140,136,132,130,129,127,125,122,122,123,123,123,121,117,114,111,108,105,104,103,104,106,108,111,113,113,113,114,116,116,115,115,116,116,114,112,110,108,107,106,105,101,95,91,87,87,87,86,83,82,82,83,84,82,81,81,81,83,86,88,91,91,90,91,92,95,95,95,96,97,96,95,97,100,100,102,104,105,106,107,109,112,115,116,118,122,123,123,123,120,118,116,115,114,115,115,115,115,114,113,112,112,112,111,109,110,110,110,108,108,107,108,109,110,110,110,111,112,112,112,115,118,119,120,121,122,123,122,120,120,122,123,123,124,125,125,125,124,125,126,129,129,129,131,131,133],[133,134,136,135,136,136,137,139,137,136,135,135,137,140,141,141,143,145,146,146,148,150,150,152,152,152,153,154,152,151,151,150,151,152,149,146,144,141,141,141,138,135,134,134,132,130,131,131,130,130,130,131,130,130,130,130,128,125,124,122,121,122,120,118,115,112,109,108,108,108,109,110,112,114,117,120,123,127,130,132,135,139,140,142,144,144,145,146,145,145,145,144,142,140,137,134,131,129,126,124,123,121,120,120,120,119,116,113,110,108,105,103,102,102,104,105,107,110,111,113,114,116,116,115,116,117,116,115,114,111,110,110,108,105,104,101,97,93,90,90,89,88,87,86,86,85,84,82,83,84,85,86,88,89,91,92,91,91,93,96,97,96,97,98,98,97,100,101,102,104,104,106,108,108,110,112,114,117,119,122,123,124,123,120,119,117,116,115,115,116,116,115,114,113,112,113,111,110,110,110,111,112,110,108,108,109,110,111,110,110,110,111,110,110,113,117,118,119,121,122,122,122,120,119,121,124,125,126,127,128,126,124,125,126,127,128,129,131,132,133],[135,136,136,137,138,138,139,141,139,138,136,137,139,142,142,142,144,146,146,146,147,148,148,150,151,153,154,154,152,151,150,150,150,151,149,147,144,142,141,140,137,133,133,132,130,129,130,129,128,128,128,129,128,127,128,129,128,126,125,124,123,123,121,118,114,111,108,108,108,108,109,111,113,115,117,121,125,128,131,134,137,139,142,142,142,142,143,144,144,144,144,143,141,138,134,132,130,127,126,124,123,121,120,119,118,117,113,110,108,105,102,100,99,101,103,105,106,107,108,112,116,117,116,115,116,117,117,116,115,112,112,111,109,107,104,101,98,96,93,92,91,90,89,89,88,87,85,83,85,87,89,90,90,90,91,92,92,92,93,96,98,99,100,100,99,100,102,103,105,106,106,107,109,110,112,113,114,118,120,122,124,124,122,120,119,118,117,115,115,115,115,114,114,113,113,112,110,108,109,110,111,112,111,110,110,111,113,112,111,110,110,111,110,109,112,115,116,117,118,119,119,120,119,118,120,123,126,128,128,127,126,126,127,128,127,127,129,131,133,134],[136,137,138,139,140,140,140,142,140,139,138,138,140,143,143,143,145,146,146,146,148,149,148,148,150,153,154,154,152,151,150,149,151,151,151,150,146,143,142,141,137,134,133,132,131,129,129,129,128,128,128,128,127,125,126,127,127,126,125,124,123,123,120,117,113,110,107,107,107,108,110,113,115,117,120,123,127,130,132,135,137,139,141,142,141,141,141,141,142,143,142,141,138,136,134,132,129,126,125,125,123,122,121,119,118,116,113,109,107,104,100,99,98,100,102,104,105,106,108,111,114,115,117,117,118,119,119,117,116,114,113,112,110,109,105,102,101,99,96,93,94,93,91,91,89,88,86,84,85,87,90,91,91,92,93,94,94,93,94,97,99,100,101,102,102,103,104,104,104,105,106,107,111,112,113,116,117,120,122,122,123,124,122,119,118,117,116,114,114,114,114,114,114,113,113,113,110,108,107,109,110,111,112,112,112,113,115,113,111,110,110,111,109,109,110,113,114,115,115,116,117,117,117,119,121,123,128,130,129,128,128,129,129,130,128,128,129,130,133,134],[136,137,139,141,142,141,141,142,141,141,140,140,141,142,143,143,144,146,147,148,150,150,148,147,149,152,153,153,152,151,150,150,152,152,152,150,146,144,143,141,139,136,134,134,132,131,131,131,129,128,127,128,127,125,126,126,125,124,123,123,122,122,119,116,112,109,107,107,107,108,111,114,116,119,122,125,129,132,133,135,137,138,139,139,139,138,138,139,141,141,140,138,136,135,134,132,129,126,125,125,124,122,121,120,118,116,113,109,106,105,101,99,99,100,101,103,104,107,108,110,113,114,117,118,119,120,121,119,116,114,113,112,110,109,106,105,104,101,99,97,97,96,93,91,90,89,87,85,86,88,91,92,92,93,95,95,94,95,96,98,99,100,102,104,105,107,107,105,105,105,106,108,112,113,114,117,120,122,123,123,123,122,121,118,116,116,114,112,112,112,113,114,114,113,113,113,110,107,106,107,108,110,112,114,114,114,115,113,111,109,109,109,108,107,108,110,112,113,112,114,115,115,115,118,121,124,127,130,130,130,130,130,130,132,130,129,130,131,134,134],[138,139,140,142,142,142,143,144,145,144,143,142,142,142,142,143,145,147,147,148,149,149,147,146,148,151,152,152,151,149,149,150,151,152,152,149,147,145,143,141,138,135,134,136,134,132,133,133,131,129,129,129,128,126,126,126,125,123,123,123,122,121,118,115,112,109,109,110,109,110,112,115,118,121,123,126,130,132,134,136,137,137,138,137,137,137,138,138,138,137,137,136,136,134,133,131,128,126,125,124,123,121,121,120,118,116,113,110,108,106,102,98,98,98,100,102,104,107,108,110,112,112,115,116,117,119,119,118,116,113,113,113,112,110,107,106,104,102,101,98,97,97,94,91,90,89,87,86,87,90,93,95,95,95,96,95,96,96,97,100,101,103,104,106,108,108,107,105,105,106,107,108,111,113,115,118,121,122,124,124,123,121,119,117,115,114,112,111,110,110,112,115,114,112,112,112,110,107,107,108,109,109,111,114,113,114,114,113,111,108,108,108,107,108,108,109,110,111,111,113,114,114,116,118,120,123,126,128,129,131,131,131,133,133,132,131,131,131,132,133],[142,143,143,144,143,144,145,146,146,146,146,144,143,142,142,143,144,146,147,146,147,147,146,146,149,151,151,150,151,150,149,150,151,151,151,150,148,145,143,142,140,138,135,136,136,134,134,134,132,131,131,131,130,129,128,127,125,123,123,122,121,120,117,114,113,111,111,111,110,112,113,115,118,122,124,127,130,132,134,136,138,138,138,137,137,138,139,137,136,136,136,136,136,135,132,130,127,125,123,122,122,121,120,118,116,115,113,109,107,106,104,100,98,97,98,100,103,105,107,109,111,111,113,114,116,117,118,117,113,112,113,113,113,110,106,105,104,103,102,100,97,96,96,94,92,90,87,88,90,92,94,95,95,95,97,96,98,97,99,102,104,105,106,107,108,109,108,107,106,106,107,109,111,112,114,117,119,122,123,123,122,119,118,115,113,113,111,111,110,110,113,114,112,111,112,111,110,108,108,109,109,109,111,112,111,111,111,111,110,108,106,107,107,107,108,109,109,109,111,112,113,114,116,118,119,121,125,128,130,132,132,132,134,135,134,132,132,131,131,131],[144,145,144,145,146,146,145,145,145,146,146,144,143,141,140,143,144,145,146,146,146,147,146,146,148,150,150,149,150,151,150,150,151,150,151,151,148,145,146,145,143,141,137,136,137,135,135,135,133,132,132,133,132,131,131,130,127,125,123,122,120,119,117,114,113,112,113,112,112,114,114,116,120,124,125,127,131,134,135,136,138,138,139,138,138,139,139,137,137,136,134,134,134,133,132,131,127,125,123,122,122,121,119,116,116,115,112,109,108,106,105,102,99,98,97,97,100,103,105,107,109,111,112,114,115,117,117,116,114,113,112,112,111,110,107,107,106,105,104,102,99,96,97,96,95,93,91,92,93,95,96,96,95,95,97,97,99,100,102,104,106,106,106,107,107,108,108,108,107,106,108,111,111,111,113,115,117,121,122,122,120,116,115,113,112,112,111,111,110,110,112,113,113,112,112,111,110,109,108,108,108,107,108,109,108,107,108,109,108,108,106,106,106,105,107,108,107,106,108,110,111,112,116,119,120,122,124,127,130,133,133,132,134,135,135,133,132,132,130,129],[146,147,146,147,149,148,145,144,145,145,146,144,143,141,139,141,143,144,144,143,144,144,144,145,147,148,150,150,150,150,151,150,149,149,150,150,148,147,147,146,144,142,138,137,137,136,136,135,134,133,134,135,135,134,134,133,130,126,124,123,121,120,118,116,114,113,114,113,113,115,117,119,122,125,127,129,131,134,135,137,139,139,140,138,138,138,139,138,138,136,132,131,131,132,132,131,128,126,124,122,122,121,119,116,117,116,113,110,109,109,107,104,101,99,98,97,98,101,104,106,108,110,112,115,116,117,117,117,116,114,113,112,110,109,108,108,108,106,105,104,101,98,97,98,97,96,94,95,95,96,97,97,96,94,96,98,100,101,103,106,108,107,106,106,106,106,107,107,105,105,107,111,112,111,111,112,115,119,121,120,117,114,112,111,110,110,110,111,111,110,112,113,114,114,113,111,110,109,108,108,107,106,105,106,105,105,107,106,104,105,106,107,107,105,105,106,106,106,107,109,111,113,117,120,123,124,126,128,130,133,133,132,133,135,135,133,132,131,129,127],[146,147,147,147,149,150,146,144,143,143,145,145,143,142,140,141,142,143,142,141,142,142,144,146,145,145,147,150,149,148,149,148,149,148,148,147,147,148,148,147,146,144,140,138,137,136,137,137,136,136,136,137,136,135,136,135,130,126,124,123,121,119,118,116,115,113,113,113,114,116,118,121,123,124,127,130,132,134,136,136,138,138,137,136,137,138,138,139,138,136,134,131,132,132,132,130,129,128,126,124,123,123,119,116,116,114,112,110,110,110,109,107,104,100,99,98,99,101,104,106,108,110,112,113,114,114,115,117,116,114,114,113,111,109,110,111,109,107,106,105,103,100,100,100,98,98,97,97,97,96,96,96,94,94,97,100,100,101,104,107,109,108,107,107,106,105,107,106,105,105,106,109,110,110,110,110,112,115,117,117,114,112,109,108,108,108,110,111,110,110,112,114,115,116,115,112,110,108,107,106,105,105,104,104,103,101,103,103,103,102,103,106,106,106,106,106,106,108,108,110,111,113,117,120,123,127,128,128,131,133,133,133,135,135,134,133,132,130,129,126],[145,145,145,146,148,149,146,144,143,143,143,143,143,142,141,139,140,141,141,141,142,143,145,144,143,142,145,147,146,145,146,148,148,145,144,144,145,147,148,147,146,143,140,139,140,139,139,139,138,137,137,138,138,137,138,136,131,126,124,122,120,119,117,116,114,112,111,111,113,116,119,122,122,124,127,129,130,133,135,136,136,136,135,134,135,136,135,136,137,138,136,133,133,133,132,130,130,130,129,127,125,122,120,118,116,114,112,111,112,112,111,108,105,103,100,99,100,101,104,106,109,110,112,113,113,113,113,115,115,115,114,114,113,112,113,114,111,108,106,105,104,103,103,101,99,98,99,99,97,95,95,95,94,95,97,100,101,102,104,107,109,109,108,107,106,106,106,105,104,104,104,105,107,108,108,108,110,113,114,114,112,109,107,106,107,107,110,110,109,110,112,114,116,117,115,111,109,107,106,104,103,103,102,102,102,100,101,102,102,101,102,103,104,105,106,106,107,109,109,110,112,113,116,120,123,127,129,130,130,131,132,134,136,135,133,132,132,131,129,127],[143,144,144,146,146,147,145,143,144,144,144,142,141,140,139,138,139,140,140,140,140,142,143,141,141,140,142,145,144,143,144,145,144,142,141,141,142,145,146,146,145,142,142,141,141,142,141,140,139,138,140,141,140,138,138,136,131,126,124,122,120,119,118,116,115,113,111,111,114,116,118,121,121,123,126,128,131,133,134,135,135,135,134,134,135,135,134,134,136,138,136,135,135,135,134,131,131,132,131,130,127,124,124,123,120,117,115,114,114,114,113,109,107,105,102,101,101,102,105,107,107,109,112,113,114,114,113,113,114,115,115,115,114,114,115,115,112,109,107,105,104,103,103,102,99,97,98,99,97,95,95,95,95,96,98,100,100,101,103,106,108,107,107,106,105,105,105,103,102,101,101,101,104,105,106,107,109,112,113,112,110,107,106,106,107,108,110,111,110,110,111,112,114,114,113,111,108,106,104,102,102,102,102,102,102,101,102,103,102,101,101,101,103,104,104,105,106,108,109,111,112,114,117,120,123,125,129,131,131,131,133,134,135,135,133,132,132,131,130,129],[142,142,142,144,145,146,145,142,142,144,143,140,139,138,137,138,139,140,139,138,139,140,139,139,138,137,139,142,143,142,142,141,140,139,138,137,138,142,145,146,144,143,144,143,143,144,144,141,140,140,141,142,142,140,138,136,132,128,124,122,121,120,118,117,116,113,112,111,113,115,116,119,120,122,125,128,131,132,134,135,135,133,134,135,136,136,135,134,135,137,137,137,138,138,135,133,133,134,134,132,130,126,126,126,123,120,118,118,117,116,114,112,109,106,103,102,102,103,106,107,107,109,113,115,115,115,113,113,113,114,115,116,116,116,117,116,115,112,109,106,105,104,103,102,100,98,98,98,97,95,95,95,95,96,97,98,99,101,103,105,107,107,106,106,105,105,104,101,99,99,99,99,101,103,104,105,107,110,111,110,108,107,106,107,107,108,111,111,110,109,110,111,111,111,111,109,106,103,102,101,101,101,101,102,102,101,103,104,103,101,100,100,101,102,102,103,105,107,109,110,111,113,117,120,123,125,128,132,133,132,133,134,135,135,133,133,132,131,130,130],[138,140,140,142,144,145,143,141,142,143,141,138,138,137,137,137,137,137,136,135,136,137,137,136,136,135,138,140,141,142,140,138,138,139,137,136,138,140,143,146,145,145,145,144,145,145,143,140,140,141,142,143,142,140,138,135,132,129,125,122,121,121,119,117,116,113,112,111,112,115,117,119,120,122,125,127,130,131,134,136,134,132,133,136,136,135,134,133,135,137,138,138,137,138,136,135,135,135,134,133,131,128,128,128,126,123,120,119,118,117,116,115,111,107,105,104,104,105,107,109,109,110,114,116,115,115,113,113,113,113,115,118,118,118,118,117,116,113,110,107,107,107,105,104,102,100,100,98,97,95,94,94,94,95,96,97,98,100,102,103,106,107,106,106,106,106,103,101,100,99,99,99,100,100,101,103,105,107,107,106,106,105,105,106,107,107,109,110,109,108,109,111,111,110,110,108,105,102,102,102,101,102,102,103,102,101,103,104,102,101,100,100,101,103,104,105,107,108,109,111,112,113,117,121,125,128,130,132,132,133,135,136,137,136,134,134,131,130,130,130],[135,136,137,139,142,143,142,141,141,141,140,138,138,137,137,138,136,135,133,132,133,134,134,134,134,134,136,137,138,140,139,137,137,138,139,138,138,139,141,145,146,145,145,145,146,145,142,141,141,142,144,143,141,139,135,132,131,130,127,123,122,123,121,119,117,115,114,112,113,116,118,120,119,122,124,126,129,132,135,136,134,132,132,134,136,136,134,135,137,138,139,139,136,136,136,136,136,135,135,134,132,129,128,129,127,124,121,120,119,118,118,117,113,110,108,108,108,108,109,110,111,112,114,114,112,113,112,112,112,113,115,117,118,118,119,118,116,113,111,110,110,109,107,105,103,103,103,100,98,95,93,94,94,95,97,97,98,99,102,103,105,106,107,106,106,105,103,101,101,101,100,99,99,99,99,101,104,104,103,103,103,104,104,104,104,106,108,108,109,109,109,111,111,111,109,107,104,102,102,100,100,101,101,101,101,100,101,102,101,101,101,101,102,104,106,107,108,109,111,113,115,116,119,123,127,129,131,132,133,134,137,137,137,136,134,133,132,130,130,130],[132,132,134,137,139,141,140,140,139,139,139,138,137,136,137,138,135,133,133,132,133,134,133,131,133,133,133,134,135,138,137,136,136,136,138,138,138,139,142,145,145,145,145,145,145,144,142,142,141,141,142,140,138,136,133,131,131,131,128,125,125,124,122,120,118,117,115,112,114,115,117,118,118,120,122,125,129,132,134,135,134,134,132,133,136,137,137,138,139,139,140,140,137,134,135,135,134,135,134,134,133,129,129,129,126,124,122,122,121,120,120,119,116,113,112,114,113,113,113,112,112,112,113,112,111,111,111,111,112,113,115,117,117,117,118,118,117,114,113,113,112,111,109,106,106,105,103,100,96,93,93,94,94,95,97,98,99,99,102,104,106,107,107,107,107,104,103,101,100,101,101,99,99,99,99,100,101,101,101,102,103,104,103,102,103,105,106,106,107,108,108,110,111,110,108,105,103,101,99,98,98,99,99,99,98,99,100,100,100,100,101,101,104,106,107,107,108,109,112,114,117,119,120,124,127,129,131,133,134,135,137,137,137,137,135,134,132,130,130,128],[129,130,132,134,137,138,138,138,138,138,138,137,137,136,136,136,135,132,133,133,133,133,132,131,132,132,131,131,132,135,135,134,135,136,137,137,138,139,141,144,144,144,145,145,145,144,142,143,142,142,141,138,136,133,131,131,131,131,129,127,127,126,123,121,120,119,116,113,114,115,116,117,116,117,121,125,129,132,133,134,135,135,134,134,136,138,139,140,141,141,142,141,138,136,136,136,134,133,133,134,132,129,129,128,126,124,124,124,123,122,123,120,118,116,116,116,116,117,116,114,113,112,112,111,109,108,108,110,112,113,115,117,117,117,118,118,118,116,115,114,114,113,112,110,109,107,104,100,96,93,92,94,94,96,98,99,100,99,101,104,106,107,107,107,106,104,102,100,99,100,101,99,99,100,99,99,100,99,99,101,103,103,102,102,102,103,105,105,106,107,108,109,110,109,106,104,103,100,98,95,96,98,98,98,97,97,98,99,100,100,101,103,106,108,108,108,109,110,113,116,118,121,122,123,125,128,131,133,134,134,135,135,135,135,135,133,132,130,129,126],[126,129,130,132,135,137,137,137,136,137,137,137,137,137,136,134,134,132,132,133,132,133,132,131,132,131,130,129,130,132,133,134,136,137,136,135,137,138,140,143,143,144,145,144,144,143,142,143,143,143,141,138,135,133,132,131,131,129,129,129,128,127,124,121,120,119,117,114,114,115,114,115,115,117,120,123,126,129,131,132,134,136,136,137,139,141,141,142,143,142,141,141,139,137,136,135,133,132,133,133,131,129,128,127,126,126,126,127,125,124,123,121,119,118,118,119,119,118,117,116,115,113,112,110,107,105,107,109,110,113,114,117,117,117,119,119,119,118,117,117,117,116,115,113,110,107,104,101,97,93,92,94,95,96,97,97,99,100,102,105,106,108,107,107,106,105,103,100,99,100,100,99,99,100,99,98,98,97,99,101,102,103,102,102,102,103,105,106,106,107,107,107,109,109,107,104,101,99,96,93,94,96,96,96,96,96,97,98,100,101,102,103,105,106,106,107,109,112,115,118,121,123,123,124,126,127,129,131,132,133,133,134,133,133,132,132,132,130,127,124],[124,127,130,132,134,136,137,136,136,136,135,135,136,136,135,133,133,133,134,133,133,133,133,130,130,131,131,130,129,131,132,133,135,136,134,134,136,138,139,141,143,144,145,144,144,141,140,141,141,141,140,138,137,135,133,131,130,128,128,128,127,126,125,123,121,120,118,116,116,114,114,115,115,117,119,121,124,126,129,131,134,137,139,140,142,143,144,144,144,142,140,141,140,138,136,134,133,133,133,131,131,130,129,128,128,128,127,127,126,125,124,122,121,121,121,121,121,119,117,117,116,115,113,110,108,107,108,108,109,112,114,117,118,119,120,120,119,120,121,120,119,118,116,115,112,108,103,100,96,93,92,93,95,96,97,96,97,100,102,105,106,107,107,107,107,106,105,101,100,100,99,99,98,99,100,99,98,98,99,101,102,102,101,103,103,104,106,106,106,107,106,108,109,108,107,104,100,98,95,94,95,96,97,96,95,96,97,98,100,101,102,102,103,103,104,106,109,112,116,119,121,123,123,125,126,126,128,130,130,131,132,133,132,131,130,130,129,128,126,123],[124,127,128,130,132,133,134,134,134,135,134,133,134,135,134,134,135,135,134,133,133,134,132,130,130,131,131,131,131,131,132,132,133,133,132,133,135,137,138,138,141,143,144,143,141,139,138,140,139,139,140,139,138,137,133,131,130,128,127,127,125,124,124,124,123,121,121,120,118,116,115,116,115,117,120,121,123,124,128,133,136,140,142,143,144,145,146,147,146,144,142,141,140,139,138,136,135,134,133,131,132,132,130,129,130,129,129,128,127,127,127,125,123,123,123,123,122,121,118,118,118,116,115,112,110,110,109,108,109,112,114,117,119,119,120,121,121,121,121,121,119,118,118,116,113,109,104,101,97,93,92,93,94,95,97,98,100,102,103,104,105,106,106,106,106,106,104,101,101,101,101,100,100,99,100,100,99,98,98,101,101,101,102,103,103,104,106,106,107,108,107,109,109,107,106,102,99,96,94,95,95,96,98,97,97,96,96,96,98,100,102,102,102,102,102,105,108,111,115,117,119,122,123,125,125,125,127,129,129,129,130,132,131,129,128,128,127,125,124,122],[124,126,126,127,128,129,132,133,134,134,134,134,134,133,133,135,136,136,135,135,135,134,132,131,131,130,130,131,132,132,131,130,131,131,130,131,133,135,136,137,139,140,141,140,138,136,135,136,137,138,141,140,139,137,134,132,129,128,127,125,124,123,124,124,124,124,124,122,120,118,117,116,116,118,120,121,124,125,128,133,138,141,143,144,145,147,149,149,148,146,143,141,141,140,139,138,136,135,134,133,133,132,131,130,130,130,129,128,128,128,129,127,126,125,126,125,124,122,119,119,119,117,117,114,112,111,110,109,110,111,114,117,118,118,119,120,120,121,120,120,120,118,118,117,114,110,106,102,98,94,92,92,94,96,99,100,103,104,103,103,104,105,106,107,107,105,103,102,103,103,102,101,101,100,100,100,99,98,99,100,100,100,102,103,103,103,106,108,109,110,109,110,110,109,106,101,97,95,94,95,96,97,98,98,98,97,95,95,97,99,101,102,102,100,100,103,106,110,114,115,117,120,122,123,124,124,125,127,127,127,128,129,130,129,127,125,124,123,122,121],[123,126,125,125,127,128,131,134,134,133,133,134,133,132,134,135,136,135,135,136,135,136,134,132,130,129,130,131,132,133,131,128,129,129,129,129,130,132,133,135,136,136,136,136,135,134,134,133,135,137,138,139,139,137,134,132,129,127,126,124,123,123,124,125,125,125,124,123,122,120,118,115,115,117,119,121,123,126,129,132,137,141,143,143,145,147,148,149,149,148,145,142,141,141,140,139,137,135,133,132,131,130,131,131,131,132,130,130,130,131,130,129,128,128,128,127,126,124,122,122,120,118,117,116,113,111,110,111,111,111,114,116,117,118,120,121,121,122,120,120,119,118,119,118,115,111,107,103,99,96,94,94,96,97,100,101,103,104,104,104,105,105,105,106,106,105,104,103,103,104,103,102,101,100,100,101,99,98,99,101,101,100,102,104,104,104,106,107,108,110,109,109,110,109,105,100,97,95,94,95,97,98,99,98,98,98,97,96,98,99,101,102,101,100,100,102,105,109,112,113,116,120,121,122,123,123,124,126,126,126,128,128,129,127,124,122,121,121,122,121],[122,123,124,126,128,129,132,134,134,133,133,134,133,133,134,135,136,135,135,135,135,135,135,133,131,128,128,130,131,133,130,128,128,129,128,126,126,128,130,131,131,132,133,133,133,133,133,134,136,136,136,137,137,137,134,130,127,126,125,124,123,123,124,125,126,125,123,123,123,121,118,116,115,117,120,121,122,125,128,132,137,141,142,143,145,147,148,148,149,150,147,143,142,142,142,140,137,134,132,131,130,129,129,131,131,131,131,132,133,133,131,130,131,131,131,129,128,126,125,125,123,120,118,116,114,111,110,111,111,112,114,116,118,119,121,122,123,123,121,121,121,119,119,117,115,112,107,103,100,97,96,96,97,97,100,102,102,103,105,106,105,105,104,104,105,106,105,102,102,105,106,105,103,102,101,100,100,101,101,103,103,104,105,106,105,104,105,106,107,109,108,108,107,106,104,100,98,95,94,96,97,98,98,98,98,99,98,97,98,100,102,101,100,101,101,103,105,108,110,112,116,119,120,120,122,123,122,123,123,124,126,126,127,124,120,120,120,120,120,119],[122,122,124,127,129,130,132,134,135,135,135,136,134,134,134,134,135,135,134,134,134,134,134,132,129,127,126,127,128,130,128,126,127,128,126,124,125,126,127,127,128,129,130,130,132,134,134,136,136,137,136,135,136,136,132,128,126,126,125,124,124,124,125,125,126,126,124,122,123,121,119,118,117,119,120,121,123,125,127,131,136,140,141,143,145,147,147,146,148,149,147,144,144,143,143,141,137,133,132,131,130,129,130,131,130,130,130,131,133,134,133,133,133,135,134,132,130,128,127,126,123,120,118,116,114,110,110,111,111,112,114,117,118,120,122,122,122,121,120,121,121,120,118,116,113,112,108,104,100,98,98,99,98,98,100,102,101,101,103,105,105,105,104,104,106,107,105,103,105,106,106,107,104,103,103,102,103,105,105,105,106,107,107,106,106,106,105,105,106,108,106,106,106,105,104,100,98,96,96,98,98,98,99,99,99,99,98,97,97,99,101,100,101,101,101,104,106,107,109,111,114,116,117,117,119,121,120,120,121,122,123,123,122,120,119,120,120,120,119,117],[122,124,125,128,131,132,133,135,136,136,136,136,134,134,134,134,134,135,134,133,133,133,133,131,128,126,125,125,125,126,127,125,125,126,125,124,124,125,125,125,125,126,128,129,131,133,134,135,137,137,137,134,133,133,130,128,126,125,125,125,125,124,126,126,126,126,124,123,123,121,120,120,120,121,121,122,124,125,127,131,134,139,142,143,146,147,146,145,146,147,146,145,146,145,143,141,137,133,131,131,130,130,130,130,129,130,131,131,133,134,136,136,136,137,136,135,133,131,129,127,123,121,118,115,113,111,109,110,111,112,114,117,118,121,122,121,121,120,120,120,120,119,117,113,111,111,108,104,101,100,100,99,98,98,100,101,101,100,102,103,104,104,105,105,106,106,105,106,108,108,108,108,106,106,106,105,107,108,108,109,110,109,109,109,108,107,105,104,105,105,104,104,104,104,104,102,101,98,98,99,99,99,100,99,99,99,97,96,97,98,99,100,101,102,102,104,106,106,108,109,111,114,115,115,116,117,118,119,120,120,121,120,118,117,118,119,119,119,119,116],[122,124,127,129,132,134,135,136,138,138,137,136,135,135,134,134,135,135,134,132,132,132,131,129,127,125,125,125,125,123,125,125,126,126,124,124,123,124,124,123,123,123,125,127,130,131,132,133,135,135,134,133,132,131,129,127,124,122,123,125,125,125,127,127,127,127,125,124,124,122,122,122,121,122,122,124,125,126,128,131,135,138,141,143,145,147,146,145,145,144,144,145,145,144,143,140,137,135,133,132,131,130,129,129,129,129,131,134,134,134,136,137,138,139,138,136,133,131,128,126,124,122,119,116,114,113,111,110,111,112,114,116,117,119,119,119,119,120,120,120,119,117,114,111,109,109,107,105,104,103,101,99,100,100,100,101,100,101,102,102,104,105,105,106,106,106,107,109,110,111,110,109,108,108,107,107,108,111,112,113,113,111,111,111,110,109,106,105,104,104,103,103,104,104,105,105,102,100,99,99,98,98,99,98,98,97,96,95,95,98,99,100,101,101,102,103,105,105,107,109,111,112,113,114,115,115,117,120,120,121,121,119,117,116,116,117,118,117,116,114],[121,124,126,129,132,133,135,137,139,139,137,136,135,134,134,134,134,134,134,133,132,131,129,128,126,124,125,126,125,122,122,124,125,125,122,122,122,123,123,122,121,121,122,125,127,128,129,130,132,133,132,131,131,130,128,125,123,122,122,123,124,126,127,127,128,128,126,125,125,125,123,122,121,121,122,125,126,127,129,132,136,139,140,141,143,145,145,143,143,143,143,143,143,143,142,139,136,136,135,133,131,129,128,128,129,130,133,135,136,136,136,137,139,140,139,136,134,131,128,126,123,121,118,116,115,113,111,111,111,112,113,115,116,117,117,117,117,118,119,117,115,114,113,110,109,108,107,105,105,104,102,100,101,101,100,101,101,103,104,105,106,106,107,107,107,108,110,111,112,112,111,110,110,110,109,109,110,113,115,116,114,112,111,112,112,111,108,106,106,106,106,105,106,106,106,106,103,101,100,99,100,100,100,99,98,97,95,94,95,98,100,100,101,102,102,103,104,105,107,109,110,111,113,115,115,116,118,120,121,122,122,120,119,117,116,117,117,117,116,115],[121,124,126,129,132,132,135,137,139,140,137,136,135,135,135,134,134,134,134,133,133,132,130,129,126,125,125,126,124,122,122,122,122,123,121,120,120,121,121,121,119,118,119,121,122,122,124,127,129,130,130,128,127,128,126,123,121,121,120,121,124,127,126,125,127,127,125,124,124,125,123,121,120,121,122,125,126,127,130,133,136,139,141,140,142,144,143,142,143,142,141,142,141,141,140,137,137,136,134,132,131,130,130,130,131,132,134,135,135,136,135,137,139,141,140,138,135,130,127,125,123,121,118,116,113,112,112,111,112,112,113,116,116,115,115,116,116,116,116,113,112,111,110,109,109,109,107,105,105,104,102,102,103,102,103,103,104,105,105,106,106,107,109,110,109,108,110,112,112,112,113,113,113,112,112,112,112,115,116,117,115,114,113,113,112,111,110,108,108,108,107,106,107,108,107,106,104,103,102,101,102,102,102,100,99,98,96,94,95,98,99,98,99,100,101,102,104,106,107,108,109,110,113,115,117,117,117,119,122,123,123,121,120,119,117,118,118,118,118,117],[120,122,126,130,132,132,135,137,139,140,138,137,136,135,136,135,136,135,134,134,133,133,132,130,127,126,125,125,123,122,122,121,120,121,120,119,118,119,119,118,117,116,115,117,118,119,121,124,127,128,126,125,124,124,124,122,120,118,118,121,125,127,127,126,127,126,124,123,122,123,122,121,120,120,122,124,125,127,131,135,137,140,140,139,140,141,142,142,142,141,138,138,138,139,138,137,137,135,132,131,130,130,131,132,133,134,135,134,134,135,136,138,140,141,141,139,134,130,127,124,122,121,118,114,111,110,111,111,111,111,114,116,116,115,114,114,114,114,112,110,109,108,108,107,107,108,107,105,104,103,103,103,105,105,105,105,106,107,107,106,107,108,111,111,110,110,110,111,113,113,114,115,115,115,115,113,114,116,117,117,116,115,115,114,113,113,113,112,111,109,108,109,109,109,108,106,104,103,103,103,104,103,102,101,101,100,98,96,96,98,98,98,98,99,101,103,105,107,107,107,108,110,113,116,118,117,117,119,123,124,123,122,121,120,119,120,120,120,119,119],[118,121,126,130,132,134,136,138,140,141,138,136,135,135,136,135,135,136,136,135,134,133,131,129,128,127,126,126,125,124,123,121,121,120,118,118,117,118,118,117,115,114,113,113,114,116,118,120,123,124,124,124,123,121,122,121,119,117,118,121,123,127,127,127,127,125,125,124,122,121,122,122,120,120,122,124,126,128,131,137,139,140,140,138,139,139,140,140,139,140,137,136,136,136,135,135,134,132,130,129,129,130,132,134,134,135,135,134,136,137,137,138,139,138,138,137,133,130,126,124,122,120,116,112,110,109,109,110,110,110,112,114,115,117,115,112,112,112,110,108,107,105,105,106,106,107,106,105,104,104,104,105,106,106,105,105,106,107,109,109,108,108,110,111,112,112,111,112,113,115,117,117,117,117,116,114,116,118,119,118,117,116,115,115,115,115,115,115,113,111,111,112,110,108,108,106,105,105,104,105,104,102,103,102,102,102,99,98,97,99,100,99,100,100,101,103,105,106,107,107,108,109,113,117,118,118,119,121,123,126,125,124,123,121,120,122,122,122,121,120],[119,123,126,130,132,135,137,138,140,141,138,136,135,136,137,136,135,136,136,134,133,131,128,128,129,127,126,125,125,126,125,123,122,119,117,117,117,118,117,115,114,112,111,111,112,115,117,118,119,120,120,122,121,119,120,119,117,116,117,120,121,124,126,126,126,125,125,125,123,122,123,122,121,121,124,127,129,131,133,136,139,140,140,139,139,138,139,138,137,137,135,134,134,133,133,133,132,129,128,129,130,132,133,134,134,134,134,135,136,137,138,138,136,135,135,134,131,128,125,123,122,120,116,111,110,109,109,110,110,109,109,110,112,114,114,112,111,111,110,108,106,104,103,103,104,105,105,105,104,104,104,105,106,106,104,105,106,108,109,110,109,108,108,110,112,113,112,112,113,116,118,118,118,116,114,115,118,119,121,120,120,118,116,117,117,117,117,116,114,113,113,114,112,109,109,108,108,107,107,108,106,103,103,103,102,102,101,99,99,100,100,100,101,100,100,101,102,104,106,107,108,109,111,115,117,119,121,122,125,128,127,126,124,122,122,123,124,124,122,121],[120,124,127,130,132,135,136,137,139,141,139,137,138,140,140,139,137,136,136,134,133,132,129,128,128,128,127,126,126,127,127,125,123,120,117,116,116,116,115,113,111,109,109,110,111,114,115,116,117,116,117,118,117,116,117,117,115,115,115,117,119,121,123,123,124,124,124,125,124,124,124,124,124,124,126,129,130,132,133,134,137,138,138,139,139,138,137,136,134,133,133,131,130,129,129,129,129,127,127,128,130,132,132,133,134,134,134,135,135,135,136,136,134,132,133,133,131,128,124,121,121,119,116,112,110,109,108,109,107,107,107,107,110,112,112,111,110,110,109,107,106,104,102,102,103,104,104,105,104,104,104,104,106,106,105,107,108,109,111,111,110,109,108,109,111,111,111,111,114,116,118,118,117,115,116,117,118,119,120,120,119,119,117,118,118,118,118,117,116,114,115,115,113,111,111,111,110,109,110,111,109,106,105,105,105,104,103,102,101,102,101,101,100,99,99,100,100,101,103,106,107,108,111,114,117,119,121,123,127,129,130,129,128,127,125,125,126,126,125,125],[120,124,126,129,132,134,136,137,139,140,138,139,141,142,142,141,139,138,136,135,135,134,131,129,129,128,127,127,127,128,127,125,123,119,116,115,114,114,112,110,108,108,108,108,110,111,112,113,114,113,114,114,114,114,114,113,114,113,112,114,115,118,121,120,121,122,125,125,125,124,123,124,125,126,128,130,131,133,133,133,135,136,137,138,138,137,137,135,132,131,131,128,125,125,126,126,126,125,125,127,128,131,132,132,132,133,133,134,134,134,134,133,131,129,131,133,131,128,124,121,119,117,114,112,111,109,107,107,106,104,104,105,108,110,110,109,109,108,107,107,106,104,103,102,102,102,104,104,103,103,104,104,106,106,106,107,109,111,113,113,111,109,109,109,110,112,111,111,114,116,117,116,115,115,116,117,118,119,120,119,118,119,118,118,119,119,119,118,117,116,117,117,114,113,113,114,113,112,112,113,112,109,107,107,107,106,105,105,104,104,104,101,100,100,99,99,99,100,102,105,107,108,111,115,117,119,121,123,127,130,133,133,132,131,129,128,128,129,130,129],[120,122,125,127,130,132,134,137,139,140,141,141,141,141,142,140,139,139,137,136,136,136,133,131,130,130,128,127,128,129,129,126,123,120,116,115,113,112,110,107,107,107,107,108,108,109,110,111,111,111,111,110,111,112,112,111,112,111,112,113,114,116,117,119,121,123,124,125,124,124,123,124,125,126,127,128,131,133,133,133,135,136,136,137,137,136,135,133,131,129,127,125,123,122,122,122,123,123,123,125,126,128,129,130,132,133,133,133,133,133,132,130,128,127,128,131,130,127,124,121,117,115,113,111,109,107,106,105,105,103,103,104,105,107,107,108,108,107,107,107,106,104,102,101,100,100,101,102,101,103,103,104,106,107,107,107,110,112,111,111,110,111,111,111,113,113,112,111,112,114,114,112,114,115,116,116,118,120,119,119,119,120,121,120,121,121,120,121,119,118,119,119,116,114,114,115,116,116,115,114,114,114,112,111,110,108,109,108,107,106,104,102,101,100,99,99,100,101,102,104,107,109,113,117,118,119,121,123,127,130,132,135,135,134,134,134,133,133,133,133],[119,121,123,126,129,131,133,136,138,140,142,142,141,140,140,141,140,139,138,137,137,138,137,135,133,131,129,129,129,130,129,126,123,120,117,116,112,109,108,107,105,104,104,106,107,107,107,109,109,108,109,110,111,111,111,110,110,111,112,113,114,114,116,119,122,123,125,125,123,123,123,123,125,126,126,126,128,131,131,132,134,134,134,134,134,134,133,130,129,127,124,123,122,120,120,119,120,121,123,124,124,125,127,129,132,133,133,132,131,132,130,128,127,126,126,127,127,126,123,120,117,115,113,109,107,106,105,104,103,102,103,104,104,106,107,107,106,106,106,106,104,103,101,99,98,98,99,100,100,102,103,104,105,106,107,109,112,111,110,111,111,113,115,116,116,114,113,112,112,113,112,112,114,115,116,116,117,119,118,119,121,122,123,124,124,123,123,123,122,122,122,121,119,117,115,115,117,118,117,115,116,117,116,114,112,111,112,111,109,107,105,103,102,102,100,100,101,102,103,105,108,112,116,118,119,120,121,123,127,130,132,134,135,137,138,138,137,137,137,137],[118,120,123,126,129,131,132,135,137,138,141,142,141,141,142,143,142,140,139,138,138,138,138,137,133,131,129,129,129,130,129,126,123,119,117,115,111,108,107,107,104,102,104,104,104,105,105,106,107,106,108,109,109,109,110,111,111,112,113,113,113,113,114,118,120,122,125,126,125,124,123,123,125,126,126,126,127,128,129,130,131,131,132,131,132,133,130,127,125,125,122,121,121,120,120,120,120,120,121,124,124,125,127,130,132,133,132,131,131,131,130,128,125,124,123,123,124,125,122,119,117,116,112,109,107,106,104,102,102,101,102,104,104,106,106,106,107,106,104,103,102,101,99,97,96,97,99,99,99,101,103,104,106,105,107,108,110,111,111,113,114,115,117,117,115,113,113,113,113,112,112,113,113,115,115,114,116,117,118,118,120,122,125,126,125,123,124,124,124,125,124,122,120,119,116,116,118,120,119,118,119,120,119,116,115,114,114,114,112,109,108,105,104,103,101,101,102,104,106,108,112,115,118,119,120,122,122,124,128,131,133,134,136,139,140,140,140,139,140,139],[118,121,123,125,128,129,131,133,135,137,139,140,140,140,142,144,143,141,140,138,138,138,138,136,133,131,129,129,130,129,128,126,123,120,116,114,112,109,107,106,104,103,103,103,103,102,103,105,106,105,107,107,108,109,110,112,112,113,114,114,113,112,113,116,118,121,124,126,126,124,123,123,125,126,126,125,125,126,125,126,128,129,129,129,130,129,126,124,122,122,121,120,120,120,120,120,120,119,120,123,124,125,127,129,132,132,132,130,131,131,129,125,122,122,120,120,122,122,119,118,115,114,112,108,106,105,104,102,101,100,100,103,104,104,105,107,108,107,104,101,100,99,97,95,95,97,99,98,98,100,102,105,106,106,107,108,109,111,112,114,116,117,117,116,115,113,112,113,113,113,113,113,113,115,115,115,115,116,116,118,120,122,125,125,124,124,126,127,127,127,127,124,121,120,118,117,119,121,122,122,122,122,121,119,117,115,115,115,114,112,110,108,106,103,101,102,104,106,109,112,115,119,121,121,122,123,125,127,130,132,133,135,137,140,142,142,143,142,142,142],[118,121,123,125,127,130,131,132,134,136,138,140,140,140,141,143,144,143,142,141,140,140,139,136,134,132,130,130,130,128,127,124,121,119,116,113,111,110,107,106,104,103,103,102,102,101,103,106,106,106,106,106,107,108,109,112,112,112,115,116,115,114,114,116,119,121,123,124,124,124,123,124,124,124,124,123,123,122,121,121,122,125,125,124,125,124,123,122,120,120,120,120,119,119,118,118,119,119,121,123,123,124,126,127,129,130,130,130,129,129,126,122,121,120,118,117,118,118,117,117,114,113,111,107,107,105,103,101,99,99,100,102,103,103,105,106,107,106,103,101,99,98,98,96,96,96,96,97,97,98,101,105,105,106,107,108,109,110,111,113,115,117,117,116,117,116,115,114,114,113,112,112,112,113,114,115,116,116,117,119,120,122,124,124,125,126,128,130,129,128,128,126,124,122,121,121,122,123,124,125,125,124,123,121,118,115,115,115,114,114,112,110,108,105,104,104,105,108,112,116,119,121,123,124,125,125,127,129,131,133,134,137,139,142,145,144,145,145,146,146],[118,120,121,124,127,130,131,132,134,134,136,139,139,140,141,143,143,144,144,143,141,141,139,136,134,133,130,129,128,127,125,123,121,119,115,112,110,111,108,106,106,106,104,102,101,102,104,105,106,107,106,106,107,109,110,111,113,114,116,117,116,115,115,117,119,121,123,123,122,123,123,122,122,122,121,120,120,118,117,117,119,121,122,120,121,121,120,119,119,119,119,118,118,117,117,117,118,119,122,123,123,124,125,126,126,126,127,127,127,126,124,120,119,118,115,115,117,116,115,114,112,111,109,106,105,104,102,99,97,97,98,100,101,101,102,103,104,105,103,102,100,100,99,98,97,95,95,97,97,97,99,103,106,106,107,107,108,109,111,111,113,115,117,117,118,118,116,116,115,113,111,111,112,113,114,115,115,116,117,118,120,121,122,124,126,128,130,130,128,127,127,127,126,125,124,124,126,126,126,126,125,125,124,122,120,118,116,116,116,117,116,114,112,109,108,108,110,113,117,120,121,123,125,127,128,128,129,131,132,133,136,139,142,145,148,148,148,149,150,150],[115,117,120,122,124,128,130,132,133,133,135,137,138,138,139,140,142,142,143,143,142,141,139,136,134,132,129,126,126,125,123,122,121,119,116,113,112,112,109,106,106,107,105,103,104,104,104,104,106,107,106,107,110,112,112,112,115,117,119,119,117,116,116,117,119,120,121,122,123,123,122,121,121,121,119,117,116,115,115,116,116,117,118,117,117,117,116,115,115,116,117,116,116,115,116,119,120,121,123,123,123,122,124,126,125,123,123,124,124,123,122,120,118,116,114,115,114,114,113,112,110,109,107,105,103,102,101,99,97,97,97,98,99,99,100,102,103,104,104,103,102,102,101,100,98,96,97,98,98,98,99,101,103,104,106,106,106,107,108,109,112,115,117,118,119,118,117,118,116,115,113,111,113,114,114,115,115,116,116,117,119,121,122,124,126,128,130,130,128,127,127,127,126,126,126,126,127,127,127,127,126,126,126,123,121,119,118,118,119,121,120,117,116,114,113,114,116,117,120,123,123,124,126,128,129,130,133,135,135,135,138,140,144,146,149,151,150,150,151,151],[113,115,118,119,120,124,128,131,131,132,134,136,137,136,136,137,139,141,141,140,140,140,138,136,134,132,128,125,124,122,120,121,120,119,116,113,113,113,110,107,107,107,106,106,106,106,106,105,106,107,108,109,112,114,115,114,117,119,121,121,119,118,117,117,119,120,121,122,123,124,122,121,120,119,117,115,113,113,113,114,114,114,113,112,112,113,113,113,113,113,115,114,114,114,117,120,122,123,124,124,123,123,123,124,123,121,120,120,121,120,120,118,117,115,114,114,113,113,112,112,110,108,105,102,101,101,100,98,96,95,96,97,98,99,99,101,102,103,103,103,103,104,104,102,100,98,98,98,98,98,100,101,101,102,103,104,104,105,105,108,111,114,117,119,120,119,119,119,118,116,115,114,115,115,115,114,115,116,116,117,120,122,123,123,124,127,128,128,127,126,127,127,127,127,126,128,129,128,127,128,128,127,127,125,123,122,120,120,122,124,124,121,119,119,119,120,120,121,123,124,125,126,127,129,130,132,136,138,139,139,140,142,145,147,149,151,151,151,151,153],[113,115,117,118,120,122,125,128,128,129,132,133,134,132,133,134,136,139,139,138,138,138,137,136,133,131,127,124,122,121,121,121,119,117,115,113,112,111,109,108,107,106,106,106,105,106,107,107,107,108,108,110,113,116,116,116,118,120,121,120,120,120,118,117,118,120,122,123,124,124,123,120,119,117,115,113,112,112,111,111,112,112,110,109,109,110,111,111,110,110,112,113,114,115,117,121,122,123,124,124,124,123,122,120,121,121,119,119,118,117,116,116,115,114,113,114,113,112,113,112,110,107,105,102,100,100,99,98,97,94,96,97,98,98,98,99,100,102,102,102,103,104,104,103,101,100,98,98,97,97,98,100,100,100,102,103,102,103,104,107,110,112,115,119,120,120,120,120,118,116,117,117,117,117,116,115,116,118,117,118,120,122,123,123,125,126,126,125,125,125,125,125,126,128,128,129,130,131,131,131,130,129,130,128,126,124,122,121,124,126,126,124,124,122,122,123,122,123,125,125,128,129,130,131,133,136,139,142,143,144,144,144,145,148,150,151,152,153,153,154],[113,115,116,118,120,122,124,125,126,128,130,131,130,129,130,132,134,136,137,137,137,136,134,133,131,128,125,122,121,121,122,120,117,115,113,112,112,110,108,107,107,105,103,104,104,106,108,108,109,108,108,111,115,116,116,117,119,120,121,120,121,122,120,118,119,121,123,123,123,124,122,120,119,116,114,114,112,111,110,109,109,109,107,106,107,108,109,110,109,108,109,112,114,115,117,120,121,121,122,123,124,123,121,118,119,119,120,119,117,115,113,113,114,113,112,112,112,112,113,111,108,106,104,102,101,99,98,98,95,93,95,96,97,96,96,98,100,100,101,101,102,103,104,103,100,99,98,97,97,97,98,99,99,100,103,103,102,102,104,107,108,110,113,116,119,121,121,120,119,116,117,118,119,117,116,116,116,119,119,119,120,122,123,124,124,124,123,123,124,124,124,124,126,128,129,129,130,132,133,132,131,131,131,130,127,126,124,123,126,128,127,126,126,124,123,123,124,124,126,127,129,130,131,132,135,139,142,143,145,146,147,147,148,149,151,152,153,154,154,154],[112,114,116,118,120,122,124,124,125,126,127,128,127,125,127,130,132,133,135,135,135,134,132,130,128,126,123,121,120,120,120,118,115,113,112,111,110,109,107,106,106,105,104,104,105,107,108,108,109,109,110,112,115,116,118,119,120,122,122,121,122,122,121,120,120,122,123,122,123,124,122,120,119,117,115,114,111,110,108,107,107,107,105,105,106,108,109,109,108,107,109,111,112,112,116,119,120,120,120,120,121,121,119,118,118,118,119,119,116,115,113,113,114,114,112,110,111,112,111,108,107,105,103,102,100,97,96,96,93,92,93,95,95,95,95,97,98,98,99,98,99,101,102,102,99,97,96,96,96,98,99,100,100,101,102,103,102,101,102,105,107,108,112,114,117,120,121,120,119,117,117,117,117,117,116,117,119,120,120,120,121,122,124,124,123,122,122,124,123,124,123,122,125,128,129,130,130,132,133,133,132,132,132,131,130,128,126,125,127,129,128,126,125,124,125,125,125,126,126,128,130,131,133,135,137,140,143,143,146,148,149,149,150,151,152,152,153,154,153,154],[110,113,115,117,119,122,124,123,124,125,124,125,124,123,123,126,129,131,132,133,132,132,130,127,125,123,121,119,118,118,117,116,114,111,111,110,109,107,106,104,104,103,104,105,106,107,108,108,109,109,111,114,115,117,120,121,123,124,124,122,122,122,121,120,121,122,122,122,123,123,122,121,120,118,115,113,111,109,107,105,105,104,104,103,105,107,108,107,106,107,109,110,111,112,115,118,119,119,119,118,118,119,118,118,119,119,118,117,116,114,113,113,113,114,113,110,110,111,111,108,106,104,102,101,99,97,95,94,92,91,91,92,93,93,94,96,97,96,97,97,97,99,99,100,98,95,95,95,97,97,98,99,101,101,102,102,102,100,101,104,106,108,111,113,115,118,120,120,119,117,118,118,117,116,116,118,121,122,120,120,121,122,123,124,124,123,121,123,123,122,121,121,124,127,129,129,130,131,132,132,132,133,133,132,131,130,128,127,129,130,129,127,126,125,126,126,126,128,127,128,131,133,135,136,138,141,143,144,146,149,150,150,150,151,151,151,153,153,153,154],[109,112,113,114,117,120,122,121,122,122,121,120,120,120,120,122,125,128,128,129,129,128,126,123,122,120,119,118,116,115,115,114,113,112,111,109,108,107,106,106,104,103,103,105,105,106,107,108,109,110,113,116,117,118,120,121,123,124,123,122,122,121,120,120,120,120,122,122,121,122,122,122,120,118,113,110,109,109,106,104,103,103,103,102,104,105,105,106,105,107,109,110,112,113,114,116,117,118,117,118,118,118,118,118,119,121,119,116,116,114,113,114,114,114,113,111,112,112,111,108,105,103,100,99,98,97,95,93,92,92,91,92,93,93,94,96,95,94,95,95,96,96,97,98,96,95,94,94,95,95,96,98,99,101,102,102,102,102,102,104,106,108,110,111,113,114,116,118,118,117,117,118,117,117,118,120,121,123,121,121,122,123,125,126,125,125,123,122,122,121,122,123,124,125,126,127,128,128,130,131,131,132,132,131,132,132,132,131,131,130,129,129,127,127,126,125,128,130,129,128,131,134,135,137,140,142,143,144,146,149,150,151,151,151,151,151,153,154,154,157],[109,112,112,113,115,118,119,119,118,118,117,116,117,117,117,119,121,123,124,124,125,125,124,122,120,120,119,117,114,113,111,111,112,111,111,109,108,108,108,107,107,106,104,104,104,105,107,108,110,112,115,117,117,118,119,120,122,123,123,122,121,119,120,120,118,119,121,121,121,121,121,121,119,115,110,109,109,108,107,105,103,102,102,102,104,103,102,103,105,107,109,110,110,112,113,115,116,116,117,118,118,117,117,117,119,120,120,118,117,115,114,115,115,115,113,112,112,113,111,107,104,101,98,97,96,96,95,93,92,92,93,94,95,95,95,96,94,92,93,94,95,95,96,97,94,93,93,92,93,93,95,96,97,100,102,104,103,103,104,106,107,109,110,111,113,113,114,116,117,117,117,117,117,118,120,121,121,122,122,123,124,125,127,127,126,126,125,124,123,123,124,124,124,125,126,127,127,128,129,130,131,132,132,132,133,134,134,133,132,129,127,128,128,129,127,126,129,130,131,131,134,136,138,140,142,143,144,146,148,150,151,152,152,151,151,152,154,156,157,158],[112,113,113,113,115,117,117,117,116,116,115,114,116,117,116,117,118,120,121,122,122,123,122,121,120,119,118,115,113,111,108,108,109,109,110,110,109,109,108,106,106,107,105,104,105,107,108,109,111,114,116,118,117,117,119,120,121,121,122,122,120,118,119,120,120,120,122,122,121,120,120,120,117,113,109,108,107,105,105,104,102,101,102,102,102,101,100,101,104,106,108,109,109,110,111,113,114,114,115,117,117,116,116,118,119,120,121,119,118,117,116,116,116,116,113,111,112,112,110,106,103,100,97,97,95,95,95,93,93,93,94,96,95,95,95,95,94,92,93,94,94,94,95,96,94,93,92,92,92,92,93,95,98,100,103,105,104,104,105,106,107,109,111,112,114,114,114,115,117,118,117,116,117,118,119,120,120,121,122,124,125,126,128,128,127,126,127,126,126,126,125,127,126,126,127,128,128,129,129,129,130,131,131,132,133,133,135,135,132,129,128,128,128,129,128,128,130,131,134,135,137,139,141,143,143,144,145,147,149,151,152,153,153,152,152,154,155,156,157,157],[113,114,114,114,114,115,115,115,114,114,114,115,116,117,116,116,116,117,118,119,121,122,121,120,119,118,117,114,111,109,106,105,107,108,109,109,109,108,108,107,106,106,104,105,107,108,108,109,111,113,117,117,116,117,118,119,120,119,121,121,119,117,118,120,121,122,122,122,121,120,119,117,113,111,109,107,105,103,102,102,101,100,100,100,100,99,98,100,102,105,107,107,107,108,109,111,112,113,115,115,115,116,118,119,120,122,122,120,118,118,118,118,118,116,113,111,111,110,108,105,102,100,97,96,95,95,94,93,94,94,96,96,95,95,94,94,93,92,94,94,94,93,94,97,96,93,93,92,90,91,92,95,98,101,103,106,106,106,105,105,106,108,110,112,114,114,114,115,116,118,117,116,116,116,116,118,118,120,122,124,125,128,130,130,128,128,129,130,129,129,128,129,129,128,128,129,130,129,128,128,130,130,130,131,132,133,135,135,132,129,128,126,126,128,129,130,131,133,136,137,139,142,144,145,146,146,147,149,151,153,154,155,155,154,155,156,157,158,158,158],[114,113,112,113,113,113,114,115,113,112,115,116,117,118,116,114,113,112,114,114,116,118,117,117,116,115,114,111,109,107,104,102,103,106,108,109,109,108,107,106,105,104,104,105,106,109,109,109,111,112,113,115,115,115,116,118,119,119,121,121,119,117,118,119,120,122,121,119,118,118,116,114,112,111,108,105,104,101,99,98,97,98,98,97,97,96,96,99,101,103,104,104,104,106,108,109,111,113,113,114,116,117,118,121,121,122,122,119,119,119,120,120,119,117,114,111,110,108,106,103,100,99,96,94,94,95,94,94,95,95,98,99,98,97,95,94,93,93,95,95,96,95,96,97,96,93,92,91,90,90,93,95,98,100,103,105,106,107,107,107,107,108,110,112,114,114,114,115,115,115,115,115,114,113,114,116,117,119,122,125,127,129,131,131,130,129,131,131,131,131,131,132,131,130,131,131,130,129,127,127,128,129,129,130,132,135,135,135,133,130,128,126,127,127,129,130,132,134,137,139,141,144,145,146,147,148,149,150,153,156,157,157,157,156,157,157,158,159,159,160],[114,114,112,112,112,113,115,115,114,114,116,116,117,117,115,114,112,110,110,111,112,114,113,114,113,112,110,107,107,104,100,100,101,104,106,106,106,105,104,104,104,104,105,105,106,108,110,111,110,110,111,113,114,114,114,117,119,120,121,121,120,117,116,117,119,120,118,116,116,115,114,113,112,111,109,106,102,98,96,95,93,95,95,93,93,94,94,95,97,100,102,103,103,106,108,108,109,112,113,115,118,118,119,121,121,122,120,119,120,120,120,120,118,116,114,112,110,108,105,102,99,98,96,95,94,95,95,94,95,97,100,100,99,98,96,95,94,94,96,98,98,97,97,97,96,94,91,90,90,91,93,96,98,99,102,105,106,107,108,109,109,108,109,112,113,114,115,114,113,114,114,114,113,112,113,115,118,120,121,124,127,129,132,132,131,130,131,131,131,130,131,132,132,131,131,131,129,128,126,125,126,127,128,130,133,134,136,135,132,130,128,127,129,128,129,131,133,135,138,140,141,144,145,146,148,149,148,151,153,157,158,158,158,158,159,160,161,161,160,161],[115,115,113,113,114,114,115,115,115,116,116,116,116,115,115,115,112,109,109,110,111,112,111,111,109,108,106,103,102,100,99,99,100,102,103,102,103,103,103,104,103,104,104,104,106,107,109,111,110,110,111,113,113,114,115,116,118,120,121,120,118,116,115,116,117,119,117,116,116,115,115,114,112,110,109,106,101,96,94,94,93,94,93,91,92,92,90,90,94,97,98,101,102,104,107,107,109,112,113,115,117,119,119,119,121,121,120,119,119,121,120,119,117,116,114,111,111,109,106,104,102,100,98,97,96,96,95,96,97,100,102,100,99,98,96,96,96,95,98,99,98,97,96,96,96,95,92,90,91,93,95,96,97,99,102,106,106,107,109,109,109,107,108,111,112,112,113,114,114,114,115,114,113,112,113,116,119,122,123,125,126,128,131,132,131,131,131,131,131,131,131,131,132,131,131,131,129,128,125,125,126,128,129,130,132,134,136,135,132,130,128,128,129,129,131,132,134,136,138,140,143,145,146,147,149,150,150,152,154,157,159,159,159,159,160,162,162,162,162,162],[116,116,115,116,116,116,117,116,117,117,116,117,117,117,117,116,112,109,107,108,109,111,110,108,107,106,103,100,99,98,97,97,98,100,100,100,100,100,101,102,101,102,102,103,105,106,108,110,111,111,112,112,112,114,115,115,117,120,120,119,118,116,115,114,116,117,118,117,117,117,116,114,112,111,108,105,100,96,94,94,94,93,91,90,89,90,88,87,91,93,95,98,100,102,105,106,108,110,113,115,117,118,118,119,120,119,119,119,119,120,119,118,117,115,114,112,112,109,107,106,104,102,100,99,98,98,97,97,99,102,102,101,100,100,98,98,98,99,101,100,98,98,96,95,95,94,92,91,93,95,96,95,96,99,103,106,107,108,110,109,109,108,106,108,110,111,112,114,114,115,115,113,112,113,114,117,120,123,124,124,125,128,130,130,130,131,132,131,131,130,131,131,131,131,133,132,130,128,125,126,127,129,130,130,133,134,136,135,133,131,129,128,128,129,132,134,136,138,140,142,145,146,148,149,150,151,152,155,156,158,160,160,161,161,161,162,163,162,162,162],[118,118,119,119,118,118,117,116,118,118,118,120,119,120,119,117,113,110,108,107,109,110,108,105,105,104,101,98,97,96,96,97,97,98,99,99,98,97,99,100,100,100,102,102,105,106,107,108,109,110,111,111,112,114,113,115,117,120,120,118,117,116,113,113,115,116,116,117,116,117,116,114,113,112,108,104,100,97,95,94,93,92,90,89,88,87,86,85,88,90,93,95,97,100,102,105,106,108,111,115,116,116,118,119,118,117,117,119,119,119,117,115,115,114,114,112,111,108,107,106,104,102,100,99,98,99,98,98,100,103,104,103,103,104,102,100,101,102,102,101,101,100,99,99,97,95,94,93,95,96,95,95,98,101,105,107,108,109,109,109,110,110,108,108,110,112,113,114,115,115,114,113,113,114,116,118,121,123,122,122,124,126,129,129,130,131,131,132,133,132,132,133,132,132,134,133,131,129,128,129,128,129,130,131,133,134,135,135,133,131,128,127,128,130,133,135,137,139,140,142,145,146,149,152,153,153,156,158,158,159,161,162,162,162,163,164,163,162,163,163],[119,120,122,121,119,118,118,117,119,120,122,123,123,124,121,118,115,111,107,107,108,108,107,104,102,101,100,98,97,97,98,98,98,97,97,98,97,96,98,99,98,98,100,101,103,104,105,107,107,108,110,110,111,112,113,114,116,118,119,118,116,115,114,114,115,116,116,117,116,115,115,114,113,110,107,103,100,97,94,92,91,89,89,88,86,86,85,86,87,89,92,93,94,97,100,103,105,107,108,111,112,115,117,118,117,115,115,117,118,118,115,114,114,115,115,113,110,109,109,108,104,101,101,100,99,100,101,101,103,105,106,106,108,109,106,104,103,104,104,103,103,102,102,101,99,97,95,94,95,95,94,96,100,103,107,109,110,110,109,109,111,113,112,110,112,114,115,116,116,115,113,112,114,115,117,118,118,120,120,122,124,126,128,130,131,131,131,132,134,135,134,134,135,135,137,136,133,132,131,131,130,129,131,131,132,133,134,135,133,130,128,127,129,131,134,136,136,139,140,143,146,148,149,152,154,157,160,161,160,160,162,163,162,162,164,164,163,162,163,163],[120,122,122,121,121,120,120,121,122,123,123,123,124,125,123,118,115,111,108,106,106,107,107,105,102,101,100,100,99,99,99,99,98,98,98,98,97,95,96,97,96,96,99,101,102,103,104,107,108,110,111,112,111,111,112,113,116,118,120,120,118,116,115,115,117,118,117,117,116,115,115,114,111,108,106,102,100,99,95,92,90,87,87,85,84,84,84,85,86,88,90,92,94,96,98,100,102,105,106,108,110,112,115,116,115,114,114,115,116,117,115,114,115,115,115,114,112,110,110,109,106,103,103,104,103,103,104,105,106,109,108,109,111,112,110,107,107,107,106,104,103,102,102,102,99,97,95,94,95,95,96,99,102,105,108,109,110,110,110,110,113,115,114,113,116,117,117,117,116,116,115,113,115,116,117,117,117,118,120,122,124,126,129,130,131,131,130,131,134,136,135,136,137,138,140,138,136,135,134,134,132,131,132,133,134,133,134,134,132,129,128,129,130,132,135,137,139,141,142,145,148,151,151,152,155,159,161,162,162,161,163,164,163,162,162,163,162,160,161,161],[120,122,122,123,123,123,122,122,124,125,124,123,123,124,123,120,115,112,109,107,107,107,107,106,103,101,100,101,101,100,100,100,100,99,99,99,96,94,94,95,96,96,98,100,101,103,105,109,109,111,113,113,113,112,111,113,117,119,120,120,119,117,115,115,117,119,119,118,116,116,116,114,111,107,104,102,100,98,95,91,88,86,86,85,83,83,83,84,85,88,90,91,93,95,97,99,101,103,104,106,107,109,111,113,114,114,114,114,114,115,115,114,115,115,114,114,112,111,110,109,107,105,105,107,107,106,106,107,108,111,112,112,114,114,112,111,110,109,108,105,103,102,102,101,99,98,96,94,95,97,98,101,105,107,110,110,110,111,111,113,114,116,116,117,119,120,118,117,118,118,117,116,118,118,118,116,116,117,120,123,125,127,129,130,131,131,130,131,134,136,137,138,139,140,141,140,138,138,138,137,134,133,134,134,135,134,133,133,131,130,130,131,133,134,137,140,143,144,145,147,149,152,153,154,156,159,162,163,163,162,164,165,163,161,160,160,160,159,160,159],[120,121,122,123,123,124,123,122,123,124,123,122,123,123,122,121,117,114,111,108,108,107,106,105,103,102,102,102,102,101,102,101,101,100,100,100,98,96,95,95,95,97,98,99,100,102,104,109,111,114,115,114,114,113,113,114,117,119,120,118,118,118,116,116,117,118,118,119,117,116,114,112,110,107,105,103,99,96,94,91,89,87,85,84,82,82,83,84,85,87,89,91,93,94,96,99,100,101,101,103,104,105,110,112,113,115,113,114,115,114,114,113,113,114,114,113,113,112,111,110,108,107,108,108,108,107,107,109,110,112,114,114,116,117,116,115,113,111,108,105,104,103,104,102,100,98,96,95,96,98,99,102,106,108,110,112,112,113,113,115,116,117,119,121,121,121,119,118,119,120,119,119,119,120,120,117,117,119,121,123,125,128,130,131,132,132,132,132,134,135,136,138,140,142,141,140,140,141,140,139,137,134,134,134,134,133,134,134,133,133,133,135,137,137,140,143,145,146,148,150,152,153,154,155,155,157,161,164,163,163,163,164,162,161,160,159,159,159,159,157],[121,120,121,123,123,123,123,122,122,122,122,122,123,123,122,121,118,116,113,110,108,106,104,104,103,103,103,102,103,103,104,103,102,102,101,101,100,98,97,96,96,97,99,100,101,102,104,108,112,116,117,116,115,114,114,115,117,120,119,118,118,118,118,116,116,117,118,119,117,115,114,112,111,109,107,104,100,96,95,92,89,86,83,82,80,80,81,83,84,85,88,90,92,92,93,96,98,99,100,102,103,105,108,110,111,112,112,113,115,114,114,112,111,112,113,113,113,113,111,110,110,109,108,108,107,107,108,110,111,113,116,118,119,118,118,118,116,112,107,104,104,105,105,103,101,99,97,96,97,98,100,103,105,108,111,113,113,114,114,116,118,119,121,121,121,121,120,120,122,123,122,121,121,122,121,120,120,122,123,124,125,128,131,132,132,132,133,133,134,134,135,137,138,141,141,140,141,143,143,141,140,137,134,134,135,136,136,137,136,135,137,139,139,139,142,145,147,149,150,151,153,153,155,156,156,157,161,164,164,162,162,162,161,161,160,159,159,159,159,157],[120,119,120,122,121,121,122,122,121,120,121,122,123,122,121,118,116,115,112,110,108,106,105,105,104,104,103,102,103,103,104,104,105,106,105,104,102,100,100,99,99,100,101,102,103,105,106,108,112,117,118,116,116,115,114,115,118,120,119,118,118,117,117,116,116,117,118,118,117,116,114,113,112,110,107,106,102,98,95,93,89,85,83,81,79,80,81,83,83,84,88,91,92,93,94,96,98,98,100,102,103,105,108,110,110,111,112,113,114,114,114,113,112,112,113,113,113,113,112,111,110,110,110,109,108,107,108,111,112,115,118,120,120,118,118,117,114,111,108,105,105,107,106,102,101,98,98,98,98,99,101,104,106,107,110,113,114,115,115,117,118,120,122,122,121,121,120,122,123,123,123,122,122,124,123,121,121,123,124,126,128,129,131,133,132,131,132,132,134,134,134,137,139,141,141,141,142,144,144,142,140,139,137,136,138,139,140,140,139,138,140,142,141,141,143,146,148,150,149,150,152,153,155,157,157,157,160,163,162,161,161,161,161,161,160,160,159,160,160,158],[120,119,118,119,119,118,120,122,121,119,119,122,123,123,120,117,115,114,111,110,108,107,107,107,106,105,104,102,102,102,104,107,108,108,107,107,105,103,103,102,101,102,102,104,106,107,108,109,113,117,118,117,116,114,113,115,117,120,119,118,118,118,117,116,116,117,118,119,117,116,114,114,113,111,109,106,103,99,95,92,88,85,83,81,80,81,82,82,84,86,89,92,93,94,94,96,97,99,101,103,103,106,108,109,110,110,111,113,114,114,115,114,114,114,115,114,114,115,114,113,111,111,111,109,107,107,109,111,114,116,118,119,119,118,118,116,113,111,109,108,108,107,106,103,100,98,98,99,98,100,101,104,107,107,110,113,115,116,117,119,120,122,123,122,122,122,122,123,125,125,124,122,123,124,125,124,123,123,125,128,131,131,131,133,132,131,132,132,133,133,134,137,139,141,141,142,143,144,145,143,142,141,139,139,140,142,143,143,142,142,143,143,143,143,145,146,148,149,148,149,151,153,155,157,157,157,158,160,160,160,160,160,161,162,160,158,158,159,160,159],[119,119,118,118,118,117,119,121,120,118,119,121,122,123,120,117,116,114,113,111,109,108,108,109,107,106,105,104,103,103,105,108,108,108,108,107,107,105,104,103,103,104,104,105,108,110,109,110,113,117,119,118,117,115,116,118,118,119,120,118,118,118,116,115,116,116,118,119,117,116,115,115,113,111,109,107,104,101,97,93,90,86,83,81,80,81,81,81,85,88,90,90,92,94,95,97,98,99,100,103,106,108,108,108,108,109,110,112,114,115,115,115,114,114,115,116,116,117,116,115,113,112,111,111,110,109,111,112,116,118,119,119,119,118,117,115,113,111,110,110,108,106,106,104,101,99,99,100,101,103,104,106,107,108,110,112,114,116,118,121,122,123,123,122,123,123,124,124,126,127,126,125,126,126,127,127,125,125,128,130,131,133,133,134,134,132,133,133,133,133,134,136,139,140,142,142,143,143,144,144,143,143,141,141,142,143,144,145,145,145,144,143,144,145,146,146,148,150,149,148,150,152,154,155,156,157,159,159,158,158,158,158,161,163,160,157,158,158,158,159],[117,117,118,119,118,117,119,121,119,118,120,120,120,121,118,116,115,114,114,113,110,109,109,110,108,107,107,107,106,106,106,108,108,107,107,107,108,107,106,104,104,105,105,107,109,111,111,112,114,117,119,119,118,117,119,119,120,119,119,118,117,115,113,113,114,115,116,117,116,116,116,114,113,110,108,106,104,100,97,95,91,87,84,82,80,80,80,81,85,89,91,90,92,95,97,98,100,100,100,103,105,108,109,108,109,109,110,112,114,116,116,115,115,115,116,118,119,119,118,117,114,113,113,113,112,111,112,114,116,117,118,118,118,117,116,115,114,112,112,111,109,107,106,105,103,101,101,103,104,106,108,109,109,109,110,112,114,116,118,120,122,124,124,124,125,125,125,125,126,128,128,129,130,131,131,130,129,130,131,132,132,134,134,135,135,135,134,133,134,134,134,136,138,140,142,142,144,145,144,144,143,144,143,142,142,144,145,145,146,146,144,143,146,147,147,147,148,150,150,149,150,152,154,155,157,159,160,159,158,157,157,157,160,163,162,159,159,157,156,158],[116,115,118,119,119,119,120,122,120,119,119,119,120,120,117,115,114,113,112,112,110,109,110,111,110,108,109,108,107,107,107,107,107,105,106,107,107,108,107,106,106,106,106,107,108,110,111,113,115,117,120,121,119,119,118,118,118,118,118,117,116,114,113,114,115,116,116,115,114,115,114,112,111,109,107,104,102,98,97,94,91,87,84,84,82,81,81,83,86,89,91,92,94,97,99,99,100,100,101,102,105,108,109,109,109,109,109,110,113,116,117,116,116,116,117,118,118,119,119,118,117,116,115,115,114,113,113,114,114,115,117,118,117,117,116,116,116,115,115,113,111,109,108,108,106,105,105,106,106,107,110,110,110,109,110,113,114,116,118,119,122,123,124,125,126,127,127,127,127,128,129,130,132,135,135,133,133,133,133,134,135,135,134,135,136,137,136,134,135,135,135,137,139,141,143,143,145,147,146,146,147,148,146,145,146,147,147,145,146,146,145,145,147,149,149,149,150,152,151,150,152,154,154,155,157,160,161,160,158,156,155,155,159,161,161,160,160,159,158,158],[113,115,117,118,119,119,120,123,122,120,119,118,119,119,117,115,114,113,111,111,110,110,111,111,111,111,112,110,109,109,108,108,108,106,107,107,107,108,108,109,109,108,107,106,108,109,111,113,115,116,119,121,120,119,118,117,116,116,116,117,116,115,113,114,116,116,116,114,113,111,111,110,108,107,105,103,100,96,95,93,90,87,86,86,84,84,84,86,88,90,93,95,97,100,101,101,100,101,101,103,106,108,109,108,109,108,108,108,111,114,116,117,117,116,116,117,117,119,120,120,118,117,116,116,116,115,114,113,114,114,116,117,116,116,116,117,118,118,118,116,113,111,111,110,109,109,109,109,109,111,113,113,111,110,111,113,114,116,118,120,122,123,124,126,127,127,128,128,127,128,129,130,132,135,137,137,135,135,135,136,136,136,134,135,137,137,137,136,136,136,137,138,140,143,145,146,147,148,147,148,150,151,150,150,149,149,148,146,146,146,146,148,149,150,150,150,151,152,151,151,154,155,155,156,158,161,161,160,158,156,155,154,156,159,160,161,161,159,158,157],[110,113,116,117,118,118,120,122,122,121,120,119,119,118,116,115,114,114,113,112,111,111,111,112,112,113,113,112,112,112,110,109,107,105,106,107,108,110,110,111,110,109,108,108,109,110,112,114,114,114,116,118,118,118,118,117,116,115,115,115,114,114,113,113,114,115,113,112,110,108,109,110,108,106,103,101,97,93,92,92,90,88,88,88,87,87,88,89,91,92,95,97,98,101,102,103,103,104,105,106,106,108,109,108,108,108,107,108,111,114,116,118,118,117,118,118,119,120,121,121,120,119,118,118,119,119,116,113,113,114,114,113,113,114,115,117,117,117,117,115,113,111,111,110,111,112,111,112,114,115,115,115,114,112,113,115,115,116,119,122,124,125,127,129,129,128,128,127,127,129,130,132,134,135,137,138,137,136,136,137,136,136,136,137,138,138,139,140,138,138,140,141,142,144,145,147,148,148,150,151,151,151,150,152,151,151,149,146,145,145,147,149,149,150,151,151,152,153,152,151,153,154,155,157,159,161,159,158,156,155,155,155,156,157,158,159,159,158,158,157],[107,110,112,114,115,116,117,118,119,120,121,121,121,118,116,115,116,116,116,115,114,114,114,115,116,115,114,113,114,114,113,110,107,105,106,108,110,111,112,111,109,109,110,110,110,110,111,112,111,110,112,114,115,115,117,118,117,115,115,115,114,114,114,114,114,113,112,110,109,107,108,108,107,104,101,99,96,93,92,92,92,92,91,91,92,93,93,93,95,96,97,98,100,102,103,103,105,107,108,109,109,110,110,109,108,109,108,109,112,115,116,117,118,118,119,119,121,122,122,121,122,121,120,120,120,121,118,114,113,113,112,112,112,113,114,115,116,116,115,114,113,113,112,111,112,112,113,115,117,118,118,117,116,116,117,118,117,118,121,124,126,127,128,129,129,129,127,125,125,128,130,133,135,135,136,138,138,138,138,138,137,137,138,140,141,141,142,142,143,143,143,144,144,144,145,147,149,150,152,153,152,150,149,151,151,151,149,147,146,147,150,150,148,150,151,151,152,152,151,150,151,152,154,157,157,158,156,154,154,155,156,156,157,158,157,157,157,158,158,157],[106,108,109,110,109,111,112,114,117,119,119,120,119,118,116,115,115,116,117,116,116,116,117,119,119,119,117,115,115,115,114,111,109,107,107,109,110,111,112,112,110,110,110,110,110,109,110,111,109,109,110,112,113,114,116,118,116,113,114,115,114,113,113,114,113,111,110,108,107,105,104,104,103,101,100,99,96,93,91,92,94,96,95,94,95,97,97,96,98,101,101,101,103,105,106,105,107,110,111,112,112,112,112,110,110,111,110,111,113,116,117,118,120,120,120,119,121,124,124,122,122,121,120,120,121,121,119,116,115,114,113,112,111,113,113,114,115,115,115,114,114,114,113,112,114,114,116,118,119,119,120,119,119,119,120,121,119,120,123,124,127,127,128,128,128,127,125,124,125,127,130,132,132,134,135,136,139,139,139,139,139,139,140,142,143,144,144,144,144,145,145,145,144,144,147,149,151,153,153,154,153,151,150,151,151,150,149,148,148,148,151,151,150,151,151,151,151,151,150,150,151,151,152,154,154,154,153,152,154,156,156,155,156,157,157,157,159,160,158,157],[104,106,106,105,104,105,108,111,114,116,118,119,118,116,115,115,114,116,118,118,117,118,119,122,122,121,119,117,117,117,115,113,111,108,107,109,111,112,114,113,112,111,110,110,110,109,110,109,108,107,108,110,111,112,115,116,114,113,114,114,113,114,114,114,113,111,109,106,104,103,101,100,99,99,100,98,96,93,93,93,95,98,98,97,98,100,101,101,102,103,104,106,107,107,108,108,110,112,113,115,115,115,114,113,112,111,110,112,115,117,119,121,122,121,120,120,122,123,124,123,123,121,121,121,120,120,118,117,117,115,113,112,111,111,112,113,114,114,114,115,115,114,113,114,116,117,118,120,120,120,120,119,120,121,122,122,122,122,124,126,127,128,128,127,126,125,124,124,125,127,129,130,130,131,133,135,138,140,140,141,142,142,143,144,145,147,147,146,146,148,147,145,144,146,149,152,152,155,156,154,153,152,151,151,149,149,148,148,148,149,151,151,152,152,152,151,151,151,149,150,150,149,149,151,151,151,151,152,154,155,155,154,155,155,156,159,161,161,160,158],[102,102,101,101,101,102,106,110,111,113,114,116,116,116,116,117,116,116,118,119,119,120,122,124,124,121,120,118,117,117,115,114,111,109,109,112,113,114,115,113,112,111,110,110,110,109,109,109,107,105,106,107,109,111,113,115,115,116,114,113,113,114,112,111,110,109,107,104,102,101,99,98,97,95,95,95,94,94,94,95,98,100,101,100,102,104,105,106,106,106,108,110,109,109,110,112,113,114,115,116,115,115,116,116,113,112,112,114,116,118,121,123,122,122,123,123,123,123,123,123,123,121,122,122,120,118,118,117,116,114,112,111,110,110,112,112,113,113,113,115,115,115,114,114,116,118,120,122,121,121,121,121,122,124,124,123,124,124,126,128,129,130,128,127,125,123,124,124,124,125,126,128,128,130,133,136,139,140,141,143,144,145,145,145,148,151,150,148,149,150,149,148,148,148,150,153,153,154,155,154,154,152,150,151,149,149,148,147,148,149,150,150,152,153,152,150,150,150,149,149,148,147,148,151,150,149,151,151,151,152,151,152,154,155,158,162,162,161,160,160],[98,98,97,96,97,100,104,107,109,110,111,113,115,116,119,119,118,117,119,121,122,122,124,125,124,122,120,119,117,117,116,113,111,110,110,112,113,114,116,114,112,111,110,111,110,109,109,109,107,105,106,107,109,110,111,113,115,115,114,113,113,114,111,109,108,107,105,102,100,99,98,97,96,93,92,92,93,93,95,97,100,101,101,103,105,107,108,110,110,110,112,114,113,112,114,116,116,117,117,117,115,115,117,117,115,114,113,115,119,121,123,123,122,123,125,125,125,124,124,124,124,124,123,123,121,118,116,116,114,111,109,108,107,109,110,110,110,111,110,111,113,114,114,115,116,119,122,122,122,122,123,123,124,125,125,125,125,125,126,128,130,131,130,128,126,124,123,124,124,123,125,127,127,129,133,137,140,140,140,143,145,145,146,147,149,152,153,152,151,152,151,150,150,150,151,152,153,152,152,153,154,152,150,151,150,149,147,146,146,147,148,150,151,152,151,150,150,150,151,149,147,146,148,150,149,149,151,150,149,149,149,151,153,156,159,161,161,161,161,160],[94,93,92,92,94,97,100,102,105,108,109,112,114,116,119,120,119,119,122,124,126,127,127,127,125,122,120,119,118,117,116,114,113,112,111,112,113,113,114,113,111,110,110,111,109,107,108,110,108,106,107,109,110,112,112,112,113,113,113,112,112,113,111,110,108,107,105,101,99,97,96,95,94,94,92,93,95,95,97,98,99,101,103,105,107,111,112,112,112,113,115,117,117,116,116,117,117,117,118,117,117,117,118,117,116,115,114,115,119,122,125,125,125,126,126,126,126,125,124,125,125,125,124,122,119,116,114,113,111,108,107,106,106,107,107,106,107,109,108,109,112,113,114,116,117,120,122,122,123,123,123,124,125,126,127,127,127,126,126,127,129,130,129,127,126,126,125,125,124,122,125,127,129,131,134,138,140,142,143,144,146,147,147,149,149,151,153,154,152,152,152,151,150,150,151,151,151,152,152,153,153,153,151,150,149,147,147,145,144,145,145,147,149,150,151,151,150,150,150,149,147,145,146,147,147,147,148,148,148,148,148,151,154,156,159,160,160,161,162,161],[91,90,88,89,92,95,97,99,102,105,107,110,114,116,118,120,121,122,124,127,129,130,130,128,125,122,120,119,118,116,115,114,114,113,112,111,112,112,112,112,111,110,110,111,109,107,109,111,109,108,110,112,114,114,113,112,112,112,112,112,112,112,111,110,109,107,104,101,99,96,96,95,94,94,94,95,98,99,99,98,100,102,104,105,107,111,114,113,113,114,116,119,119,118,117,117,118,118,118,118,117,118,118,118,116,116,116,117,120,123,125,126,128,128,128,128,127,126,126,126,125,125,124,121,118,116,113,111,109,107,106,104,104,106,106,104,104,105,106,109,112,113,115,116,118,120,122,123,124,123,122,124,126,127,128,127,127,127,126,126,126,127,128,127,127,127,127,126,125,123,126,129,130,131,135,140,142,144,144,146,148,148,148,148,149,150,151,153,153,153,151,151,150,149,150,150,150,151,152,153,153,152,150,149,147,146,146,144,143,144,142,143,145,148,151,152,150,150,149,147,146,145,144,145,146,146,147,146,146,146,147,150,154,158,159,159,159,161,162,161],[89,88,87,88,90,93,95,97,99,103,105,108,112,115,117,119,121,124,127,128,131,132,131,129,126,122,120,119,118,117,117,117,115,114,112,111,112,111,112,111,110,109,110,112,110,108,108,110,110,110,113,114,114,113,113,113,111,111,110,110,111,111,112,111,109,107,105,102,99,96,96,96,95,95,95,96,100,103,103,101,103,105,105,106,109,112,113,114,115,117,118,120,120,120,119,117,118,119,118,117,118,118,119,119,119,118,119,119,122,125,127,128,129,129,130,130,129,128,127,126,126,124,122,120,117,115,112,110,108,106,105,104,105,105,104,103,104,104,106,110,112,114,117,118,119,121,122,124,123,123,123,123,125,126,127,126,126,127,125,125,126,127,127,127,126,127,126,126,125,124,126,129,129,130,134,139,142,145,146,147,147,147,147,148,150,151,152,152,152,154,153,151,150,149,150,151,150,149,150,151,151,149,149,148,145,144,142,140,141,142,140,140,143,146,148,150,148,148,148,146,145,145,144,144,146,147,146,144,146,147,149,151,154,158,157,158,159,161,161,160],[90,88,87,88,90,93,95,95,97,101,103,106,110,112,115,117,120,125,128,129,131,132,132,130,126,122,121,120,118,118,118,118,117,115,113,114,114,113,114,112,110,110,111,112,111,108,108,110,111,113,115,116,114,114,115,114,112,111,111,110,111,111,111,111,109,107,106,104,100,97,96,96,96,96,96,98,101,104,106,106,106,107,108,109,111,113,114,115,116,118,119,120,120,121,119,119,120,120,119,118,117,118,119,120,120,120,121,122,124,126,127,128,130,129,130,130,129,127,126,126,126,124,121,119,117,115,113,110,108,106,105,105,104,104,104,103,105,107,110,113,115,117,118,119,121,122,122,123,123,124,123,122,123,124,125,125,125,125,125,125,126,127,127,127,127,127,126,126,126,125,126,129,130,130,134,138,141,145,149,148,146,146,146,148,150,152,153,152,152,155,155,153,151,150,151,151,150,148,149,151,151,148,147,146,144,141,139,137,137,138,138,139,141,144,147,148,146,146,146,145,144,143,143,144,145,146,144,144,146,148,151,151,152,155,155,158,160,161,160,159],[91,88,87,88,90,91,95,96,99,102,103,106,109,112,114,117,121,125,128,128,131,133,133,130,127,123,121,120,119,118,118,119,117,115,116,117,115,114,115,114,113,112,111,111,110,107,107,109,112,115,117,118,117,117,117,116,115,113,112,112,112,113,113,112,110,107,106,105,102,100,99,99,98,98,98,100,103,105,108,109,108,108,109,112,113,114,115,115,116,116,118,118,118,119,118,118,119,120,120,118,118,118,119,119,120,120,121,122,123,125,126,128,129,129,129,130,128,126,126,126,125,124,122,120,118,117,114,111,109,107,105,106,104,104,105,105,107,109,111,115,118,121,122,122,122,122,122,122,122,123,122,121,122,124,123,123,123,123,124,126,127,128,128,129,128,129,129,128,128,128,128,130,131,131,134,138,141,144,148,147,147,146,145,147,149,153,153,153,155,157,156,154,153,151,152,152,150,149,149,150,150,148,147,146,142,139,136,134,134,134,135,137,139,141,145,145,145,144,144,144,143,141,142,144,145,145,145,144,146,148,149,150,151,153,154,157,159,160,161,160],[92,89,87,88,89,90,94,97,100,102,103,105,107,111,113,117,122,126,128,128,131,133,133,131,129,125,121,120,119,119,118,118,117,117,118,119,117,116,117,116,114,114,112,110,108,106,108,110,113,115,117,119,119,119,119,118,117,115,113,114,115,115,114,113,110,108,107,107,105,102,103,102,100,100,101,103,104,106,109,110,111,110,111,114,116,115,115,115,115,116,117,118,118,119,118,118,120,121,120,118,119,120,120,120,120,120,121,121,122,123,125,127,127,128,129,129,128,127,127,126,124,123,122,121,119,117,115,112,110,107,104,104,104,104,105,107,109,112,114,117,121,124,125,124,124,124,122,121,121,122,122,121,122,124,123,121,120,120,123,126,128,129,130,130,129,130,130,131,131,130,131,131,132,132,133,137,140,144,147,146,146,145,144,145,148,151,153,154,156,157,157,156,154,153,153,153,152,149,149,150,150,148,146,144,141,136,133,131,131,132,132,134,137,139,142,143,143,143,143,144,143,142,143,143,143,144,145,144,146,148,148,147,149,151,153,157,158,160,161,160],[91,89,87,88,89,91,95,98,99,100,102,103,107,110,113,117,121,125,127,128,130,132,131,130,129,127,123,120,119,119,118,116,117,117,116,117,116,117,116,116,115,115,112,110,108,106,108,111,114,115,118,121,121,122,121,119,119,117,117,117,117,116,115,114,112,109,109,110,107,105,105,105,104,103,104,106,106,108,110,111,111,111,112,114,116,116,115,114,114,114,116,117,118,120,118,118,120,122,120,118,119,121,122,121,121,120,120,120,122,123,125,128,128,129,129,128,129,129,128,127,126,125,123,122,120,118,116,112,110,109,106,103,103,103,106,108,110,113,116,119,123,125,126,125,124,124,122,122,123,123,124,122,122,123,121,120,120,120,123,126,127,127,128,129,129,130,130,132,132,132,132,130,133,134,135,136,139,143,145,145,145,144,144,145,147,149,150,152,154,155,157,157,155,153,153,153,152,151,151,151,149,147,143,140,137,133,131,130,130,132,132,133,135,137,141,143,142,142,142,144,144,142,143,144,143,144,144,145,146,147,147,146,148,150,152,156,157,158,159,159],[90,88,87,89,90,93,96,97,98,100,101,103,107,110,113,117,119,123,126,129,130,130,128,129,129,127,125,122,120,119,117,116,117,117,115,115,114,116,115,114,114,115,114,111,110,108,109,112,113,115,118,120,122,124,123,122,122,121,121,120,118,116,116,116,115,112,111,111,108,107,107,107,107,107,108,109,108,109,111,112,110,110,110,112,115,117,116,115,115,115,116,116,118,120,119,118,120,122,121,120,121,123,124,123,122,120,119,120,122,122,124,127,129,129,130,129,129,130,130,128,127,126,123,121,120,119,117,114,111,109,107,106,105,104,106,108,111,113,115,119,122,123,125,125,124,123,121,122,123,124,125,123,122,122,121,121,122,121,123,126,125,126,127,128,129,129,130,132,132,134,133,131,133,134,136,136,138,142,143,143,144,144,144,145,147,147,148,150,153,154,155,156,154,152,152,152,151,152,152,148,145,142,139,136,134,131,130,129,129,132,133,133,135,137,140,142,142,141,141,143,145,145,146,146,145,145,144,144,145,145,145,146,149,151,154,156,156,156,157,158],[89,88,87,88,90,93,96,96,98,99,101,103,107,110,114,118,120,124,127,129,130,129,128,128,128,127,126,125,123,121,119,117,117,117,115,114,114,115,113,112,113,115,114,112,112,111,112,115,115,116,117,119,122,124,125,125,124,125,124,123,121,118,118,117,115,112,111,111,110,110,110,109,109,109,109,110,110,110,111,112,111,110,110,112,115,117,117,116,117,118,118,117,119,120,120,120,121,122,121,122,122,123,124,123,120,118,119,120,121,120,123,125,127,128,128,129,129,130,131,130,128,127,124,122,121,120,118,115,112,108,108,108,106,105,107,108,109,112,114,117,119,120,123,124,123,122,121,123,124,126,126,124,122,121,121,122,121,121,123,126,125,126,127,127,129,130,130,132,133,135,135,135,136,137,138,138,140,142,142,141,141,142,143,145,147,148,149,151,152,153,153,154,152,151,151,151,151,151,150,146,142,139,136,134,132,130,128,128,131,134,134,135,136,138,140,140,141,141,141,141,144,145,147,147,145,144,144,144,145,145,146,148,151,152,155,156,156,155,156,157],[89,88,86,87,89,93,95,96,97,100,103,106,109,112,115,118,120,124,127,129,129,128,126,125,126,126,126,126,125,124,121,119,117,116,114,113,113,114,112,111,112,114,114,114,114,113,114,115,116,117,117,120,122,124,126,128,128,128,128,125,123,121,120,118,116,113,110,110,110,111,111,110,110,109,110,111,111,110,111,112,112,110,110,112,114,116,117,117,118,119,120,119,119,120,122,122,123,123,122,122,123,123,123,122,119,117,118,120,121,121,123,124,126,127,127,129,130,130,131,131,130,128,125,123,122,120,117,115,113,111,110,109,108,107,108,107,108,110,112,114,116,118,122,122,122,122,122,123,125,127,127,125,123,121,121,123,122,121,124,126,126,125,126,128,130,130,131,133,134,135,136,138,139,140,140,139,140,141,141,140,140,140,142,144,146,148,149,150,151,151,150,150,149,149,150,150,149,149,147,144,141,137,134,133,132,130,129,130,132,135,136,137,138,139,140,141,140,140,140,140,142,145,146,146,145,144,144,144,145,146,147,150,153,154,156,156,155,155,155,156],[86,87,86,85,88,91,94,96,99,102,105,109,111,113,116,117,121,123,126,127,127,126,124,124,124,125,124,124,123,122,121,119,117,116,112,111,111,110,111,110,111,114,115,116,115,115,115,115,117,118,120,122,122,122,126,130,131,131,130,127,125,122,121,119,117,115,112,111,111,112,112,112,112,111,113,113,112,111,111,112,111,110,112,115,115,116,117,118,119,119,120,120,120,120,123,124,124,123,121,122,122,123,123,121,118,117,117,118,120,120,121,123,126,128,129,131,131,131,133,132,130,128,126,124,122,120,117,115,114,114,112,109,109,108,106,106,107,110,111,113,115,117,120,121,122,122,123,124,127,129,129,126,124,122,122,124,123,122,124,126,125,124,127,130,130,130,132,134,135,136,139,141,141,142,141,140,140,139,140,140,139,138,141,145,147,148,148,148,148,147,146,147,146,146,148,148,148,148,147,144,139,135,134,133,132,132,132,134,135,137,138,139,139,139,140,140,139,139,140,140,142,145,145,144,144,143,143,144,145,148,149,152,154,154,156,157,157,157,155,154],[84,85,85,86,88,89,91,96,101,103,105,108,111,113,115,117,121,124,125,126,126,125,124,124,123,124,124,122,121,121,119,117,115,114,111,108,108,109,109,110,113,116,117,116,117,118,118,118,120,121,123,123,123,123,125,129,130,131,130,128,127,124,122,118,117,116,114,113,114,114,113,112,113,114,115,115,113,112,110,111,112,112,115,116,116,116,117,119,120,120,121,122,122,123,124,125,123,122,120,120,121,122,122,120,117,117,118,118,119,119,121,124,127,130,131,132,131,131,133,133,131,128,126,124,122,118,115,114,114,114,113,110,109,107,106,106,108,109,110,113,115,117,119,120,121,123,124,126,130,132,131,128,125,124,123,124,123,123,124,125,125,125,126,129,129,130,132,135,137,138,141,142,141,141,140,140,139,138,139,138,137,137,139,142,145,146,147,146,144,143,143,144,145,146,147,147,148,148,146,143,139,137,135,133,133,135,135,136,138,139,140,140,139,139,140,139,138,139,141,142,143,145,145,144,145,144,143,144,146,149,152,153,154,154,155,157,159,158,156,154],[82,83,84,86,88,88,91,95,99,103,106,108,110,113,115,118,121,124,126,126,126,124,124,124,124,124,123,121,121,120,119,116,113,111,109,108,109,110,111,112,114,118,117,117,119,121,120,119,121,123,125,125,124,124,125,128,130,131,131,130,128,126,123,119,119,118,115,114,114,114,113,112,114,116,116,114,113,112,111,111,111,113,115,115,117,117,118,120,121,122,123,124,125,126,126,126,124,121,119,119,120,121,122,121,118,118,119,120,121,121,123,125,128,130,131,132,131,130,131,133,130,126,125,124,120,116,113,114,113,114,114,111,109,107,107,108,109,109,111,113,114,116,119,120,121,124,125,127,130,133,133,130,128,127,125,124,124,125,125,125,125,126,126,129,129,130,133,135,138,140,141,142,142,142,141,141,140,139,139,137,137,137,137,138,141,142,144,144,143,142,140,141,144,145,146,146,146,147,145,142,140,137,135,134,135,137,138,138,140,140,142,143,142,140,141,140,139,140,141,143,143,144,145,145,146,146,145,146,147,150,153,154,155,156,156,157,157,158,156,153],[79,81,83,85,87,89,92,95,98,102,105,108,111,113,116,118,121,124,126,126,125,125,124,124,124,124,123,121,121,121,119,115,113,110,108,108,110,111,112,113,116,119,119,119,120,122,122,122,123,125,127,126,125,124,124,126,128,130,132,131,129,127,123,121,120,119,116,114,113,114,114,112,114,116,115,114,113,112,112,110,110,112,115,117,118,117,118,121,122,123,124,125,126,127,126,126,124,120,119,119,120,122,123,122,120,119,120,121,123,123,125,127,129,130,131,130,130,129,131,132,129,125,124,123,120,116,112,112,112,113,114,112,110,108,108,109,110,111,112,112,112,114,117,119,121,124,125,127,131,134,134,131,129,127,126,125,126,126,126,126,127,127,127,129,130,131,133,136,138,140,141,143,144,143,142,141,141,140,139,136,135,136,136,137,138,140,142,142,141,140,139,140,143,144,144,144,144,146,144,142,140,138,137,136,138,140,139,140,142,142,144,144,143,142,141,140,140,140,141,142,144,144,146,147,147,147,148,148,149,151,154,155,157,157,157,157,156,156,154,153],[77,78,81,84,87,89,91,94,98,101,105,109,111,115,118,120,121,123,125,126,126,126,124,123,124,123,123,122,121,121,118,113,110,108,107,107,109,110,111,112,115,118,119,121,122,124,124,123,124,126,126,126,126,124,123,124,125,127,129,130,129,128,124,122,119,118,116,116,115,115,114,112,114,115,116,115,114,113,112,111,111,112,116,119,119,118,119,122,122,122,125,125,125,126,126,126,125,122,121,121,121,122,122,121,120,119,120,121,123,124,125,126,129,130,130,130,130,129,130,130,128,125,124,122,120,117,113,111,112,112,113,112,111,109,110,111,112,112,112,112,112,114,117,120,122,125,126,127,131,134,133,131,130,129,128,127,127,127,127,127,127,128,127,127,128,130,132,136,139,140,143,144,144,143,141,139,140,140,138,135,135,134,134,136,136,138,140,139,139,137,137,137,139,141,143,143,143,144,143,141,140,139,139,140,142,144,143,143,143,142,143,144,144,143,141,140,139,140,141,143,145,146,147,148,147,146,148,150,150,151,154,156,158,159,158,157,156,156,155,154],[76,77,79,81,84,86,89,93,98,102,105,108,112,116,119,120,121,122,123,124,125,125,123,122,123,123,121,120,118,118,116,112,109,107,105,105,107,108,109,110,113,116,117,119,121,122,123,123,123,124,125,125,124,123,121,122,124,125,127,127,127,126,123,122,119,117,116,116,116,115,113,112,113,114,116,115,114,113,113,112,113,114,116,119,119,118,118,120,121,122,124,125,125,125,125,126,126,124,123,121,121,120,120,120,119,119,120,122,124,124,124,126,128,129,130,130,130,130,129,129,127,125,124,121,119,118,114,112,112,114,113,112,112,111,110,111,112,113,114,114,114,115,117,120,122,125,126,127,130,132,132,132,132,131,130,129,128,127,126,127,128,129,129,127,128,130,133,136,138,141,143,143,143,143,140,138,139,139,137,134,135,134,132,134,135,137,138,138,136,135,134,136,137,138,141,142,142,141,142,142,141,140,141,143,145,147,148,146,145,145,144,143,144,144,142,141,140,140,142,144,146,147,148,148,147,147,148,151,152,151,152,156,160,161,159,157,155,156,156,155],[75,75,77,79,81,84,86,90,96,101,103,106,111,116,119,120,121,123,123,124,124,124,122,121,122,122,120,119,117,116,115,112,108,105,103,104,105,106,106,107,110,114,115,116,118,119,121,121,121,121,122,121,121,121,119,121,123,124,124,124,123,122,122,122,120,119,117,115,115,114,112,112,111,112,113,114,113,113,114,114,115,116,117,119,118,117,117,119,120,122,124,124,124,124,124,124,125,125,123,120,120,120,120,121,120,120,121,123,125,126,126,126,127,127,129,129,130,130,131,129,128,126,123,120,118,117,114,113,115,117,115,113,114,114,113,114,114,115,116,115,116,116,117,119,120,123,125,127,131,133,134,133,133,132,131,131,129,128,127,127,128,130,130,129,131,132,133,136,138,141,142,141,141,141,139,137,137,138,136,134,134,135,133,133,135,136,136,136,134,132,133,135,135,136,139,141,140,139,141,143,143,142,142,145,147,148,150,150,150,149,147,145,145,144,143,142,141,141,143,145,145,146,149,149,149,150,150,152,153,152,153,156,158,159,159,157,156,155,155,153],[73,74,75,76,78,81,83,87,92,97,100,105,110,115,119,121,121,121,122,124,124,123,123,122,123,122,121,118,116,114,114,111,108,105,103,103,103,103,104,105,108,111,111,112,115,117,119,118,117,118,119,119,118,118,118,119,121,122,122,120,119,119,121,121,121,121,119,116,115,113,111,110,110,111,112,112,113,113,115,116,117,118,118,117,115,116,117,118,119,121,123,125,124,124,124,124,123,123,122,120,119,118,119,121,121,121,122,125,126,128,127,127,127,127,129,130,130,131,131,131,129,126,122,119,117,115,114,115,116,117,117,115,116,116,115,116,116,116,117,116,118,118,118,118,118,121,123,127,131,133,135,135,134,132,131,130,129,129,128,128,129,130,130,131,133,134,134,136,139,140,141,139,138,138,138,137,137,136,136,134,134,135,135,134,135,134,135,134,133,132,132,133,134,137,139,139,139,139,142,144,144,144,144,145,147,149,152,153,153,151,149,147,147,146,144,143,144,145,144,144,146,147,150,150,149,149,151,153,154,153,154,154,156,157,157,157,155,154,153,152],[72,73,73,74,75,77,81,86,91,94,99,104,108,113,117,119,120,120,122,124,124,123,122,123,123,121,120,118,115,112,111,109,106,104,102,103,102,101,102,104,106,109,110,110,112,113,114,114,116,117,117,118,118,117,118,118,119,119,118,117,118,119,120,121,121,121,119,115,114,112,110,109,110,111,111,112,112,113,115,116,117,117,117,116,116,115,114,115,117,119,121,124,123,122,123,125,124,123,122,121,119,117,118,119,120,120,123,126,128,129,129,128,129,128,128,130,130,131,133,133,131,128,124,120,118,115,116,117,117,116,117,117,117,117,116,116,116,116,117,118,118,119,119,119,118,119,122,126,130,132,133,134,133,132,132,129,129,130,129,129,130,130,131,132,134,136,135,136,138,138,139,139,139,139,137,137,136,135,136,135,134,135,134,135,134,133,133,132,133,133,132,131,134,137,138,139,140,140,141,143,144,145,145,145,148,151,153,155,154,153,150,148,147,147,146,145,145,146,145,144,145,148,149,151,150,149,150,153,154,154,154,153,154,155,155,154,153,151,151,151],[71,71,72,73,73,75,79,84,89,93,97,103,108,111,114,117,118,120,123,125,126,124,123,123,123,123,121,118,115,112,110,107,105,103,102,103,101,100,100,101,104,107,110,110,110,111,111,113,115,115,115,116,117,117,119,118,116,115,114,115,118,120,121,120,120,120,119,117,114,112,110,110,110,111,111,113,114,114,115,115,116,115,115,115,116,115,114,115,115,117,120,122,122,121,122,124,124,123,123,121,119,117,118,119,120,122,125,126,127,130,130,129,129,129,129,130,131,133,135,135,132,128,125,122,120,119,118,118,118,117,118,118,119,119,118,117,116,117,117,118,118,120,120,120,119,119,120,124,127,130,132,132,132,132,131,130,130,131,131,131,131,130,131,132,134,136,137,137,138,138,137,138,140,139,136,134,133,134,135,135,133,133,133,134,133,131,131,130,131,132,131,131,134,137,139,140,141,141,140,142,145,147,147,148,151,153,154,155,156,155,152,149,149,148,147,145,144,145,145,144,145,147,150,151,150,148,148,152,153,155,155,153,152,152,152,152,150,148,149,149],[72,72,72,73,73,75,78,82,87,91,95,100,105,109,114,117,118,121,124,125,126,126,125,125,125,125,122,117,114,112,110,107,106,104,103,104,101,99,98,98,102,105,107,109,108,109,110,112,113,113,113,113,114,114,116,116,114,113,113,114,116,118,119,119,119,119,119,119,115,112,111,110,110,110,111,113,114,115,115,115,116,115,115,115,114,113,113,116,116,116,119,121,120,120,121,123,122,120,121,120,119,117,117,120,121,123,125,126,128,130,130,129,129,129,129,131,133,134,135,134,131,128,126,124,122,122,120,120,120,119,120,120,120,120,120,120,120,119,118,118,119,120,121,120,119,118,119,124,126,129,130,130,131,132,131,131,130,131,132,132,132,131,132,133,135,137,137,137,138,139,137,136,137,137,136,134,133,133,133,134,132,132,134,135,134,132,131,130,132,132,132,133,135,138,140,140,141,142,141,143,146,148,149,150,153,156,156,155,156,155,152,150,148,148,147,145,144,144,144,146,147,147,149,149,148,147,148,150,153,155,154,153,153,152,152,150,148,146,147,148],[73,73,74,74,74,75,77,80,84,89,93,98,103,107,113,116,118,121,124,126,127,126,126,125,125,124,120,117,114,111,110,108,106,104,105,104,101,99,98,98,100,102,104,105,106,107,109,111,112,111,111,110,109,111,113,114,114,112,111,113,114,115,117,118,118,118,118,118,115,112,111,110,110,111,112,114,114,114,115,116,115,115,114,114,114,113,113,114,114,116,117,119,119,119,120,120,119,119,120,119,118,117,116,119,122,125,126,127,129,132,131,130,130,130,129,131,133,134,135,134,132,129,128,126,124,124,123,122,122,122,124,124,122,122,123,123,122,120,119,119,119,119,120,120,118,117,118,121,124,127,128,129,130,130,131,131,130,130,131,131,131,131,133,134,136,137,137,137,137,137,136,135,135,135,135,134,133,132,132,133,133,133,135,136,134,132,131,131,132,132,133,135,137,139,140,140,141,143,142,144,147,150,151,153,155,159,159,157,157,156,154,150,148,148,147,145,144,143,144,146,147,148,148,148,148,148,148,150,152,154,153,153,153,153,152,148,145,145,146,147],[74,74,73,73,74,76,77,79,84,89,91,96,101,104,110,114,118,122,124,126,127,127,127,126,125,123,121,118,113,110,109,109,106,104,103,102,101,100,99,99,99,102,103,105,106,108,108,108,109,109,109,108,108,109,111,112,111,110,110,112,112,113,115,116,116,116,117,117,115,112,111,110,110,111,113,114,114,114,115,117,115,114,114,114,114,113,112,111,113,115,117,119,119,118,118,117,118,117,117,117,117,117,117,118,122,126,126,126,129,131,132,131,131,132,131,132,133,134,135,134,132,129,128,127,127,126,124,122,123,124,125,126,125,124,125,125,123,121,121,121,120,119,120,120,120,118,118,120,122,126,128,129,129,127,127,127,127,128,129,131,131,132,134,135,135,135,137,138,137,135,135,135,135,135,134,134,132,131,131,131,132,133,134,136,134,134,133,132,132,131,132,135,137,139,141,141,141,143,144,145,148,150,152,155,158,160,160,159,159,157,156,153,150,148,147,146,144,143,144,145,146,147,147,148,148,148,149,149,150,152,152,151,152,152,149,146,146,145,145,146],[75,74,74,74,75,76,78,81,84,88,91,94,97,102,107,112,117,122,123,125,126,127,128,127,126,123,121,118,115,113,112,110,108,104,102,102,101,101,101,101,100,101,103,105,106,107,107,106,107,109,109,109,108,108,109,111,110,109,110,111,112,112,113,114,115,115,114,115,114,111,109,107,108,111,113,114,113,114,115,116,115,114,114,113,113,112,110,109,111,114,116,117,116,116,117,117,118,117,115,114,115,117,117,118,121,125,125,126,128,130,132,132,132,131,132,133,134,134,135,135,132,129,127,127,127,126,123,121,122,124,126,128,126,124,125,125,123,121,121,121,120,118,119,120,119,118,119,120,122,125,127,128,127,124,122,123,124,126,128,129,130,132,133,133,133,132,134,136,134,132,133,133,133,134,134,133,132,130,130,130,132,134,133,134,134,135,136,134,132,132,133,136,137,138,141,142,143,145,146,148,149,150,152,155,158,160,159,159,159,159,157,154,152,150,148,147,145,145,145,144,144,145,145,146,146,148,150,149,150,151,150,150,152,151,148,146,146,146,144,145],[79,78,77,77,77,77,80,82,83,86,89,92,96,101,105,109,114,120,123,125,127,128,128,127,126,124,123,122,119,117,115,113,110,106,104,103,101,101,102,102,102,101,102,104,105,104,105,105,106,107,108,108,108,108,110,111,110,109,109,110,111,112,113,114,115,116,114,114,112,111,109,107,108,111,113,113,113,114,114,115,114,114,112,111,112,111,109,109,110,113,113,114,114,113,114,115,115,115,114,113,115,116,116,117,120,123,124,126,127,128,131,132,131,131,133,135,135,135,136,136,133,129,127,127,126,126,124,124,125,126,129,129,127,126,127,127,124,122,122,121,120,117,118,119,119,118,119,120,121,123,125,124,122,120,120,121,123,124,124,126,126,128,130,130,129,128,130,131,130,128,130,130,130,131,131,130,130,129,128,129,131,134,133,134,135,135,137,136,135,134,135,137,138,139,142,144,144,146,147,149,149,149,152,153,156,158,157,157,158,159,158,155,153,151,149,149,147,145,144,142,144,144,144,145,146,149,151,151,151,151,150,150,151,151,148,145,146,147,145,146],[83,82,80,79,78,80,82,82,83,85,87,91,96,100,104,108,113,119,123,125,127,129,128,127,126,125,125,125,123,121,119,116,112,108,105,104,102,101,102,103,104,103,102,103,104,104,104,103,103,105,106,108,109,110,111,111,110,109,110,111,111,112,113,115,116,116,114,112,111,110,108,108,109,110,111,112,113,113,113,114,114,113,111,110,110,110,109,110,110,112,113,112,111,111,112,113,114,115,114,113,116,117,117,118,120,122,123,124,125,127,129,130,130,131,134,135,135,135,135,134,132,130,127,126,125,125,125,124,127,128,130,130,127,127,127,127,125,123,122,121,119,117,117,117,117,117,118,119,120,121,122,121,118,117,118,120,122,123,122,123,124,126,127,126,126,125,126,127,125,124,125,125,126,127,128,128,128,127,128,129,130,132,132,133,134,135,136,137,137,135,135,137,138,141,144,146,146,146,147,149,150,150,151,152,155,156,155,155,156,157,157,156,155,153,150,150,149,145,143,143,144,144,143,144,147,149,151,152,152,153,151,150,150,151,149,146,147,147,146,146],[84,83,83,82,82,83,83,83,85,87,89,91,95,99,103,108,113,118,122,123,125,128,127,126,126,125,126,127,125,123,122,118,114,110,105,104,102,103,104,104,106,106,105,104,103,103,103,102,102,103,105,107,108,109,109,110,110,109,109,112,112,112,113,115,115,115,114,112,110,109,107,107,108,109,112,112,111,112,112,114,114,114,113,113,111,109,110,111,111,111,112,112,111,112,113,114,115,116,115,114,117,118,118,119,119,121,122,122,124,126,127,127,129,131,131,132,133,134,133,132,132,131,128,126,125,123,123,123,127,129,131,132,130,128,128,127,125,123,122,120,118,117,116,115,117,118,118,118,118,117,117,116,114,113,114,116,119,122,121,121,122,124,124,123,123,123,124,123,121,120,120,120,122,123,124,126,126,126,128,130,130,130,131,131,133,135,136,136,136,136,136,138,139,140,143,145,145,147,149,149,150,151,151,153,156,157,156,156,155,156,156,156,156,155,153,151,150,147,146,146,145,146,146,145,147,149,151,153,154,155,153,152,152,152,149,147,148,148,147,148],[85,83,84,84,84,84,83,85,89,90,91,93,95,100,103,108,114,119,121,121,124,125,125,125,125,124,125,126,125,124,122,120,115,111,106,105,104,104,105,106,107,108,108,106,103,101,100,100,101,101,103,104,104,106,107,109,109,108,108,110,112,113,113,113,114,116,116,113,110,108,106,106,107,109,112,112,110,111,112,114,115,115,115,114,112,110,110,111,111,111,112,113,113,113,115,115,115,115,114,114,116,118,119,120,119,120,121,122,123,124,125,126,128,129,129,130,131,130,130,130,130,131,129,127,125,123,122,123,126,129,131,132,131,129,128,127,125,124,122,119,118,116,115,115,116,117,117,116,114,112,113,111,110,110,110,112,116,119,119,120,122,122,121,121,122,123,124,121,118,117,117,118,120,121,122,123,125,126,127,129,130,130,129,129,132,135,135,135,136,137,137,137,139,141,142,143,146,149,151,151,151,151,152,153,156,158,158,157,155,156,156,156,157,156,155,153,151,150,149,147,147,148,149,149,149,150,151,154,155,155,155,155,155,152,151,150,150,149,150,151],[85,83,85,86,86,85,86,87,90,92,94,95,98,102,104,107,114,119,121,121,123,125,126,126,124,124,124,123,124,123,122,120,115,112,108,107,107,107,107,107,107,107,107,106,103,101,100,98,97,98,99,101,103,104,105,108,109,109,108,109,111,113,113,113,115,117,117,114,112,109,106,106,107,109,111,112,111,110,110,112,113,115,116,115,113,111,111,111,111,112,113,115,114,113,115,116,115,114,113,114,116,117,119,121,121,120,122,124,123,123,125,126,126,128,128,129,129,127,127,127,128,128,128,127,125,123,122,124,126,129,130,131,129,128,127,126,124,123,121,118,117,116,114,114,114,115,115,113,111,109,109,109,108,108,107,108,112,115,116,117,119,120,120,121,122,123,122,121,118,116,116,117,119,121,122,122,125,127,127,127,127,128,128,128,132,135,135,134,136,137,137,137,139,142,144,144,147,150,152,153,153,153,152,154,156,158,158,157,156,155,155,155,156,156,156,155,154,153,151,148,149,150,151,151,151,152,153,155,156,156,157,158,155,152,152,152,152,151,152,154],[85,85,87,88,88,88,88,89,92,94,96,97,100,103,104,108,114,119,121,123,123,125,126,126,125,123,122,122,122,121,121,119,115,113,110,110,110,110,110,107,106,106,106,104,102,100,99,97,95,94,96,99,100,101,103,107,109,109,108,109,110,112,113,115,117,119,118,115,112,109,107,106,107,109,110,112,112,110,110,112,112,115,117,116,115,113,112,112,112,113,114,115,115,114,115,115,115,115,114,115,117,118,120,122,123,121,122,123,123,123,125,125,124,124,125,127,127,126,126,124,124,126,126,126,125,124,123,124,126,129,129,129,128,127,126,126,125,123,120,117,117,116,114,113,113,113,112,110,108,107,107,107,106,105,105,105,108,111,112,114,115,118,119,120,121,121,121,120,119,116,115,116,117,119,121,123,126,127,127,125,124,125,125,128,132,134,134,134,136,137,137,137,140,143,145,147,150,152,154,155,154,154,153,153,157,159,159,158,158,157,155,154,155,157,157,155,155,154,152,150,151,152,153,153,153,155,156,156,157,157,158,158,155,153,153,153,153,154,154,155],[88,87,87,87,88,89,91,92,94,96,97,98,102,106,108,111,115,119,122,124,123,123,123,123,122,121,121,122,120,119,119,118,116,113,111,112,111,111,110,108,107,107,105,103,100,98,96,95,93,92,95,98,98,99,103,106,108,109,109,111,112,112,115,117,119,120,119,116,113,110,108,108,108,109,111,112,112,112,113,114,115,116,118,116,116,115,113,114,114,116,116,116,117,117,117,116,116,117,116,115,117,120,121,123,124,122,122,122,122,123,123,125,123,123,123,124,124,123,123,123,125,126,126,125,124,124,124,124,127,130,129,127,126,126,125,124,123,121,118,115,115,114,112,110,108,108,107,106,105,105,105,104,104,103,103,104,106,107,110,112,114,117,118,119,120,121,121,119,117,115,114,114,116,117,120,124,124,124,124,123,122,123,124,127,129,131,133,133,135,136,136,137,139,142,146,149,151,153,154,154,155,156,154,153,156,159,160,159,158,158,156,155,157,158,157,155,155,155,153,153,153,154,155,154,156,158,156,156,157,159,159,158,157,155,154,154,155,157,157,156],[90,89,87,86,89,91,94,94,95,97,98,100,104,108,111,114,117,121,122,123,122,120,120,119,118,118,119,119,117,115,116,116,114,112,110,111,111,110,109,108,107,106,104,101,99,95,92,92,92,93,96,97,98,99,103,107,108,110,111,112,114,114,116,117,117,118,118,117,113,110,108,109,111,111,111,112,114,114,114,116,117,118,118,117,117,115,115,117,118,119,118,118,119,119,119,118,118,118,117,116,118,120,122,122,122,122,122,122,122,122,122,122,122,122,122,121,121,122,122,122,125,126,125,124,124,125,125,125,127,128,128,126,125,124,123,122,119,116,114,112,111,111,110,108,105,104,102,102,102,102,102,101,101,100,101,103,104,106,108,111,114,117,117,118,119,120,120,117,115,114,113,114,115,116,118,121,122,122,122,122,122,123,124,126,127,129,130,131,132,133,134,136,138,141,145,149,150,152,153,153,155,157,156,156,158,160,161,160,159,157,154,155,157,159,158,156,156,155,153,154,155,155,156,156,157,158,157,158,160,162,161,160,158,158,156,155,156,158,159,157],[90,91,89,89,91,94,96,97,97,99,100,102,107,110,112,114,117,121,122,121,120,118,118,116,115,115,114,113,113,111,112,113,111,109,109,110,111,111,109,108,105,104,102,98,96,93,92,92,92,94,96,98,100,101,104,108,108,109,110,111,113,113,114,116,117,117,117,116,112,109,109,109,111,112,113,114,116,116,116,116,116,119,119,119,118,117,117,119,120,120,120,119,119,118,118,117,117,118,118,117,118,120,121,121,122,121,121,123,123,123,122,120,120,121,119,118,119,121,120,121,124,126,125,124,125,126,125,125,125,126,126,125,125,123,122,120,116,113,111,110,109,109,109,106,104,101,99,97,98,99,98,97,98,98,101,103,103,104,106,109,113,116,115,116,117,117,116,114,113,112,113,114,115,116,118,119,121,121,121,122,123,123,124,125,126,128,129,130,131,133,135,136,138,141,144,147,149,150,152,154,156,158,159,158,160,162,162,159,157,155,154,155,156,158,158,158,157,156,155,154,155,155,156,157,157,158,159,159,161,162,162,161,160,160,157,156,158,160,160,158],[93,93,92,91,93,96,98,98,99,100,101,105,110,113,113,114,117,119,120,120,119,117,116,115,114,112,110,109,109,108,108,108,107,106,107,109,110,110,108,106,104,102,100,96,93,91,91,93,94,96,97,100,102,104,106,107,107,108,108,110,112,112,113,114,115,115,116,115,112,109,109,108,110,112,113,116,117,118,119,117,116,118,120,120,119,119,119,121,122,122,120,119,119,118,117,116,117,117,116,116,116,118,120,120,121,120,120,123,123,124,123,120,119,119,118,118,119,119,120,121,124,126,126,125,125,125,124,124,125,125,124,124,124,122,120,116,112,110,108,108,107,106,106,104,102,100,97,94,94,95,94,94,95,97,100,101,102,103,105,108,111,114,114,114,115,115,114,112,111,112,114,115,116,118,119,119,120,120,121,123,123,123,124,126,127,127,128,129,130,132,134,136,138,140,143,145,147,149,150,154,157,159,160,161,162,163,163,159,156,154,153,154,156,157,159,160,158,157,156,155,155,156,157,157,158,158,159,160,162,163,164,163,161,161,158,158,160,161,161,160],[96,95,94,93,95,97,99,99,101,101,102,105,109,113,114,114,116,118,119,120,119,117,117,115,112,111,108,106,105,105,104,103,104,105,106,108,109,109,108,105,104,101,98,94,92,91,91,93,95,97,98,100,101,104,105,106,107,109,109,110,112,112,114,114,114,115,115,115,113,111,109,109,111,113,115,117,118,118,120,120,118,118,119,120,121,122,121,121,122,123,121,119,119,119,118,116,116,116,116,116,116,117,118,119,119,119,122,124,124,124,123,121,118,116,117,118,118,118,120,121,123,124,124,125,124,123,123,124,124,125,124,122,121,119,115,111,109,108,105,105,104,103,103,102,101,99,95,92,91,92,92,93,94,96,98,99,102,104,105,107,110,113,113,113,113,112,111,111,110,111,113,116,118,119,119,119,120,120,121,123,123,122,124,125,125,125,126,129,130,132,133,135,137,138,142,144,146,149,150,153,157,159,161,162,162,163,164,161,158,155,154,155,156,156,159,161,160,158,157,156,157,158,158,158,158,158,159,160,162,163,164,164,162,161,159,159,159,159,161,161],[98,97,96,96,98,99,100,100,102,102,102,104,108,112,114,115,116,117,119,119,119,119,117,114,111,110,108,106,105,104,103,104,105,104,105,107,107,108,107,105,103,100,96,93,91,91,93,93,94,96,97,98,101,104,105,106,108,110,110,111,112,113,114,115,116,115,115,115,113,112,110,110,113,115,117,119,119,120,122,122,120,118,118,120,122,124,124,123,123,124,122,120,120,120,119,118,118,117,116,117,118,118,117,118,120,121,123,124,123,123,123,122,119,116,116,117,117,117,120,122,123,124,123,124,123,122,122,123,123,125,124,121,119,116,113,110,109,108,105,103,102,101,100,99,99,96,94,92,91,91,92,93,94,96,96,97,100,103,105,106,108,111,112,112,111,110,110,110,110,110,112,115,117,118,119,119,120,120,120,121,121,121,121,124,124,124,126,127,129,131,132,133,135,137,141,143,145,147,149,153,157,158,160,162,162,164,165,162,159,157,157,157,157,157,158,160,160,159,157,157,157,158,159,159,158,159,160,161,162,162,163,163,161,160,160,160,159,160,161,161],[102,100,100,100,100,102,102,101,101,101,101,104,107,111,114,116,117,118,117,118,118,118,115,112,110,108,107,106,105,103,103,104,105,104,105,106,107,108,106,104,101,99,96,94,93,92,92,91,94,96,97,99,102,105,106,107,109,110,110,112,113,114,116,118,117,115,116,114,113,113,111,113,115,117,119,120,121,123,123,122,120,119,119,120,123,124,125,125,126,125,123,122,121,120,120,119,117,117,117,117,118,120,120,120,121,122,123,123,123,123,123,121,119,116,117,118,118,119,121,122,123,124,123,123,122,121,120,120,122,124,123,120,119,116,113,110,108,108,104,102,101,100,98,97,95,94,94,92,90,90,91,91,94,95,95,96,100,102,104,107,108,110,112,111,111,109,109,110,110,110,112,114,115,116,118,119,118,118,119,119,120,121,121,122,123,122,124,126,129,132,132,133,135,137,139,140,143,145,148,152,155,157,160,162,163,164,165,162,159,157,157,157,157,158,158,158,159,159,157,156,157,157,160,160,160,160,160,162,162,162,164,164,161,159,159,161,161,160,161,160],[105,104,103,103,104,105,104,102,101,102,102,104,107,110,114,116,118,118,116,116,116,115,113,110,108,108,107,105,104,103,102,104,104,104,104,104,106,107,105,102,100,98,96,95,94,93,92,91,93,95,98,101,104,107,107,108,110,112,112,111,112,115,117,118,117,116,116,115,114,114,114,115,117,119,120,121,122,123,123,122,121,119,119,121,124,125,127,126,127,127,125,124,123,122,120,118,118,117,119,120,119,121,121,122,123,122,122,123,123,123,122,121,119,117,117,118,119,120,120,121,121,121,122,122,121,120,119,119,121,122,123,121,119,117,113,110,108,107,104,100,99,99,97,95,93,92,92,90,88,89,90,91,93,95,95,95,98,101,103,106,108,111,112,111,110,109,108,108,109,109,111,112,113,114,116,116,115,116,117,118,118,119,120,120,121,121,123,126,129,131,132,134,135,138,139,140,142,145,147,151,154,157,160,163,164,165,164,162,160,157,157,157,158,159,159,159,159,158,157,156,156,157,160,161,161,160,160,162,164,164,165,164,161,159,159,161,161,161,161,160],[107,108,107,106,107,107,106,104,104,105,104,105,107,110,112,114,116,117,116,116,114,112,112,109,108,107,105,105,105,105,105,104,104,104,104,103,104,105,102,99,98,97,97,96,95,94,92,91,93,94,97,101,103,106,107,109,111,113,113,112,113,116,116,117,118,117,116,117,115,114,116,117,118,120,121,123,124,125,125,122,122,121,122,123,124,126,127,128,129,128,126,126,124,123,121,119,119,118,119,121,121,120,121,122,122,122,123,123,122,122,121,121,120,118,119,118,118,119,119,119,119,119,120,121,120,119,119,120,120,120,122,121,119,118,114,110,108,107,102,98,98,96,94,92,89,89,88,87,87,88,88,88,91,94,94,95,98,101,104,105,108,110,110,111,110,110,108,107,108,109,110,112,112,113,116,117,116,115,115,116,117,117,117,118,120,121,122,125,128,129,131,132,134,136,138,139,141,144,146,150,154,157,160,163,165,165,165,163,160,159,160,160,160,159,159,160,159,158,157,156,156,157,159,160,161,162,162,164,164,165,166,165,162,160,159,160,160,161,161,159],[110,111,112,110,108,108,108,108,108,107,106,108,109,111,111,113,116,116,116,116,114,111,110,109,107,106,104,104,106,107,107,106,105,103,104,104,103,103,101,99,99,98,97,95,93,92,91,91,93,94,96,99,101,104,105,107,111,113,114,114,115,115,115,117,118,118,118,118,116,116,117,118,119,120,121,123,124,126,127,125,125,125,126,126,126,127,127,129,130,129,128,127,125,124,122,121,121,120,121,123,122,120,120,120,121,122,124,124,121,121,121,121,121,119,120,119,117,118,117,117,117,117,117,117,118,117,118,119,120,120,120,121,119,117,114,110,107,104,100,98,96,94,91,90,88,87,86,85,86,86,86,88,91,93,94,96,99,102,104,105,106,108,108,108,110,110,108,106,107,110,112,112,113,114,116,118,117,115,114,114,116,116,117,117,118,119,120,123,125,128,129,130,132,135,137,139,141,144,147,151,153,157,160,162,164,165,165,163,162,162,163,162,162,161,160,161,161,161,159,158,158,158,158,159,161,162,164,164,164,166,167,166,163,160,159,159,160,160,161,160],[114,114,114,113,111,109,109,110,109,107,109,109,110,111,112,114,115,115,116,114,112,109,108,107,106,104,104,105,106,107,107,107,105,104,104,106,104,102,100,99,99,98,97,95,91,90,90,91,92,92,96,98,100,102,102,104,109,113,115,115,116,116,117,118,119,118,117,117,117,117,119,120,120,121,122,123,126,129,129,128,127,127,127,127,128,129,128,129,129,129,128,128,127,126,125,123,123,122,122,123,122,122,121,121,123,124,125,124,123,121,121,121,121,120,120,120,119,118,116,116,117,116,115,114,115,116,117,119,120,120,120,120,118,115,113,109,105,101,99,97,94,93,91,88,87,86,85,84,84,84,86,89,92,93,95,97,98,102,103,103,104,106,105,106,108,109,108,107,108,111,112,112,114,116,117,118,117,116,115,114,115,116,115,115,117,118,118,120,123,125,126,127,131,136,139,140,143,145,149,152,154,157,159,161,164,165,165,165,165,166,165,164,163,162,161,161,163,164,161,159,159,159,159,160,160,161,163,164,164,166,166,166,162,160,159,159,161,161,162,162],[117,116,116,114,113,111,110,112,111,109,111,111,111,112,114,115,115,115,115,113,110,107,106,105,104,102,102,103,105,107,108,107,107,106,106,106,105,103,100,99,99,99,98,94,90,89,89,90,91,91,94,96,98,99,100,103,108,112,116,117,117,118,119,120,120,120,118,117,117,118,121,121,121,123,124,125,128,130,132,130,128,128,128,128,129,129,128,128,128,129,129,128,128,127,126,125,124,122,122,123,122,121,121,123,125,126,125,125,123,121,120,120,120,119,121,122,120,118,116,115,115,114,114,113,113,115,116,117,118,118,118,117,115,113,110,106,102,99,97,97,94,93,91,88,86,85,84,84,84,85,88,89,91,94,96,97,98,100,102,102,102,104,104,104,106,108,107,107,108,110,111,111,113,115,118,119,118,117,115,114,115,115,113,114,116,116,116,117,120,122,124,126,129,135,139,141,144,146,149,153,155,157,159,162,164,165,167,167,167,168,166,165,163,162,162,163,164,164,163,160,161,160,159,158,159,161,163,163,164,166,166,166,163,160,160,161,162,162,164,163],[120,118,118,116,114,113,113,113,112,111,112,113,113,114,114,116,114,113,111,110,108,105,104,104,102,101,102,103,105,107,107,107,108,108,108,107,105,104,101,100,100,98,97,94,91,89,88,89,89,90,92,94,95,97,99,103,107,111,116,117,118,119,119,120,121,121,119,118,119,120,121,123,123,125,126,126,129,130,131,131,129,129,128,128,128,128,128,127,128,129,130,129,130,129,127,126,125,123,123,123,122,121,122,122,123,125,124,123,123,121,122,122,120,117,119,120,119,117,116,114,113,111,111,112,112,113,114,115,116,116,116,115,114,113,110,105,101,99,97,96,95,93,91,89,87,85,85,85,85,86,88,89,92,95,96,98,98,98,99,101,101,103,104,104,104,105,105,106,107,108,108,109,112,113,116,117,117,116,114,113,114,113,113,113,113,113,114,115,118,121,123,125,128,133,136,139,143,146,149,153,156,158,161,163,164,165,167,168,169,170,168,167,165,164,165,166,166,165,164,161,161,160,158,158,159,160,162,163,164,165,165,166,163,160,161,163,162,162,164,165],[122,119,118,116,114,113,114,115,114,112,112,113,113,113,113,114,112,110,109,108,105,103,103,103,101,101,102,104,105,105,105,106,107,109,109,108,105,103,101,100,100,98,97,95,93,90,88,87,88,91,92,93,95,96,98,102,107,112,116,117,118,119,121,121,121,120,119,121,122,122,122,123,124,126,126,128,130,131,131,131,131,130,128,128,129,129,128,126,126,129,130,130,130,130,129,126,125,124,124,123,122,122,123,121,121,123,123,122,124,124,125,123,121,118,116,117,117,116,116,114,111,108,108,109,111,113,113,113,115,114,113,112,111,110,109,105,102,98,96,95,93,92,91,89,87,85,85,86,86,87,89,91,93,94,95,96,97,96,96,98,100,103,105,105,104,104,104,105,106,105,105,106,109,112,115,116,115,114,113,112,111,110,111,111,111,111,112,114,117,120,122,124,127,130,134,138,142,146,149,152,156,159,161,163,165,166,167,168,169,170,170,168,165,165,166,167,167,165,163,162,161,159,158,158,158,158,161,163,163,164,164,166,164,162,162,163,163,164,166,166],[123,121,119,118,115,113,114,115,113,111,111,112,112,112,113,113,112,109,108,108,105,103,103,102,101,101,102,104,105,104,105,106,107,108,109,109,105,103,101,101,101,99,98,96,93,91,89,88,89,92,92,92,94,96,98,102,107,113,117,118,118,118,121,123,123,122,121,123,123,123,124,124,124,126,126,128,129,130,131,130,130,131,129,127,129,130,128,127,128,129,130,130,130,129,128,126,126,126,124,124,123,123,123,121,123,124,124,123,124,126,126,123,122,119,116,116,116,115,114,113,109,107,107,107,108,111,110,110,112,111,110,109,107,105,105,103,99,95,95,94,93,91,91,90,88,87,87,88,89,89,92,93,94,96,96,96,96,96,95,97,99,102,105,106,105,104,106,106,105,104,104,105,108,111,113,113,112,110,110,111,109,108,108,109,109,109,110,112,115,119,121,123,125,128,133,137,142,146,148,150,154,159,162,164,166,167,167,168,169,170,169,168,166,167,167,167,167,166,164,163,160,157,157,157,157,156,160,162,163,164,165,166,165,164,163,164,165,166,167,166],[123,121,120,119,118,115,115,114,111,110,111,111,110,111,113,113,113,110,109,108,107,104,103,101,100,100,102,104,105,106,106,107,107,109,110,110,108,105,102,102,101,99,99,96,93,92,91,91,91,92,93,93,94,97,99,102,107,113,117,119,119,118,121,125,126,124,123,124,124,125,125,125,125,125,125,127,128,129,130,129,129,129,129,128,129,129,128,128,130,130,129,129,128,128,128,128,129,127,124,124,124,124,123,122,123,125,125,124,125,127,127,124,123,121,117,115,114,113,112,111,109,108,107,107,106,107,106,107,108,108,107,104,103,102,101,100,98,96,95,93,92,91,91,91,89,89,90,91,92,92,94,95,96,97,97,97,96,96,94,95,98,101,104,105,105,105,106,107,105,104,103,104,107,109,109,108,107,106,107,108,108,107,106,107,107,107,108,111,114,117,120,122,125,127,131,137,140,145,147,148,153,158,162,165,166,167,167,169,170,169,168,167,167,167,167,167,167,166,165,163,160,158,156,156,155,156,158,160,162,163,164,166,165,164,164,165,167,168,169,168],[124,121,120,119,118,117,115,113,112,110,108,109,108,109,111,112,112,111,109,107,105,104,102,100,100,101,102,104,106,106,106,108,108,109,110,110,109,107,104,103,102,100,99,97,94,92,91,92,92,92,94,95,95,97,99,102,108,113,117,119,119,119,122,126,127,126,127,126,126,126,126,126,126,125,126,127,128,129,129,128,128,127,127,127,127,127,128,128,129,129,129,129,128,128,129,129,129,129,127,125,124,124,122,123,124,125,126,126,127,128,126,124,123,122,117,114,113,112,111,110,109,108,107,107,105,105,105,105,104,103,101,99,100,100,99,98,96,96,94,92,92,93,91,90,90,90,90,91,92,94,94,93,95,95,96,96,95,95,94,94,97,100,102,103,103,103,104,103,103,102,102,103,104,106,106,105,105,103,104,105,106,106,106,106,106,106,108,111,113,114,117,120,123,126,130,135,139,143,146,148,152,155,160,163,165,167,168,169,168,166,166,165,165,166,167,166,167,166,165,163,161,159,156,154,155,157,159,159,160,162,163,166,165,164,164,165,167,170,170,170],[126,123,121,120,118,117,115,114,113,110,108,109,109,110,110,110,109,109,109,106,104,103,103,101,101,101,102,103,104,104,106,109,110,110,109,110,109,109,105,103,102,101,101,99,95,93,92,92,92,92,94,95,95,97,99,104,109,114,116,118,119,120,122,125,126,128,129,128,127,127,127,127,127,126,126,127,127,127,126,127,126,125,125,126,126,126,127,127,127,128,128,129,129,129,129,129,129,129,129,126,124,124,122,123,125,126,127,126,127,126,124,122,122,122,119,116,114,113,111,109,108,107,107,106,104,103,103,103,101,98,96,95,96,96,95,95,95,94,94,93,94,94,93,91,91,92,92,92,93,94,93,92,93,94,94,95,94,94,93,94,96,98,100,101,103,102,101,101,100,100,101,101,101,102,104,103,103,101,102,103,104,106,106,106,105,106,107,110,112,114,115,118,122,125,129,132,136,141,145,148,150,152,156,160,162,165,168,167,165,163,163,163,164,167,168,167,167,166,165,163,161,159,154,154,155,157,159,160,161,163,165,166,165,165,165,165,168,170,171,172],[129,124,122,121,119,118,116,115,113,110,109,109,109,109,109,108,107,108,108,106,104,103,102,101,101,100,101,103,103,103,105,108,109,109,109,109,109,109,105,103,102,101,100,99,96,93,91,91,92,92,95,96,96,97,99,103,108,114,117,118,119,120,121,123,126,128,129,128,128,127,127,127,126,126,125,125,125,125,125,126,125,124,125,126,126,127,127,127,128,129,128,129,131,131,130,130,129,129,129,127,126,124,123,124,125,126,127,126,125,124,123,122,122,123,121,118,117,116,112,109,107,106,106,105,103,102,102,102,99,95,92,91,91,91,92,93,92,92,93,94,94,94,95,94,94,94,94,94,95,96,94,92,93,94,94,93,93,93,94,95,96,98,98,99,101,101,101,101,100,99,99,99,99,99,101,102,100,98,99,100,101,104,104,105,105,106,108,110,112,115,116,117,121,124,127,129,134,140,144,148,149,151,155,157,160,162,164,164,164,163,163,164,166,168,168,168,168,166,164,162,159,157,153,153,154,156,159,160,161,162,164,166,166,166,165,166,168,170,172,172],[130,127,124,122,120,118,117,115,113,110,109,108,108,108,106,106,105,105,106,106,105,103,102,101,100,101,101,102,103,102,103,106,108,108,108,108,107,107,105,102,101,100,99,98,95,92,90,90,90,92,95,97,98,99,100,104,108,112,115,117,118,119,121,123,126,127,128,128,128,127,126,126,125,125,124,124,123,124,125,126,125,124,125,127,127,127,128,127,127,128,129,130,133,132,130,130,130,131,131,129,128,127,126,126,127,128,127,126,124,123,122,121,122,123,123,122,120,119,114,110,107,105,104,104,103,102,102,101,97,93,90,88,89,89,90,89,89,91,93,94,94,95,95,96,97,97,95,95,96,97,95,93,93,94,92,91,92,93,94,97,97,98,98,99,100,101,101,101,100,99,98,98,98,99,100,100,99,97,97,97,99,102,103,104,105,106,108,110,112,114,117,118,120,122,125,128,134,139,142,145,148,149,153,156,159,160,161,162,162,163,164,165,167,169,169,169,168,165,163,160,157,155,152,152,154,155,158,160,160,162,164,166,167,166,165,166,168,171,171,170],[132,130,127,125,122,119,116,114,112,111,110,108,108,107,105,104,104,104,106,105,103,101,100,99,99,100,101,102,102,102,104,106,107,106,107,108,107,106,104,101,100,99,97,96,94,92,91,90,91,92,95,98,100,102,103,106,108,111,115,118,119,119,121,124,126,127,128,127,126,126,126,125,125,125,125,125,124,123,124,125,125,126,127,128,128,127,129,130,129,129,130,132,133,132,131,131,132,134,132,130,131,131,130,129,130,129,127,126,124,124,122,121,123,124,125,124,121,119,116,112,108,105,104,103,102,101,100,100,97,94,90,87,86,87,86,87,89,92,94,96,95,96,96,96,96,97,96,96,96,96,94,92,93,93,92,90,91,92,93,96,97,98,99,99,100,100,101,101,100,98,98,98,97,97,97,98,97,96,96,98,100,103,103,103,104,106,107,108,111,113,117,120,121,122,125,127,131,136,138,142,146,148,152,155,157,158,159,160,161,163,165,167,168,169,169,169,167,163,161,160,157,154,152,150,151,154,157,160,160,161,163,165,166,166,167,167,168,170,170,168],[132,131,130,127,124,120,116,114,113,111,110,108,107,106,104,104,104,104,106,104,101,99,98,98,98,99,100,102,103,103,104,106,106,106,107,108,107,106,104,101,100,98,96,95,95,93,91,91,92,94,96,98,100,103,106,108,109,111,115,117,118,118,119,123,126,128,128,126,126,126,127,125,125,126,126,126,125,123,122,124,124,125,127,127,127,128,130,131,131,131,132,132,132,132,132,133,135,136,135,133,133,134,133,132,132,131,129,127,126,125,124,123,123,125,126,125,122,120,117,113,109,105,103,102,101,100,98,97,96,94,92,89,86,86,86,88,91,93,95,97,96,95,96,96,96,96,97,97,95,94,93,92,91,91,92,91,91,92,93,95,96,96,97,98,97,97,99,100,99,98,98,97,97,95,94,96,96,95,96,98,101,103,103,103,105,106,107,109,111,114,118,120,120,122,125,127,130,133,136,140,145,149,154,155,156,157,158,158,160,163,166,166,167,168,168,168,166,162,159,158,157,155,152,150,149,151,155,157,158,159,159,161,164,165,166,166,167,168,167,166],[132,131,129,126,123,120,117,116,114,113,112,109,107,105,103,104,103,103,105,103,100,98,97,98,98,99,101,102,102,103,105,107,107,106,106,106,106,106,104,102,101,100,98,96,97,97,95,94,94,96,96,97,100,103,107,109,110,111,115,117,118,118,119,122,125,127,128,127,127,127,127,126,126,127,126,125,125,123,122,123,123,124,126,126,127,128,129,131,131,132,132,134,134,133,133,135,137,137,137,137,137,137,136,134,133,131,129,127,127,127,126,126,126,127,128,125,123,120,117,113,109,105,102,100,101,100,98,96,95,93,92,90,87,86,86,89,92,94,97,98,97,95,96,97,97,97,97,98,95,93,92,91,90,90,91,91,92,92,92,94,94,94,96,97,96,95,98,99,98,98,97,97,96,94,95,96,96,96,96,98,100,103,104,104,105,107,108,110,112,115,119,121,121,122,125,127,131,133,136,142,146,151,154,155,156,156,157,157,159,162,164,164,165,167,167,167,166,161,158,156,155,153,152,151,150,151,153,155,155,155,156,157,160,163,164,164,163,164,165,164],[131,131,129,125,122,120,119,117,116,115,114,111,109,106,104,103,102,102,103,102,99,97,96,96,97,99,100,100,100,102,105,108,108,107,105,104,105,105,104,102,102,101,100,99,99,99,98,97,97,98,97,97,100,103,107,110,111,112,116,118,118,118,119,120,123,125,127,128,127,127,126,125,126,126,126,125,124,122,121,121,122,123,126,126,127,127,129,132,132,132,133,135,135,134,135,136,137,139,138,139,140,140,139,136,134,132,130,130,130,128,127,127,127,129,129,126,124,121,117,113,108,105,103,102,101,100,98,96,95,93,91,90,88,87,88,90,93,96,99,99,97,96,98,99,99,98,98,98,96,94,92,91,91,90,91,91,92,92,91,92,93,93,95,96,95,96,97,98,98,98,97,98,97,95,96,97,97,97,96,97,100,103,104,104,106,108,110,112,114,117,120,121,121,123,125,128,131,134,138,143,148,152,154,156,157,158,158,157,159,161,161,162,164,165,167,166,164,161,157,155,153,151,150,149,149,149,152,154,154,153,154,155,157,160,162,161,160,161,162,162],[132,131,130,127,124,121,119,118,118,117,113,110,107,105,103,103,101,102,102,101,98,95,94,94,96,97,98,98,99,100,103,106,108,109,106,103,104,105,105,104,103,103,102,102,101,101,99,99,99,100,98,97,99,103,108,111,112,113,114,116,117,117,118,120,122,126,127,128,128,127,127,126,125,126,126,125,124,123,121,120,121,122,125,127,127,128,130,134,134,133,134,135,135,135,137,139,140,141,141,142,142,141,141,139,136,135,133,133,132,131,129,127,128,129,129,127,124,121,117,113,110,106,104,103,102,101,101,98,96,94,92,90,88,87,89,92,94,95,98,99,98,97,98,100,100,99,99,98,96,97,94,91,90,90,90,90,91,92,92,91,92,93,94,95,95,96,97,98,99,98,98,98,97,97,97,97,96,97,96,97,100,103,104,104,107,110,111,114,116,119,121,121,122,123,125,129,133,136,139,143,148,153,155,156,158,159,159,158,159,162,162,163,163,163,164,164,163,161,158,156,153,152,150,148,148,147,149,151,151,151,152,154,154,156,159,159,160,160,160,159],[133,132,132,129,125,123,120,120,119,117,112,108,107,105,103,102,101,101,102,100,97,94,92,94,95,96,96,97,99,100,102,105,105,106,105,104,104,105,105,104,104,104,104,104,103,100,99,100,101,101,99,99,102,105,108,111,112,112,113,115,116,117,119,120,123,127,128,128,128,128,126,125,125,126,126,126,125,123,121,120,121,123,125,127,129,130,131,132,133,135,135,135,136,138,140,140,140,142,143,143,143,142,142,142,139,137,136,136,135,133,131,129,129,129,128,126,123,121,117,114,112,108,106,105,105,105,104,101,97,95,92,90,89,87,89,92,93,93,95,98,98,96,97,99,101,101,100,99,97,97,97,94,91,90,90,91,93,93,94,94,94,93,94,96,96,97,98,99,99,99,98,97,97,97,97,95,94,94,94,96,99,102,103,104,107,109,110,114,117,119,121,122,123,123,124,129,134,139,142,145,150,155,157,157,159,162,162,161,161,162,163,163,162,161,161,161,162,161,160,158,155,153,151,148,147,146,146,148,149,150,151,152,152,154,156,157,159,159,158,157],[134,133,133,130,127,124,121,121,119,116,113,109,108,107,105,103,102,102,101,99,97,95,93,94,94,95,95,96,98,99,100,103,104,104,104,105,104,104,105,104,104,104,104,105,103,100,100,101,101,103,102,103,106,108,111,112,112,112,112,114,116,117,119,121,124,127,128,127,128,129,126,124,125,125,125,124,122,120,120,120,122,125,127,127,129,130,130,131,134,135,135,135,137,140,141,141,141,141,143,144,145,145,146,147,145,142,140,140,138,136,133,131,130,130,129,126,124,121,117,116,115,112,110,108,106,105,104,100,97,94,91,90,89,88,89,90,91,91,94,97,97,96,97,99,101,102,101,100,99,98,98,96,93,92,92,93,94,95,96,97,96,95,97,98,98,97,98,100,99,98,96,94,94,95,94,92,92,91,92,95,97,99,101,103,107,110,111,113,116,118,122,123,123,124,126,130,136,141,145,148,152,157,158,158,161,164,164,162,163,162,163,163,162,160,159,158,160,160,159,157,155,153,151,149,148,146,145,145,147,147,148,150,151,154,155,154,155,156,156,155],[134,134,132,129,127,124,122,121,119,117,114,111,109,107,106,104,102,102,101,99,97,96,95,95,95,95,95,97,97,98,99,101,102,103,104,103,103,104,106,104,103,104,105,105,104,102,102,101,102,104,105,107,109,111,113,112,111,111,112,114,115,117,118,121,125,128,128,127,128,128,126,124,124,123,123,121,119,118,119,120,123,125,126,127,128,129,129,130,132,134,134,135,136,139,141,141,141,142,144,146,147,147,148,150,149,146,144,142,140,138,135,134,132,130,129,127,124,122,119,118,117,116,113,108,106,105,104,100,97,94,91,90,89,88,89,90,90,90,93,96,96,97,98,100,103,104,103,102,100,99,99,98,96,94,94,96,96,97,99,98,97,98,99,100,100,99,99,99,98,97,95,92,92,92,91,90,89,90,90,93,95,97,98,102,106,110,111,113,115,118,122,123,125,127,129,133,138,144,148,152,155,158,159,159,162,165,165,163,163,163,162,162,160,158,157,157,159,159,158,156,154,154,152,152,150,148,146,144,143,145,145,148,150,152,153,151,151,152,153,154],[136,135,132,129,127,126,123,122,121,119,116,113,110,107,105,104,103,102,102,99,97,96,95,95,95,94,95,98,98,99,99,101,102,103,104,104,104,105,105,105,105,104,105,105,104,104,103,102,104,106,107,110,112,113,114,113,112,112,112,114,116,118,118,120,123,127,128,127,127,126,124,123,122,121,121,120,119,119,119,120,121,123,125,127,128,129,129,129,131,132,133,134,136,137,138,139,141,143,145,148,148,147,150,153,152,149,147,144,142,141,138,135,132,129,129,126,124,122,120,120,119,117,114,110,108,106,104,101,98,96,93,92,91,90,91,91,91,91,94,96,97,99,100,103,106,106,105,103,101,100,101,100,98,96,97,98,99,99,99,98,98,100,99,100,101,101,100,99,99,98,95,92,91,90,89,87,87,88,89,91,93,94,97,102,106,110,111,112,114,118,121,122,125,128,131,136,142,147,151,155,157,159,160,161,163,165,165,164,163,163,163,161,159,156,154,155,156,157,157,155,155,156,155,153,151,147,145,144,143,144,145,148,149,150,151,150,151,150,151,153],[136,135,132,129,128,126,124,123,121,120,117,114,110,106,104,103,101,102,102,101,99,96,95,95,94,94,95,98,98,98,101,102,104,104,104,105,106,106,106,106,105,105,105,105,104,105,105,104,105,107,110,112,112,114,115,114,114,114,113,115,117,118,118,119,122,125,125,126,125,123,121,121,120,119,119,119,119,120,119,120,120,121,124,126,128,129,130,131,132,132,132,133,134,134,136,138,140,143,146,148,148,149,151,153,153,152,148,145,144,143,140,136,132,129,129,127,124,122,120,121,120,119,116,112,110,108,105,102,100,98,96,94,93,93,93,93,93,94,98,99,99,101,103,106,108,107,106,105,104,103,102,101,100,98,97,99,101,101,100,98,98,101,101,100,100,102,101,100,100,99,97,94,91,89,88,87,86,88,90,91,92,94,96,101,106,109,112,112,114,118,122,123,125,129,133,138,144,148,153,157,158,159,160,163,165,165,164,165,165,164,164,161,158,155,152,151,152,153,154,154,155,157,156,153,149,146,145,144,143,144,145,147,147,148,148,149,149,148,149,150],[137,135,132,129,128,126,123,121,120,120,117,113,110,105,103,102,102,102,102,101,99,96,97,97,96,96,97,99,98,99,101,103,104,106,106,106,106,107,106,106,106,106,106,107,106,106,107,106,108,109,110,113,113,114,116,116,117,116,115,116,118,119,119,118,121,123,123,123,122,120,119,119,119,118,118,117,117,118,118,119,121,122,125,128,128,129,131,132,132,131,132,133,134,134,135,138,140,144,147,149,150,149,151,153,153,153,150,146,145,144,141,137,133,131,130,128,126,123,123,124,123,121,118,115,113,110,106,103,101,99,97,96,95,96,97,96,96,98,100,102,103,105,106,108,110,109,108,107,106,106,104,101,101,100,99,100,102,103,102,101,101,103,102,102,102,103,102,100,100,99,97,94,91,89,88,88,88,88,91,93,93,95,96,100,104,108,110,112,115,119,122,123,126,130,135,140,145,149,154,157,159,159,160,163,164,163,165,167,166,165,165,161,158,155,151,150,151,151,152,152,152,153,153,151,148,145,144,143,143,142,143,143,144,145,145,146,146,145,145,147],[137,135,133,130,128,125,122,119,118,117,116,113,110,105,102,102,103,103,102,101,99,98,99,99,98,98,99,100,100,99,102,104,105,106,107,107,107,107,107,107,108,107,107,108,108,108,108,108,110,111,112,114,115,116,117,118,119,118,117,118,119,119,119,118,119,122,122,120,119,118,117,116,117,117,118,116,115,116,117,118,121,123,126,128,129,130,131,132,132,131,132,133,135,135,136,137,140,144,147,150,151,151,152,152,152,152,149,147,146,144,141,137,134,131,130,130,128,125,126,127,125,123,121,117,115,112,107,104,102,101,98,97,97,98,99,99,100,100,103,106,107,108,109,111,112,111,110,110,109,108,107,103,101,101,102,103,104,104,105,104,105,106,104,103,104,103,102,101,100,99,97,94,91,89,89,90,90,90,92,94,95,95,96,99,102,107,110,113,116,119,121,123,127,132,137,142,147,151,155,158,159,160,160,161,162,163,165,167,167,166,165,160,157,154,151,150,151,151,151,150,149,150,151,149,146,143,142,142,142,140,140,141,141,141,142,143,143,142,142,144],[137,135,132,129,127,125,121,118,116,114,114,112,110,107,106,104,103,103,102,102,102,100,100,100,99,100,101,102,102,102,105,107,107,106,107,108,108,109,108,108,108,109,109,110,112,112,111,110,112,114,115,116,115,117,118,119,120,119,119,121,121,120,119,117,118,120,120,118,117,117,114,114,116,116,115,115,114,115,117,118,121,123,125,126,128,130,132,133,132,132,131,131,133,135,136,137,140,144,147,150,152,153,153,152,151,151,149,147,144,142,140,137,134,132,131,131,128,126,127,129,127,124,121,117,115,113,110,107,104,103,100,98,99,100,101,102,104,105,109,111,111,111,112,114,113,112,113,114,112,109,108,107,105,103,103,105,106,105,106,106,106,107,106,106,104,103,102,102,100,99,97,93,91,90,90,91,92,93,94,96,96,96,97,99,103,107,110,113,115,119,121,124,128,133,136,140,146,151,155,157,159,161,160,160,161,161,163,165,166,165,163,159,156,153,150,149,149,150,149,149,149,148,149,149,145,142,140,141,139,138,140,140,140,139,140,140,139,140,141,144],[139,136,132,129,126,124,121,119,117,114,112,112,110,109,109,106,103,103,103,103,103,102,101,101,102,103,104,105,104,105,107,108,108,108,108,108,109,111,110,110,111,111,111,113,115,116,115,114,114,116,118,118,117,118,119,119,119,119,120,121,121,121,119,117,117,119,119,118,117,115,113,113,115,116,114,114,116,117,118,119,121,123,123,123,126,129,131,131,130,130,130,131,132,134,136,138,141,144,147,150,152,153,153,153,152,151,148,146,142,140,139,137,135,132,132,132,129,127,127,129,127,124,120,117,117,115,113,110,107,104,102,101,102,103,103,105,107,111,114,115,115,115,115,115,114,114,115,114,112,110,109,108,107,105,104,105,106,106,106,105,106,108,109,107,106,104,103,102,100,99,97,94,92,91,91,92,94,94,95,96,96,98,99,100,103,107,110,113,115,118,120,124,128,132,136,139,145,151,154,155,157,159,160,160,160,159,161,162,163,163,160,157,155,152,149,147,148,148,147,148,148,148,148,147,144,141,139,138,138,139,139,139,139,138,139,139,138,139,140,143],[140,138,135,131,128,124,121,119,117,115,112,112,111,110,110,109,106,104,102,102,103,104,103,104,106,109,109,109,109,109,110,109,109,109,109,109,111,113,114,114,115,115,116,116,117,118,118,118,118,119,121,121,120,119,120,120,121,121,120,120,120,120,119,117,119,120,119,117,115,113,111,111,113,115,115,114,116,118,118,119,120,122,122,122,124,127,129,129,128,128,129,132,133,135,138,141,143,145,147,149,153,154,154,153,152,150,148,145,142,139,138,137,134,131,132,132,130,128,128,128,126,124,121,118,118,117,116,113,109,106,104,104,104,104,105,106,109,113,115,114,115,116,116,116,116,116,115,114,112,111,110,109,109,108,106,107,108,108,107,106,108,110,110,109,107,106,104,103,102,100,98,96,95,95,94,94,96,95,96,97,97,98,97,98,102,106,110,112,114,117,119,123,127,131,135,139,145,151,152,153,155,157,158,160,159,157,159,160,161,161,159,157,153,151,148,145,146,146,147,147,146,147,147,145,143,140,137,137,137,137,136,135,135,135,136,137,137,136,138,141],[142,140,137,133,130,127,123,120,117,115,112,111,110,110,111,111,109,106,103,102,104,105,105,107,109,112,113,113,112,112,112,110,109,109,109,111,114,116,117,118,119,120,121,120,121,121,121,121,121,122,123,123,121,121,122,122,122,122,121,120,119,119,118,119,120,121,120,117,114,112,111,112,112,113,114,114,116,117,118,118,118,121,120,121,124,126,127,127,128,128,130,133,135,137,140,142,144,146,148,150,153,154,154,153,151,150,149,146,143,139,138,137,135,132,132,132,131,129,129,128,126,124,123,121,120,119,117,114,110,108,107,107,107,107,106,106,109,114,116,115,114,115,116,116,116,116,115,114,114,112,111,110,110,108,107,108,109,108,108,107,109,111,110,109,109,107,106,104,103,101,100,99,97,97,97,97,97,97,97,97,97,96,95,97,101,105,109,112,114,117,120,123,127,131,134,139,145,149,150,151,152,154,156,157,157,156,156,157,159,158,156,154,152,149,147,145,144,145,146,145,144,145,145,144,142,139,136,136,135,135,134,132,132,132,133,135,135,136,136,138],[145,143,139,134,130,127,124,120,118,115,113,112,111,111,111,111,109,108,106,105,107,107,107,107,110,113,115,115,114,114,111,110,109,110,111,113,116,119,121,123,124,124,124,124,124,124,125,125,124,124,124,124,123,122,122,123,123,123,122,120,121,121,122,122,121,120,119,117,115,113,112,113,112,111,113,116,116,116,118,119,120,121,121,121,123,125,127,126,126,128,130,134,136,138,139,141,144,147,148,149,152,154,154,153,151,149,147,145,143,141,139,137,136,135,134,133,133,131,130,129,127,125,125,125,124,121,119,116,113,110,110,110,110,110,108,107,110,112,114,115,115,116,115,114,115,115,115,115,113,113,111,110,109,108,108,109,109,107,107,106,108,110,111,109,108,107,105,104,104,103,101,101,99,99,99,99,99,99,98,97,97,96,96,98,101,105,109,113,115,118,120,122,126,131,135,140,145,146,148,148,150,152,153,154,154,155,155,156,157,156,154,152,149,146,145,145,145,144,144,143,144,144,143,142,139,138,137,136,136,135,132,131,131,131,133,134,134,134,134,136],[145,143,139,135,131,128,125,122,119,115,113,113,113,111,112,112,110,109,108,108,109,109,108,109,112,115,117,117,116,114,111,110,111,111,112,114,117,120,123,125,125,125,126,127,128,127,128,128,127,126,126,125,124,123,122,123,125,124,122,122,122,124,124,123,123,121,120,119,118,117,115,114,112,110,112,115,115,115,117,119,119,120,120,121,124,126,128,126,126,127,130,133,135,136,138,140,145,147,148,149,151,154,154,152,150,147,144,144,143,143,141,139,136,136,135,134,134,133,132,131,129,127,127,127,125,122,120,119,116,114,113,111,110,110,110,109,110,112,113,114,115,115,114,113,114,114,115,114,114,114,112,110,109,108,109,110,109,107,105,105,106,109,110,109,107,106,105,105,105,103,101,101,99,100,101,101,102,100,98,98,97,98,98,98,101,105,109,112,114,118,121,123,128,133,136,140,144,145,146,147,150,152,152,153,152,154,154,155,155,154,153,149,146,144,143,144,145,145,144,143,144,145,143,141,139,139,138,136,135,132,129,129,131,132,133,133,132,132,132,133],[144,143,140,136,133,131,128,124,118,115,114,115,113,111,112,113,112,110,109,109,110,110,110,110,114,118,119,119,117,116,113,113,113,114,115,116,118,121,125,127,127,127,129,130,130,130,130,130,128,127,125,124,124,124,122,123,125,126,125,125,124,125,125,123,123,122,121,121,120,120,118,116,114,112,112,114,114,114,115,118,118,119,120,120,123,126,127,127,127,127,129,132,133,135,137,139,143,147,148,148,150,152,152,150,149,147,145,144,145,144,141,140,138,136,135,134,133,133,133,132,130,129,129,128,126,124,121,121,119,116,115,112,111,111,111,111,113,113,113,113,113,113,113,113,113,113,114,114,113,113,111,111,110,108,109,108,106,104,103,104,106,108,109,109,107,105,103,103,103,102,102,101,100,100,101,101,102,101,101,101,100,99,98,99,102,105,109,111,115,119,121,124,128,133,136,139,142,144,146,147,149,150,150,151,152,153,153,153,152,152,150,147,145,144,143,142,143,144,143,143,145,146,144,141,140,139,137,134,131,129,127,126,128,129,130,131,130,131,131,132],[144,143,141,139,135,133,130,124,119,117,116,115,115,114,113,113,112,111,110,110,110,111,112,113,117,120,122,121,120,118,116,116,116,117,117,117,119,122,127,128,129,129,131,131,132,132,132,131,129,126,125,125,126,124,123,124,126,127,126,125,125,125,126,125,125,123,122,123,122,121,120,118,116,114,114,114,113,113,115,117,118,119,120,121,123,125,126,128,128,127,127,130,132,134,136,139,142,146,146,146,147,149,150,149,149,147,146,145,145,145,142,140,138,136,133,133,133,133,134,133,131,130,130,129,128,125,123,123,122,120,117,113,112,113,113,113,115,114,112,112,111,111,111,111,112,113,114,113,111,111,110,111,110,109,108,106,104,103,102,104,105,107,108,108,108,106,103,102,102,102,102,102,100,100,102,102,103,103,102,103,102,101,99,99,103,106,109,111,114,118,121,125,129,133,136,138,140,142,144,147,148,149,149,150,151,153,152,151,150,149,149,146,144,143,141,140,139,141,142,143,145,145,144,142,140,138,136,132,129,127,124,124,125,125,127,129,130,131,130,131],[144,143,141,139,135,133,130,125,121,119,117,115,116,116,114,113,114,114,114,113,113,114,114,117,120,123,123,121,121,120,120,121,119,119,119,120,122,125,128,130,131,131,132,134,136,137,136,134,131,127,127,127,126,124,124,124,125,127,125,125,125,125,125,126,126,125,125,125,124,123,122,119,117,115,114,115,114,114,115,117,118,119,121,123,124,126,127,128,128,128,129,130,131,132,136,140,143,146,145,144,145,147,148,147,147,146,146,148,147,147,144,141,139,137,134,132,133,133,135,135,134,134,133,131,129,127,126,126,124,122,119,116,115,115,114,114,116,115,113,113,112,112,111,109,110,112,112,112,110,109,108,110,110,109,108,105,103,101,102,104,105,107,108,107,107,106,104,103,104,104,103,103,101,101,103,104,104,104,103,103,103,102,101,100,102,105,108,110,114,117,122,128,130,132,135,137,139,140,143,146,147,147,149,148,149,149,149,149,148,147,146,145,143,142,139,137,138,140,141,142,142,141,142,142,140,137,136,132,128,127,124,123,123,122,125,127,129,130,130,130],[146,144,141,139,135,132,130,127,123,120,117,117,117,116,114,114,115,116,118,117,117,117,117,120,123,124,123,122,123,123,123,123,122,121,122,124,126,128,131,133,134,133,134,136,139,140,139,137,135,131,131,130,127,127,126,125,125,126,126,126,125,124,124,125,125,126,126,124,124,124,123,121,118,116,114,114,114,114,115,118,120,121,124,126,126,127,127,128,129,131,132,132,132,134,137,141,143,145,145,144,145,146,147,146,146,147,148,148,148,148,145,142,140,137,135,134,134,135,137,138,137,136,136,134,131,129,129,127,125,122,120,119,118,117,116,116,115,115,114,113,113,113,112,110,110,110,111,111,108,106,105,107,108,109,108,105,103,101,101,103,106,107,108,107,105,105,104,105,105,105,104,104,103,102,103,104,103,103,103,102,103,102,102,102,103,106,109,112,115,118,122,127,130,133,135,137,139,141,142,143,145,145,146,146,146,146,146,146,145,144,143,142,141,139,136,135,137,138,138,139,140,140,139,138,137,137,135,132,128,126,124,123,123,122,123,124,126,128,129,130],[147,144,143,141,138,134,132,129,125,121,119,119,118,117,115,115,115,116,118,119,119,119,119,121,123,125,124,123,124,126,126,126,125,125,125,127,129,132,134,136,136,135,137,139,140,142,143,140,137,135,133,133,131,130,129,128,128,128,127,127,127,126,125,126,125,125,124,122,123,123,122,120,118,116,115,114,114,115,117,119,120,122,125,128,128,128,128,129,131,133,134,134,136,137,139,142,144,146,146,145,145,147,147,146,146,147,147,147,147,147,146,143,140,137,135,136,136,136,137,137,137,137,137,136,133,130,129,128,125,123,122,122,119,117,116,117,116,116,114,113,113,113,112,111,111,111,112,111,108,104,104,104,105,107,106,105,103,101,101,102,104,106,108,107,106,106,105,105,105,104,104,104,102,101,103,105,103,103,102,101,102,102,104,105,106,109,111,115,118,121,125,128,131,134,136,137,140,141,140,139,140,141,143,144,144,143,143,145,144,143,142,140,138,136,134,132,134,136,137,137,137,138,136,135,136,136,134,131,128,126,124,123,122,120,119,120,123,125,126,126],[149,147,144,143,141,137,134,131,127,125,123,121,118,117,116,116,117,117,118,118,119,120,120,122,125,126,126,125,126,128,129,129,128,128,128,130,132,135,137,137,138,138,140,141,143,144,145,142,139,138,137,135,133,132,131,132,131,130,128,128,128,127,126,126,125,124,123,122,123,123,121,120,117,116,116,116,116,116,119,121,122,123,126,130,130,130,130,130,132,134,136,138,140,140,140,143,146,147,147,146,146,147,147,146,147,147,147,146,146,147,146,144,141,138,136,136,137,138,137,136,136,137,138,137,134,132,130,128,125,123,122,122,120,118,118,118,118,117,115,114,115,114,113,113,112,112,112,110,107,104,103,103,103,105,105,104,103,102,102,102,103,106,108,108,107,106,105,105,104,103,103,103,102,101,102,104,103,102,101,101,103,103,105,108,109,112,114,117,120,123,127,130,133,135,136,138,140,140,139,137,136,137,140,142,142,141,140,143,144,144,142,139,137,134,132,132,133,135,135,135,135,135,133,133,134,134,133,130,126,124,124,122,119,118,117,116,119,122,122,121],[150,150,147,144,142,138,135,133,130,128,126,125,122,119,117,118,118,119,119,117,120,122,123,125,126,127,128,128,129,131,130,129,130,130,130,131,132,134,136,136,139,141,141,141,143,145,146,144,143,141,140,139,137,135,135,134,133,131,130,129,129,130,129,128,127,125,124,124,124,124,123,122,120,119,118,118,118,117,119,122,123,125,128,131,131,130,130,130,132,135,138,140,141,141,142,145,146,147,147,146,146,147,147,146,146,147,147,146,146,147,145,144,142,140,139,138,140,140,138,137,137,138,139,137,135,133,129,127,126,125,124,124,123,122,122,120,120,120,118,117,117,116,116,116,115,114,112,110,108,105,103,102,103,105,104,104,103,103,103,103,105,107,107,107,108,107,107,107,104,101,103,103,102,101,102,104,103,103,103,102,104,105,107,109,110,112,115,118,122,124,127,130,132,135,137,138,139,139,138,136,134,133,135,138,139,139,140,141,142,143,140,138,136,134,133,132,131,133,133,134,134,133,132,131,131,130,130,129,126,123,122,120,117,116,114,114,117,120,120,118],[153,153,150,147,144,141,138,136,133,131,130,129,125,121,119,119,119,119,118,118,122,124,126,127,128,130,130,131,133,132,131,132,132,132,133,132,132,133,135,136,138,141,141,141,143,146,147,145,144,143,143,143,141,138,136,135,134,133,131,130,131,133,133,131,130,128,126,126,127,128,126,125,124,123,122,121,120,120,121,122,123,126,129,131,130,130,130,131,133,135,138,140,141,142,144,146,147,147,146,145,145,147,148,146,146,147,147,148,148,147,146,146,145,142,140,141,141,140,139,138,140,141,142,139,136,132,129,128,127,127,127,127,126,126,126,125,124,123,122,121,120,118,119,118,116,113,111,110,110,107,104,103,105,105,104,104,104,105,105,105,106,107,106,108,109,108,108,108,104,102,102,102,102,101,102,103,104,105,104,103,105,107,109,109,110,111,113,118,121,123,126,128,131,135,136,137,137,137,136,134,132,130,131,134,136,138,140,140,140,141,139,137,137,136,135,131,129,130,132,132,131,130,130,129,129,129,127,126,125,122,119,117,115,113,111,112,115,118,117,117],[156,156,154,151,148,144,141,139,136,134,133,131,127,123,120,118,118,118,118,119,122,124,128,129,131,133,134,135,134,134,135,136,135,134,134,134,134,132,134,136,138,140,141,140,143,146,146,145,145,144,145,145,143,141,139,137,136,136,133,132,134,136,136,133,132,131,129,129,130,132,130,128,128,127,125,123,124,124,124,125,126,128,130,131,130,130,131,132,134,137,139,140,142,142,143,145,147,147,147,146,146,147,148,147,146,148,148,149,149,148,148,147,146,143,143,143,142,140,140,140,142,142,142,141,137,132,130,130,130,129,129,128,128,128,128,127,125,124,124,124,122,120,119,118,115,113,112,111,110,108,106,105,107,107,106,106,105,107,107,107,107,107,108,109,109,109,110,109,106,104,103,103,102,101,101,103,104,105,104,103,106,108,109,108,110,111,113,117,119,121,124,126,131,134,135,135,135,136,135,133,130,129,129,131,134,136,137,139,140,140,139,136,136,135,132,129,128,128,128,130,128,127,127,127,127,128,126,123,122,121,118,115,114,112,110,110,112,114,114,115],[159,159,157,154,152,147,144,141,139,137,135,132,127,124,121,119,117,117,117,118,121,124,128,130,132,134,136,137,136,136,138,139,138,136,135,135,135,133,132,134,136,139,140,141,142,145,146,146,147,145,146,147,145,143,141,139,138,137,135,135,137,139,138,136,135,134,133,133,133,134,134,133,132,131,129,126,127,127,126,126,127,129,131,131,130,130,131,133,135,138,140,141,142,143,142,143,145,146,147,147,147,148,149,147,147,148,150,151,150,149,150,148,147,146,145,145,144,143,143,143,145,144,142,141,137,133,132,133,133,132,130,130,130,131,131,129,126,125,125,126,123,121,120,120,117,113,112,111,110,108,108,109,109,109,108,107,107,107,108,108,108,108,109,109,109,109,110,110,108,106,105,103,102,100,101,102,103,103,103,103,105,108,109,109,110,111,113,116,118,120,122,126,130,132,133,132,131,133,132,130,128,127,128,130,132,134,135,136,139,139,137,134,133,133,130,127,125,125,126,127,126,125,125,125,126,126,123,120,118,118,118,116,113,111,110,108,109,111,111,113],[163,162,160,158,155,151,148,146,143,141,137,133,130,125,123,122,119,118,118,120,122,125,129,131,133,134,136,137,136,136,139,141,140,138,136,136,136,135,134,133,134,135,137,140,141,143,145,145,146,145,147,148,146,144,143,141,140,139,138,138,140,141,141,140,138,138,136,136,136,135,136,136,136,134,131,129,129,129,128,128,129,130,130,130,130,130,131,132,134,137,139,140,141,143,141,141,144,145,146,146,147,149,150,149,150,150,151,153,153,153,152,150,150,149,147,146,146,146,146,146,147,146,143,141,138,135,134,135,134,133,133,132,132,134,133,131,129,127,127,127,124,122,122,121,118,114,114,114,113,111,111,114,113,113,111,109,108,107,108,108,109,110,110,109,110,111,110,110,108,107,105,103,102,100,101,103,102,102,102,102,105,107,107,107,107,108,111,114,115,118,121,125,128,129,130,129,130,130,130,128,127,126,126,128,130,132,133,134,136,136,134,133,133,131,129,125,124,124,124,125,124,124,123,123,124,124,121,118,117,116,117,116,113,109,108,107,108,110,110,113],[164,163,161,158,156,154,152,148,145,142,138,135,132,128,126,124,122,121,120,121,123,125,128,131,132,133,135,136,137,138,140,142,141,139,137,137,136,137,137,135,134,134,134,137,139,141,143,143,144,145,146,147,145,144,145,144,143,142,140,140,142,143,142,142,141,141,141,140,139,138,138,139,138,136,134,132,132,132,133,132,133,133,131,131,132,132,133,131,132,135,137,138,140,141,140,141,144,146,145,146,148,149,150,151,152,151,151,154,156,156,155,153,154,153,151,149,149,150,150,149,148,147,144,140,139,138,137,136,135,135,135,135,136,137,136,135,133,131,129,128,125,124,123,122,120,118,119,118,117,115,115,117,117,116,114,112,111,109,109,110,112,112,112,111,110,111,111,109,108,108,107,105,103,103,102,103,102,101,101,102,104,104,104,104,104,106,110,113,115,116,119,123,124,125,126,127,127,127,127,126,125,124,126,127,128,130,131,132,133,133,132,132,132,130,127,125,124,124,123,123,122,122,120,120,120,120,119,116,116,117,117,115,111,108,107,107,108,110,110,112],[164,163,161,160,158,156,153,147,145,142,139,136,134,131,128,126,124,123,122,122,124,125,128,130,130,131,134,135,137,140,141,142,142,139,138,138,138,138,138,137,135,134,133,134,137,138,140,140,141,144,145,146,145,144,144,145,145,144,143,143,143,145,144,143,143,142,143,143,142,141,140,140,139,137,136,137,137,137,137,136,136,137,135,133,134,135,134,133,134,135,136,136,138,138,139,140,143,146,146,146,149,151,153,154,153,152,153,155,157,159,158,157,157,157,154,152,153,153,152,152,149,147,144,141,141,140,139,138,138,138,138,139,139,140,140,138,135,132,130,128,127,127,125,124,122,120,121,122,121,120,119,120,119,119,118,116,115,114,113,114,113,113,113,112,111,110,110,108,108,109,108,107,105,105,104,103,102,100,99,99,100,101,102,103,104,106,109,111,113,114,118,121,121,121,121,122,121,121,122,122,121,120,123,125,126,127,128,131,130,129,129,130,130,129,127,124,124,123,122,120,119,119,117,118,118,119,118,117,118,118,118,115,111,109,108,108,108,109,109,110],[164,162,161,161,160,158,153,147,145,142,139,138,136,133,129,127,126,125,123,124,126,127,128,128,128,129,132,135,138,141,142,142,142,141,140,139,138,139,138,137,136,134,133,134,136,137,137,136,138,141,144,145,145,144,144,145,146,146,145,144,145,146,146,144,143,143,144,145,146,144,142,140,139,139,139,140,140,141,141,140,140,141,138,136,137,137,136,134,136,136,135,134,135,136,137,140,142,145,147,148,150,153,154,155,154,154,155,157,158,160,162,162,161,160,157,155,155,155,153,152,149,148,146,144,144,142,140,140,140,140,141,142,142,143,142,139,136,132,130,129,129,128,126,124,122,121,123,125,125,124,123,123,122,122,122,121,120,119,119,117,116,115,113,113,112,111,110,108,109,109,109,108,107,107,106,104,102,100,96,96,98,98,100,101,103,105,108,110,110,112,116,119,118,117,117,116,117,116,116,118,118,119,121,122,123,125,125,127,127,126,126,126,127,127,126,124,124,123,121,118,117,116,115,115,116,118,118,117,118,118,117,115,112,110,109,109,108,109,108,109],[165,163,161,160,159,158,153,146,144,141,139,138,136,135,131,128,127,126,126,126,127,127,128,127,127,128,131,133,136,138,140,141,142,144,141,139,140,141,139,137,136,134,133,136,137,138,138,136,137,139,141,143,143,144,144,146,147,147,147,146,146,146,146,146,144,145,146,147,147,147,145,142,141,140,140,142,142,143,143,143,143,143,141,140,140,139,137,135,136,137,136,134,134,134,136,140,141,143,145,148,150,153,155,157,156,156,158,159,161,162,163,165,162,159,158,157,157,157,156,153,151,148,146,145,143,141,141,142,142,142,144,143,143,143,141,139,137,133,132,130,128,126,125,125,124,123,125,126,126,126,125,125,125,124,125,126,124,123,122,119,119,117,114,113,112,112,111,110,110,109,111,111,110,110,107,103,101,99,95,94,96,96,98,99,101,104,107,110,111,113,115,117,117,116,116,114,115,115,114,114,115,117,119,120,122,123,123,123,123,123,122,122,123,124,123,122,122,122,120,117,114,113,112,113,116,118,117,116,116,117,116,113,111,109,110,111,110,110,109,110],[166,163,161,159,158,157,153,147,145,143,140,138,137,136,133,130,129,129,128,126,126,127,127,127,127,129,130,131,134,138,140,141,143,144,142,141,141,141,140,137,136,135,135,137,139,140,139,138,138,140,141,142,143,144,145,146,148,149,148,146,146,147,148,147,146,147,147,147,147,146,145,145,144,142,142,144,144,144,145,146,144,144,143,142,142,139,137,135,136,138,138,136,135,135,136,140,141,142,143,146,150,153,157,158,158,157,160,163,163,163,163,164,163,159,156,157,158,157,156,155,153,150,146,145,144,141,140,141,142,144,146,145,143,142,140,139,136,134,133,129,127,125,125,124,124,124,126,128,127,127,127,127,127,127,127,128,128,126,124,121,119,117,115,114,113,113,112,113,112,111,112,111,112,110,107,104,101,98,96,95,96,97,98,99,101,103,106,109,111,113,115,115,116,115,115,115,115,115,114,114,115,117,117,119,120,121,120,120,120,119,119,119,120,120,119,119,119,120,119,116,113,111,111,112,114,116,115,115,116,115,114,113,111,110,111,112,112,111,111,113],[164,162,160,158,157,157,153,149,146,145,141,138,138,138,135,132,131,130,128,125,126,127,126,127,127,129,130,131,135,139,140,142,144,146,144,142,141,141,141,138,137,137,136,136,139,140,141,141,141,143,143,143,145,146,146,146,147,149,147,146,147,148,148,146,147,147,147,147,148,147,148,148,145,143,144,145,146,146,148,149,147,146,145,143,142,140,138,137,137,139,139,138,138,138,139,141,142,143,144,147,150,153,156,158,157,157,161,164,163,163,164,164,161,159,155,155,155,155,156,155,153,152,148,147,145,142,141,140,141,142,145,145,143,140,139,138,136,135,133,129,127,126,125,124,124,124,126,128,127,127,129,129,130,130,130,129,129,129,127,124,122,119,116,115,114,115,115,115,114,113,113,112,112,111,110,109,105,101,99,100,100,100,99,99,101,104,106,107,110,113,113,114,115,115,115,114,113,113,113,113,114,117,117,118,119,119,119,119,118,117,118,119,119,118,118,117,118,118,117,116,112,109,109,110,112,113,114,114,115,116,115,114,112,112,112,113,112,111,112,115],[162,160,159,157,156,156,153,149,147,145,143,140,140,139,136,133,131,130,127,124,124,125,126,127,128,130,132,133,136,138,140,143,145,146,145,143,142,142,141,140,139,138,138,138,140,141,142,143,144,144,144,144,146,147,147,146,147,148,146,145,146,147,148,148,147,147,146,147,148,148,148,148,146,145,146,148,148,149,151,152,150,148,147,145,142,140,139,139,139,140,140,141,142,142,142,143,142,144,145,147,151,154,156,157,158,159,161,163,163,163,164,163,160,157,154,153,154,154,156,154,153,152,150,148,147,145,142,141,140,142,144,143,142,140,138,138,136,134,132,128,127,126,125,125,126,125,126,127,127,128,129,131,132,132,132,132,131,130,129,127,124,121,118,117,116,116,116,117,117,115,115,114,113,112,113,112,108,106,104,103,104,103,101,100,101,104,106,108,110,112,113,114,115,115,116,114,112,110,111,113,114,116,117,117,117,117,118,117,116,116,117,117,117,117,117,116,116,116,115,114,112,109,107,108,111,112,113,113,114,116,116,115,113,113,114,113,112,112,114,116],[163,161,160,159,157,156,152,150,148,146,144,142,140,138,135,131,130,129,126,124,123,123,125,127,129,130,132,135,136,137,140,143,145,145,146,144,143,143,142,141,140,138,139,140,140,141,142,144,144,145,146,146,148,148,147,146,147,148,146,145,146,147,148,148,147,146,147,147,147,148,146,147,147,146,148,150,150,150,151,152,152,150,149,147,144,141,140,139,139,140,141,142,143,144,143,143,144,145,147,149,152,154,155,156,158,161,162,163,163,163,163,163,160,157,154,153,153,154,154,154,153,152,150,148,148,146,142,141,140,142,144,143,142,140,137,136,135,133,131,128,126,125,125,125,125,125,125,126,128,130,131,133,133,132,133,134,134,134,133,131,126,123,121,120,119,117,117,118,117,115,116,116,114,112,112,112,111,109,107,106,106,106,104,103,104,106,107,109,111,112,115,116,116,115,114,114,112,110,111,113,113,114,115,115,115,114,115,116,115,114,114,113,114,115,115,115,114,113,114,114,112,110,109,108,109,110,110,111,113,115,116,116,115,115,115,114,114,114,116,118],[163,161,161,160,159,156,152,150,148,147,145,142,139,136,133,131,129,128,127,125,124,124,125,127,128,130,131,133,134,135,138,142,144,145,146,144,142,142,141,141,141,139,141,142,141,141,141,143,145,145,146,147,149,148,147,146,147,147,147,147,147,147,149,148,146,146,148,148,148,148,146,146,147,148,149,150,150,149,149,150,150,150,150,149,146,142,141,141,140,140,141,143,144,145,145,144,145,146,149,150,152,153,154,157,158,161,163,162,162,161,162,162,160,158,156,154,153,153,154,153,152,150,148,147,147,145,142,141,140,142,142,141,140,138,135,133,133,132,130,126,125,126,125,125,124,124,125,126,129,132,134,134,133,133,134,135,137,137,136,134,129,125,124,123,121,118,119,120,118,116,117,118,116,112,111,112,112,111,109,107,106,107,107,106,106,107,107,109,111,113,116,117,117,115,114,114,112,110,110,112,112,113,113,113,113,111,110,111,112,112,111,111,111,113,113,113,113,111,112,113,111,110,110,108,108,108,108,110,113,115,116,116,116,117,117,117,117,116,118,119],[162,162,162,160,158,156,153,151,150,149,146,141,137,134,131,131,128,127,127,125,125,125,126,127,128,130,132,133,134,135,136,138,141,143,144,142,141,141,140,141,141,140,142,143,143,143,143,145,146,146,146,146,148,147,147,148,148,147,147,148,148,149,150,149,148,147,148,149,149,149,147,147,149,151,151,150,150,149,149,150,149,149,148,147,144,141,142,143,142,141,142,144,145,146,147,147,147,147,150,151,152,153,154,157,159,161,163,163,161,160,160,160,159,157,156,155,155,155,155,154,151,148,147,145,145,143,141,140,141,142,141,139,136,134,131,129,129,128,126,123,123,125,124,124,124,124,125,128,131,133,135,135,135,135,134,134,135,136,136,135,131,127,126,126,123,120,121,123,121,120,120,121,118,115,113,113,113,113,111,109,108,107,107,107,106,106,108,110,112,114,116,117,116,115,115,116,113,110,110,110,112,113,113,113,111,110,109,108,109,110,109,111,111,112,113,113,111,109,109,110,109,108,109,108,108,109,108,109,112,115,116,116,116,118,118,119,118,117,119,121],[159,160,162,161,159,156,154,152,151,149,146,140,136,131,129,129,128,127,126,126,126,126,126,128,129,130,132,134,134,134,135,137,139,141,141,141,141,141,142,142,142,140,142,144,145,145,145,147,147,147,146,145,147,147,147,147,147,148,148,148,149,151,151,149,149,148,149,150,149,149,148,149,151,153,152,150,149,149,149,149,148,147,146,144,142,142,143,144,145,144,144,145,146,148,149,149,149,150,151,152,154,155,155,157,160,162,164,163,160,160,160,159,158,156,156,157,157,156,156,153,150,147,145,144,143,141,140,140,141,141,139,135,132,130,127,124,124,123,122,121,121,122,122,123,124,124,126,130,132,134,136,137,137,135,133,133,135,136,136,136,134,130,128,128,126,124,124,125,123,122,123,123,121,118,117,115,114,114,113,111,109,109,108,107,106,107,109,110,111,114,117,119,118,116,116,116,114,112,111,111,113,115,114,112,110,109,107,105,106,107,108,109,110,112,113,111,110,108,107,108,106,106,107,107,107,108,108,110,113,116,117,116,117,119,120,121,121,119,120,122],[158,158,158,159,158,157,155,153,150,148,144,139,135,130,128,127,126,126,126,128,127,127,128,131,130,130,131,132,133,133,135,138,138,139,139,139,139,140,141,142,143,143,145,145,145,144,145,146,145,145,144,143,144,145,145,146,148,149,148,148,150,153,152,150,150,151,152,153,152,151,150,150,152,153,152,151,150,150,150,149,148,146,146,144,144,144,144,145,148,149,149,149,149,151,152,152,153,154,154,154,156,158,158,160,162,164,164,162,160,159,157,157,158,158,158,159,157,155,154,151,148,146,144,143,141,140,140,139,140,138,135,131,129,127,124,123,122,121,120,119,117,118,119,120,123,125,127,131,133,134,137,138,137,136,135,134,134,136,137,137,136,132,131,130,128,128,127,126,125,123,124,125,124,122,119,118,116,115,115,113,111,110,109,107,108,109,109,109,112,114,117,119,119,118,117,115,114,114,112,112,114,115,113,110,110,108,105,103,104,107,107,109,110,111,111,109,108,107,107,108,106,105,106,106,106,107,109,111,114,117,119,119,120,121,121,122,123,122,123,123],[157,156,155,155,156,156,155,152,149,146,143,139,134,129,127,126,123,123,125,127,127,127,128,130,130,130,130,130,132,134,137,139,139,138,138,138,139,140,140,141,142,143,146,146,143,143,144,144,142,142,141,142,142,142,143,145,147,147,147,149,151,153,152,152,153,154,155,156,154,153,152,151,152,154,154,153,154,153,152,152,150,148,146,145,145,145,146,146,148,151,153,154,154,153,153,155,156,156,156,157,159,161,162,163,165,166,165,162,161,160,157,157,158,159,159,158,156,154,152,148,146,145,143,142,139,139,139,138,136,135,132,129,127,125,122,121,121,119,117,116,115,114,115,118,121,124,126,130,133,135,137,138,137,136,136,136,135,136,138,139,137,133,132,130,129,130,130,129,127,125,125,126,126,124,123,121,119,118,117,116,114,112,110,110,110,111,110,111,114,115,117,119,119,119,119,116,116,116,115,115,115,115,113,111,110,108,106,104,104,106,107,107,108,110,109,107,106,106,106,107,107,106,105,105,107,109,109,111,114,118,121,122,122,123,122,123,124,125,125,124],[155,154,152,152,153,153,151,150,147,144,142,138,132,127,125,125,122,122,124,126,126,126,128,130,131,131,131,131,133,135,138,139,138,138,138,140,141,141,141,141,142,142,144,145,143,142,143,143,141,139,139,140,139,138,140,143,144,145,146,149,151,153,153,153,154,155,157,158,156,155,155,155,155,157,156,155,155,154,154,153,151,149,146,146,146,145,146,147,150,153,156,157,157,156,157,158,158,159,158,160,162,163,164,164,166,168,167,164,162,160,157,157,158,159,157,156,154,153,150,145,144,142,140,139,137,136,136,135,134,132,128,126,125,123,121,117,116,116,114,115,114,112,113,117,119,123,126,129,131,135,135,136,136,136,137,138,137,136,138,139,136,133,131,131,131,131,131,131,129,128,127,127,127,126,125,123,122,122,120,119,117,115,114,114,114,113,113,114,115,117,119,120,120,120,120,119,119,118,117,116,116,115,114,113,111,109,106,105,105,106,106,106,107,109,108,107,106,105,105,105,104,105,104,104,107,110,111,112,116,120,122,123,123,123,122,123,124,126,126,125],[154,152,149,148,148,149,148,147,145,142,139,135,130,126,124,122,121,121,123,126,126,126,127,129,130,130,131,133,136,137,139,139,137,137,138,141,142,143,141,139,140,141,143,143,141,140,141,141,140,138,137,137,136,136,139,140,142,143,144,148,151,153,155,155,156,157,160,161,159,158,158,158,159,158,159,158,157,156,155,154,151,149,147,146,146,146,146,148,152,155,159,160,159,159,161,162,162,161,160,162,164,166,166,165,166,167,168,166,165,162,158,158,159,158,156,154,152,151,147,144,142,139,137,137,134,134,134,132,131,128,125,123,121,120,117,113,112,112,112,112,112,112,112,114,118,122,126,128,131,133,133,134,135,136,138,139,138,137,137,137,134,132,131,131,131,131,132,133,132,132,131,129,129,129,127,125,124,124,123,122,120,118,117,117,117,117,116,116,117,119,120,120,120,121,122,122,121,120,119,118,117,116,114,114,112,111,108,105,105,105,105,105,107,108,107,107,106,105,104,103,103,103,104,105,108,111,113,115,118,121,123,123,123,123,122,123,125,125,125,127],[152,151,148,146,147,147,144,142,141,140,137,134,129,125,122,119,118,118,120,123,125,127,127,127,129,130,132,134,136,137,138,138,137,138,139,141,142,142,140,138,139,141,141,141,139,139,139,139,139,138,136,135,135,136,137,138,141,144,145,148,151,153,154,157,158,159,162,162,162,161,160,160,160,159,160,160,159,158,156,154,151,149,148,147,147,149,149,151,154,158,160,162,162,162,164,166,166,164,165,165,167,169,168,167,168,168,170,169,166,163,161,160,160,159,156,153,150,148,145,142,139,137,136,135,133,132,130,127,127,125,123,122,119,117,114,111,110,110,111,111,111,112,110,111,116,121,125,128,130,131,133,133,134,134,136,139,139,139,138,136,134,132,131,129,131,132,132,132,133,134,133,132,132,133,130,126,125,124,124,123,122,120,118,118,119,119,117,117,117,119,120,120,121,122,123,124,123,121,120,120,119,118,118,117,114,112,109,106,106,105,106,106,106,106,106,106,106,105,103,102,101,101,103,106,108,110,112,115,117,121,122,121,122,122,123,123,123,123,125,127],[149,149,147,145,145,143,139,138,137,136,134,132,127,123,120,118,117,118,118,120,122,124,125,127,129,131,134,135,135,135,136,137,138,139,141,142,141,140,138,138,140,140,140,140,138,138,137,136,137,137,136,135,134,136,137,139,141,143,146,149,152,153,155,156,158,161,162,163,163,163,163,163,161,160,161,161,160,158,156,153,152,151,149,149,150,152,153,155,159,161,162,163,165,166,167,169,170,170,170,169,169,172,171,170,170,171,172,170,168,165,162,161,160,159,156,153,149,146,143,140,138,136,135,134,133,131,128,125,124,124,123,119,116,114,110,109,110,110,112,111,110,110,109,112,116,120,125,128,129,130,133,133,133,133,133,136,138,137,137,136,134,134,132,132,133,133,133,132,133,135,135,135,136,136,133,130,127,126,127,126,124,121,119,118,119,119,117,117,117,119,121,122,123,123,124,125,124,121,120,120,119,119,119,118,114,112,108,107,107,106,106,105,104,104,104,104,105,104,103,102,101,102,103,104,106,107,109,113,116,119,120,120,122,123,124,123,123,123,125,125],[145,145,144,142,141,139,136,135,134,132,131,128,124,121,120,118,117,117,116,117,120,122,124,127,128,130,132,134,134,135,137,139,139,140,141,142,140,139,138,139,139,139,140,139,138,137,135,135,137,137,136,135,135,135,137,139,141,143,147,151,153,155,156,157,160,162,162,162,163,162,163,164,163,163,163,161,160,158,156,153,153,153,152,151,153,155,157,158,160,164,165,164,167,169,170,171,173,173,173,173,174,175,173,172,172,173,173,170,168,165,162,160,159,157,155,153,149,146,143,140,138,137,135,133,131,129,127,126,125,123,120,116,114,112,110,109,109,110,111,110,109,109,111,115,118,121,126,130,130,129,132,133,133,134,132,133,134,134,135,134,134,134,133,134,134,135,135,134,136,137,137,135,135,136,135,134,131,129,129,129,126,122,120,119,119,120,119,118,118,119,121,123,123,123,124,125,124,121,121,121,119,117,117,115,112,110,108,106,105,105,104,104,104,103,102,101,104,104,103,102,102,103,102,102,103,105,107,111,114,117,119,120,122,124,125,123,123,123,123,123],[142,142,142,139,138,136,134,134,133,131,129,125,122,121,119,118,116,116,114,115,118,120,122,125,128,130,131,132,133,135,138,139,141,141,142,142,140,140,140,139,139,138,139,138,137,136,134,134,136,136,136,136,135,135,136,138,140,143,148,152,155,156,158,159,161,161,161,161,161,161,163,165,166,166,164,162,161,158,155,155,155,155,154,154,157,159,159,160,162,166,166,166,168,171,172,173,174,176,176,177,178,178,175,174,174,174,173,169,167,165,162,159,158,156,154,152,149,146,143,140,139,138,135,132,130,129,127,126,124,123,120,116,114,113,110,110,110,111,111,110,110,110,112,116,119,123,128,129,129,129,131,133,133,133,131,130,130,131,132,133,133,133,133,134,136,137,137,137,138,139,137,135,134,136,137,137,135,133,131,130,128,124,122,120,118,118,119,120,120,120,121,123,124,124,124,125,125,121,120,120,118,116,114,112,109,107,106,105,104,103,103,103,103,101,101,101,102,103,103,101,102,103,101,99,100,103,106,110,113,116,118,119,120,123,124,123,123,123,123,122],[141,141,140,139,139,137,134,133,131,130,127,124,122,121,118,117,115,115,113,113,115,118,120,122,126,128,129,130,131,134,137,139,141,142,142,142,142,141,140,139,139,138,139,138,136,135,133,133,135,136,137,136,135,134,135,138,141,144,148,152,154,155,158,159,160,160,161,162,161,162,164,165,166,165,164,163,161,159,157,156,154,154,155,155,157,160,161,161,164,167,167,167,170,172,173,174,177,178,179,179,180,180,178,176,174,173,172,170,169,167,163,159,158,157,155,152,149,146,144,141,140,140,137,133,132,130,127,126,124,122,120,117,115,113,111,110,110,111,111,111,110,111,113,116,120,124,126,128,129,129,131,133,132,130,128,127,127,128,130,132,132,132,133,134,137,138,139,138,138,138,136,135,136,137,137,137,135,134,132,131,129,126,123,121,118,116,118,120,120,120,121,123,124,125,125,125,124,121,120,118,115,114,112,110,107,105,104,104,103,101,101,102,101,100,101,102,102,103,102,101,102,103,101,99,101,102,104,108,111,115,117,117,120,122,122,121,121,123,122,120],[142,141,140,140,139,139,136,133,129,128,127,126,124,122,119,116,114,114,114,113,115,117,119,122,124,125,127,129,130,133,136,139,140,140,140,142,143,142,141,139,138,138,138,137,135,134,133,135,137,138,139,137,134,133,134,137,140,143,148,151,151,153,157,159,159,159,160,163,163,162,164,165,166,165,163,163,161,160,158,155,153,152,153,155,156,158,160,161,163,166,168,168,170,172,173,177,179,181,180,181,182,181,180,177,174,173,172,171,170,168,164,160,159,159,157,154,150,147,145,143,142,142,139,136,134,132,129,127,125,122,120,117,115,114,113,111,110,110,111,112,110,111,113,116,119,122,124,127,129,129,129,129,130,128,126,125,125,126,128,130,129,129,130,132,135,138,139,138,136,135,134,135,136,137,138,137,134,132,131,130,128,125,124,122,118,115,116,118,118,118,120,121,122,125,125,124,123,122,121,118,115,113,111,109,106,103,103,103,102,100,99,98,99,100,101,102,102,102,101,101,101,101,100,99,101,103,104,107,110,114,116,116,118,119,119,119,121,122,121,120],[142,141,140,139,138,138,135,132,129,127,127,126,124,122,120,117,115,114,113,113,114,115,117,121,122,123,125,127,129,131,135,137,137,137,138,141,142,142,142,141,140,140,139,137,136,133,134,137,138,138,139,138,135,133,132,134,137,141,146,150,151,152,156,159,159,160,162,164,164,164,166,168,167,166,163,163,161,160,156,153,152,151,152,154,154,156,159,161,164,166,168,168,170,171,174,178,180,182,181,182,182,181,180,177,175,174,172,171,170,168,166,163,161,160,158,155,151,147,145,143,142,142,140,138,137,135,131,128,127,124,121,118,115,113,113,111,111,111,111,113,111,111,113,115,118,120,122,124,126,127,126,125,126,127,125,125,125,125,127,128,127,127,128,130,132,135,136,136,135,133,133,134,134,134,136,136,133,131,130,130,128,125,124,122,118,116,116,116,117,115,118,120,122,125,126,126,125,124,122,119,116,112,110,108,105,102,102,102,101,100,98,96,98,99,100,101,101,100,100,101,100,100,99,99,100,102,104,106,111,114,116,117,118,118,118,119,119,121,120,118],[141,140,138,138,138,137,135,132,130,128,128,126,124,122,120,119,117,115,113,112,113,114,115,117,119,120,122,125,128,130,134,135,135,136,138,140,141,141,142,142,141,141,140,138,137,134,135,137,137,139,138,136,133,131,130,132,135,139,144,148,150,152,155,158,159,159,163,165,165,166,168,169,168,166,162,162,161,158,155,152,150,150,152,153,153,155,158,161,164,165,168,170,171,172,174,177,180,182,182,183,184,182,181,179,177,176,172,171,169,168,167,164,162,161,159,156,153,148,145,143,142,142,142,140,139,136,133,131,130,127,121,117,115,114,114,113,112,111,111,113,112,111,113,114,117,119,121,123,123,124,123,122,122,124,124,124,125,125,126,126,126,126,126,128,129,131,133,134,133,131,131,132,132,133,134,134,132,130,129,129,126,124,123,122,118,115,115,115,115,114,116,119,121,124,126,127,127,125,123,120,116,112,108,105,103,101,101,101,101,99,97,95,96,97,97,99,99,99,99,99,99,99,99,98,99,101,104,108,111,115,117,118,119,119,119,117,117,119,119,117],[143,142,141,139,138,137,134,130,129,129,128,127,125,124,121,120,118,115,114,112,112,113,113,115,117,120,121,123,126,129,131,134,135,136,138,140,141,141,143,144,142,141,140,138,137,135,136,138,138,138,136,134,132,129,129,131,133,136,141,146,148,152,155,157,158,158,162,166,168,168,169,168,168,166,163,161,159,157,155,153,151,150,150,152,153,155,157,160,162,164,168,172,173,174,176,178,181,184,184,183,183,182,181,180,178,176,173,172,171,168,166,163,161,160,160,158,154,150,147,145,144,144,142,141,138,136,135,132,131,129,123,118,117,117,116,115,114,112,112,112,111,111,113,114,116,118,119,123,123,123,122,120,121,122,123,123,123,124,124,123,124,125,125,127,127,127,130,133,132,131,130,130,130,132,133,133,132,129,127,127,124,122,122,121,118,116,116,116,115,115,116,119,120,122,125,127,126,124,123,120,116,113,107,104,103,102,100,100,100,99,97,96,95,95,96,98,98,99,99,98,98,97,97,97,99,100,104,109,111,114,116,118,119,120,120,118,118,118,118,117],[143,142,142,142,139,136,133,131,130,129,128,127,125,122,121,120,119,116,115,113,113,113,113,115,118,120,121,123,125,127,130,134,135,137,139,140,142,143,144,144,141,141,140,138,137,136,137,138,137,138,136,133,132,130,129,130,132,135,139,143,147,151,155,156,156,157,160,165,167,168,168,166,166,166,164,161,159,158,158,155,152,151,151,153,155,157,158,161,164,166,169,171,174,176,178,180,182,185,185,183,182,182,181,180,177,175,174,174,172,168,165,163,161,160,159,156,153,149,147,146,146,145,141,139,138,136,135,133,131,128,125,121,119,119,118,117,115,113,112,112,112,113,115,116,118,118,118,122,123,123,122,120,121,123,123,122,122,123,123,122,122,124,125,125,125,125,127,129,130,131,130,129,129,130,131,131,130,129,128,126,124,122,120,119,117,117,118,117,117,116,116,118,119,121,123,124,123,122,121,119,114,110,106,104,103,103,100,99,99,99,99,97,96,96,97,97,97,97,98,98,97,95,96,97,98,100,104,109,111,113,114,116,119,120,119,119,118,118,117,117],[143,141,142,143,140,136,135,133,131,131,129,127,124,121,120,119,118,117,117,117,117,116,116,117,119,121,122,123,125,128,131,134,135,137,139,139,142,144,144,143,141,140,139,138,138,138,138,138,138,138,135,132,131,131,130,130,133,135,138,141,145,149,152,155,155,156,158,162,165,167,167,165,166,166,164,161,160,159,158,155,154,154,153,154,156,159,160,163,166,169,170,170,174,176,177,179,181,184,185,184,183,182,181,180,178,175,174,173,172,169,166,164,162,161,159,155,153,149,147,146,146,145,142,140,139,137,135,133,130,127,125,123,121,119,119,118,115,113,113,113,114,115,116,118,118,118,118,120,120,120,120,119,120,123,123,122,122,123,122,122,122,123,122,123,123,124,125,126,129,130,130,131,130,131,132,130,129,129,126,126,126,125,122,119,118,118,118,116,116,117,117,117,119,119,120,120,120,119,117,115,112,108,105,103,103,103,100,98,98,99,100,97,97,97,96,97,98,97,98,98,96,94,96,97,99,100,103,107,109,111,112,113,117,119,120,120,118,117,116,116],[142,140,141,142,140,137,135,134,132,130,127,124,122,120,119,117,117,119,121,122,121,120,118,118,119,121,122,124,126,128,131,133,136,137,138,139,142,144,144,142,140,139,137,139,139,139,140,139,139,138,135,133,132,131,130,130,132,134,137,141,144,146,149,152,153,154,156,158,161,164,165,166,167,166,163,161,159,160,158,157,156,155,155,157,157,160,162,165,167,169,170,171,173,175,177,179,180,183,185,184,183,182,182,181,180,177,174,173,171,168,166,165,163,161,158,155,153,150,149,147,146,145,142,141,139,136,133,131,129,127,126,123,120,120,118,117,114,114,114,115,116,117,118,118,118,118,118,118,118,118,118,118,119,122,123,121,121,122,123,123,123,122,121,122,122,122,123,125,128,129,130,132,132,131,131,130,129,127,126,127,127,126,122,119,118,118,118,118,117,117,117,117,117,116,116,117,116,114,113,113,111,107,105,104,102,102,99,99,99,99,99,98,98,98,98,99,99,98,98,98,96,94,95,97,98,100,102,105,107,110,111,112,116,118,120,119,118,117,116,117],[140,138,139,140,139,137,136,133,130,128,125,121,120,120,117,116,119,120,122,124,123,123,121,119,120,121,123,125,127,129,131,134,136,138,139,139,141,142,142,140,138,137,136,137,137,136,138,139,139,138,137,135,133,132,131,132,133,135,137,140,142,143,146,149,149,151,152,154,157,160,163,164,165,165,162,161,161,161,159,158,157,156,158,160,160,160,162,165,167,168,170,173,174,175,177,179,180,182,184,184,183,181,181,180,179,178,176,174,171,168,166,165,162,160,159,155,153,151,149,148,147,146,142,140,137,134,132,130,129,129,127,124,122,120,118,116,114,115,115,116,117,117,117,117,118,118,116,117,117,117,116,116,117,119,120,119,120,121,122,122,121,120,119,121,120,119,120,124,126,127,130,133,132,131,130,130,129,128,129,130,128,127,124,121,119,117,119,120,119,118,118,117,116,115,115,114,113,111,111,112,110,107,107,105,103,102,100,100,100,99,100,99,99,98,99,100,98,96,96,96,96,94,95,97,97,100,103,105,107,110,110,112,116,118,119,118,118,118,117,118],[138,136,136,137,136,136,135,132,129,126,122,120,120,120,119,118,120,122,123,124,124,124,123,121,120,121,122,126,128,129,131,135,137,139,139,139,140,141,141,139,137,136,135,134,134,133,135,137,137,137,136,134,132,131,132,132,133,134,137,140,140,141,142,145,147,149,150,151,155,158,160,161,162,162,162,160,161,162,160,159,158,159,160,160,159,159,160,164,166,167,170,173,173,174,175,177,179,181,183,184,184,182,180,179,179,178,177,175,172,169,167,165,162,160,160,157,154,151,150,150,148,146,143,140,135,132,130,129,128,127,126,124,122,120,118,117,115,114,114,115,116,115,115,116,117,118,116,115,115,115,113,113,114,115,116,116,119,121,122,121,119,118,118,119,120,119,120,123,127,130,132,132,131,130,129,128,129,130,132,131,129,128,126,123,122,120,120,121,121,121,121,119,116,115,115,115,112,109,109,111,110,109,108,106,103,101,101,101,100,100,100,100,99,99,99,100,97,94,93,94,93,93,93,95,97,100,105,107,108,109,110,112,115,117,117,117,117,118,118,118],[137,133,133,134,134,133,133,130,128,126,122,120,120,121,120,120,122,125,124,123,123,123,123,121,120,121,123,125,128,129,131,134,137,139,140,140,141,142,141,138,136,135,133,132,132,132,132,135,134,134,134,132,131,129,130,132,132,134,136,139,140,140,141,142,144,146,147,148,152,156,158,159,160,159,160,160,162,163,162,161,161,161,162,160,159,159,161,164,164,164,167,170,171,172,173,174,178,181,183,184,184,184,182,181,181,181,179,176,173,169,167,166,163,161,160,158,155,152,151,150,147,143,141,139,135,130,128,127,126,124,124,121,118,117,116,116,115,114,115,116,115,114,115,115,116,116,114,113,113,114,112,112,113,114,115,115,117,119,121,120,119,119,119,120,120,121,121,123,128,131,131,130,129,129,127,127,128,129,131,130,128,127,126,125,124,123,121,121,122,122,121,120,117,114,115,114,112,109,108,109,108,108,108,106,103,100,101,102,101,101,101,101,101,100,101,100,96,93,93,93,93,93,93,94,97,100,104,107,107,107,109,112,114,116,116,116,116,116,118,118],[136,133,131,130,130,131,130,129,127,125,122,120,120,121,121,122,124,126,124,122,123,123,123,121,120,122,124,126,128,130,131,133,136,138,140,141,141,142,141,137,134,133,132,131,131,130,130,132,132,132,133,132,130,128,129,132,133,133,136,138,139,139,139,140,141,142,143,145,149,153,155,157,157,157,159,161,163,164,164,163,163,163,163,162,160,159,162,163,163,163,165,168,169,169,170,172,177,180,183,184,184,184,184,184,184,182,179,176,173,169,168,166,164,162,160,158,156,153,151,149,146,143,140,137,134,129,127,125,123,122,121,119,116,114,113,114,114,114,116,116,114,113,115,115,116,115,111,109,110,112,111,111,111,113,115,116,117,119,120,119,118,119,121,122,121,121,122,123,127,130,130,129,129,129,127,127,129,130,130,130,128,126,127,129,128,125,122,122,123,123,122,121,118,115,114,114,111,108,108,108,106,106,106,105,102,100,101,103,103,103,103,103,103,101,101,99,95,93,92,92,92,92,93,94,97,100,104,106,107,107,108,111,113,115,115,114,114,116,118,118],[133,130,128,128,128,129,129,129,127,125,123,121,121,121,122,123,125,126,124,123,122,123,121,119,120,122,124,126,129,131,131,132,135,137,138,138,139,140,140,137,134,131,130,129,129,128,129,131,132,131,132,132,130,129,131,133,133,133,134,136,137,138,139,140,139,140,140,143,146,148,152,155,156,158,160,163,165,166,167,166,165,163,163,163,162,161,163,164,164,165,165,167,167,168,170,173,175,178,181,184,184,184,184,184,183,181,178,175,172,169,167,165,163,163,161,157,155,153,150,148,145,142,138,136,133,129,127,125,123,121,119,117,115,114,115,115,114,114,114,114,112,110,111,113,114,114,110,107,107,109,109,109,111,112,113,115,116,118,119,117,118,118,120,123,122,122,122,124,127,130,130,129,129,128,127,127,129,131,130,130,129,128,130,131,129,126,125,124,124,125,123,121,119,116,116,115,111,108,106,106,105,104,105,104,102,100,100,103,103,104,104,104,103,100,100,99,96,95,92,91,91,92,93,95,97,99,102,104,106,108,109,111,113,114,115,114,115,116,116,116],[129,127,126,126,128,128,128,128,126,124,123,122,122,121,122,124,124,124,123,123,123,122,120,117,118,121,123,126,129,131,131,132,134,136,136,136,138,139,138,136,134,131,129,128,128,127,128,131,132,131,130,130,130,132,133,133,132,132,134,135,137,137,139,139,137,137,138,140,143,146,150,154,157,159,162,165,166,168,169,169,167,163,163,164,164,163,164,165,164,165,166,167,167,168,172,174,176,177,179,183,184,184,184,183,182,180,177,173,172,171,168,164,163,163,160,156,154,152,150,147,144,141,137,135,132,129,126,123,122,119,117,114,113,114,115,115,114,113,113,112,110,109,108,108,110,110,108,106,106,108,109,109,110,110,110,113,116,118,118,118,118,119,120,122,122,123,123,124,126,128,129,130,129,128,129,129,130,131,130,131,130,130,131,131,129,127,126,125,125,125,123,120,118,117,117,115,112,109,107,106,105,104,106,105,102,99,99,102,103,104,105,104,102,100,99,98,97,94,93,93,93,94,94,96,97,97,99,103,106,108,110,111,112,114,115,114,113,113,113,113],[127,126,124,123,124,126,126,125,124,123,123,123,122,121,122,125,124,123,123,123,123,122,120,118,120,123,125,126,127,129,130,130,134,136,136,136,138,139,139,135,132,130,129,128,128,127,127,130,130,131,130,129,130,132,133,133,132,131,132,133,135,136,138,137,135,135,136,139,143,146,151,155,157,160,162,165,167,168,170,171,168,164,164,164,164,164,165,165,164,164,165,167,168,168,171,174,176,177,180,182,183,183,182,181,179,179,175,172,172,172,168,164,163,163,160,156,153,151,149,146,145,142,138,136,133,130,126,121,118,117,113,112,113,114,114,114,113,112,112,111,110,109,106,105,106,106,106,105,106,108,109,110,111,111,111,113,115,118,118,119,119,119,121,121,122,123,122,124,126,127,129,131,129,128,129,130,130,130,129,130,130,131,131,128,127,126,124,124,124,124,122,119,119,118,117,115,112,110,108,106,106,105,105,104,101,99,99,101,102,103,104,103,101,100,98,97,95,92,93,94,94,95,95,97,97,97,98,101,103,105,107,108,110,111,112,112,110,110,110,109],[125,123,122,121,122,124,124,125,123,122,123,123,122,121,122,124,124,124,123,123,122,121,121,120,123,125,125,125,125,126,127,129,132,135,136,136,138,139,138,134,131,129,129,129,128,126,126,128,129,130,128,128,129,131,133,133,132,131,131,132,134,135,137,136,134,134,136,140,145,149,152,155,158,161,163,165,167,169,171,171,169,166,165,165,165,165,165,165,164,164,165,167,168,168,171,174,176,178,180,182,183,182,180,177,176,176,175,173,171,171,168,164,163,162,159,154,151,148,146,146,145,142,139,136,133,130,125,119,115,113,110,110,112,113,114,113,111,111,110,110,109,107,104,102,102,102,103,105,106,107,110,112,113,113,113,114,115,117,119,120,121,121,121,121,122,123,122,124,126,126,128,129,128,128,128,130,130,129,129,130,130,130,130,127,125,124,124,123,122,121,120,119,119,119,118,115,111,109,107,107,106,105,104,103,102,100,100,99,99,101,102,101,99,97,97,96,94,93,94,95,94,95,96,98,98,99,98,99,101,102,103,105,107,108,109,109,108,107,107,106],[123,121,121,122,123,124,124,125,123,121,123,124,122,121,122,124,125,126,125,124,122,120,121,121,122,123,123,123,123,124,126,128,130,132,134,136,138,139,137,134,131,129,129,129,128,126,126,128,129,130,128,127,128,130,132,132,131,130,130,131,133,133,135,134,133,133,136,141,145,150,153,155,158,161,163,164,167,169,171,170,170,168,167,166,166,166,165,165,166,166,167,169,170,171,173,175,177,179,181,181,183,183,180,176,175,173,172,172,170,168,165,162,161,159,155,150,147,144,143,144,143,141,137,133,130,127,122,116,112,111,109,110,111,111,113,112,111,110,108,108,107,105,103,101,101,100,101,104,104,105,110,113,114,115,116,117,118,119,120,122,122,124,123,123,124,124,123,122,123,123,126,127,127,127,128,129,130,129,130,131,129,128,128,127,125,123,123,122,120,118,118,118,117,117,115,113,110,107,107,108,107,106,105,103,103,102,100,99,99,99,99,99,98,96,97,96,94,93,93,94,95,96,97,98,99,100,98,97,99,100,100,101,104,107,107,106,105,103,102,102],[122,120,120,122,124,125,125,124,123,123,124,124,122,120,121,123,125,127,128,126,123,120,120,121,120,120,121,122,122,123,126,127,128,129,132,134,136,137,135,133,131,129,128,128,126,125,125,127,129,130,129,128,128,130,131,132,131,129,128,130,131,133,135,134,133,133,135,140,144,151,154,156,158,161,163,165,168,170,171,171,171,170,170,169,168,167,166,165,166,168,169,169,171,173,175,176,177,179,181,181,181,180,179,177,174,171,169,169,167,164,161,160,158,156,151,147,144,141,140,141,141,139,135,131,126,124,119,114,111,109,109,110,109,109,111,112,111,108,106,105,105,104,103,101,100,99,101,102,102,104,109,114,116,116,119,121,122,120,120,121,122,124,124,123,125,125,122,121,121,122,124,125,125,125,126,128,129,130,132,132,129,127,125,125,124,123,123,121,119,116,115,115,115,114,112,110,108,106,106,106,104,103,103,103,102,102,102,100,99,98,98,98,96,96,97,96,94,93,92,94,96,97,97,97,99,100,98,97,98,97,98,100,102,103,104,103,103,101,99,98],[122,121,120,121,123,126,125,125,125,125,124,123,122,120,120,122,124,126,127,126,123,119,120,121,119,118,119,121,122,122,124,126,126,126,129,132,133,134,132,131,129,128,127,126,125,124,124,125,127,129,128,127,129,131,132,132,131,130,130,131,133,134,135,134,133,134,135,139,144,150,153,155,158,160,163,165,167,170,171,172,172,170,171,171,170,168,166,166,167,168,168,168,170,172,173,176,177,177,179,181,180,178,178,177,172,169,168,167,165,161,159,158,156,154,150,146,143,139,137,137,137,136,133,130,126,123,119,114,110,106,107,109,108,108,110,110,109,106,104,104,103,103,102,99,97,97,99,101,102,105,109,114,116,117,120,123,121,120,121,122,123,124,122,121,123,123,122,120,120,122,122,123,123,122,124,126,128,130,131,131,129,126,125,124,123,122,121,119,116,113,113,112,111,111,109,106,105,104,102,102,101,100,100,101,101,101,101,100,99,97,97,98,97,97,97,96,95,94,94,94,96,97,96,96,98,99,99,99,98,96,97,99,100,100,101,99,98,97,95,95],[124,122,121,120,122,125,127,127,127,125,123,121,120,119,120,122,124,125,125,125,122,120,119,120,118,117,118,120,121,121,123,124,124,124,127,129,130,130,130,129,128,127,126,124,123,123,123,124,125,127,127,127,129,131,133,133,133,133,132,134,136,136,135,134,134,134,136,139,144,149,152,154,157,160,162,164,166,169,171,174,173,172,172,171,170,169,167,166,167,167,166,166,168,170,171,174,176,177,178,179,179,178,177,175,171,168,167,165,162,159,157,156,154,152,148,144,141,137,135,135,134,133,132,129,125,122,118,113,108,105,105,106,107,107,107,107,106,105,103,102,102,101,100,97,95,96,98,101,102,104,108,114,116,118,122,123,121,121,122,123,123,123,122,121,122,122,122,121,120,120,120,121,121,121,121,124,128,130,131,129,127,126,124,123,121,119,118,116,113,111,110,108,107,107,105,103,102,101,99,99,99,98,98,98,99,99,100,99,99,97,96,98,98,98,98,96,95,95,95,96,97,98,97,96,96,98,99,99,97,95,95,97,97,97,96,95,93,91,90,91],[124,124,123,122,124,125,127,126,126,125,122,121,120,118,119,122,124,125,126,124,121,120,119,118,117,115,116,119,120,120,121,122,122,123,126,129,129,129,129,127,126,125,124,122,122,122,122,124,126,128,127,126,128,131,133,134,134,135,134,135,137,137,136,135,135,135,138,140,143,147,150,152,156,160,162,163,166,167,170,173,173,173,173,172,171,169,168,167,167,167,167,167,168,169,170,172,174,176,176,177,178,178,176,173,170,166,165,163,161,159,156,155,152,150,147,143,140,136,134,133,131,129,127,126,122,118,115,109,107,105,104,104,105,107,105,104,104,103,102,101,100,98,98,97,95,95,97,100,101,103,107,113,117,120,123,124,124,123,123,124,123,122,122,122,122,122,121,122,120,119,119,120,121,121,122,124,127,129,129,128,128,127,125,123,120,117,116,114,113,112,110,107,105,104,102,101,100,100,98,96,96,96,96,97,97,99,99,98,97,95,96,97,97,97,97,96,96,96,96,96,97,97,96,97,96,96,98,99,97,95,95,95,94,93,93,92,90,89,89,90],[124,125,124,124,125,126,126,125,124,123,121,121,121,119,119,121,124,126,125,122,120,120,119,118,115,113,114,116,118,118,119,120,121,122,126,129,129,129,128,127,125,124,124,123,122,122,123,125,127,127,127,127,128,130,133,135,134,134,134,135,137,138,137,136,136,137,140,142,144,146,148,151,154,159,161,163,165,166,167,170,172,172,173,172,170,169,169,168,168,167,168,168,168,168,170,172,172,173,173,175,176,177,175,170,168,166,163,161,160,158,155,153,150,148,146,143,138,135,134,133,130,126,124,121,118,115,111,108,107,105,104,104,104,106,104,103,103,103,102,101,99,98,97,97,97,96,97,99,101,103,107,112,117,121,124,125,124,124,125,125,124,122,122,122,121,121,121,120,119,116,117,119,120,121,122,124,126,128,128,128,129,128,127,124,120,116,114,113,112,111,109,107,105,102,100,99,98,97,95,94,94,93,94,95,96,97,96,95,95,93,93,93,94,94,94,94,96,96,96,95,95,95,95,97,96,96,97,97,97,96,95,94,92,91,89,89,88,88,88,88],[125,125,124,125,125,125,126,123,122,121,120,120,121,121,121,122,125,126,125,122,121,119,117,116,113,111,111,113,115,116,119,120,121,121,125,127,128,128,128,128,126,124,124,124,124,124,124,125,126,126,125,127,128,130,133,135,135,134,135,136,137,139,137,137,138,139,142,143,144,145,147,151,154,158,161,162,163,164,164,167,169,170,172,172,170,169,169,168,168,168,169,170,170,170,170,172,172,171,171,172,173,173,170,166,165,164,161,158,156,154,152,150,148,146,144,142,138,135,134,133,129,125,121,118,116,114,111,108,106,106,105,103,104,105,103,101,102,103,102,101,99,99,97,95,95,95,96,99,100,103,106,111,118,123,125,125,124,124,124,124,122,121,122,123,122,122,121,120,118,116,116,117,119,120,122,125,127,129,129,130,128,127,127,124,119,115,112,112,111,110,109,106,103,100,97,95,94,94,94,93,91,90,91,92,92,94,93,92,92,92,91,91,92,93,92,93,95,96,97,96,96,96,96,97,98,98,99,97,96,96,93,92,92,90,87,86,85,85,86,84],[125,126,124,125,125,125,125,122,119,119,120,121,122,122,123,123,125,126,126,123,121,119,117,115,112,111,110,112,113,115,119,121,121,121,124,127,128,127,127,128,127,124,124,124,124,124,124,125,125,124,124,127,129,131,134,135,135,135,135,136,137,138,138,138,138,139,142,142,142,144,146,151,155,158,160,162,162,163,163,166,167,169,171,172,171,168,168,169,169,168,170,171,170,171,171,172,172,170,169,168,168,169,165,162,161,160,158,154,151,150,150,149,146,143,141,140,138,136,135,133,128,124,120,117,116,114,111,109,108,108,106,103,103,103,102,101,101,102,103,101,100,100,98,96,94,94,96,97,99,103,107,113,120,124,124,123,123,122,121,121,120,119,121,122,121,120,119,119,119,117,117,118,119,120,122,125,128,129,130,131,129,127,126,123,118,115,112,112,110,109,108,105,101,97,95,93,92,92,92,91,89,88,87,88,88,90,91,90,89,89,89,90,91,91,91,92,93,95,96,97,97,96,96,98,98,98,99,97,95,94,92,92,91,90,86,83,82,82,83,83],[126,127,126,125,125,125,123,121,120,120,120,122,124,124,124,125,126,126,126,123,121,119,115,112,111,110,111,113,113,114,118,121,121,121,124,128,128,127,128,128,127,125,126,125,124,125,125,126,126,125,125,128,130,132,135,137,137,138,138,138,138,137,138,140,140,140,141,141,142,144,146,151,154,158,161,162,163,164,165,167,167,169,169,169,169,168,170,171,170,170,171,170,170,171,170,169,170,168,165,163,164,165,163,161,159,156,154,151,149,148,147,147,144,142,140,139,137,136,134,131,126,121,118,116,115,114,112,110,110,111,108,105,103,101,100,100,100,101,101,101,102,101,100,100,97,97,97,98,100,104,108,114,119,123,122,120,120,121,119,119,117,116,118,120,119,118,119,118,117,118,118,120,121,122,123,126,128,129,130,131,129,127,127,124,120,116,114,113,111,110,108,104,101,97,95,93,92,93,92,90,90,89,87,86,87,88,89,89,88,87,88,89,90,91,92,92,93,94,94,94,94,93,94,97,96,96,96,95,93,91,91,91,90,89,85,81,80,78,79,80],[127,128,127,126,125,124,123,122,121,121,120,122,125,126,126,126,127,128,127,125,122,119,115,112,111,112,113,115,115,115,119,122,122,122,124,126,127,127,127,126,125,124,125,125,125,125,125,126,127,126,126,129,131,134,137,139,140,141,141,141,139,138,138,140,142,142,142,142,143,144,146,150,153,158,162,162,163,165,165,167,169,169,168,168,169,170,171,170,170,171,172,170,170,170,168,166,166,164,162,160,160,162,160,158,156,153,150,148,147,145,145,144,142,140,138,136,136,135,133,129,124,120,117,115,113,113,111,110,110,111,108,106,104,101,99,99,99,100,100,100,102,102,101,101,100,99,99,100,102,105,109,114,117,120,120,118,119,120,118,116,116,116,116,117,117,118,119,119,118,119,120,121,124,124,126,128,130,130,131,131,129,127,126,124,121,117,114,114,113,111,108,105,102,99,95,94,94,93,92,91,90,89,88,87,87,88,90,89,88,88,88,89,90,93,94,93,93,93,92,93,92,92,93,93,94,94,94,94,93,91,88,88,88,87,84,81,80,78,76,77],[127,127,127,126,125,125,123,122,121,120,120,122,125,127,127,127,129,129,129,126,122,120,117,115,114,115,116,118,118,118,120,122,123,122,123,125,126,126,125,123,123,122,123,123,123,123,124,126,126,126,127,130,132,134,137,139,140,141,142,142,140,139,139,140,142,143,142,142,143,145,146,149,153,157,160,161,162,165,166,166,168,169,168,169,171,172,171,170,170,171,171,170,170,170,167,165,163,161,159,156,157,159,157,154,152,151,148,147,145,143,142,140,139,138,135,133,134,133,132,129,125,121,116,114,113,112,110,109,109,110,108,107,104,101,99,98,99,101,100,100,102,103,103,102,100,99,100,101,104,106,109,114,116,118,119,118,119,119,118,116,115,116,115,115,116,118,119,120,120,121,121,121,123,124,127,130,132,133,133,133,130,128,127,123,120,117,114,113,112,110,109,106,103,102,97,95,94,93,92,91,90,89,88,89,90,90,91,91,90,90,89,89,91,94,95,93,93,93,92,93,92,92,92,92,92,93,93,92,92,90,87,85,86,86,83,80,79,78,76,76],[127,127,126,126,126,125,123,122,120,120,120,123,125,127,128,128,129,130,130,127,123,121,118,117,118,119,120,120,121,121,122,123,123,124,124,125,125,125,124,123,122,121,122,121,120,122,124,125,126,127,128,131,133,136,138,139,140,140,142,143,142,140,140,141,142,142,142,142,143,145,147,149,152,156,160,162,162,164,165,166,166,168,169,171,173,173,172,170,169,170,171,171,171,169,165,163,161,158,155,153,154,155,153,152,150,148,146,145,143,141,139,137,136,134,132,131,131,131,130,128,125,120,115,113,112,111,109,108,108,108,109,107,103,101,100,100,101,101,100,101,103,104,104,103,101,100,102,104,106,109,110,112,114,117,118,117,118,119,118,116,115,116,115,114,116,118,120,121,120,121,121,121,123,125,127,132,135,136,136,134,132,131,128,124,119,116,114,113,112,110,110,108,105,104,100,97,95,94,93,92,90,89,90,92,93,92,93,93,93,92,91,91,92,94,94,94,94,92,92,92,91,91,91,90,91,92,92,92,91,89,86,84,85,84,83,81,79,77,75,75],[128,128,128,126,125,123,123,123,122,122,123,125,126,127,129,130,131,130,130,128,126,124,121,119,119,120,121,121,122,123,123,123,125,126,124,124,124,125,124,123,121,119,118,118,120,122,123,124,125,126,128,132,135,138,141,142,141,141,143,144,143,142,142,143,143,142,143,144,145,146,147,150,155,158,161,163,164,165,167,168,169,170,172,174,175,173,173,172,170,169,170,171,169,167,163,160,158,155,153,151,151,151,150,150,148,146,144,141,139,137,136,135,131,129,129,129,129,129,128,125,122,119,114,112,110,111,109,109,109,108,108,107,104,102,101,102,101,101,103,104,104,105,104,104,103,102,103,104,107,110,109,109,112,116,117,117,118,117,116,116,116,116,116,114,115,116,118,121,121,123,123,123,124,127,129,133,136,138,137,135,133,131,128,125,121,117,116,116,114,112,112,109,106,104,100,98,97,95,95,94,92,91,92,94,94,93,95,96,95,95,94,94,93,93,93,93,93,91,92,92,92,92,90,89,90,91,91,91,90,88,86,84,83,82,82,81,78,76,75,74],[127,129,129,127,124,123,123,125,126,125,125,128,129,130,131,132,132,129,128,128,128,126,122,120,119,120,121,121,121,121,121,123,124,126,125,125,125,126,126,123,121,119,117,118,120,123,125,126,126,126,128,131,135,139,142,143,144,144,145,145,144,144,144,145,144,144,145,146,146,147,149,152,157,160,162,163,164,166,168,170,171,173,175,175,175,175,175,173,171,170,170,169,167,163,160,158,156,154,153,151,150,150,148,148,147,146,143,139,138,135,134,133,129,127,126,126,126,125,124,122,119,116,114,112,110,110,110,109,109,108,108,107,106,103,102,102,101,102,104,106,105,105,104,104,104,103,103,103,106,108,108,108,111,114,115,116,116,114,113,114,116,115,115,115,115,114,115,118,121,123,124,125,126,129,131,133,135,138,137,134,132,130,128,127,123,120,119,118,117,115,114,112,108,106,102,101,99,97,97,97,95,93,94,95,94,94,96,97,97,97,96,95,93,93,93,93,92,91,92,91,91,90,88,87,89,91,90,89,88,87,85,84,84,83,83,81,77,75,75,76],[125,126,127,127,124,122,124,126,126,126,128,130,131,132,132,132,131,128,128,127,126,125,122,120,120,121,122,122,121,120,120,122,123,123,124,125,125,127,127,124,123,122,120,120,123,125,126,127,126,126,128,130,135,140,143,143,145,146,146,145,146,146,147,147,146,147,147,148,149,149,150,153,157,161,162,164,165,167,169,171,172,174,175,176,176,176,176,174,172,170,168,167,164,160,157,156,154,153,152,150,150,150,148,147,147,146,143,140,138,136,135,132,128,125,123,122,121,120,120,120,117,114,113,113,112,110,109,108,107,108,108,107,105,103,103,104,103,102,103,105,104,104,104,104,104,103,102,102,104,106,107,108,110,113,115,115,114,113,113,114,115,115,117,117,116,115,115,116,119,122,124,126,127,129,131,132,135,137,137,134,133,130,128,128,124,121,120,118,118,117,116,114,111,109,106,104,102,100,99,98,96,95,95,97,97,97,97,96,97,97,97,95,94,93,92,93,92,91,90,88,88,87,86,85,87,89,89,87,88,88,86,84,84,84,83,81,78,75,76,78],[124,124,124,124,123,122,123,126,126,129,132,133,133,134,133,132,131,129,128,126,125,124,123,122,121,122,123,122,120,119,118,120,122,123,123,124,125,126,127,125,124,124,122,123,125,127,127,127,126,127,128,132,136,140,143,145,146,146,147,147,148,149,149,149,149,148,149,151,153,153,154,156,159,161,163,164,165,168,171,172,174,175,175,176,176,176,177,177,174,170,166,165,162,158,155,153,151,151,151,151,150,151,149,148,147,145,143,140,138,136,135,131,127,124,120,118,117,116,116,116,115,114,112,112,112,110,108,107,106,107,107,106,105,103,103,104,103,102,103,104,104,104,103,102,102,102,101,100,102,104,106,108,109,112,113,112,112,113,114,115,116,117,119,119,118,117,116,116,118,121,124,126,128,130,131,133,136,136,136,134,132,130,129,128,125,122,120,119,118,117,117,117,114,111,109,108,105,102,102,98,96,95,96,98,99,99,97,96,96,97,97,96,95,93,91,92,91,91,89,87,86,85,84,85,86,87,89,88,88,89,88,86,85,83,83,82,80,78,78,80],[123,124,124,122,121,121,123,126,128,131,133,136,136,136,134,132,131,131,129,127,125,122,122,123,123,122,122,121,120,120,120,121,122,123,124,124,124,124,125,124,126,126,126,126,127,128,128,128,128,129,131,134,137,140,145,148,148,147,148,149,149,151,151,152,151,150,151,152,154,155,156,159,161,163,164,164,166,169,171,172,175,177,177,176,176,176,178,177,174,169,165,163,160,158,154,151,150,148,149,151,151,151,150,149,148,145,144,142,139,135,133,129,125,122,117,114,114,114,114,114,114,114,113,110,110,108,107,105,105,105,104,103,103,103,103,103,103,103,104,104,104,105,104,102,102,102,101,101,103,103,103,105,106,109,111,110,112,113,115,117,119,120,120,120,120,119,117,116,117,120,123,126,129,132,134,135,136,135,135,134,132,132,129,128,125,123,122,121,121,120,120,120,116,112,110,109,105,102,101,99,97,96,96,97,97,98,97,97,98,99,97,96,95,92,92,91,90,89,88,86,85,84,85,87,86,87,88,88,87,87,87,87,85,83,83,82,81,81,81,81],[125,125,125,124,122,121,123,127,130,132,134,136,136,135,133,131,130,130,130,128,125,123,122,122,123,122,120,120,122,122,122,121,121,124,125,124,123,123,122,124,128,129,128,128,128,128,128,128,129,131,134,136,138,141,146,150,150,150,150,150,152,154,155,153,152,152,152,153,154,157,159,162,164,166,166,167,169,171,172,174,176,177,178,178,177,177,177,176,173,168,165,161,159,158,156,152,149,147,147,148,150,150,151,150,149,146,144,141,138,134,131,127,123,119,115,113,112,112,111,112,113,113,112,110,108,106,105,104,103,103,102,101,101,102,102,103,104,105,105,105,105,107,106,104,103,103,102,102,103,103,102,104,106,109,110,110,113,115,117,120,121,121,120,121,121,121,120,117,118,120,122,125,129,134,137,138,137,136,135,133,134,134,133,130,128,126,125,124,124,123,123,121,117,113,110,108,105,103,100,99,98,96,96,96,95,96,96,98,99,99,97,95,95,93,93,93,92,90,88,87,86,86,87,86,86,87,87,87,87,87,86,87,85,83,82,82,82,82,82,82],[127,126,125,125,123,123,124,127,130,132,134,135,135,135,132,130,130,130,130,128,125,124,121,121,122,122,121,121,122,122,121,120,121,123,124,123,123,122,122,124,127,129,128,128,128,128,128,128,129,131,134,137,140,144,147,150,151,151,151,153,154,156,155,153,153,154,154,156,158,160,161,163,165,167,167,169,170,172,175,176,176,176,178,178,178,179,178,176,172,167,163,161,159,158,155,153,149,147,146,146,148,149,149,147,147,146,143,140,137,132,129,126,123,118,115,113,112,112,111,110,110,110,110,109,107,104,103,102,101,99,100,101,101,101,102,102,104,106,105,105,106,108,107,105,105,104,103,102,103,103,103,104,107,110,111,111,114,116,119,121,121,120,120,120,121,122,121,119,120,123,124,126,131,134,137,139,138,138,137,135,136,136,135,133,131,129,127,126,126,125,124,122,118,115,111,108,106,105,102,99,97,94,96,97,97,96,96,98,98,99,98,97,97,95,94,94,92,91,90,89,88,88,87,85,86,87,88,88,87,88,88,87,86,85,82,83,83,83,84,84],[128,127,126,125,124,124,125,128,130,132,134,135,136,136,133,131,130,130,129,127,124,123,121,119,120,121,120,121,122,123,121,119,119,121,122,122,122,121,122,124,127,129,129,128,129,129,128,128,129,132,135,137,140,144,148,152,152,153,154,156,158,158,157,155,155,156,158,160,163,163,163,164,167,169,169,170,171,173,176,177,177,177,178,179,180,179,178,176,171,166,163,162,160,157,155,153,150,148,146,146,147,146,146,145,144,144,141,139,136,131,127,126,123,119,116,113,111,111,110,109,108,108,109,108,107,105,101,99,98,97,98,100,101,101,101,100,103,106,105,104,106,108,107,106,106,105,103,101,102,103,104,105,107,110,112,113,115,118,120,121,120,120,120,120,119,121,121,121,122,124,125,127,131,135,136,138,138,138,138,139,140,139,138,136,134,133,130,128,128,127,126,123,119,115,112,110,108,105,103,99,97,96,97,99,98,97,97,97,97,99,100,99,98,97,95,95,94,92,91,91,90,90,88,86,86,87,88,88,88,89,89,88,88,85,82,82,83,84,86,87],[130,129,127,125,125,125,125,129,131,134,136,136,137,137,134,132,132,132,131,129,126,123,121,119,119,120,119,120,122,123,121,118,117,119,120,120,120,120,121,124,127,130,129,129,129,129,129,128,130,133,135,137,141,145,149,154,154,154,156,159,160,161,159,158,157,158,161,162,165,165,166,167,169,171,171,171,174,176,177,177,176,177,176,176,177,177,176,175,170,165,163,163,160,158,157,153,150,148,146,146,146,145,145,144,143,142,139,137,133,129,127,126,123,120,116,114,112,110,109,108,108,108,108,106,106,105,101,97,96,95,96,98,98,98,98,98,102,105,104,102,104,106,106,105,106,106,103,101,102,104,105,107,109,111,113,114,117,119,120,122,121,120,119,120,120,121,122,122,123,125,126,128,131,135,137,138,139,138,140,142,142,141,139,138,137,136,132,130,130,129,127,123,120,117,115,113,110,106,104,101,100,99,99,100,98,96,97,98,99,99,100,99,98,97,96,96,95,95,93,93,91,90,90,89,87,87,88,88,89,90,89,87,86,85,83,83,83,84,85,87],[130,128,127,127,127,126,127,131,133,136,139,139,138,137,134,134,134,134,132,130,127,124,122,120,119,118,118,119,121,121,120,119,118,117,117,118,119,119,119,122,125,128,129,129,129,129,129,130,132,133,135,139,143,147,152,156,157,156,158,160,161,162,161,161,161,162,164,165,166,167,167,169,171,174,174,173,176,178,180,179,176,175,174,173,174,175,175,174,169,165,163,161,159,158,157,153,149,148,147,146,146,145,145,145,142,140,139,137,132,128,126,125,123,120,116,114,112,109,108,108,107,106,106,105,103,101,99,96,94,92,92,94,94,93,94,96,99,101,102,100,100,102,102,102,104,104,103,101,103,106,108,109,110,111,113,116,118,119,121,121,121,121,120,121,121,121,122,123,122,124,126,128,131,134,137,139,140,140,143,143,142,140,139,138,137,136,133,131,132,131,127,123,121,120,119,115,111,108,106,104,102,102,102,101,100,98,97,99,101,101,101,99,97,95,95,94,93,93,94,93,92,90,90,90,88,87,88,87,88,89,89,88,86,86,86,86,85,85,85,87],[131,130,130,130,130,129,130,134,136,138,140,140,139,138,136,135,134,133,133,130,126,123,121,121,118,117,116,117,118,117,118,117,116,115,117,117,117,118,117,118,122,125,127,128,128,130,131,132,133,133,137,141,145,149,153,157,158,159,161,162,163,163,162,163,163,164,166,165,166,167,166,168,172,175,175,175,177,179,180,179,177,174,173,172,174,174,174,172,168,165,162,159,158,158,155,152,149,148,147,146,146,146,145,146,143,139,138,137,132,127,125,123,121,120,116,113,111,109,108,107,104,102,102,101,99,97,97,95,92,89,90,92,91,91,91,93,96,96,98,99,99,101,100,100,101,102,102,102,104,107,110,112,113,114,115,117,118,118,119,119,119,119,118,119,120,120,121,121,121,122,125,128,130,132,136,139,141,142,143,143,143,141,140,139,138,136,133,131,132,131,129,126,124,123,121,118,115,112,108,107,106,106,105,103,102,101,99,100,101,100,100,99,96,93,92,92,92,93,93,94,92,91,91,91,89,88,87,87,89,90,91,91,89,88,87,87,86,85,85,87],[133,132,133,133,133,133,135,138,141,141,140,139,138,138,137,136,134,134,134,130,126,123,120,120,118,117,115,114,114,114,116,116,114,115,116,116,116,116,116,117,118,122,125,126,127,130,131,133,135,135,137,142,147,151,154,157,159,161,163,165,165,164,163,164,165,167,167,166,165,165,165,167,171,173,175,177,178,178,178,177,174,172,171,172,173,172,171,169,167,163,160,158,157,156,154,150,148,147,147,146,146,145,146,145,143,139,137,136,132,128,125,121,120,119,116,113,111,109,108,105,101,99,97,96,95,94,95,93,89,87,87,88,88,89,90,91,93,94,95,96,98,99,97,97,99,101,102,103,105,109,113,114,116,117,118,118,118,118,119,118,118,116,115,117,118,119,119,119,118,121,124,127,130,132,135,139,141,143,144,143,143,142,140,139,137,136,134,132,132,132,130,129,127,125,123,121,118,115,112,111,110,110,108,106,104,102,101,101,101,101,100,99,95,92,90,89,90,91,93,94,93,92,91,91,89,88,87,88,90,90,91,93,93,90,88,88,88,87,87,86],[135,133,134,135,136,138,139,141,142,141,141,139,138,137,136,136,134,133,132,129,126,123,120,119,118,117,114,113,113,114,114,114,113,113,113,114,115,116,115,117,118,121,124,126,128,131,133,134,135,136,138,141,147,152,155,159,161,163,166,168,167,167,168,168,168,169,168,167,166,164,164,167,169,171,174,177,177,177,177,175,172,170,170,172,171,171,169,166,164,161,160,158,156,156,153,150,148,147,147,147,146,145,144,143,142,139,137,135,131,127,124,121,121,120,116,113,110,108,106,103,99,97,95,93,92,92,91,89,87,86,86,86,87,87,88,88,89,91,92,93,95,97,96,95,97,99,100,103,106,110,113,116,118,120,119,117,117,117,117,117,116,114,113,114,115,116,117,117,118,121,124,128,130,133,136,139,142,144,145,143,144,143,141,140,139,137,136,134,134,133,131,130,127,125,125,123,120,117,116,115,114,114,113,110,108,104,103,102,101,101,100,98,95,92,90,88,88,88,90,92,93,93,92,91,90,88,88,89,89,90,92,93,93,93,91,91,90,88,87,86],[137,136,136,136,139,141,142,143,143,142,141,140,140,138,137,137,135,133,132,130,127,123,120,117,117,116,113,112,113,113,113,113,111,110,110,112,114,115,115,117,118,120,122,125,128,132,134,135,136,137,139,142,147,152,155,159,163,166,169,169,169,170,171,170,168,168,167,166,165,163,163,166,168,170,173,175,175,175,175,172,170,168,168,168,169,168,165,163,161,160,159,157,156,154,152,149,147,147,148,148,146,143,141,141,140,138,137,134,129,126,123,122,121,119,116,113,110,108,105,103,98,95,93,92,92,90,88,87,87,85,84,84,85,86,86,87,87,88,89,90,92,95,96,95,97,99,101,103,107,111,113,116,120,122,121,118,117,117,116,115,113,111,110,111,113,114,115,116,118,123,127,130,131,133,136,140,144,145,146,146,146,145,143,142,141,139,137,136,135,133,131,129,127,126,125,124,122,120,120,120,119,118,116,113,109,106,105,104,103,101,100,98,95,91,90,89,88,87,88,90,92,93,93,92,92,91,90,91,91,92,93,93,93,94,93,92,91,90,88,87],[140,140,139,138,140,142,144,144,144,143,141,141,140,139,139,139,137,134,133,131,127,123,119,116,116,115,113,111,112,112,112,112,109,109,109,110,113,114,114,116,118,120,122,124,127,131,134,136,136,138,139,142,148,154,156,160,164,167,169,170,171,172,171,170,168,167,166,164,163,161,161,165,167,168,171,172,171,171,171,169,168,167,165,164,164,165,162,160,160,160,158,155,154,151,151,149,147,146,146,145,143,140,139,140,138,137,136,133,129,125,122,121,119,116,115,111,108,106,104,101,97,94,93,93,92,90,88,85,84,83,82,80,82,84,85,86,87,87,88,89,91,93,95,96,99,102,103,105,108,113,114,115,119,121,121,119,118,118,115,113,111,109,108,109,112,114,115,116,120,124,127,129,131,133,136,140,143,145,147,148,147,146,145,144,142,140,139,137,136,133,132,131,129,129,127,125,124,122,122,122,121,119,118,115,112,109,107,107,105,102,102,100,96,92,91,90,89,88,88,90,91,92,93,93,93,93,92,93,93,94,94,94,95,95,94,94,92,91,92,90],[144,142,141,141,142,144,146,145,144,144,143,143,141,141,141,140,138,136,135,131,126,123,120,117,115,114,112,112,112,111,110,110,109,108,108,109,112,112,113,115,118,121,122,123,125,130,134,135,136,138,140,144,149,154,158,161,164,168,170,170,172,172,171,169,166,165,164,162,160,158,159,162,164,166,168,167,168,168,168,167,167,164,162,160,160,161,160,159,157,156,154,153,152,151,151,149,147,146,144,143,141,139,139,138,137,136,134,132,129,125,121,119,118,115,112,108,106,104,102,100,97,94,94,93,92,91,88,84,82,80,79,78,80,81,83,85,86,87,88,88,91,92,94,98,102,104,105,107,110,113,115,117,120,121,121,119,118,117,114,111,108,106,106,108,111,114,116,118,122,125,127,129,132,133,136,140,143,146,147,149,149,149,147,144,142,142,140,137,135,134,133,132,131,130,128,127,127,125,124,123,122,122,121,117,113,110,108,108,106,104,103,100,97,93,92,91,91,90,89,89,90,92,94,94,94,94,93,94,95,96,96,96,97,97,97,94,94,95,96,94],[145,144,144,145,145,144,146,146,145,143,143,144,142,141,141,140,139,137,135,132,128,124,121,119,116,113,113,113,112,110,110,108,107,108,108,110,112,112,114,116,118,120,121,122,125,129,133,136,137,138,141,145,149,152,157,162,166,168,169,169,171,171,171,169,165,163,160,158,157,156,158,159,162,164,163,162,163,165,165,165,164,161,159,158,158,157,156,156,154,153,152,152,151,151,151,148,147,146,144,142,140,139,138,137,137,136,133,130,128,125,121,118,117,116,111,106,104,102,100,98,96,95,94,93,93,91,88,85,81,78,76,75,77,78,82,85,86,87,87,88,91,94,98,101,103,105,107,109,111,113,116,119,121,121,120,118,116,114,113,111,107,105,106,108,111,114,116,118,121,125,129,132,133,134,137,140,143,146,148,148,149,150,147,145,144,143,140,137,136,136,136,134,133,131,129,129,129,129,127,124,124,124,121,117,114,111,108,107,106,105,103,99,97,95,93,92,93,92,92,91,91,93,94,95,95,95,95,95,95,96,96,97,98,98,98,96,98,99,98,97],[147,146,148,148,147,146,146,147,146,143,141,142,141,139,139,139,139,137,134,133,130,125,122,121,118,115,114,114,113,111,111,108,106,108,109,110,112,114,115,115,118,120,122,124,126,130,133,135,136,138,141,145,148,152,156,160,164,166,166,167,169,171,171,168,164,161,158,156,156,155,156,157,158,158,158,159,160,162,163,162,160,158,157,155,154,154,153,153,151,149,149,150,150,151,150,148,146,145,143,142,140,139,138,138,138,135,131,129,126,124,121,118,117,115,111,107,104,101,99,97,95,96,96,95,93,91,88,86,83,78,74,74,76,79,82,84,85,86,86,89,93,97,100,101,103,105,107,110,112,113,115,119,120,120,118,116,114,112,111,110,106,104,104,106,110,113,116,118,121,125,130,132,134,136,138,140,143,146,148,149,148,148,147,146,145,144,141,139,139,139,138,136,135,132,130,130,131,131,130,127,125,124,121,118,116,112,109,106,105,105,104,101,97,95,94,93,95,95,95,95,95,95,94,95,96,96,95,95,95,96,97,99,99,98,99,100,102,102,100,100],[150,149,150,150,148,147,147,147,145,143,141,140,139,137,138,138,136,136,134,133,130,126,125,123,120,116,114,114,113,111,110,108,107,108,108,108,111,114,114,116,119,121,122,125,126,130,133,134,136,139,141,144,147,151,153,156,161,163,164,165,166,168,167,166,163,160,157,154,155,154,154,155,154,154,156,159,160,160,161,160,158,155,153,151,151,150,149,148,147,145,145,147,147,148,148,145,144,143,142,142,141,140,140,140,138,134,132,130,127,124,121,117,116,114,110,108,105,102,100,98,97,98,98,96,94,91,89,88,83,79,76,76,77,79,80,81,82,83,85,87,91,96,100,100,102,104,107,111,113,115,115,118,119,119,118,115,114,111,111,110,107,105,104,106,109,112,116,119,122,126,130,133,136,138,139,141,144,146,148,150,149,148,147,145,145,142,140,140,140,140,140,138,135,132,131,131,132,131,131,129,127,126,124,119,116,112,108,106,105,105,104,103,99,97,95,95,96,98,98,97,97,97,97,96,97,96,96,96,96,96,98,100,100,99,100,102,103,103,104,103],[152,152,152,151,149,148,148,147,144,142,140,138,137,137,139,137,136,135,135,134,130,127,126,125,121,116,114,114,113,110,108,108,107,107,107,107,109,112,114,116,120,121,123,126,127,130,132,134,135,138,140,143,146,148,150,153,157,159,161,161,162,164,164,164,162,159,156,154,154,154,153,153,152,152,155,158,159,159,159,159,156,153,150,148,147,146,145,144,144,143,143,144,144,146,145,143,141,141,142,143,142,141,142,142,139,135,133,131,127,124,121,117,115,112,110,108,106,103,100,99,100,101,100,97,94,92,91,89,84,80,78,77,78,79,80,79,79,81,83,85,89,94,98,100,102,105,109,112,115,116,115,117,118,118,117,115,112,110,111,110,108,107,106,107,109,111,115,119,122,126,130,134,137,137,139,142,144,147,149,151,150,148,147,145,144,141,139,139,139,140,140,138,136,135,133,133,133,133,132,131,130,127,125,121,116,112,108,106,106,105,104,103,101,99,98,98,98,100,101,100,99,99,100,99,98,98,98,98,98,97,99,101,102,101,100,102,104,105,105,105],[152,153,152,151,150,147,146,145,144,142,140,138,138,138,138,137,136,134,133,133,130,127,125,124,120,117,116,115,112,110,109,108,106,105,106,108,109,112,114,117,121,122,125,127,127,129,131,133,134,137,140,143,145,145,148,152,153,155,158,159,159,160,161,162,160,158,157,155,153,151,149,150,149,151,153,155,155,155,156,157,154,150,148,145,144,143,140,139,140,140,141,142,143,145,143,141,141,140,142,143,143,143,144,144,140,136,133,130,127,123,118,115,113,111,111,108,106,105,101,99,100,102,101,98,95,93,90,88,84,80,78,77,80,80,79,78,78,79,82,85,89,94,97,100,103,106,110,112,115,116,117,118,118,115,115,114,111,109,110,109,108,108,107,109,111,112,116,120,122,126,131,135,135,135,138,142,144,146,148,149,149,149,148,146,143,140,138,138,139,141,141,139,138,137,136,136,137,137,136,133,131,128,126,123,118,114,110,107,106,105,104,103,101,100,100,102,103,103,103,103,103,103,103,101,100,100,99,99,99,99,100,101,101,103,102,103,105,107,107,107],[150,150,151,150,149,146,144,143,142,142,140,140,140,140,139,137,136,133,131,130,129,127,124,122,120,119,119,116,113,110,109,108,105,103,105,107,110,112,115,117,120,123,126,126,126,127,129,132,135,139,141,143,144,145,147,150,153,155,158,158,158,158,159,159,157,157,157,154,151,148,145,146,147,148,151,152,151,151,153,153,150,148,147,145,143,140,138,136,137,138,140,140,142,143,141,140,140,141,142,143,144,145,146,145,141,137,134,131,127,121,117,115,113,112,110,108,105,103,100,99,100,101,100,98,95,92,89,86,83,80,78,78,80,80,78,78,78,80,84,88,91,93,95,99,104,108,111,112,114,116,119,120,118,116,114,113,110,109,110,109,108,108,109,112,113,115,116,119,123,127,131,133,133,134,136,139,143,145,146,148,149,150,149,147,144,139,137,137,139,140,141,141,141,140,138,138,139,139,138,135,132,129,128,125,120,116,112,109,107,105,104,104,103,102,102,104,106,106,105,104,105,105,105,103,102,101,99,99,100,100,101,101,100,102,103,105,106,107,108,110],[148,147,149,149,148,147,144,143,143,144,143,142,142,142,140,138,136,133,131,129,128,127,125,121,121,120,119,116,113,110,108,108,104,103,103,105,108,110,112,115,119,123,125,125,126,126,128,131,135,139,141,141,143,145,147,149,152,155,157,158,157,156,156,156,156,156,154,152,149,146,143,143,143,145,147,147,147,146,148,149,148,147,144,143,140,137,136,136,136,137,137,137,140,141,140,140,141,142,143,144,145,147,147,146,142,137,134,132,127,121,118,116,115,115,112,108,105,101,99,98,98,99,99,97,94,91,89,87,84,81,78,77,79,80,80,80,80,81,85,88,90,92,95,99,104,109,112,114,115,116,119,121,119,116,114,113,111,109,110,110,109,109,110,112,113,115,115,118,122,127,130,131,132,133,133,135,140,143,144,145,147,149,148,145,142,139,136,137,138,138,140,140,140,139,137,137,138,140,138,135,133,130,128,126,121,117,114,111,109,107,107,107,106,106,105,106,107,107,106,105,105,106,105,103,102,101,99,99,99,99,101,102,102,104,105,108,109,109,110,112],[145,145,147,148,147,146,143,143,143,144,144,143,144,143,140,137,134,132,130,128,127,126,124,122,122,122,119,115,113,110,108,107,105,102,102,104,107,109,111,114,117,121,123,125,126,127,128,131,134,138,140,140,142,145,147,149,152,154,156,156,156,155,153,154,155,154,152,149,147,144,142,141,141,142,143,143,142,142,144,146,145,144,143,142,139,136,134,135,136,136,135,135,137,138,139,140,142,143,143,144,146,147,148,146,142,137,135,133,128,122,119,118,117,116,113,109,105,102,99,98,98,98,97,96,93,90,90,89,87,83,79,77,79,81,82,81,82,83,85,87,89,92,96,98,102,108,112,114,116,117,119,120,120,117,115,113,112,110,110,110,110,110,111,111,112,114,115,117,121,125,128,128,129,131,131,133,137,140,143,144,146,148,147,144,140,138,136,136,137,139,141,139,138,138,136,136,137,138,138,136,134,131,128,128,123,119,117,114,113,110,108,109,109,109,108,107,107,107,106,105,106,107,106,104,103,102,101,100,99,99,102,104,105,105,107,109,110,111,112,114],[142,143,145,147,145,143,142,143,143,144,144,142,143,143,140,138,135,133,130,128,127,126,126,124,123,122,118,114,113,112,109,107,105,103,103,105,107,110,111,113,115,119,123,125,125,126,129,131,134,137,138,140,141,143,145,148,151,154,153,152,152,153,152,152,151,150,148,145,144,142,140,140,139,141,141,140,140,141,142,143,142,140,140,139,137,135,134,135,135,135,133,133,135,136,137,138,141,143,145,146,147,147,147,145,141,136,134,132,127,122,120,120,117,115,113,109,107,104,101,100,99,99,99,97,93,90,90,90,88,86,81,78,80,82,82,81,83,86,87,89,91,94,95,98,104,108,111,115,116,119,120,120,120,119,116,114,113,112,111,111,111,111,111,110,112,115,116,118,122,125,126,127,127,129,130,133,137,140,141,142,143,146,145,143,140,137,135,134,135,138,139,139,139,138,137,137,137,136,137,136,133,131,129,129,125,122,119,116,114,112,112,112,111,111,109,108,109,108,107,107,107,108,108,106,105,103,102,102,101,101,104,106,106,106,107,108,110,112,112,114],[139,141,143,144,144,143,141,143,144,145,144,142,142,142,141,138,136,134,131,129,129,128,128,126,124,121,117,114,113,112,111,109,107,105,105,106,109,111,111,112,115,119,123,124,124,125,128,129,132,133,136,138,139,140,142,146,149,151,149,149,150,151,152,150,148,147,144,142,142,141,140,138,138,139,140,139,139,138,138,139,139,136,136,137,135,133,134,134,133,132,131,131,133,135,136,137,139,143,145,146,146,146,145,144,140,136,134,131,126,123,122,121,118,115,113,112,109,106,104,103,102,102,102,99,94,91,91,90,89,87,83,81,81,81,81,81,84,86,88,90,93,95,97,100,105,109,111,114,117,119,120,119,119,118,116,113,112,111,111,111,111,112,111,111,114,116,118,119,122,124,125,127,128,129,131,134,137,139,140,139,140,142,142,140,139,137,135,134,135,136,138,139,139,137,136,137,137,136,136,135,133,130,128,128,126,124,120,116,114,112,113,113,112,111,110,110,111,110,109,109,110,110,111,110,108,106,106,105,105,104,105,107,107,107,107,108,109,112,114,116],[138,140,142,142,142,142,141,141,144,145,144,143,143,143,140,137,136,134,131,129,128,129,128,125,123,120,118,117,115,113,113,111,109,108,106,107,110,113,112,112,115,118,120,122,122,124,126,127,129,130,132,135,137,139,142,144,146,147,147,147,148,150,150,148,146,145,142,141,141,139,139,137,138,139,139,138,136,136,136,136,135,133,134,134,132,130,130,131,129,128,128,129,132,134,135,136,139,143,145,145,146,146,145,144,141,137,136,133,129,125,123,122,119,115,114,114,111,109,107,106,105,104,103,101,97,94,93,92,90,88,84,83,82,82,81,82,83,86,89,91,93,95,97,101,105,109,111,113,115,117,118,117,118,117,115,112,110,110,109,109,110,111,110,111,113,115,116,117,120,123,125,127,129,129,131,132,135,137,137,137,138,139,138,136,135,135,135,136,135,135,137,139,137,135,135,137,136,137,137,136,134,131,129,128,126,124,121,117,114,112,113,113,112,111,112,113,113,113,112,112,113,113,114,114,112,111,110,110,109,109,109,108,107,106,107,108,111,113,115,118],[138,139,140,140,140,141,140,141,144,144,143,143,144,143,139,136,135,134,131,128,128,129,127,123,121,120,119,119,117,116,115,112,110,110,109,109,111,112,112,113,115,117,118,120,121,123,125,126,127,128,129,133,136,138,141,142,143,144,144,145,146,147,147,145,144,142,140,141,140,139,138,138,138,139,139,137,134,133,134,134,133,131,130,129,127,127,128,129,127,125,125,128,131,133,134,136,138,142,145,146,146,146,145,144,142,139,138,136,132,128,125,123,120,118,116,115,113,110,108,108,107,106,104,102,100,97,95,93,90,88,85,84,84,83,82,81,82,86,91,92,94,95,97,100,106,110,111,112,115,117,117,116,116,115,113,111,110,110,110,109,109,109,109,110,112,114,115,115,118,122,125,128,129,130,130,131,132,133,133,134,135,135,133,132,132,132,133,135,136,136,136,136,135,134,135,137,136,136,137,137,134,132,130,128,126,124,121,118,114,111,112,112,111,111,112,114,115,115,115,115,116,117,118,118,116,114,114,114,114,113,111,110,107,106,107,109,112,114,116,118],[135,137,138,139,139,141,140,141,143,144,144,144,143,141,138,135,133,132,130,127,127,128,126,122,121,119,119,119,117,116,115,113,113,113,112,112,112,112,112,113,114,116,116,116,118,121,123,124,124,126,128,131,134,136,139,141,142,143,143,144,145,145,145,144,143,141,140,140,139,138,139,139,138,137,137,136,134,132,132,131,130,129,126,124,125,126,127,128,127,125,126,129,131,133,134,136,138,140,144,146,145,145,145,144,142,139,139,137,133,129,126,123,120,119,117,116,114,112,111,111,110,109,107,103,102,100,99,97,94,92,89,88,86,83,83,82,83,86,90,93,96,98,98,100,104,108,110,110,113,114,113,113,114,115,113,112,111,110,110,109,108,108,109,109,111,112,113,114,117,120,124,129,129,129,129,131,132,132,132,133,132,131,131,131,130,130,132,134,135,136,136,135,134,133,134,136,136,135,136,137,135,133,130,128,127,124,122,119,114,111,111,112,112,112,112,114,115,116,117,118,120,121,121,121,119,117,116,116,116,114,113,111,108,107,108,110,113,116,117,117],[132,134,135,137,139,141,141,141,142,143,143,143,140,138,137,134,131,129,127,126,126,126,124,123,123,120,118,118,117,116,114,114,115,115,114,114,113,112,112,112,113,113,114,115,116,120,122,122,123,126,128,130,132,135,138,142,143,144,143,143,143,144,144,143,144,143,141,139,138,138,139,139,139,138,137,136,134,132,130,128,127,125,123,122,123,125,126,127,127,126,127,129,132,134,134,135,138,141,144,145,146,145,144,143,142,140,139,137,134,130,126,123,121,119,118,117,116,113,113,113,113,111,109,105,104,103,103,101,98,95,93,91,87,85,85,85,85,86,88,93,97,98,98,100,103,107,110,111,111,112,111,112,114,115,113,112,112,111,110,109,107,107,107,108,108,108,109,112,116,118,121,126,126,126,126,129,131,131,131,130,129,130,130,128,128,128,130,132,133,134,134,135,134,134,135,136,135,134,135,136,135,134,131,129,127,125,123,120,116,112,111,111,111,111,111,113,115,118,120,120,121,123,124,124,121,119,117,117,117,116,114,111,109,109,109,110,112,115,116,116],[130,132,134,135,136,138,138,138,140,140,140,139,137,135,134,133,130,127,126,125,124,124,123,122,122,120,120,119,118,118,115,115,115,115,116,115,113,111,110,110,111,111,113,115,118,122,123,123,124,126,127,129,133,136,139,142,143,143,143,142,144,145,143,141,142,142,140,138,139,140,141,140,139,139,137,135,133,131,128,125,124,122,121,122,122,124,126,127,126,126,127,129,132,135,136,137,141,144,144,145,146,146,145,144,142,140,139,136,133,131,127,125,122,120,119,118,116,114,113,114,113,112,110,107,107,107,106,105,100,96,95,93,90,87,86,86,86,87,89,92,94,96,97,100,103,106,109,111,110,110,111,112,114,115,113,110,110,110,110,109,106,106,105,106,105,105,107,110,113,115,119,123,123,124,124,126,129,129,128,127,127,128,127,125,125,127,127,128,131,132,134,136,135,135,136,135,135,134,133,134,133,132,130,128,127,125,123,119,115,111,110,110,110,110,111,112,115,118,119,119,122,124,125,126,123,121,118,117,117,117,114,110,110,110,109,108,111,113,114,115],[128,130,132,131,132,134,135,136,137,138,137,136,134,133,133,132,129,125,124,123,121,121,121,121,120,120,120,119,118,117,116,116,116,116,117,116,113,111,109,108,109,110,113,116,120,123,123,123,124,126,128,130,133,135,138,142,144,144,144,144,145,145,143,141,141,141,140,139,140,141,141,140,138,137,136,135,133,130,126,123,122,120,120,121,121,124,125,125,126,127,128,131,134,137,138,140,144,145,145,145,147,146,146,144,142,140,138,135,132,131,128,126,123,121,120,118,116,114,114,113,113,113,113,110,109,108,107,105,102,99,97,96,93,90,89,87,87,88,88,91,93,95,98,100,102,105,108,109,109,109,109,111,113,113,112,109,109,108,109,107,104,103,103,104,103,103,105,108,110,112,116,119,120,121,122,124,126,126,126,125,124,125,124,124,124,124,124,127,129,131,134,136,135,135,136,136,136,134,133,133,132,131,129,128,126,125,123,120,115,110,108,109,110,111,111,112,114,117,118,120,122,123,125,125,124,122,119,117,116,116,113,110,109,110,109,108,110,112,113,113],[125,126,127,128,131,133,135,136,137,136,135,133,132,132,132,131,127,123,122,121,119,117,118,119,120,121,119,118,117,115,116,115,115,115,115,115,114,113,111,109,110,111,113,116,119,122,122,123,123,124,127,130,132,134,138,142,144,145,144,144,144,144,144,143,141,140,139,140,140,139,140,139,138,136,136,134,131,129,124,121,119,118,118,119,120,122,122,123,126,128,130,132,134,137,139,141,143,145,146,147,147,146,146,144,142,140,137,135,134,133,130,126,125,123,121,119,117,116,115,113,114,114,113,111,110,109,108,106,104,101,99,97,95,93,91,88,88,89,89,91,93,94,96,98,101,105,107,108,107,107,109,111,113,112,111,109,107,105,104,103,101,100,101,102,102,102,103,105,107,111,113,115,117,118,120,123,124,124,124,124,123,122,121,121,121,121,123,125,126,127,131,133,133,134,135,137,137,135,135,134,132,131,129,129,127,126,124,121,116,112,110,109,109,110,111,112,114,117,119,121,122,123,125,125,124,122,120,118,116,115,112,110,109,109,108,108,109,110,110,110],[123,123,124,127,132,134,135,136,135,134,132,130,130,131,130,127,124,121,119,119,116,114,115,116,119,120,119,117,116,115,116,115,114,113,112,113,114,114,114,112,111,111,113,115,118,121,122,122,122,123,125,128,129,132,136,139,141,143,142,142,143,144,144,143,141,138,136,137,138,138,138,137,136,136,135,133,129,126,122,120,118,117,118,118,119,120,121,123,127,130,133,133,133,136,138,140,142,145,148,149,148,147,148,146,142,138,136,135,135,134,130,127,126,122,120,119,117,116,115,114,115,114,113,111,109,108,108,107,105,102,100,99,96,96,94,91,90,90,90,91,93,94,96,97,100,103,106,106,105,106,107,109,110,110,109,107,105,101,99,99,99,99,100,100,100,100,102,104,105,109,112,113,115,116,118,121,122,122,122,121,120,119,117,117,119,120,121,122,123,126,128,130,132,132,133,136,137,137,136,134,132,131,129,128,127,126,126,121,116,112,110,109,109,110,111,112,114,115,118,121,122,121,122,123,123,122,120,120,118,116,114,112,110,109,109,109,109,109,109,110],[122,123,125,128,131,133,134,133,132,131,128,126,127,128,127,123,121,119,118,119,116,115,114,113,116,117,117,116,115,116,116,115,114,112,111,112,113,113,114,114,113,113,115,116,118,119,120,121,122,123,125,128,128,130,133,135,138,139,139,139,141,143,143,140,139,137,134,134,135,135,134,134,133,133,133,131,128,125,122,121,120,118,119,118,118,118,119,123,126,129,133,134,134,136,138,141,143,146,148,151,150,149,149,149,144,139,137,135,135,134,130,127,125,122,121,118,117,115,115,114,113,113,113,111,109,107,106,106,105,103,101,101,100,99,97,94,93,92,92,93,94,96,96,98,100,103,105,105,104,104,103,103,104,105,104,103,102,99,98,97,97,98,98,98,97,98,101,103,104,106,109,110,112,113,115,117,118,118,117,116,116,116,114,114,116,119,119,120,122,125,127,128,130,131,132,135,136,138,137,135,134,132,129,128,127,126,124,121,117,112,111,111,110,111,112,112,113,114,116,118,119,119,119,121,121,121,121,121,119,116,115,114,111,110,111,112,110,110,110,110],[122,123,126,129,130,132,132,131,129,126,124,123,124,124,123,121,119,118,118,118,117,115,114,114,115,114,115,115,114,115,115,114,113,111,111,111,111,111,114,114,114,114,116,118,119,119,119,121,122,123,124,127,128,129,130,132,134,135,137,138,139,140,140,137,136,134,132,131,132,132,130,130,131,131,131,129,127,124,123,122,120,119,119,119,118,117,118,122,125,129,132,134,135,135,138,141,144,147,149,151,152,152,151,149,145,141,138,136,134,133,131,127,125,124,123,120,116,115,114,112,112,112,111,110,108,106,105,105,105,103,102,103,102,100,99,98,97,95,94,94,95,97,97,99,101,103,105,105,104,102,100,100,100,100,100,99,97,95,95,96,96,96,95,96,96,97,100,101,102,104,106,107,109,111,112,113,113,113,113,113,114,112,111,112,114,117,119,119,122,125,127,128,129,130,132,134,135,137,137,136,134,132,129,127,126,125,123,120,116,113,112,112,111,112,111,112,113,113,114,115,115,115,116,118,119,120,122,122,119,118,116,115,113,112,112,112,111,110,111,111],[119,121,124,128,130,131,131,130,126,123,122,122,122,121,121,119,118,118,117,118,117,116,115,115,113,113,114,115,115,115,115,113,112,111,111,112,112,112,114,115,115,116,118,119,119,119,119,120,121,122,124,126,127,128,129,130,131,132,135,138,138,139,138,135,134,134,131,130,130,130,129,128,128,130,130,129,127,124,123,122,121,120,119,118,117,117,119,123,126,130,132,134,134,134,137,140,143,147,149,151,152,153,151,148,146,143,139,138,135,134,131,127,127,125,123,122,119,116,114,111,111,111,110,108,107,106,104,103,104,105,104,103,102,101,102,102,100,98,96,94,95,97,97,99,100,101,104,104,102,99,98,98,97,96,97,96,94,93,92,94,94,95,95,94,95,95,97,98,100,103,104,105,106,108,109,110,111,112,112,112,111,109,110,111,113,116,119,120,123,125,126,127,128,129,132,136,137,138,138,136,133,131,128,126,125,125,122,119,117,115,113,112,112,113,112,110,110,111,111,112,112,112,113,116,118,121,121,121,121,120,119,117,115,113,112,112,111,110,111,112],[116,118,120,124,127,129,130,128,125,123,121,121,121,120,119,117,117,118,117,116,116,116,116,114,113,112,112,114,114,115,114,112,112,112,111,111,112,112,114,114,115,117,119,119,119,119,119,119,120,122,123,125,126,128,129,129,130,131,133,135,136,138,137,135,134,134,132,130,129,130,128,127,127,128,128,129,127,124,122,121,121,120,119,118,117,117,120,123,128,130,131,132,133,134,137,139,142,145,148,150,152,152,150,148,147,144,141,139,137,134,132,131,130,127,124,123,121,118,114,112,113,111,109,107,106,106,103,102,104,105,105,105,103,102,103,103,102,100,99,98,97,99,98,98,100,102,103,102,99,97,95,96,96,96,96,94,93,92,91,91,92,94,94,93,94,94,95,96,99,102,103,103,104,106,107,108,110,111,112,112,110,109,110,112,113,116,120,122,123,124,124,126,128,129,132,136,138,138,138,136,134,132,129,127,127,126,122,120,119,117,115,113,113,113,112,110,109,109,110,110,111,111,112,115,118,120,121,121,121,120,120,118,115,112,111,112,112,111,110,112],[112,114,117,120,122,124,126,124,122,121,118,117,118,118,116,115,116,117,114,113,113,115,115,113,113,113,112,113,114,114,113,110,111,112,110,109,110,112,113,114,115,117,118,118,119,120,119,119,122,123,124,125,126,128,128,129,131,132,132,133,134,136,134,133,133,132,131,129,129,129,128,127,128,128,129,129,126,123,122,121,120,120,119,120,118,118,119,121,126,129,131,131,132,134,137,139,142,145,148,151,152,152,150,147,146,144,142,140,137,134,134,134,131,128,126,123,121,118,115,113,113,111,110,108,107,107,104,103,104,105,106,106,105,103,103,103,102,100,100,101,101,102,101,100,101,103,102,99,98,95,93,94,94,95,95,93,93,93,90,88,90,92,91,90,92,93,93,95,98,101,101,102,103,104,105,105,109,111,112,112,110,109,110,113,115,118,120,122,123,123,125,127,130,132,133,136,138,138,139,138,135,133,130,128,128,127,124,121,120,118,116,113,112,112,113,112,109,108,109,109,109,109,109,113,115,117,120,121,121,121,121,119,116,113,113,114,113,112,112,112],[108,111,114,116,117,120,122,122,120,118,116,115,115,115,115,115,115,114,112,111,111,112,113,113,113,112,112,113,113,114,113,110,110,109,108,108,110,111,112,113,114,116,118,118,119,120,121,122,123,124,125,125,126,126,127,130,132,131,130,130,131,133,133,133,132,131,130,128,128,127,127,129,129,129,129,127,125,123,121,120,120,119,119,119,118,119,119,121,125,128,131,131,131,133,136,140,143,145,148,151,151,152,150,148,147,144,142,140,137,136,135,134,132,131,128,123,120,118,117,115,113,113,112,109,107,107,106,104,104,106,108,107,106,105,104,104,104,103,102,103,105,105,104,103,103,103,102,99,97,93,91,92,92,94,95,94,94,92,89,88,88,89,90,90,90,90,92,94,96,99,101,102,102,103,103,104,107,109,111,111,109,109,110,113,115,118,120,122,123,124,126,129,132,133,134,136,138,139,140,138,136,134,132,130,129,128,125,123,121,119,116,113,111,112,113,111,108,107,108,107,107,106,107,110,113,116,119,121,122,122,121,119,117,115,114,114,113,114,114,112],[105,107,110,113,115,117,119,119,118,116,115,115,114,114,114,115,113,111,109,109,109,109,112,113,112,111,111,112,112,113,112,111,110,107,107,108,109,109,111,113,114,115,117,119,120,120,123,125,125,125,126,125,125,126,128,130,130,130,130,130,130,131,131,133,132,131,129,126,126,125,126,128,128,128,129,127,126,125,122,120,119,118,117,117,118,120,121,123,126,128,130,131,133,135,138,141,143,144,148,150,151,151,149,149,148,146,144,140,138,138,136,135,134,132,127,124,122,120,118,117,114,113,111,109,108,107,104,104,104,105,107,107,107,107,106,105,106,106,105,104,106,107,106,106,104,102,101,99,96,93,92,91,92,94,95,95,94,91,89,89,88,88,89,90,89,88,91,94,96,98,100,101,101,102,103,105,106,107,109,109,108,109,110,112,115,117,119,122,124,125,127,129,132,134,136,138,138,140,140,139,138,137,134,132,130,127,126,125,122,119,115,113,111,111,111,108,107,106,106,106,107,107,107,108,111,116,118,119,120,121,120,119,118,116,116,116,115,115,113,112],[102,104,107,111,113,114,115,116,115,114,113,113,113,114,114,114,111,109,108,109,109,110,112,112,112,111,112,113,112,113,113,112,110,108,107,108,108,109,111,113,114,115,117,119,121,122,124,126,126,125,126,126,126,126,127,129,129,129,130,130,130,131,130,131,130,130,128,125,125,125,125,125,125,127,129,127,127,126,124,122,120,118,116,117,118,120,122,125,128,129,130,132,133,135,138,140,142,144,147,148,148,148,147,148,147,147,145,142,141,140,139,137,135,131,126,123,123,121,118,116,114,112,111,110,109,106,105,106,106,105,106,108,107,106,107,107,108,108,107,106,106,107,108,106,103,100,98,97,96,95,94,93,92,94,96,96,94,91,90,89,89,90,90,90,89,88,90,93,96,97,99,99,99,100,103,105,106,107,109,110,110,110,111,113,114,116,118,120,123,125,125,127,130,134,137,138,138,139,139,138,138,137,135,132,130,127,125,124,122,118,114,112,112,111,110,108,106,104,104,105,107,107,107,107,110,115,117,118,119,120,120,118,118,117,117,117,117,116,114,114],[100,101,105,108,110,111,112,114,113,111,111,112,112,113,114,113,111,109,107,108,109,111,112,112,111,110,111,112,112,112,112,111,109,108,106,106,108,109,111,113,113,115,115,118,120,122,124,125,125,124,126,128,127,126,127,127,128,128,129,130,130,131,129,128,129,129,126,124,125,125,124,125,125,127,128,126,126,125,125,124,121,120,118,119,121,122,125,126,128,129,130,131,133,135,137,138,139,142,144,146,147,146,146,147,147,148,148,145,144,143,141,138,134,130,126,122,122,121,119,116,113,111,111,111,109,107,106,107,106,106,108,109,108,106,108,109,110,109,107,107,106,106,106,104,102,100,97,96,96,95,94,93,94,95,97,98,95,92,91,91,91,93,92,92,91,89,90,91,93,95,97,98,98,99,102,105,106,107,109,111,110,110,112,115,115,115,116,117,121,123,124,125,128,132,134,136,137,137,138,137,137,137,134,131,130,128,126,123,121,116,114,112,111,111,109,108,106,104,104,105,106,107,108,108,112,116,118,118,118,118,118,117,117,118,117,117,117,117,115,115],[97,99,103,105,107,108,108,109,110,109,109,110,111,113,114,112,110,109,108,109,110,112,113,112,111,110,111,112,112,113,112,110,108,107,106,106,107,108,111,113,114,114,115,117,119,122,124,124,125,125,127,128,127,127,127,126,126,126,127,129,130,130,128,127,127,126,125,124,124,124,124,125,125,126,127,126,126,125,124,125,123,121,120,122,125,126,127,128,129,129,129,130,132,134,136,137,137,139,143,146,146,146,144,145,147,148,148,146,145,144,142,138,134,129,125,121,120,120,119,116,114,112,111,110,109,108,107,108,108,109,109,109,108,108,109,110,110,109,107,107,105,104,103,102,100,98,96,96,96,95,94,94,95,97,99,98,96,94,93,94,94,95,95,94,93,92,91,91,92,94,96,98,99,99,101,104,106,106,108,110,111,111,114,117,116,116,116,116,118,120,122,123,125,129,131,134,136,136,137,137,136,135,134,132,129,128,126,123,120,117,113,111,111,109,108,108,106,106,105,104,105,106,107,109,113,116,118,118,117,117,116,116,117,117,117,117,117,117,117,115],[95,97,99,101,103,106,106,107,109,109,109,109,110,112,112,112,111,110,109,108,110,112,111,111,111,111,112,111,112,112,111,110,109,107,106,107,107,107,110,112,114,115,116,118,120,122,125,125,126,127,127,127,126,125,124,125,126,126,127,127,127,127,126,125,124,122,122,123,122,122,123,123,123,124,126,126,125,125,125,125,124,123,124,126,127,129,130,131,132,131,131,131,131,132,135,137,137,138,141,145,146,146,144,143,145,148,149,147,146,143,140,137,132,129,125,121,120,119,117,115,114,114,112,110,110,110,110,110,110,110,110,110,110,110,111,111,111,109,107,107,106,104,103,101,100,99,98,97,97,96,96,96,97,99,100,99,97,95,96,97,96,95,95,94,94,95,93,91,91,92,94,96,98,99,101,103,105,106,109,110,110,111,113,116,116,116,116,117,118,118,119,120,122,126,129,132,134,135,136,136,134,133,132,132,129,126,125,123,120,116,112,110,110,109,108,107,107,107,104,103,104,106,108,110,112,113,116,118,118,119,118,116,115,115,115,117,117,119,117,115],[93,94,96,98,100,102,105,107,109,109,110,111,112,113,112,112,113,112,110,109,110,111,111,111,112,112,113,112,112,111,111,111,110,108,108,108,108,108,111,112,114,115,116,119,121,123,125,126,127,128,129,129,126,124,123,123,125,126,125,124,123,123,123,123,121,119,118,119,120,120,120,121,121,121,124,125,125,125,125,125,126,126,129,129,130,132,133,134,134,134,133,131,132,133,134,136,136,137,139,141,144,145,143,143,145,147,148,146,144,140,136,134,132,129,127,124,121,118,115,113,113,114,113,111,110,111,112,112,110,110,111,112,113,113,114,114,113,111,108,106,105,103,101,99,100,100,100,99,98,97,97,98,99,99,99,100,98,97,98,98,97,96,95,96,96,97,96,94,92,92,92,93,96,98,101,102,104,106,109,110,109,109,110,114,116,116,116,118,118,117,117,119,122,125,129,131,131,134,136,136,134,131,131,130,128,125,123,121,117,114,112,109,109,107,106,106,106,107,105,103,104,106,108,109,110,111,113,115,117,119,118,116,115,113,113,114,116,118,117,116],[90,91,93,95,97,98,103,107,108,109,110,111,113,115,113,112,112,112,111,111,112,112,113,113,114,114,115,114,112,111,112,113,112,109,108,109,110,110,111,111,113,114,116,118,120,123,125,127,127,127,129,129,127,125,123,121,122,123,123,121,121,122,122,122,120,119,116,116,117,118,119,119,120,120,124,126,126,126,127,127,129,130,132,133,133,135,135,135,136,136,133,132,133,134,135,137,136,137,138,138,141,142,141,142,143,145,146,144,142,138,136,133,131,129,127,124,121,117,115,113,112,113,112,111,110,110,111,113,111,111,113,114,115,116,116,116,115,112,107,104,103,102,99,97,98,99,99,99,97,96,96,97,97,98,100,101,99,98,99,99,99,98,97,99,99,98,98,96,94,93,92,92,95,97,99,101,103,105,109,110,109,108,110,112,113,116,116,117,117,116,117,118,121,124,127,128,130,132,133,133,132,130,128,127,125,122,121,120,115,112,109,107,107,106,104,104,104,106,105,104,105,106,108,108,109,111,110,111,114,117,117,115,113,111,111,112,113,115,115,115],[87,88,89,92,95,97,101,104,107,108,110,113,114,115,114,113,112,111,112,113,114,116,116,116,116,117,117,116,114,112,113,115,114,110,109,110,111,111,111,111,111,113,115,117,119,121,125,125,125,126,128,129,128,125,122,120,120,120,120,119,119,119,120,120,119,117,114,113,115,117,119,119,119,121,125,128,128,128,129,130,132,134,136,136,137,138,138,138,138,137,135,134,135,136,136,136,136,136,136,137,139,139,139,139,140,143,144,143,140,137,135,133,131,129,127,124,121,118,115,112,111,110,111,111,111,110,111,114,114,114,115,116,117,118,119,118,115,112,107,103,101,100,99,96,96,97,97,97,96,94,95,96,97,98,101,101,100,99,100,101,101,99,99,101,101,101,100,98,96,94,92,91,93,95,97,100,104,106,108,109,108,109,110,111,112,113,114,116,116,116,116,117,119,122,125,126,128,129,131,131,129,126,125,124,121,119,118,117,113,110,107,106,106,106,104,103,104,105,105,105,106,107,108,108,109,110,108,109,112,114,114,113,111,109,108,109,110,111,112,111],[85,86,87,89,92,95,98,102,106,110,112,115,116,115,115,115,113,112,113,115,117,119,118,118,119,118,118,117,115,114,115,115,113,111,111,111,111,111,110,110,110,112,115,117,119,120,122,123,124,127,127,128,128,126,123,120,118,118,117,117,117,117,118,118,116,114,113,113,115,117,117,117,118,120,123,127,128,129,131,133,135,137,139,139,141,142,143,142,140,138,137,137,137,138,137,135,136,137,136,137,138,138,139,139,139,141,142,141,139,137,134,132,131,130,126,123,119,116,114,113,111,108,109,110,111,113,114,116,116,117,118,120,120,120,121,119,117,113,107,104,102,100,98,96,96,96,96,96,95,94,96,98,99,100,102,102,101,102,101,102,103,102,103,103,103,103,102,100,97,94,92,91,92,94,96,99,102,105,107,108,108,108,109,110,110,110,112,113,114,115,115,117,118,119,122,124,125,127,128,128,126,122,121,120,118,116,115,113,111,110,107,106,106,106,104,103,104,105,106,105,106,106,106,105,106,108,107,108,110,111,111,111,109,107,106,106,106,107,108,107],[84,86,87,87,90,93,97,101,105,111,113,115,116,116,117,117,116,115,115,116,117,119,119,118,118,118,118,117,116,116,115,114,113,113,113,112,112,111,111,111,111,113,115,117,119,119,120,122,124,127,127,126,127,126,123,120,118,117,116,115,115,116,117,117,116,113,112,114,115,116,116,116,117,120,122,126,129,130,132,134,137,140,141,143,145,146,147,145,143,141,140,139,139,139,138,137,137,138,139,140,140,139,140,141,141,140,139,140,139,136,133,131,129,128,127,123,120,116,115,114,112,109,109,111,114,116,118,119,119,120,121,122,122,121,121,119,117,113,108,106,104,102,99,97,97,96,95,96,95,95,97,99,101,103,104,103,103,104,102,102,104,106,108,107,104,103,102,100,97,94,93,93,93,92,94,97,100,102,105,107,107,107,108,109,109,109,110,111,112,113,115,116,116,116,118,121,123,124,125,124,122,118,116,117,117,115,114,112,110,110,109,107,106,106,104,104,106,107,106,105,105,105,104,104,104,105,106,107,108,109,110,110,108,105,104,104,104,104,104,104],[84,86,87,89,92,94,97,101,105,110,113,114,116,118,119,120,120,119,117,117,118,119,119,118,118,118,117,116,116,117,116,115,115,114,114,114,113,112,112,111,112,114,115,116,117,118,119,120,123,125,125,124,126,127,124,121,120,118,116,114,115,116,117,118,115,113,112,113,114,114,116,117,120,123,124,127,129,131,133,135,139,143,144,146,147,148,149,147,145,143,141,140,141,141,141,141,140,139,140,141,141,141,143,143,142,142,141,140,138,135,132,131,130,128,127,124,121,118,118,117,115,112,112,114,116,119,120,121,121,122,123,123,123,123,122,119,117,112,107,105,103,103,101,98,97,96,96,97,97,97,98,99,102,105,106,104,105,105,104,104,106,108,109,109,106,105,104,101,98,95,94,93,93,92,94,97,99,101,103,105,105,106,106,107,107,108,108,109,110,111,113,114,114,115,116,119,120,122,123,122,120,116,114,115,114,113,112,111,110,109,109,107,107,106,106,106,107,109,107,105,105,104,103,103,104,104,106,107,107,108,108,108,106,104,103,104,103,102,101,102],[83,86,88,91,94,96,98,101,104,109,113,114,116,119,122,123,123,122,120,120,120,119,118,116,117,118,117,116,116,117,116,115,115,115,114,114,115,115,113,112,112,114,114,113,114,115,116,119,121,122,123,124,126,126,125,122,121,119,116,114,115,116,118,118,116,113,112,112,113,114,117,119,122,125,126,128,130,132,135,137,141,144,146,148,149,150,150,148,146,144,143,143,142,143,144,143,141,140,140,141,142,143,144,145,144,143,141,140,137,134,133,132,130,129,127,125,123,120,119,118,118,116,116,118,119,123,124,123,123,124,124,125,126,123,122,120,117,112,107,105,104,103,101,98,96,97,97,97,97,99,99,99,102,105,107,107,106,106,106,106,108,109,110,110,108,106,104,102,100,96,93,94,93,93,94,96,97,99,102,103,104,104,104,104,104,105,107,108,108,109,111,112,113,114,114,116,117,119,120,119,118,115,113,112,112,111,111,111,110,109,109,108,108,107,106,107,108,109,109,107,105,104,104,104,103,103,105,106,106,106,106,105,104,103,103,103,101,100,99,100],[82,84,87,91,94,96,99,101,105,109,112,114,117,121,123,124,126,125,123,122,120,119,117,115,116,118,117,116,117,117,115,113,114,115,115,115,115,116,113,111,111,112,112,111,113,114,115,117,117,119,121,124,124,124,123,121,120,119,118,115,115,116,117,117,117,115,113,112,112,114,116,118,121,125,126,128,131,133,136,139,143,146,149,151,151,151,150,147,146,145,145,146,145,144,144,143,142,140,140,141,142,143,144,145,145,144,142,140,137,135,134,134,132,130,127,124,123,122,120,118,118,119,121,124,124,126,126,126,127,128,127,127,125,123,122,121,117,114,110,107,106,104,101,99,97,97,96,96,97,99,99,100,104,107,109,110,109,108,108,107,108,109,110,110,108,106,105,103,99,96,94,94,94,92,93,95,96,98,100,101,102,103,102,101,101,102,104,107,108,110,110,109,110,111,111,112,114,115,116,116,116,114,112,110,110,110,110,111,110,109,109,109,108,107,108,110,111,110,111,109,106,104,103,104,101,100,101,102,103,104,103,103,104,103,101,100,99,98,99,100],[83,84,86,90,93,96,98,101,105,108,111,113,118,122,124,124,125,124,123,122,120,118,116,115,117,118,119,117,116,115,113,112,114,115,114,113,114,114,111,109,109,110,110,110,111,113,114,115,115,117,119,121,121,121,120,120,119,119,118,117,116,115,115,117,116,115,114,113,112,112,115,118,121,124,127,130,132,134,136,140,143,147,151,153,152,151,150,148,146,145,146,147,148,146,144,144,142,141,140,140,141,142,143,144,144,144,143,140,138,136,135,135,132,130,127,124,123,122,121,119,120,121,124,126,126,127,127,128,131,131,130,128,126,125,123,121,119,116,114,109,106,104,102,100,98,98,96,96,97,99,100,102,106,109,112,112,112,111,110,109,109,110,110,109,107,106,105,104,100,97,95,93,92,92,93,94,95,98,100,100,101,102,100,99,101,101,101,104,107,108,108,108,108,108,110,112,112,112,112,112,113,113,111,109,108,107,108,110,110,109,110,111,109,108,109,111,111,111,111,110,107,105,102,102,99,97,98,99,100,100,99,100,102,101,99,98,98,98,98,98],[83,84,85,90,93,96,99,101,104,108,110,112,116,120,122,122,123,123,122,122,119,117,116,116,118,119,119,117,116,115,114,113,113,114,112,110,110,110,108,106,106,108,108,108,109,110,111,112,113,114,116,117,118,119,117,117,118,118,118,118,116,114,114,116,115,113,113,112,111,112,116,119,122,124,129,133,135,138,139,142,146,148,151,152,151,150,150,149,148,148,148,148,148,146,145,145,143,141,140,139,140,142,142,143,144,144,143,141,139,137,135,135,132,130,127,126,125,123,123,123,122,124,127,127,127,129,128,129,131,132,131,130,129,128,124,122,119,116,114,111,108,106,103,101,100,99,99,98,98,100,100,104,107,109,112,112,112,113,111,111,111,112,111,109,108,106,105,104,101,97,94,91,92,92,93,95,96,98,99,100,102,103,101,99,100,101,101,101,103,106,108,108,108,107,109,112,111,110,110,110,110,111,109,108,107,106,108,110,109,108,110,112,110,108,109,111,111,110,111,111,107,105,103,101,98,95,97,98,98,99,98,99,101,101,100,98,98,98,98,96],[83,84,85,89,92,96,99,100,103,107,110,112,115,118,120,121,122,121,121,120,118,116,116,118,119,119,118,118,116,115,114,113,114,113,110,108,107,106,104,104,105,106,106,106,107,108,109,110,111,113,114,114,116,116,115,115,116,117,118,118,117,116,114,114,114,112,111,110,110,113,116,119,122,126,131,135,138,141,142,143,147,150,151,151,150,150,151,151,150,150,149,147,146,145,145,145,144,142,140,139,140,142,142,142,142,144,144,141,139,136,134,133,131,129,128,127,127,126,125,125,124,126,129,128,129,129,129,130,132,133,133,131,130,129,125,123,120,118,114,111,109,107,105,104,102,101,102,102,101,101,101,104,108,111,113,113,113,112,112,112,113,112,110,109,109,106,104,104,101,97,94,92,92,91,92,95,97,99,100,101,102,103,101,99,99,101,101,101,102,105,107,107,107,107,108,110,110,110,110,108,107,108,107,107,108,108,109,109,108,108,109,110,109,108,109,110,110,109,109,109,105,103,102,100,98,95,96,97,97,98,98,99,101,101,100,100,100,99,97,95],[85,85,86,89,92,96,97,99,103,106,110,113,115,117,119,121,121,120,119,118,116,114,115,117,118,119,119,119,116,115,114,112,112,111,109,106,104,103,102,102,102,103,104,104,104,106,107,107,109,112,113,113,115,116,115,116,116,117,117,117,119,119,117,115,113,112,110,108,110,113,114,118,122,128,132,137,140,142,144,144,147,150,151,150,151,150,150,150,151,151,149,146,146,146,146,145,143,142,139,139,139,139,140,140,142,143,142,140,139,136,134,133,130,128,129,129,128,127,126,127,127,128,129,127,129,130,132,133,134,135,134,132,132,131,127,124,121,119,116,112,110,107,106,106,104,102,102,103,102,102,103,105,109,113,114,114,113,112,112,112,112,113,111,110,108,106,105,104,101,98,95,94,92,90,92,95,98,100,101,101,102,102,100,99,101,102,102,103,102,104,106,106,107,108,107,107,109,110,108,106,107,107,108,108,109,110,108,108,108,109,109,108,109,109,110,111,109,108,108,107,104,102,100,98,96,95,96,96,97,98,98,99,100,101,102,101,100,99,97,93],[85,86,87,90,93,95,98,100,104,107,111,113,114,115,117,120,120,120,119,117,116,114,115,116,117,118,118,118,117,116,113,111,111,110,107,105,102,100,99,99,100,101,102,102,102,104,105,106,108,110,112,114,115,116,116,117,117,116,116,116,119,120,119,116,114,112,111,110,112,114,115,118,124,129,132,136,140,143,145,145,147,150,152,152,151,150,149,149,150,150,148,146,146,146,147,145,141,139,139,138,137,136,136,138,139,140,139,138,136,134,134,132,130,128,128,129,128,127,127,128,128,130,130,130,131,132,135,136,136,135,134,133,133,133,129,125,122,119,117,114,112,110,109,108,105,103,102,102,102,103,105,106,109,112,114,113,112,112,112,112,111,112,112,111,109,107,105,104,102,99,98,97,94,92,93,96,98,100,102,102,101,100,99,100,102,103,103,104,103,104,105,105,106,106,107,107,108,108,108,108,110,110,109,109,110,110,108,108,109,109,109,108,110,111,111,111,110,109,108,106,104,101,99,98,96,96,97,96,97,98,98,99,100,101,102,101,99,98,97,95],[86,86,88,91,93,95,98,101,103,106,111,112,113,112,114,117,117,119,119,118,118,117,117,117,117,119,118,117,117,116,114,113,112,110,108,105,102,100,98,98,98,100,102,101,102,103,104,106,108,109,112,115,115,116,117,118,117,116,115,116,118,120,119,117,116,113,112,111,113,117,118,119,125,130,132,134,138,142,145,147,148,149,151,152,151,150,148,147,147,148,147,146,146,146,146,145,142,138,137,137,136,135,135,136,136,136,136,135,133,131,131,129,129,129,129,129,129,127,127,129,130,131,131,132,133,133,135,136,136,135,135,135,135,135,131,127,124,121,120,117,114,113,111,110,107,105,103,103,103,103,104,105,108,112,113,113,112,111,111,112,112,112,113,112,109,109,106,106,105,103,102,100,97,94,95,97,99,100,103,104,103,100,99,100,101,104,104,104,104,104,105,105,106,106,107,107,109,109,110,111,111,112,110,109,110,110,109,109,110,110,110,110,110,111,111,109,108,108,106,104,103,100,98,98,98,98,98,96,97,97,97,97,98,100,101,101,99,98,98,98],[86,87,90,93,96,98,99,101,104,106,109,110,110,109,110,112,114,117,119,119,119,119,118,118,118,118,117,117,117,117,116,115,113,111,108,104,102,99,98,97,98,100,101,101,102,102,102,105,107,109,112,114,115,117,118,119,118,116,115,115,118,120,119,118,117,115,114,113,115,118,120,121,125,129,132,134,137,141,145,147,148,149,150,151,151,149,146,145,145,145,146,146,146,146,146,145,142,138,136,137,136,134,133,133,132,132,132,132,130,128,128,128,129,129,129,131,130,129,128,129,131,132,133,132,133,134,134,134,134,134,135,136,136,135,132,130,127,124,121,118,116,114,114,113,110,107,105,105,105,104,104,105,107,110,112,113,112,111,110,111,113,115,115,112,110,109,109,108,108,107,105,104,101,99,97,99,101,102,105,106,105,102,100,101,102,104,105,104,104,104,105,106,107,107,108,109,110,110,111,112,113,114,113,111,111,111,111,111,111,112,112,111,111,112,111,109,107,107,105,105,104,100,98,98,98,100,99,98,98,97,95,95,97,98,100,101,100,99,100,100],[87,90,92,95,98,100,101,102,104,106,107,107,106,107,107,109,112,115,117,119,119,118,118,118,116,115,115,116,116,117,117,116,115,112,108,104,102,100,98,96,96,99,99,98,100,102,103,104,107,110,113,115,117,118,118,118,118,118,116,115,117,119,119,118,117,115,114,114,116,118,121,123,126,129,131,135,138,142,145,146,147,148,149,149,150,150,147,145,144,144,144,144,145,146,146,145,141,138,137,137,135,133,132,131,130,131,129,129,128,126,127,127,126,126,128,131,131,130,130,131,133,133,133,131,132,133,132,132,133,133,134,135,135,134,133,131,128,126,122,120,118,116,116,115,112,109,107,107,107,106,107,108,108,109,110,111,110,111,110,112,114,116,115,113,112,111,110,110,111,111,110,108,105,104,102,102,104,105,107,109,107,104,104,103,104,105,106,105,106,106,107,107,108,108,109,111,111,112,114,114,116,115,114,114,113,113,113,112,112,112,111,111,111,112,111,108,107,107,106,105,103,99,98,98,100,102,101,101,99,99,97,96,97,97,99,101,99,98,101,102],[90,94,96,97,98,100,101,102,103,105,106,105,106,106,106,107,112,114,116,117,116,117,117,117,115,113,113,115,117,118,117,116,115,112,108,104,103,102,100,97,96,97,97,98,100,102,104,104,106,109,112,115,117,118,117,118,119,119,118,117,119,121,120,118,117,116,114,115,117,120,123,125,127,129,132,136,139,141,144,146,147,147,146,147,150,150,148,146,145,143,142,142,144,145,145,144,141,137,136,136,134,132,132,131,130,129,129,128,127,127,127,126,125,126,127,129,130,131,131,133,134,134,133,130,130,131,132,133,134,134,133,133,133,133,133,130,126,125,122,120,119,117,117,116,114,110,108,109,109,109,110,111,110,110,110,111,110,111,111,111,112,115,115,114,113,111,110,112,114,115,115,112,109,108,107,107,107,109,111,111,110,107,107,107,106,106,107,108,108,109,109,111,111,110,111,112,112,113,116,117,117,115,114,116,116,115,115,114,114,113,113,113,113,112,111,109,109,109,107,104,103,100,98,99,100,103,103,102,101,100,99,98,99,99,100,101,101,100,102,103],[91,95,97,98,100,102,102,103,104,106,106,105,106,107,106,107,110,113,115,116,116,116,116,116,115,113,112,113,115,117,117,115,113,110,107,103,103,103,101,99,99,98,99,101,101,102,104,104,107,109,112,115,116,118,118,118,120,121,121,121,122,123,122,120,120,119,118,117,119,122,124,126,128,129,131,136,138,141,144,146,146,146,146,146,147,148,146,144,143,141,141,141,142,145,145,143,141,137,135,133,132,130,130,130,128,126,127,129,128,129,128,127,126,127,127,128,130,130,130,133,133,134,134,131,131,132,132,132,134,134,133,133,134,134,132,128,125,123,121,121,120,119,119,117,116,113,110,111,111,111,113,113,112,112,112,113,113,112,111,111,113,115,116,115,114,112,112,115,116,117,118,115,113,112,110,111,112,112,113,113,112,109,109,110,109,108,110,111,111,110,111,114,113,112,113,115,116,116,118,118,117,116,116,116,116,115,116,117,117,116,116,117,117,116,114,111,110,110,108,104,103,101,100,101,101,103,103,102,101,100,100,100,100,100,103,104,104,105,105,105],[93,97,97,98,101,103,104,105,105,106,107,106,107,107,106,107,109,112,114,114,114,113,114,115,115,113,110,111,112,114,115,115,113,110,107,105,105,103,102,102,102,101,101,102,104,104,105,105,108,110,111,114,116,118,120,120,122,124,124,123,125,126,125,123,123,123,121,119,120,123,126,127,129,130,131,135,138,140,143,145,145,146,146,145,145,146,144,142,141,141,141,140,141,144,144,142,140,137,134,132,129,128,128,127,126,125,126,129,130,130,129,128,127,127,127,127,129,130,130,131,132,132,132,132,132,131,133,133,133,133,132,133,134,133,131,126,124,121,120,121,121,121,121,119,117,114,112,112,112,113,115,115,115,114,114,115,115,113,112,112,113,114,115,115,115,114,115,116,118,119,119,118,116,115,113,114,114,114,115,115,113,112,113,113,111,111,114,114,113,113,114,115,116,115,116,117,118,119,120,121,119,118,117,115,114,116,118,119,120,120,120,120,120,120,117,114,112,112,109,106,104,103,102,102,103,104,103,102,100,100,101,101,101,103,106,107,108,109,109,108],[95,98,99,100,102,104,106,107,107,106,106,106,106,105,105,107,109,112,112,111,111,111,112,112,112,111,110,110,111,112,113,114,113,110,109,107,105,103,103,104,103,102,102,103,105,106,106,106,107,109,112,114,116,117,120,123,123,125,124,124,126,128,127,125,125,125,123,122,123,125,127,128,131,133,133,136,139,142,143,143,144,145,144,144,145,145,143,142,141,141,140,139,141,144,144,142,140,137,134,131,129,128,127,127,127,126,127,128,129,130,130,128,127,126,126,125,127,130,130,131,132,131,131,131,130,129,132,133,133,132,132,134,132,131,129,124,122,120,120,121,121,122,122,121,119,116,114,114,113,114,114,115,115,114,115,116,115,113,113,114,114,114,115,115,115,116,116,117,120,121,123,121,119,118,116,117,116,116,116,117,116,114,115,115,115,114,115,117,117,118,119,118,119,120,119,119,120,120,120,121,120,119,117,115,115,117,119,120,122,124,123,123,125,124,121,117,115,114,112,109,107,105,104,103,104,105,105,104,102,101,102,104,105,106,107,108,109,111,112,111],[97,98,100,103,105,107,109,110,109,106,105,106,105,104,105,107,108,110,110,110,109,109,109,109,109,110,110,110,111,111,112,113,112,111,110,108,106,104,104,104,103,102,101,103,105,106,106,105,106,109,114,116,116,119,121,123,124,125,125,124,126,128,128,127,127,126,125,125,125,126,128,130,133,134,136,138,141,143,144,142,143,143,142,143,143,142,142,142,142,141,141,140,141,143,144,142,140,136,134,133,130,128,126,126,127,126,126,127,127,128,128,128,126,125,124,125,128,129,131,131,130,129,129,130,129,129,130,132,132,131,130,131,130,129,128,125,121,120,119,120,122,122,123,123,121,118,117,115,114,114,115,115,116,115,115,116,115,114,113,114,114,115,116,115,115,117,118,119,121,122,124,122,120,119,119,120,119,118,119,119,119,119,118,117,117,117,117,118,119,121,122,122,122,122,122,121,121,120,119,121,119,119,119,117,117,119,121,122,124,125,124,125,127,127,124,121,118,115,114,114,111,108,107,107,108,108,108,107,105,103,104,106,107,108,109,110,111,112,113,113],[100,100,103,106,108,109,110,111,109,107,108,109,107,105,104,105,106,107,108,108,107,106,106,107,108,110,109,110,111,112,112,112,112,112,111,109,107,106,105,104,104,103,102,103,105,106,107,107,109,111,115,117,119,122,124,125,125,125,124,124,125,126,127,126,126,127,127,127,127,127,129,131,133,134,136,138,142,144,143,142,142,141,140,140,139,138,139,141,142,142,143,144,143,144,145,143,140,136,136,135,132,130,128,127,126,124,124,125,125,126,128,128,127,126,126,127,128,129,131,131,129,127,128,129,130,131,132,133,131,130,130,129,128,127,126,125,122,120,118,119,121,121,123,123,120,118,118,117,117,117,117,116,117,116,116,116,115,115,113,113,114,115,116,116,118,119,120,121,122,124,125,124,121,120,120,121,121,120,120,120,122,123,121,119,119,120,119,119,120,122,124,124,123,123,123,123,123,121,120,120,120,120,120,119,120,122,123,124,126,127,126,126,127,128,126,124,120,116,116,116,114,111,111,112,111,112,110,109,107,105,106,108,109,109,110,112,112,112,114,114],[102,103,106,108,109,111,111,111,110,110,111,110,109,106,104,104,105,105,106,106,106,106,106,106,107,109,110,111,112,113,113,111,110,111,111,109,108,107,106,105,104,104,102,102,103,105,108,110,112,114,116,119,121,124,126,126,126,126,124,123,123,123,125,127,127,128,129,130,130,129,130,133,134,136,137,140,143,144,143,142,141,140,138,136,136,136,137,140,143,145,146,146,146,146,146,144,139,137,137,137,134,131,129,128,127,125,123,123,124,125,128,129,129,129,127,128,129,129,130,130,129,127,129,130,131,132,134,133,131,131,130,128,127,127,125,124,122,120,119,120,120,121,123,122,120,119,120,119,120,119,118,117,116,116,116,116,116,116,113,112,113,114,116,117,119,120,120,121,121,123,124,123,121,120,120,122,122,122,122,122,123,125,124,121,121,120,119,120,122,123,124,124,124,124,124,125,125,123,120,120,120,119,120,122,123,124,125,126,127,128,128,128,128,129,129,126,121,118,118,118,116,115,115,115,115,114,112,111,110,108,109,111,111,111,112,113,113,114,115,114],[103,105,106,108,110,111,111,112,113,113,112,111,111,110,108,107,106,105,105,104,105,106,105,106,109,112,113,114,114,114,113,110,110,111,110,110,109,108,107,106,105,103,101,101,103,105,107,109,112,116,118,121,122,124,126,126,127,127,125,124,124,123,126,128,128,128,131,132,132,132,133,136,137,139,141,141,143,144,144,143,142,141,137,135,136,137,138,141,144,147,147,146,146,144,143,142,139,137,136,136,134,131,130,128,127,126,124,123,124,125,128,129,130,130,128,128,129,129,129,129,128,128,129,130,130,130,132,134,133,133,131,128,128,128,127,125,124,122,121,121,121,122,124,123,123,122,120,119,120,121,120,118,117,116,116,116,117,117,114,113,114,116,117,117,119,119,119,121,121,121,122,121,120,120,121,122,123,124,124,124,125,126,125,125,124,122,122,122,123,124,125,124,125,126,126,126,126,124,122,119,118,119,121,124,125,126,127,127,129,130,130,131,130,129,130,128,124,120,119,118,118,118,118,117,116,115,113,113,111,111,112,113,114,115,114,113,114,115,114,112],[103,105,108,110,110,110,111,113,115,115,113,112,113,112,112,110,108,107,106,105,105,106,106,106,109,113,115,115,115,115,115,113,111,110,110,110,109,106,106,106,106,104,100,101,104,105,106,108,112,117,120,122,123,125,126,127,128,128,128,128,127,125,127,130,130,130,132,133,134,134,133,136,138,141,144,143,143,143,144,143,142,140,137,136,138,140,140,142,145,147,147,146,145,143,141,140,138,137,136,135,133,132,131,128,126,126,125,124,124,126,129,129,129,130,129,128,129,129,129,128,128,128,128,129,130,130,131,133,134,134,132,129,129,129,128,126,125,124,124,124,124,124,126,126,125,124,121,120,120,121,120,119,119,116,115,115,115,115,114,114,115,116,117,118,118,117,118,120,119,119,119,119,120,120,121,121,123,123,124,125,126,126,127,127,127,127,125,124,126,127,126,125,126,128,127,126,125,125,123,120,119,120,122,124,125,126,127,127,131,133,133,132,132,132,132,129,125,121,119,118,119,120,119,117,116,115,114,113,112,113,114,115,116,117,116,115,116,117,116,114],[104,106,108,111,110,109,111,113,114,115,115,115,115,114,114,112,110,108,107,108,107,107,107,107,109,113,115,115,115,115,115,115,112,109,109,110,107,105,106,105,104,103,101,102,104,104,107,109,112,117,121,123,125,126,128,130,130,130,130,130,128,127,129,131,131,132,132,132,134,134,134,136,139,143,145,146,146,145,144,143,142,141,138,137,139,141,141,142,145,147,148,147,145,143,141,140,138,137,136,134,133,132,130,126,126,126,124,123,124,125,127,128,130,130,129,129,129,130,128,127,127,128,128,128,130,131,131,132,132,133,132,130,130,130,129,127,126,125,126,126,127,127,128,128,126,124,122,121,122,122,122,121,119,116,114,114,114,113,113,114,113,113,116,117,116,115,116,119,118,118,118,117,118,119,119,119,121,122,125,126,127,127,127,128,128,129,127,127,129,131,130,129,131,132,129,127,127,127,125,122,122,122,122,124,125,126,127,128,133,136,136,135,136,137,135,131,126,121,118,117,119,121,120,118,118,117,115,113,114,115,115,115,117,117,117,117,118,119,118,117],[105,107,108,111,111,110,111,112,114,115,117,119,118,117,116,114,112,111,109,110,110,109,108,108,111,115,116,116,117,117,117,116,113,110,110,109,107,106,106,104,102,101,101,102,103,105,107,108,111,117,121,124,126,128,129,131,133,132,131,131,130,128,130,133,133,132,132,133,134,135,135,137,140,143,146,148,148,147,146,146,144,141,139,138,139,141,142,143,144,146,148,147,145,142,140,139,138,137,135,133,132,131,128,126,125,125,124,122,122,123,125,127,129,130,129,129,130,130,129,126,126,127,129,130,131,131,130,130,130,132,131,130,130,131,129,127,126,126,127,129,129,130,130,129,127,125,122,122,124,124,124,121,118,117,115,113,113,112,112,111,111,112,114,115,114,114,116,119,118,118,118,117,117,118,117,118,119,122,125,127,127,128,129,128,128,129,129,130,131,133,134,133,134,134,132,130,129,127,125,124,123,123,123,123,124,126,128,131,135,137,138,138,140,140,137,133,127,122,119,117,119,121,122,121,120,119,115,114,114,115,115,116,118,118,118,119,120,121,119,119],[106,108,109,111,112,112,112,113,115,118,120,121,120,119,118,117,115,115,113,113,111,110,109,109,112,116,117,117,117,118,118,117,115,113,111,109,107,106,106,105,104,102,102,104,105,106,107,108,112,116,120,122,125,128,130,132,133,133,132,132,131,129,131,134,134,134,136,136,136,137,136,138,141,144,148,150,149,147,146,146,144,142,142,142,142,142,142,144,145,147,148,147,145,142,142,140,138,137,134,133,133,132,129,126,125,124,122,122,122,123,126,127,128,129,130,130,131,131,128,126,126,126,129,132,132,132,130,129,130,131,130,129,130,131,129,127,127,127,128,129,130,132,131,128,127,125,124,124,125,125,123,121,119,117,114,112,112,112,111,110,111,113,113,114,114,115,117,118,118,117,117,118,118,119,119,119,120,122,125,127,129,130,131,130,131,132,133,135,136,136,135,135,136,136,134,131,128,126,126,125,123,121,121,122,124,127,130,134,137,138,140,140,140,140,137,133,128,123,120,120,121,122,123,122,121,119,116,115,114,114,115,117,119,120,122,122,121,121,120,120],[105,107,108,110,111,112,113,115,118,120,123,123,121,119,119,119,119,118,117,115,112,110,110,110,112,116,118,118,119,119,117,117,116,114,112,110,109,107,107,107,106,104,103,105,106,106,107,110,112,115,119,122,125,128,131,133,133,133,133,133,132,131,132,134,135,137,139,139,138,139,138,141,145,147,150,150,149,147,146,146,145,144,145,144,143,143,144,145,145,147,148,147,146,145,144,143,141,139,136,134,133,132,129,127,125,123,122,122,123,125,127,127,128,131,132,132,133,133,130,128,127,128,130,132,132,131,130,130,131,131,130,130,131,131,129,128,129,129,129,129,129,131,132,131,129,127,125,125,125,124,122,120,119,116,114,113,113,112,112,110,111,113,113,114,115,115,116,117,117,116,117,119,120,120,121,122,123,123,126,129,131,132,133,134,135,136,138,139,140,138,136,137,137,137,135,133,129,126,127,126,123,121,122,124,127,130,133,135,137,139,141,142,141,139,138,135,130,126,122,121,123,124,124,122,120,119,118,117,116,116,117,118,120,123,125,123,120,120,120,120],[103,103,106,108,111,114,115,117,120,123,125,125,124,122,120,121,120,118,119,117,114,111,110,110,113,115,117,118,117,118,117,117,116,115,113,112,111,108,109,109,107,105,104,105,106,106,109,112,113,115,119,123,126,128,131,134,134,132,133,134,134,133,132,134,136,138,141,142,142,142,143,145,148,149,150,148,148,148,146,146,146,146,147,145,146,145,145,145,146,148,148,147,146,147,146,145,144,141,137,134,133,132,128,125,124,122,121,121,123,124,126,127,130,132,133,133,134,134,133,132,131,130,131,132,131,131,131,133,132,132,132,132,132,132,132,131,130,131,130,130,131,132,134,134,131,128,126,126,125,124,123,120,119,116,115,115,114,112,112,112,113,114,114,114,115,116,117,117,117,117,117,120,120,121,122,123,124,124,128,132,133,135,138,139,140,141,141,141,141,140,139,139,139,139,137,134,131,128,128,127,125,124,124,127,129,131,135,136,137,139,140,142,141,139,138,135,131,128,123,122,123,125,124,122,121,119,118,119,118,118,119,119,122,124,125,125,122,121,120,120],[101,102,105,107,111,115,117,119,122,125,127,126,125,124,123,123,121,120,120,118,115,112,111,110,111,112,114,115,114,116,116,116,116,115,114,113,113,111,111,111,110,107,106,107,106,106,110,113,115,117,120,124,127,128,131,134,135,134,136,137,137,135,133,134,136,139,144,146,145,146,146,148,150,150,150,148,148,147,145,145,145,147,148,148,148,147,145,146,147,148,148,148,148,148,149,148,147,145,140,136,134,132,128,125,123,121,120,121,122,123,125,127,129,132,133,134,135,136,135,134,134,134,132,132,132,132,133,134,134,134,134,133,133,133,133,132,131,132,131,131,133,133,134,134,132,130,128,126,125,123,123,121,119,117,116,116,116,115,114,112,113,115,116,115,114,116,118,117,117,117,119,120,121,122,124,126,126,126,129,133,135,138,142,144,145,146,144,144,143,142,141,141,141,141,140,137,134,131,130,129,128,128,128,130,132,135,137,138,138,138,140,141,140,138,137,135,132,128,124,123,124,125,125,123,122,120,120,121,121,120,120,121,123,124,125,126,124,123,121,122],[100,102,105,107,110,115,117,119,122,125,126,125,125,125,124,124,123,122,121,118,116,114,112,111,109,110,111,112,113,113,113,113,115,115,114,112,113,113,113,114,112,110,109,110,109,109,111,113,115,119,122,126,128,129,133,136,136,136,138,141,140,138,137,138,139,142,146,148,148,148,149,151,152,152,152,150,148,148,145,144,145,147,148,149,148,147,146,146,147,148,149,150,149,150,151,152,152,150,145,140,136,131,128,126,123,122,122,122,122,123,124,125,128,131,133,135,137,138,137,135,135,136,134,132,133,135,136,135,135,134,134,133,133,133,131,131,131,131,131,131,132,134,134,134,133,131,129,127,124,121,121,120,119,118,117,117,117,117,115,114,114,115,116,115,116,117,117,118,119,120,122,122,123,124,126,129,128,128,131,135,137,139,144,147,148,149,148,148,147,145,144,143,142,142,141,140,136,134,132,131,131,132,132,133,135,138,139,139,139,138,138,139,138,137,137,135,132,129,125,125,125,125,125,124,122,120,121,123,123,122,122,123,124,124,126,125,124,123,122,122],[100,103,106,108,111,115,118,121,122,123,123,124,125,125,125,125,125,123,121,119,117,114,112,111,109,108,109,110,111,111,111,112,114,115,115,113,114,116,116,115,115,113,111,111,112,113,113,113,115,120,124,127,128,130,134,137,139,139,139,141,141,140,140,141,142,145,148,150,149,150,151,153,154,154,155,152,150,149,147,146,146,147,148,148,147,146,147,147,148,149,150,152,152,151,152,154,154,151,148,142,137,133,129,127,125,123,123,124,123,123,123,125,127,130,132,134,137,138,138,136,137,138,136,134,136,138,140,139,137,134,133,134,134,132,129,130,131,131,131,131,131,132,132,133,132,131,129,127,124,120,120,119,119,119,117,118,119,119,118,116,115,116,117,116,117,116,116,118,121,123,124,125,126,127,128,130,130,129,132,136,139,142,145,148,150,151,150,149,148,147,146,145,143,143,142,140,137,135,133,133,134,134,134,134,137,140,142,142,142,140,138,137,137,138,137,135,131,129,127,126,125,125,125,124,122,121,121,123,123,122,124,126,127,126,127,127,124,123,123,122],[99,103,107,110,113,116,120,122,121,122,123,123,124,124,124,124,123,121,120,119,115,113,111,110,107,106,107,108,109,110,110,112,115,115,116,115,116,117,116,115,115,115,113,112,114,115,115,116,119,123,127,129,130,133,135,138,140,141,141,142,142,141,141,142,143,145,149,151,151,152,153,156,157,157,157,155,152,150,148,147,148,149,149,149,148,146,146,147,147,149,151,153,152,152,153,155,154,151,149,144,139,135,131,129,127,124,125,125,124,123,123,126,128,130,132,133,136,138,139,138,140,141,140,140,141,142,142,141,138,135,135,135,134,134,131,131,131,131,131,131,131,130,131,131,131,129,129,127,123,120,120,120,119,119,118,118,119,119,118,117,117,118,118,117,117,116,115,117,119,123,125,126,127,128,130,132,132,132,134,137,140,144,147,148,150,151,150,149,149,148,146,146,145,144,143,140,138,136,134,134,135,136,137,138,140,142,144,143,142,141,138,137,138,139,137,134,131,127,125,125,125,126,126,125,123,122,123,124,124,123,126,128,128,127,128,129,126,124,122,121],[97,102,106,111,114,117,120,120,120,120,121,123,124,123,122,122,121,119,119,116,113,111,110,109,107,105,105,106,108,109,109,111,115,115,115,115,115,117,117,115,115,114,114,114,115,116,118,119,122,126,129,131,132,134,137,140,141,143,143,144,144,142,141,143,144,146,149,151,153,154,155,157,159,159,158,156,153,150,149,148,150,150,151,150,148,146,145,146,147,150,152,153,154,154,155,155,154,153,150,145,140,136,134,132,129,127,127,126,124,124,125,127,130,131,132,134,136,138,140,141,142,143,143,144,145,144,144,142,139,137,137,137,135,135,133,132,132,131,131,131,131,130,129,130,130,129,127,125,122,119,119,120,119,119,119,118,119,119,119,120,120,119,118,118,117,117,116,117,119,123,126,128,129,130,133,135,134,134,136,139,142,146,148,150,151,151,150,149,149,148,145,145,145,144,144,141,139,137,135,136,137,138,139,140,141,144,145,145,143,140,139,138,139,140,138,134,130,127,125,124,124,126,127,126,124,124,125,124,125,125,128,130,128,128,129,128,127,124,121,120],[98,103,107,111,115,118,120,119,119,118,119,121,121,120,122,122,120,118,117,114,112,109,108,108,106,107,106,106,108,109,109,111,114,115,116,116,116,116,115,115,114,113,114,115,115,116,118,121,123,126,128,130,132,133,137,140,142,144,144,145,145,144,144,145,146,148,151,152,153,154,156,158,161,162,159,156,153,151,150,150,150,150,149,148,148,148,146,146,148,151,153,153,154,155,155,155,156,155,151,147,142,137,135,133,130,129,128,127,126,125,126,128,130,131,131,134,136,137,141,143,144,144,145,147,146,146,145,144,141,139,140,140,138,137,135,134,133,131,132,132,131,130,130,132,131,130,128,124,121,118,118,120,120,119,120,120,121,121,122,121,120,118,118,118,118,118,118,119,120,123,126,129,130,131,134,136,135,135,138,141,144,148,149,150,152,151,150,149,148,147,145,144,143,142,143,142,140,138,138,139,140,140,141,142,142,144,144,144,142,140,138,137,138,139,136,133,131,129,125,124,124,125,126,126,125,125,125,124,125,125,127,130,129,129,128,127,126,124,121,119],[101,104,107,111,114,118,120,120,118,117,117,118,118,119,121,120,118,116,114,113,112,109,107,106,105,107,107,107,109,110,110,111,114,116,117,116,116,116,114,115,115,115,115,114,115,116,118,120,122,124,127,129,133,134,137,139,142,145,145,146,147,147,148,148,149,151,153,154,154,154,156,160,162,162,160,158,155,153,152,151,150,149,148,147,148,148,148,147,149,151,153,154,155,155,155,157,157,156,153,150,146,142,138,135,133,132,131,129,128,127,127,128,129,130,130,133,135,138,141,143,144,146,148,149,147,147,145,144,143,142,143,142,140,138,136,134,134,132,132,132,131,131,132,132,132,131,129,125,122,119,118,119,120,120,121,121,122,124,124,121,118,117,116,117,118,119,120,121,122,124,127,130,131,132,135,137,137,138,141,144,146,148,150,151,151,151,151,151,149,147,145,143,143,142,142,143,141,140,140,142,142,142,144,144,145,144,142,142,141,138,137,135,136,137,134,132,131,128,125,125,126,126,127,127,127,126,127,127,127,127,128,129,129,129,127,125,124,123,121,119],[100,103,107,110,114,118,119,120,118,116,115,116,117,119,120,118,117,115,114,112,110,108,105,104,106,107,107,107,108,110,110,111,114,117,117,115,116,115,114,115,115,116,115,114,116,118,118,118,120,122,125,129,133,136,138,141,144,147,147,147,149,149,150,150,151,154,156,157,157,157,158,160,160,159,159,158,156,154,152,152,150,149,148,146,146,147,147,147,149,152,155,155,154,153,154,155,156,156,155,152,150,147,143,140,138,137,135,133,131,130,130,129,130,131,131,134,136,140,143,144,146,149,150,150,150,149,147,147,147,146,145,142,140,139,137,135,134,132,132,133,132,132,131,131,131,130,129,125,122,121,118,119,120,121,122,121,122,124,122,120,119,116,116,118,118,119,122,122,123,125,128,132,132,134,136,137,139,141,143,146,147,149,151,152,153,152,152,151,148,146,144,142,142,141,142,143,141,139,140,143,142,143,145,145,144,144,142,141,140,138,136,135,134,136,134,132,130,128,127,126,127,127,127,128,127,127,129,130,130,131,130,129,129,129,126,123,123,121,120,120],[99,103,107,111,115,118,119,119,118,116,115,114,114,116,117,115,114,112,111,111,108,106,103,103,105,107,108,107,108,110,111,112,114,116,117,116,115,115,114,115,115,115,115,115,116,117,117,117,118,120,123,128,133,136,140,142,145,147,147,147,149,150,151,151,152,156,159,160,161,160,158,159,158,158,159,158,157,155,153,152,151,150,147,145,145,146,147,148,150,153,155,155,153,151,152,153,153,154,155,154,152,151,147,145,144,142,139,137,135,134,132,132,133,133,133,135,138,141,144,146,149,150,151,153,153,151,150,150,151,150,148,144,141,140,139,136,135,134,134,135,134,132,130,130,131,130,129,126,122,120,119,121,122,122,121,121,122,123,122,120,119,117,116,118,119,120,122,123,124,126,129,133,134,135,137,138,140,142,146,149,150,150,152,154,155,154,153,151,147,145,143,142,141,140,139,140,140,140,140,141,141,142,144,145,144,143,142,141,140,137,135,134,133,134,134,132,130,128,128,128,128,128,128,129,129,129,131,133,133,133,132,131,130,128,125,123,123,121,119,118],[101,104,107,111,114,117,118,118,117,114,113,112,111,111,112,112,110,109,108,108,106,104,103,103,104,106,108,109,111,113,114,115,115,115,115,115,115,115,115,116,115,114,114,115,115,115,116,115,116,120,123,128,133,136,139,141,142,144,144,145,146,147,148,150,154,157,159,160,161,162,160,159,159,158,158,157,156,154,153,151,150,150,147,146,146,146,148,150,151,153,153,153,152,150,151,152,153,154,156,155,154,154,150,148,146,144,142,140,138,136,135,134,136,136,136,136,138,141,144,146,149,152,153,154,153,152,152,151,151,152,150,146,144,142,140,139,138,136,136,137,135,133,132,131,131,130,129,126,123,121,121,123,123,123,122,121,121,122,121,119,118,117,116,118,119,119,121,123,126,129,132,136,137,138,140,142,144,145,148,151,151,150,153,156,155,154,154,151,148,145,142,141,139,139,138,139,140,141,142,142,142,141,142,144,143,143,142,141,138,135,135,135,133,133,133,133,131,129,129,130,129,128,130,130,130,131,132,134,134,133,132,131,129,126,124,122,120,118,117,117],[103,105,107,110,112,115,115,114,113,111,110,109,108,107,108,108,107,107,105,105,103,102,101,103,105,107,108,110,113,115,117,117,116,115,113,113,113,114,114,113,113,114,114,113,113,114,115,115,117,120,124,127,131,135,139,140,140,140,140,142,143,143,144,148,152,155,157,157,159,160,160,160,160,159,158,156,155,155,154,153,151,151,149,148,148,147,149,151,153,153,151,152,152,151,151,152,154,156,156,156,156,155,152,150,148,147,146,144,141,139,139,139,139,140,140,139,140,143,144,145,149,152,154,155,154,154,153,151,151,152,152,149,147,145,143,141,140,139,138,138,137,136,135,134,134,132,130,127,125,122,122,123,123,122,122,122,121,122,122,119,118,118,118,119,119,119,121,124,128,132,136,139,139,141,143,145,146,148,150,152,152,151,152,155,156,155,153,151,148,144,141,138,137,137,137,139,140,141,143,143,141,140,141,142,142,142,140,139,136,134,134,135,134,133,134,134,133,131,131,131,131,130,130,131,132,131,132,133,133,132,131,130,127,125,123,121,118,115,114,115],[104,105,108,109,111,112,111,111,110,109,108,107,107,106,106,105,105,105,103,101,101,100,101,103,105,108,109,110,113,115,117,117,116,115,113,112,113,113,112,111,112,113,111,112,113,114,115,117,117,119,123,126,131,135,138,139,138,138,138,139,140,141,142,145,148,152,154,155,157,158,159,159,159,159,158,156,156,155,154,154,153,152,151,151,150,150,151,151,152,153,152,152,153,152,153,153,155,158,158,158,158,157,156,154,152,151,150,148,145,142,141,142,142,144,143,142,144,146,146,147,151,153,153,154,153,154,153,151,152,154,153,150,148,147,144,142,142,141,141,140,140,140,139,139,138,136,134,130,127,124,123,124,123,122,122,123,123,123,123,121,119,119,120,121,122,122,123,126,131,134,138,140,141,142,144,146,147,149,150,152,152,152,152,153,154,154,154,151,147,143,141,139,137,136,135,137,138,139,142,142,141,139,139,139,140,140,140,138,135,133,133,134,134,133,135,136,134,133,132,132,132,132,132,132,132,132,132,133,132,131,130,129,127,125,123,120,118,114,114,114],[105,105,107,108,109,110,108,107,106,105,104,104,104,104,104,103,103,103,101,99,99,98,99,103,107,108,109,110,112,114,116,116,115,114,113,112,112,112,110,110,111,112,111,111,113,115,116,117,118,120,123,126,131,135,137,137,136,136,137,138,138,139,139,141,144,149,151,153,155,156,158,158,158,157,157,156,156,155,155,154,154,153,153,152,152,153,153,151,151,152,152,153,154,154,155,155,156,159,160,161,161,160,159,157,156,155,154,153,150,146,144,145,146,146,147,146,147,149,148,149,152,154,153,153,153,154,153,152,153,155,154,151,149,147,144,143,143,143,143,143,143,143,142,142,141,139,136,132,129,126,125,124,124,123,123,123,124,124,124,122,120,121,122,123,124,125,126,130,134,138,141,142,142,144,146,147,148,151,152,152,152,151,150,151,152,152,153,151,146,143,141,139,137,136,134,135,137,137,139,141,141,140,138,138,138,139,139,137,134,134,135,135,135,134,135,137,135,133,134,134,133,132,132,132,132,132,132,133,133,130,129,129,127,126,122,119,116,114,113,113],[104,105,107,109,109,109,107,105,103,101,101,100,101,102,101,100,101,101,99,97,96,96,99,103,106,108,108,109,110,112,114,115,114,114,114,113,113,112,110,110,110,112,111,110,112,114,114,115,118,122,125,127,131,135,135,134,134,134,134,135,135,136,136,138,142,147,150,151,153,153,154,155,156,155,157,157,156,156,155,155,155,154,154,154,155,155,154,153,152,151,152,154,154,153,154,155,157,159,162,164,164,164,162,159,158,157,156,155,153,150,148,148,148,148,148,148,148,150,150,150,152,154,154,153,154,155,154,154,155,156,156,153,152,150,148,147,145,145,146,145,145,145,144,144,144,142,138,134,131,128,126,124,125,125,124,123,125,125,124,122,121,123,124,125,126,127,129,133,137,141,143,145,146,147,149,150,151,153,153,152,152,150,149,150,150,149,150,148,145,142,139,138,136,135,135,134,135,136,138,140,140,139,138,137,137,137,136,136,134,135,135,135,136,135,137,138,136,134,135,136,134,132,132,132,131,131,131,132,131,129,129,127,125,124,120,117,115,114,113,113],[106,106,108,109,110,109,106,104,102,100,99,98,100,101,100,98,98,99,98,96,95,96,99,102,105,107,106,108,111,112,113,112,113,114,114,113,112,110,109,109,110,111,111,111,112,112,111,113,117,121,125,128,131,134,135,134,133,133,132,132,131,133,134,136,141,145,149,151,152,151,152,153,153,153,155,156,156,156,155,156,156,154,153,154,155,156,155,154,153,153,153,153,153,154,155,156,158,161,164,166,165,166,166,162,160,158,157,156,154,152,151,150,150,149,149,148,148,151,153,152,153,154,154,155,156,155,154,156,157,158,157,156,154,152,151,151,149,148,149,148,147,146,144,145,146,145,141,136,133,131,129,127,127,127,126,125,126,126,124,122,123,125,126,128,129,130,133,136,139,143,145,148,149,151,152,152,154,154,153,153,152,150,149,148,148,147,147,146,143,140,137,136,134,134,135,135,135,135,137,139,138,138,137,137,136,134,133,133,133,135,136,136,136,136,137,139,138,136,137,137,135,134,133,132,131,131,130,129,129,129,128,124,122,122,119,115,114,114,114,113],[109,108,108,108,107,106,104,103,101,100,98,97,98,100,99,98,98,98,98,98,97,98,99,100,103,105,106,106,109,111,111,110,112,113,113,111,109,107,106,108,108,110,111,111,111,111,112,114,117,120,125,128,130,133,134,135,134,134,133,132,132,133,133,135,139,143,147,149,149,149,151,153,152,152,154,154,154,155,156,157,157,154,154,153,154,155,155,154,154,155,154,155,156,157,157,159,161,164,166,168,168,169,168,165,163,161,159,159,156,154,151,151,151,150,150,150,150,153,153,153,154,154,154,155,155,155,156,157,158,158,158,158,155,152,152,153,151,150,150,150,150,148,146,146,146,145,142,137,135,134,130,127,126,126,125,125,126,127,125,123,125,126,128,130,130,133,136,140,143,146,148,151,152,153,153,154,154,154,155,154,152,150,147,146,147,146,146,144,141,138,136,136,135,134,135,135,134,133,134,135,135,134,135,135,133,131,130,130,131,133,135,135,136,136,138,140,139,138,138,138,137,136,134,132,132,132,129,127,128,128,125,122,121,120,117,113,113,114,113,113],[112,111,110,107,105,103,102,102,101,101,99,97,98,100,99,99,100,99,98,99,99,100,100,100,101,102,104,106,108,110,110,109,111,112,112,110,108,106,104,104,106,108,109,110,111,112,112,114,117,121,124,126,129,131,133,136,136,136,134,132,133,134,133,134,138,141,145,147,148,147,148,150,150,151,153,153,153,154,156,158,158,156,153,152,152,153,155,156,157,157,157,158,159,160,160,162,164,168,169,170,171,171,171,169,166,163,161,160,158,155,152,150,150,150,150,150,152,154,154,153,153,154,155,155,155,156,158,158,159,159,158,157,155,153,153,154,153,153,153,152,151,149,147,147,146,146,143,139,138,136,131,127,126,126,125,125,125,127,127,126,126,128,130,132,133,137,140,144,147,149,151,152,154,155,154,154,154,154,156,155,153,150,148,146,146,145,144,142,138,137,136,136,136,134,133,133,131,131,131,131,130,130,131,132,131,130,128,128,129,131,133,134,134,135,139,141,141,139,139,139,138,137,135,134,133,131,128,126,127,126,123,121,120,118,114,112,112,112,113,113],[115,114,111,108,106,105,104,102,101,100,97,95,97,99,100,100,100,99,99,99,100,101,101,102,101,101,103,106,108,109,110,109,110,112,111,109,107,105,104,103,105,108,108,109,111,113,113,114,117,121,123,124,127,130,133,136,137,137,135,133,133,134,133,134,137,139,143,144,145,146,147,148,147,149,150,152,154,154,156,157,157,156,153,152,151,152,155,157,157,157,158,160,161,162,163,165,166,170,171,171,172,173,173,171,168,164,161,158,156,154,151,149,147,148,147,148,150,153,154,153,154,155,154,155,157,159,160,160,161,161,159,158,156,154,154,154,156,157,155,153,152,150,148,147,147,146,144,140,138,136,132,128,127,127,127,126,126,127,128,128,128,129,130,133,136,140,143,146,148,151,153,153,155,157,156,156,156,155,156,156,154,150,149,147,144,143,141,140,137,135,135,134,134,132,130,130,130,130,128,127,127,128,129,130,129,128,126,125,127,129,131,132,133,134,139,142,142,141,141,141,139,138,136,135,134,130,128,126,125,125,122,120,117,113,110,109,108,108,110,111],[116,114,111,109,108,106,105,101,99,97,94,94,95,98,100,99,99,99,99,99,101,102,102,103,103,103,103,105,107,109,109,109,110,111,111,109,106,105,104,104,106,107,108,109,111,112,113,114,116,120,122,123,126,128,132,135,137,136,134,133,134,134,134,135,138,139,141,143,144,145,146,146,145,147,148,151,154,155,156,156,156,156,154,153,153,153,155,157,157,157,158,160,162,164,164,165,167,170,172,172,173,174,173,170,167,163,160,157,155,154,152,148,147,147,146,145,147,151,153,153,154,154,154,156,159,161,162,163,164,163,162,160,158,157,156,156,157,158,157,155,155,153,150,149,148,147,144,140,138,137,133,129,128,128,128,128,128,127,128,129,129,128,129,133,136,141,145,147,151,153,155,156,157,158,158,158,158,157,156,157,155,152,149,146,143,140,139,139,136,134,134,134,132,129,127,127,128,128,126,126,127,126,127,127,126,126,124,124,126,127,128,131,133,136,140,142,142,142,143,142,139,138,136,134,132,130,127,124,122,123,122,119,114,110,107,105,104,105,107,109],[115,114,112,110,108,106,104,99,97,95,94,94,95,97,98,98,99,99,98,98,100,103,104,104,104,103,102,103,105,107,107,108,107,109,109,109,108,107,106,107,108,108,109,110,111,113,114,115,117,120,122,125,128,130,133,135,136,136,135,135,135,136,136,137,138,139,141,142,143,144,144,145,144,145,147,148,151,153,154,156,157,156,155,154,153,154,155,156,156,158,158,159,162,165,165,165,169,172,172,173,174,174,172,168,166,163,159,158,156,156,153,149,148,147,144,144,147,150,152,153,153,154,155,157,160,163,164,165,165,164,163,162,160,159,156,156,158,159,159,158,156,155,152,150,149,148,144,140,138,136,132,128,128,128,130,130,129,128,129,129,129,128,128,133,136,141,145,148,152,155,157,158,158,159,159,159,159,158,157,156,154,152,149,145,141,138,138,138,136,133,134,134,131,127,125,125,125,126,125,125,125,124,125,124,124,124,123,123,125,127,129,131,133,136,140,142,142,142,143,143,141,139,136,133,131,129,125,121,121,120,118,116,111,107,104,102,104,106,107,107],[115,114,112,110,108,106,103,98,95,94,93,94,94,95,96,98,99,99,98,99,101,104,105,105,105,104,103,102,104,105,106,106,106,107,108,108,108,107,107,109,110,110,110,111,112,114,115,116,117,119,122,127,130,131,133,134,135,136,137,138,138,138,138,138,140,141,141,141,142,142,143,144,143,145,146,147,149,151,153,156,158,157,156,154,154,154,154,154,156,157,158,159,161,165,166,167,170,173,172,173,174,173,171,167,164,162,159,158,157,156,155,151,148,146,144,144,147,149,151,153,154,154,156,159,161,164,166,166,166,165,165,164,162,160,158,158,159,160,161,160,158,157,153,152,151,149,145,140,139,136,131,128,128,129,131,133,131,130,130,131,130,128,128,132,136,141,146,150,153,157,159,160,159,159,159,160,160,159,157,155,153,151,149,145,141,137,138,139,136,133,133,132,130,127,124,124,124,124,124,123,124,124,124,122,121,122,122,122,124,127,130,132,135,137,140,142,142,142,144,144,143,140,136,132,130,127,123,119,118,116,114,112,109,107,104,103,105,107,107,107],[114,114,112,110,108,105,102,98,96,94,93,93,94,94,97,98,97,98,99,100,102,104,105,106,106,105,103,102,104,105,107,108,108,108,108,108,108,108,107,109,110,110,112,113,114,115,116,116,118,121,125,129,130,132,132,134,135,135,137,139,139,139,139,139,142,143,142,139,141,142,143,144,144,145,146,148,150,152,155,157,158,156,155,156,155,155,154,153,155,157,159,161,162,164,165,166,169,172,172,172,173,173,171,168,164,160,158,156,156,154,153,151,148,146,144,145,146,147,149,151,153,154,157,159,161,164,166,166,166,165,164,163,163,161,160,160,159,160,161,160,159,157,154,152,151,149,145,141,140,138,133,129,128,128,130,133,133,132,132,131,130,130,131,134,138,142,148,151,154,156,157,159,158,159,160,160,160,160,158,156,155,153,150,147,143,139,140,140,137,134,133,131,128,127,124,124,124,123,124,123,122,122,121,121,121,122,121,122,124,127,130,133,135,137,139,141,142,143,145,144,143,140,136,133,130,127,122,118,115,113,112,110,109,108,105,103,105,106,107,107],[116,115,114,112,110,106,102,100,97,95,93,92,93,94,97,98,97,97,100,101,102,103,104,105,106,105,103,103,104,107,109,111,111,110,110,108,109,108,107,108,110,110,112,113,115,117,118,118,119,123,127,129,130,132,133,134,136,137,139,140,140,140,139,140,142,143,142,141,141,143,145,145,144,146,147,150,152,153,156,158,156,154,155,156,155,154,153,153,155,158,161,163,163,163,163,166,169,172,171,171,171,171,171,168,164,159,157,155,153,151,149,148,146,143,144,145,145,145,147,149,152,154,156,159,162,164,166,166,165,165,164,164,164,163,162,163,162,161,161,161,158,155,153,151,150,148,145,141,140,138,135,131,129,129,129,132,133,132,132,131,131,133,135,137,140,144,148,151,152,154,154,157,158,159,159,160,161,162,159,157,156,155,151,147,144,142,142,141,138,135,133,129,127,127,126,125,123,123,124,122,120,120,120,121,122,123,122,122,125,127,129,132,134,135,138,141,142,143,144,144,143,142,138,135,131,127,123,120,116,112,111,110,109,107,105,104,104,105,107,108],[117,117,116,114,111,107,104,101,97,94,92,92,92,94,96,97,96,96,99,101,101,102,102,104,104,104,104,105,107,109,111,111,111,110,109,109,110,110,109,110,111,113,114,114,117,118,119,120,122,126,129,129,130,132,132,134,136,139,140,140,141,141,140,141,142,142,142,142,142,144,145,145,145,146,148,150,152,153,155,158,156,153,153,154,154,152,153,155,156,159,162,164,164,163,165,168,170,172,171,170,170,169,168,166,161,157,155,154,152,150,148,147,144,141,142,144,144,143,145,149,152,155,156,158,160,162,165,165,165,164,164,166,166,166,166,165,164,161,161,161,157,153,152,150,149,148,144,140,139,137,136,133,130,130,129,131,132,132,133,133,134,136,136,138,141,145,149,151,151,152,152,155,157,158,159,159,161,162,160,156,156,155,152,148,146,144,143,141,138,135,132,129,128,127,125,125,123,123,123,122,122,122,120,119,121,122,122,121,125,128,130,132,134,135,138,141,143,143,145,145,142,141,137,134,131,127,125,121,116,111,109,109,108,106,106,106,105,106,108,111],[119,118,117,115,113,108,104,101,98,95,91,91,92,93,94,95,95,94,97,99,100,100,102,103,103,103,105,106,109,112,113,112,111,110,110,111,111,111,110,110,112,115,116,116,119,121,121,121,124,128,130,130,131,132,132,134,136,138,140,140,141,141,140,141,141,141,141,141,142,144,146,146,147,147,148,149,151,152,154,156,155,152,152,153,153,153,154,156,157,160,162,163,164,164,167,170,172,172,171,170,169,167,165,162,158,155,154,154,151,148,148,145,142,140,141,142,143,142,144,148,153,155,156,158,159,162,165,165,164,164,165,167,168,168,168,166,165,162,160,159,155,152,151,149,148,147,143,141,140,137,136,133,130,130,129,131,133,133,133,134,137,139,139,139,141,146,149,150,151,150,150,152,154,156,157,158,160,162,160,158,157,155,152,149,147,144,142,141,138,134,132,130,129,127,124,124,124,124,124,124,123,123,121,121,120,122,123,122,125,129,131,132,133,135,138,141,143,144,144,142,140,139,136,135,132,128,127,123,118,113,109,108,107,106,108,108,108,108,111,113],[117,118,117,115,112,107,104,100,98,96,92,90,91,92,94,94,93,93,96,98,99,99,101,103,103,104,105,107,111,114,114,112,113,112,112,112,111,110,109,109,112,116,117,117,120,123,124,124,127,130,131,131,132,133,134,136,137,138,140,141,142,142,141,142,141,141,141,142,143,145,146,147,147,147,148,149,151,153,154,154,154,152,153,154,153,153,153,154,157,160,160,162,164,166,168,169,171,170,169,169,167,166,163,159,156,154,152,151,149,147,146,144,141,139,139,140,141,143,145,148,151,154,156,158,159,161,163,163,163,164,166,168,169,169,167,165,164,162,160,158,155,152,149,147,146,145,144,143,141,138,136,134,131,131,132,132,134,134,135,136,137,140,140,141,144,147,147,147,149,150,150,152,153,154,156,158,161,162,161,159,157,156,154,151,148,145,143,141,138,134,132,131,129,127,126,123,123,124,124,123,124,123,123,124,124,124,124,123,126,129,129,130,132,135,137,139,142,144,143,140,139,137,136,136,133,129,126,122,119,115,112,110,109,108,110,110,110,111,112,115],[116,116,116,114,109,106,103,99,97,96,93,91,91,92,94,94,92,91,93,97,99,100,101,104,105,104,106,109,112,114,114,114,115,115,114,113,110,109,109,110,113,116,118,119,120,124,126,127,129,130,132,132,132,133,134,135,136,136,138,139,141,142,142,142,142,142,141,141,142,143,145,146,147,148,149,150,151,152,153,154,153,153,154,154,152,152,151,153,155,157,158,159,162,166,168,168,168,168,168,167,167,165,162,158,156,153,150,149,147,146,145,142,140,138,138,138,140,143,145,148,150,153,155,157,158,160,161,161,161,162,165,167,168,167,165,163,162,161,160,158,155,152,149,148,147,146,145,144,141,139,137,134,133,133,134,134,135,135,136,137,139,140,142,143,146,147,146,146,148,150,150,151,151,153,154,157,160,162,161,159,157,157,155,153,150,147,145,142,139,137,133,131,128,127,125,123,123,123,123,123,124,124,123,125,126,126,125,125,126,129,130,130,132,135,137,138,141,143,142,140,138,137,136,135,133,130,126,122,119,117,115,114,112,111,114,114,113,113,113,116],[116,115,115,112,109,105,100,97,96,94,92,91,91,91,93,93,91,90,93,96,98,101,102,104,105,105,107,110,112,114,115,117,118,118,116,114,112,110,109,111,114,117,119,121,122,125,127,127,128,129,131,133,133,133,133,134,134,134,137,138,140,141,140,139,141,141,139,138,140,142,145,146,147,147,148,151,151,152,154,155,154,153,154,153,153,152,151,151,152,153,154,155,159,164,166,166,166,165,164,163,163,162,158,155,154,151,148,146,144,145,143,141,139,137,136,137,139,141,143,145,149,152,154,155,156,159,159,159,160,161,163,165,165,165,164,164,163,161,158,156,152,149,148,148,147,146,145,144,141,139,136,132,132,133,134,134,135,135,137,139,139,140,142,143,143,145,144,144,146,149,149,149,150,152,152,155,159,161,161,159,158,158,156,155,152,149,147,144,142,140,135,131,129,127,125,123,123,123,124,123,125,126,126,125,127,127,127,127,129,131,131,131,134,136,136,137,139,142,141,140,138,137,136,133,132,131,127,124,123,121,119,117,115,114,116,115,115,114,115,117],[116,114,113,112,108,102,98,95,94,93,91,91,91,91,92,92,90,90,93,96,97,99,102,105,106,106,109,111,112,115,117,119,120,119,117,114,111,110,109,112,115,118,120,122,124,126,127,127,128,129,131,133,133,132,132,131,132,133,136,138,139,139,139,139,139,139,138,137,138,141,145,145,146,146,147,150,151,152,154,155,155,155,154,153,153,151,149,148,148,149,151,153,157,161,164,164,163,162,161,160,160,159,156,153,151,149,146,143,141,141,141,139,137,135,134,135,137,138,140,143,146,150,153,153,155,157,157,157,158,159,162,163,162,163,164,165,164,161,157,154,150,147,147,147,147,147,144,142,140,137,135,133,133,133,134,134,134,136,138,139,139,140,141,141,142,143,142,142,144,146,148,149,150,151,151,154,158,161,159,158,158,157,157,157,154,151,150,147,144,141,136,132,129,127,125,123,122,123,124,125,127,129,128,126,127,128,128,129,131,131,131,132,135,137,137,137,138,140,140,139,138,136,134,132,132,130,127,126,126,125,123,120,118,118,117,116,115,115,116,117],[116,113,112,111,106,101,96,93,91,92,91,91,92,91,91,91,90,90,92,95,96,98,102,105,107,108,110,113,114,117,120,122,121,119,117,114,112,112,112,114,118,121,122,124,126,128,128,128,129,130,132,133,132,131,131,130,130,131,133,135,136,136,137,139,138,137,136,135,137,139,142,143,145,146,146,147,149,150,152,153,154,155,154,152,151,150,148,147,147,147,150,152,155,158,160,162,162,160,158,157,157,156,154,151,150,148,145,143,141,138,138,137,135,134,133,134,134,136,139,142,145,148,150,151,154,156,156,156,157,158,160,161,161,162,163,165,163,160,157,154,151,148,148,148,148,149,146,142,139,136,134,133,133,135,134,135,135,137,138,139,141,141,141,140,141,142,143,143,144,143,145,146,147,149,151,154,157,160,159,158,157,155,156,156,154,152,150,148,145,141,138,135,130,127,124,121,120,122,124,126,128,129,128,127,129,130,131,130,131,131,131,133,135,138,137,137,138,139,139,139,137,135,133,132,131,130,129,127,128,128,125,122,122,121,119,118,117,117,119,119],[116,112,109,108,104,99,95,92,90,91,91,92,91,90,90,90,90,91,92,94,96,99,103,106,109,111,113,115,117,120,123,123,121,118,116,115,114,114,115,117,119,121,123,125,128,130,131,131,131,132,135,134,132,130,130,130,130,129,130,132,134,133,134,136,136,135,134,134,136,138,141,142,144,144,142,143,146,147,148,149,150,153,153,151,150,148,147,146,146,145,148,151,153,154,156,159,160,158,155,154,154,155,152,149,148,147,146,143,141,138,136,136,134,134,134,133,133,134,138,142,145,147,148,150,153,154,153,155,157,158,160,161,160,160,161,163,162,160,158,155,152,151,150,149,148,149,147,143,140,137,135,134,135,136,135,135,137,138,138,138,140,140,140,139,139,141,143,143,143,141,140,143,145,147,151,153,155,158,159,158,156,155,155,154,153,152,149,146,143,141,139,136,131,127,125,123,122,122,125,127,128,129,128,129,132,132,133,132,132,131,131,132,134,136,137,136,137,138,139,138,136,133,132,132,130,130,130,128,128,128,126,124,123,122,120,120,119,120,122,123]];
Profiler.active = false;
Profiler.PROFILE_MAIN = 0;
Profiler.PROFILE_RENDER = 1;
Profiler.PROFILE_LOGIC = 2;
Profiler.graphwidth = 120;
Render.star_x = [];
Render.star_y = [];
Render.star_speed = [];
Render.titlescreenmap = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1],[1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1],[1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1],[1,0,2,2,2,2,2,2,2,2,2,2,2,2,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];
Render.titleherox = 1;
Render.titleheroy = 10;
Render.titleheroanimx = 0;
Render.titleheroanimy = 0;
Render.titleheroframe = 112;
Render.titleguardframe = 112;
Render.titleherostate = 0;
Render.titleherostatedelay = 0;
Render.titleplayeronleftguardonright = false;
Render.titleshowguard = false;
Render.titleguardjumpframe = 0;
Render.floortextx = 5;
Render.hptextx = 75;
Render.keytextx = 155;
Render.gemtextx = 195;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
gamecontrol_Draw.tilewidth = 12;
gamecontrol_Draw.tileheight = 12;
gamecontrol_Draw.FADED_IN = 0;
gamecontrol_Draw.FADED_OUT = 1;
gamecontrol_Draw.FADE_OUT = 2;
gamecontrol_Draw.FADING_OUT = 3;
gamecontrol_Draw.FADE_IN = 4;
gamecontrol_Draw.FADING_IN = 5;
gamecontrol_Game.TITLEMODE = 0;
gamecontrol_Game.CLICKTOSTART = 1;
gamecontrol_Game.FOCUSMODE = 2;
gamecontrol_Game.GAMEMODE = 3;
gamecontrol_Game.EDITORMODE = 4;
gamecontrol_Game.EXPIREDMODE = 5;
gamecontrol_Game.ENDINGMODE = 6;
gamecontrol_Game.FALLINGFROMTOWER = 7;
gamecontrol_Game.NORMAL = 0;
gamecontrol_Game.ALERTED = 1;
gamecontrol_Game.STUNNED = 2;
gamecontrol_Game.DOG_SEEKGUARD = 3;
gamecontrol_Game.DOG_CHASEPLAYER = 4;
gamecontrol_Game.CAMERA_SCANLEFT = 3;
gamecontrol_Game.CAMERA_SCANRIGHT = 4;
gamecontrol_Game.useteststart = false;
gamecontrol_Game.possiblemove = [];
gamecontrol_Game.possiblemovescore = [];
gamecontrol_Game.speedframe = 0;
gamecontrol_Game.message = "";
gamecontrol_Game.messagedelay = 0;
gamecontrol_Game.messagecol = "white";
gamecontrol_Game.health = 3;
gamecontrol_Game.keys = 3;
gamecontrol_Game.cash = 0;
gamecontrol_Game.highlightcooldown = 0;
gamecontrol_Game.alarm = false;
gamecontrol_Game.alarmsound = 0;
gamecontrol_Game.alertlevel = 0;
gamecontrol_Game.reinforcements = [];
gamecontrol_Game.reinforcementspeed = [];
gamecontrol_Game.floor = 1;
gamecontrol_Game.blueprint = [];
gamecontrol_Game.towerblueprints = [];
gamecontrol_Game.towergadgets = [];
gamecontrol_Game.towergadgets_rare = [];
gamecontrol_Game.toweritems = [];
gamecontrol_Game.toweritems_rare = [];
gamecontrol_Game.flooritems = [];
gamecontrol_Game.floorgadgets = [];
gamecontrol_Game.floorenemies = new config_Numlist();
gamecontrol_Game.floortreasure = [];
gamecontrol_Game.preshuffle = [];
gamecontrol_Game.placement = [];
gamecontrol_Game.placementindex = new haxe_ds_StringMap();
gamecontrol_Game.backgroundcolour = 1124677;
gamecontrol_Game.letterreadspeed = 3;
openfl_geom_Point.__temp = new openfl_geom_Point();
gamecontrol_Generator.lockedtype = "A";
gamecontrol_Generator.tpoint = new openfl_geom_Point();
gamecontrol_Generator.tpoint2 = new openfl_geom_Point();
gamecontrol_Generator.lines = [];
gamecontrol_Generator.rooms = [];
gamecontrol_Generator.connectionsort = [];
gamecontrol_Generator.numrejections = 0;
gamecontrol_Generator.thingstoplace = new config_Numlist();
gamecontrol_Generator.thingstoplace_type = new config_Numlist();
gamecontrol_Generator.xplace = [];
gamecontrol_Generator.yplace = [];
gamecontrol_Inventory.USEABLE = 0;
gamecontrol_Inventory.WEAPON = 1;
gamecontrol_Inventory.GADGET = 2;
gamecontrol_Inventory.TREASURE = 3;
gamecontrol_Inventory.LETTER = 4;
gamecontrol_Inventory.MAP = 5;
gamecontrol_Inventory.itemlist = [];
gamecontrol_Inventory.inventory = [];
gamecontrol_Inventory.inventory_count = [];
gamecontrol_Inventory.useitemcountdown = 0;
gamecontrol_Inventory.itemtouse = 0;
gamecontrol_Localworld.BACKGROUND = 0;
gamecontrol_Localworld.FLOOR = 1;
gamecontrol_Localworld.BLOOD = 2;
gamecontrol_Localworld.WALL = 3;
gamecontrol_Localworld.DOOR = 4;
gamecontrol_Localworld.KEY = 5;
gamecontrol_Localworld.OPENDOOR = 6;
gamecontrol_Localworld.STAIRS = 7;
gamecontrol_Localworld.RUBBLE = 8;
gamecontrol_Localworld.EMPTYBACKGROUND = 9;
gamecontrol_Localworld.ENTRANCE = 10;
gamecontrol_Localworld.OUTSIDE_GROUND = 11;
gamecontrol_Localworld.OUTSIDE_EDGE = 12;
gamecontrol_Localworld.OUTSIDE_ABYSS = 13;
gamecontrol_Localworld.LOCKEDDOOR = 14;
gamecontrol_Localworld.CONSIDERLOCKEDEXIT_A = 15;
gamecontrol_Localworld.CONSIDERLOCKEDEXIT_B = 16;
gamecontrol_Localworld.CONSIDERLOCKEDDOOR = 17;
gamecontrol_Localworld.BANANAPEEL = 18;
gamecontrol_Localworld.DEBRIS = 19;
gamecontrol_Localworld.ROOFSIDE = 20;
gamecontrol_Localworld.ROOFBACKGROUND = 21;
gamecontrol_Localworld.ROOFSTARS = 22;
gamecontrol_Localworld.numworldblocks = 14;
gamecontrol_Localworld.heatstartx = -1;
gamecontrol_Localworld.heatstarty = -1;
gamecontrol_Localworld.worldblock = [];
gamecontrol_Menu.menuoptions = [];
gamecontrol_Menu.menucol = [];
gamecontrol_Menu.currentmenu = 0;
gamecontrol_Menu.showscript = "none";
gamecontrol_Menu.textmode = 0;
gamecontrol_Menu.availableaction = 0;
gamecontrol_Openworld.PIT = 0;
gamecontrol_Openworld.RUIN1 = 1;
gamecontrol_Openworld.RUIN2 = 2;
gamecontrol_Openworld.RUIN3 = 3;
gamecontrol_Openworld.RUIN4 = 4;
gamecontrol_Openworld.RIVER = 5;
gamecontrol_Openworld.BUILDING = 6;
gamecontrol_Openworld.ROAD = 7;
gamecontrol_Openworld.CAMP = 8;
gamecontrol_Openworld.worldblock = [];
gamecontrol_Openworld.inside = true;
gamecontrol_Script.commands = [];
gamecontrol_Script.words = [];
gamecontrol_Script.txt = [];
gamecontrol_Use.doorknockcheck = false;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = new haxe__$Int64__$_$_$Int64(0,0);
haxe_io_FPHelper.LN2 = 0.6931471805599453;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved.gt != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved.amp != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved.quot != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved.apos != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxegon_Col.BLACK = 0;
haxegon_Col.GREY = 10329501;
haxegon_Col.GRAY = 10329501;
haxegon_Col.WHITE = 16777215;
haxegon_Col.RED = 12461619;
haxegon_Col.PINK = 14708619;
haxegon_Col.DARKBROWN = 4799531;
haxegon_Col.BROWN = 10773538;
haxegon_Col.ORANGE = 15436081;
haxegon_Col.YELLOW = 16245355;
haxegon_Col.DARKGREEN = 3098702;
haxegon_Col.GREEN = 4491546;
haxegon_Col.LIGHTGREEN = 10735143;
haxegon_Col.NIGHTBLUE = 1779250;
haxegon_Col.DARKBLUE = 22404;
haxegon_Col.BLUE = 3252978;
haxegon_Col.LIGHTBLUE = 11721967;
haxegon_Col.MAGENTA = 16711935;
haxegon_Col.TRANSPARENT = 1;
haxegon_Col.hslval = [0.0,0.0,0.0];
starling_events_EventDispatcher.sBubbleChains = [];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
starling_display_DisplayObject.sAncestors = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_DisplayObject.sHelperPoint = new openfl_geom_Point();
starling_display_DisplayObject.sHelperPoint3D = new openfl_geom_Vector3D();
starling_display_DisplayObject.sHelperPointAlt3D = new openfl_geom_Vector3D();
starling_display_DisplayObject.sHelperRect = new openfl_geom_Rectangle();
starling_display_DisplayObject.sHelperMatrix = new openfl_geom_Matrix();
starling_display_DisplayObject.sHelperMatrixAlt = new openfl_geom_Matrix();
starling_display_DisplayObject.sHelperMatrix3D = new openfl_geom_Matrix3D();
starling_display_DisplayObject.sHelperMatrixAlt3D = new openfl_geom_Matrix3D();
starling_display_DisplayObjectContainer.sHelperMatrix = new openfl_geom_Matrix();
starling_display_DisplayObjectContainer.sHelperPoint = new openfl_geom_Point();
starling_display_DisplayObjectContainer.sBroadcastListeners = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_DisplayObjectContainer.sSortBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_Sprite.sHelperMatrix = new openfl_geom_Matrix();
starling_display_Sprite.sHelperPoint = new openfl_geom_Point();
starling_display_Sprite.sHelperRect = new openfl_geom_Rectangle();
haxegon_Core.WINDOW_WIDTH = "1152";
haxegon_Core.WINDOW_HEIGHT = "720";
haxegon_Core.TARGETFRAMERATE = 30;
haxegon_Core.MAXFRAMESKIP = 4;
haxegon_Core.startframeextended = false;
haxegon_Core.updateextended = false;
haxegon_Core.renderextended = false;
haxegon_Data.width = 0;
haxegon_Data.height = 0;
haxegon_Data._savefile = "";
haxegon_Debug.debuglog = [];
starling_display_Quad.sHelperPoint = new openfl_geom_Point();
starling_display_Quad.sHelperPoint3D = new openfl_geom_Vector3D();
starling_display_Quad.sHelperMatrix = new openfl_geom_Matrix();
starling_display_Quad.sHelperMatrix3D = new openfl_geom_Matrix3D();
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
starling_utils_VertexData.ELEMENTS_PER_VERTEX = 8;
starling_utils_VertexData.POSITION_OFFSET = 0;
starling_utils_VertexData.COLOR_OFFSET = 2;
starling_utils_VertexData.TEXCOORD_OFFSET = 6;
starling_utils_VertexData.sHelperPoint = new openfl_geom_Point();
starling_utils_VertexData.sHelperPoint3D = new openfl_geom_Vector3D();
haxegon_Gfx.LEFT = -10000;
haxegon_Gfx.RIGHT = -20000;
haxegon_Gfx.TOP = -10000;
haxegon_Gfx.BOTTOM = -20000;
haxegon_Gfx.CENTER = -15000;
haxegon_Gfx.clearcolor = 0;
haxegon_Gfx.tempquad = new starling_display_Quad(1,1);
haxegon_Gfx.trect = new openfl_geom_Rectangle();
haxegon_Gfx.shapematrix = new openfl_geom_Matrix();
haxegon_Gfx.imageindex = new haxe_ds_StringMap();
haxegon_Gfx.images = [];
haxegon_Gfx.tiles = [];
haxegon_Gfx.tilesetindex = new haxe_ds_StringMap();
haxegon_Gfx.currenttileset = -1;
haxegon_Gfx.gfxinit = false;
haxegon_Input.clipboardbuffer = [""];
haxegon_Input.keymap = new haxe_ds_EnumValueMap();
haxegon_Input.lookup = new haxe_ds_IntMap();
haxegon_Input.current = [];
haxegon_Input.last = [];
haxegon_Input.keyheld = [];
haxegon_Input.numletters = 256;
haxegon_Input.keybuffer = "";
haxegon_Mouse.mousewheel = 0;
haxegon_Music.musicchan = [];
haxegon_Music.effectindex = new haxe_ds_StringMap();
haxegon_Music.volumelevels = [];
haxegon_Music.songindex = new haxe_ds_StringMap();
haxegon_Music.songvolumelevels = [];
haxegon_Music.efchannel = [];
haxegon_Music.efchan = [];
haxegon_Random.seed = 0;
haxegon_Text.fontfile = [];
haxegon_Text.fontfileindex = new haxe_ds_StringMap();
haxegon_Text.typeface = [];
haxegon_Text.typefaceindex = new haxe_ds_StringMap();
haxegon_Text.fontmatrix = new openfl_geom_Matrix();
haxegon_Text.currentindex = -1;
haxegon_Text.currentfont = "null";
haxegon_Text.currentsize = -1;
haxegon_Text.LEFT = -10000;
haxegon_Text.RIGHT = -20000;
haxegon_Text.TOP = -10000;
haxegon_Text.BOTTOM = -20000;
haxegon_Text.CENTER = -15000;
haxegon_Text.textalign = -10000;
haxegon_Text.textrotate = 0;
haxegon_Text.textrotatexpivot = 0;
haxegon_Text.textrotateypivot = 0;
haxegon_Text.tempxpivot = 0;
haxegon_Text.tempypivot = 0;
haxegon_Text.wordwrapwidth = 0;
js_Boot.__toStr = { }.toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$backend_html5_HTML5Window.dummyCharacter = "";
lime__$backend_html5_HTML5Window.windowID = 0;
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_ExtensionPackedDepthStencil.DEPTH24_STENCIL8_EXT = 35056;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_JNI.alreadyCreated = new haxe_ds_StringMap();
lime_system_JNI.initialized = false;
lime_system_System.__directories = new haxe_ds_IntMap();
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_from_data_pointer = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_get_data_pointer = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_read_file = lime_system_CFFI.load("lime","lime_bytes_read_file",2,false);
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Log_LogLevel_$Impl_$.NONE = 0;
lime_utils__$Log_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;
lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;
lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
modernversion_AIDirector.seed = "random";
modernversion_AIDirector.floor = 1;
modernversion_AIDirector.roomlit = false;
modernversion_AIDirector.darkroom = false;
modernversion_AIDirector.gems = 1;
modernversion_AIDirector.keys = 1;
modernversion_AIDirector.lockedexit = true;
modernversion_AIDirector.extralockeddoors = 1;
modernversion_AIDirector.style = modernversion_Roomstyle.intro;
modernversion_AIDirector.blueprint = [];
modernversion_AIDirector.enemylist = [];
modernversion_AIDirector.weaponlist = [];
modernversion_AIDirector.itemlist = [];
modernversion_AIDirector.startingitems = [];
modernversion_AIDirector.reinforcements = [];
modernversion_AIDirector.reinforcementtime = [];
modernversion_AIDirector.glitchmode = false;
modernversion_AIDirector.outside = false;
modernversion_AIDirector.entrance = "";
modernversion_Enemy.GUARD = "guard";
modernversion_Enemy.LASERGUARD = "laserguard";
modernversion_Enemy.DOG = "dog";
modernversion_Enemy.CAMERA = "camera";
modernversion_Enemy.LASERCAMERA = "lasercamera";
modernversion_Enemy.SENTINAL = "sentinal";
modernversion_Enemy.LASERSENTINAL = "lasersentinal";
modernversion_Enemy.FIREMAN = "fireman";
modernversion_Enemy.BOMBBOT = "bombbot";
modernversion_Enemy.ROBOT = "robot";
modernversion_Enemy.TERMINATOR = "terminator";
modernversion_Enemy.ROOK = "rook";
modernversion_Enemy.TRIPWIRE_LEFT = "tripwire_left";
modernversion_Enemy.TRIPWIRE_RIGHT = "tripwire_right";
modernversion_Enemy.TRIPWIRE_UP = "tripwire_up";
modernversion_Enemy.TRIPWIRE_DOWN = "tripwire_down";
modernversion_Enemy.LASERDOG = "laserdog";
modernversion_Enemy.LASERWIRE_LEFT = "laserwire_left";
modernversion_Enemy.LASERWIRE_RIGHT = "laserwire_right";
modernversion_Enemy.LASERWIRE_UP = "laserwire_up";
modernversion_Enemy.LASERWIRE_DOWN = "laserwire_down";
modernversion_Enemy.DRONE_LIGHT = "drone_light";
modernversion_Enemy.DRONE_LASER = "drone_laser";
modernversion_Item.FIRSTAIDKIT = "first aid kit";
modernversion_Item.LIGHTBULB = "lightbulb";
modernversion_Item.TIMESTOPPER = "time stopper";
modernversion_Item.SIGNALJAMMER = "signal jammer";
modernversion_Item.CARDBOARDBOX = "cardboard box";
modernversion_Item.DRILL = "drill";
modernversion_Item.ICECUBE = "ice cube";
modernversion_Item.PORTABLEDOOR = "portable door";
modernversion_Item.BANANAPEEL = "banana";
modernversion_Item.BOMB = "bomb";
modernversion_Item.HELIXWING = "helix wing";
modernversion_Item.ERRORBOMB = "error";
modernversion_Itemstats.itemlist = [];
modernversion_Itemstats.encountered = [];
modernversion_Modern.STANDARDSTUNTIME = 30;
modernversion_Modern.LONGSTUNTIME = 60;
modernversion_Modern.TORCHRANGE = 6;
modernversion_Modern.hpflash = 0;
modernversion_Modern.keyflash = 0;
modernversion_Modern.gemflash = 0;
modernversion_Modern.waitflash = 0;
modernversion_Modern.flashtime = 10;
modernversion_Modern.worldx = 50;
modernversion_Modern.worldy = 50;
modernversion_Modern.itemtopleft = "";
modernversion_Modern.itemtopright = "";
modernversion_Modern.itembottomright = "";
modernversion_Modern.itembottomleft = "";
modernversion_Modern.popupwindow = false;
modernversion_Modern.popupmode = "";
modernversion_Modern.popupstate = 0;
modernversion_Modern.popuplerp = 0;
modernversion_Modern.popupspeed = 20;
modernversion_Modern.popupanimationtype_appear = "back_out";
modernversion_Modern.popupanimationtype_disappear = "back_out";
modernversion_Modern.keygemrate = 0;
modernversion_Modern.keygemratelevel = 0;
modernversion_Modern.menuselection = 0;
modernversion_Modern.currentshopkeeper = 0;
modernversion_Modern.streakcount = 0;
modernversion_Modern.highestfloor = 1;
modernversion_Modern.newrecord = false;
modernversion_Modern.endlevelanimationstate = 0;
modernversion_Modern.endlevelanimationdelay = 0;
modernversion_Modern.endlevelanimationspeed = 1;
modernversion_Modern.endlevelanimationx = 0;
modernversion_Modern.endlevelanimationy = 0;
modernversion_Modern.endlevelanimationaction = "next";
modernversion_Modern.playeronstairs = false;
modernversion_Modern.playerjustteleported = false;
modernversion_Modern.currentslot = 0;
modernversion_Modern.oldcurrentslot = 0;
modernversion_Weapon.PISTOL = "pistol";
modernversion_Weapon.SKATEBOARD = "skateboard";
modernversion_Weapon.KNOCKOUTGAS = "knockout gas";
modernversion_Weapon.FIREEXTINGUISHER = "fire extinguisher";
modernversion_Weapon.MATCHSTICK = "matchstick";
modernversion_Weapon.SWORD = "sword";
modernversion_Weapon.LEAFBLOWER = "leaf blower";
modernversion_Weapon.EMPBLASTER = "emp blaster";
modernversion_Weapon.TELEPORTER = "teleporter";
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_stage3D_AGALConverter.limitedProfile = true;
openfl__$internal_stage3D_Context3DStateCache.FLOATS_PER_REGISTER = 4;
openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;
openfl__$internal_stage3D_Context3DStateCache.disableCache = true;
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.DRAW_CALLS = 0;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_INDEX_BUFFER = 1;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_VERTEX_BUFFER = 2;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE = 3;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE_COMPRESSED = 4;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_PROGRAM = 5;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_INDEX_BUFFER = 6;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_VERTEX_BUFFER = 7;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE = 8;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE_COMPRESSED = 9;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_PROGRAM = 10;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.$length = 11;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_Program3D.verbose = lime_utils_Log.level == 5;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_external_ExternalInterface.available = true;
openfl_external_ExternalInterface.marshallExceptions = false;
openfl_filters_BlurFilter.__blurShader = new openfl_filters__$BlurFilter_BlurShader();
openfl_filters_ColorMatrixFilter.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
openfl_filters_GlowFilter.__glowShader = new openfl_filters__$GlowFilter_GlowShader();
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl_net_SharedObject.defaultObjectEncoding = 3;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.FLUSHED = 0;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.PENDING = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_Capabilities.avHardwareDisable = true;
openfl_system_Capabilities.cpuArchitecture = "";
openfl_system_Capabilities.hasAccessibility = false;
openfl_system_Capabilities.hasAudio = true;
openfl_system_Capabilities.hasAudioEncoder = false;
openfl_system_Capabilities.hasEmbeddedVideo = false;
openfl_system_Capabilities.hasIME = false;
openfl_system_Capabilities.hasMP3 = false;
openfl_system_Capabilities.hasPrinting = false;
openfl_system_Capabilities.hasScreenBroadcast = false;
openfl_system_Capabilities.hasScreenPlayback = false;
openfl_system_Capabilities.hasStreamingAudio = false;
openfl_system_Capabilities.hasStreamingVideo = false;
openfl_system_Capabilities.hasTLS = true;
openfl_system_Capabilities.hasVideoEncoder = false;
openfl_system_Capabilities.isDebugger = false;
openfl_system_Capabilities.isEmbeddedInAcrobat = false;
openfl_system_Capabilities.localFileReadDisable = true;
openfl_system_Capabilities.manufacturer = "OpenFL Contributors";
openfl_system_Capabilities.maxLevelIDC = 0;
openfl_system_Capabilities.playerType = "OpenFL";
openfl_system_Capabilities.screenColor = "color";
openfl_system_Capabilities.serverString = "";
openfl_system_Capabilities.supports32BitProcesses = false;
openfl_system_Capabilities.supports64BitProcesses = false;
openfl_system_Capabilities.touchscreenType = 0;
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.FINGER = 0;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.NONE = 1;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.STYLUS = 2;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text_Font.__registeredFonts = [];
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text_TextField.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_text_TextField.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl_text_TextField.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g")];
openfl_text_TextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexHTMLTag = new EReg("<.*?>","g");
openfl_text_TextField.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.GESTURE = 0;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.NONE = 1;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.TOUCH_POINT = 2;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
starling_animation_DelayedCall.sPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_animation_Transitions.LINEAR = "linear";
starling_animation_Transitions.EASE_IN = "easeIn";
starling_animation_Transitions.EASE_OUT = "easeOut";
starling_animation_Transitions.EASE_IN_OUT = "easeInOut";
starling_animation_Transitions.EASE_OUT_IN = "easeOutIn";
starling_animation_Transitions.EASE_IN_BACK = "easeInBack";
starling_animation_Transitions.EASE_OUT_BACK = "easeOutBack";
starling_animation_Transitions.EASE_IN_OUT_BACK = "easeInOutBack";
starling_animation_Transitions.EASE_OUT_IN_BACK = "easeOutInBack";
starling_animation_Transitions.EASE_IN_ELASTIC = "easeInElastic";
starling_animation_Transitions.EASE_OUT_ELASTIC = "easeOutElastic";
starling_animation_Transitions.EASE_IN_OUT_ELASTIC = "easeInOutElastic";
starling_animation_Transitions.EASE_OUT_IN_ELASTIC = "easeOutInElastic";
starling_animation_Transitions.EASE_IN_BOUNCE = "easeInBounce";
starling_animation_Transitions.EASE_OUT_BOUNCE = "easeOutBounce";
starling_animation_Transitions.EASE_IN_OUT_BOUNCE = "easeInOutBounce";
starling_animation_Transitions.EASE_OUT_IN_BOUNCE = "easeOutInBounce";
starling_animation_Tween.HINT_MARKER = "#";
starling_animation_Tween.sTweenPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_core_RenderSupport.RENDER_TARGET_NAME = "Starling.renderTarget";
starling_core_RenderSupport.sPoint = new openfl_geom_Point();
starling_core_RenderSupport.sPoint3D = new openfl_geom_Vector3D();
starling_core_RenderSupport.sClipRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sBufferRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sScissorRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sAssembler = new openfl_utils_AGALMiniAssembler();
starling_core_RenderSupport.sMatrix3D = new openfl_geom_Matrix3D();
starling_core_RenderSupport.sMatrixData = (function($this) {
	var $r;
	var a = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_core_Starling.VERSION = "1.8";
starling_core_Starling.PROGRAM_DATA_NAME = "Starling.programs";
starling_core_Starling.sHandleLostContext = true;
starling_core_Starling.sContextData = new haxe_ds_ObjectMap();
starling_core_Starling.sAll = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_core_StatsDisplay.UPDATE_INTERVAL = 0.5;
starling_display_BlendMode.sBlendFactors = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = [2,9];
		if(__map_reserved.none != null) {
			_g.setReserved("none",value);
		} else {
			_g.h["none"] = value;
		}
	}
	{
		var value1 = [7,5];
		if(__map_reserved.normal != null) {
			_g.setReserved("normal",value1);
		} else {
			_g.h["normal"] = value1;
		}
	}
	{
		var value2 = [7,0];
		if(__map_reserved.add != null) {
			_g.setReserved("add",value2);
		} else {
			_g.h["add"] = value2;
		}
	}
	{
		var value3 = [1,5];
		if(__map_reserved.multiply != null) {
			_g.setReserved("multiply",value3);
		} else {
			_g.h["multiply"] = value3;
		}
	}
	{
		var value4 = [7,2];
		if(__map_reserved.screen != null) {
			_g.setReserved("screen",value4);
		} else {
			_g.h["screen"] = value4;
		}
	}
	{
		var value5 = [9,5];
		if(__map_reserved.erase != null) {
			_g.setReserved("erase",value5);
		} else {
			_g.h["erase"] = value5;
		}
	}
	{
		var value6 = [9,7];
		if(__map_reserved.mask != null) {
			_g.setReserved("mask",value6);
		} else {
			_g.h["mask"] = value6;
		}
	}
	{
		var value7 = [3,0];
		if(__map_reserved.below != null) {
			_g.setReserved("below",value7);
		} else {
			_g.h["below"] = value7;
		}
	}
	var _g1 = new haxe_ds_StringMap();
	{
		var value8 = [2,9];
		if(__map_reserved.none != null) {
			_g1.setReserved("none",value8);
		} else {
			_g1.h["none"] = value8;
		}
	}
	{
		var value9 = [2,5];
		if(__map_reserved.normal != null) {
			_g1.setReserved("normal",value9);
		} else {
			_g1.h["normal"] = value9;
		}
	}
	{
		var value10 = [2,2];
		if(__map_reserved.add != null) {
			_g1.setReserved("add",value10);
		} else {
			_g1.h["add"] = value10;
		}
	}
	{
		var value11 = [1,5];
		if(__map_reserved.multiply != null) {
			_g1.setReserved("multiply",value11);
		} else {
			_g1.h["multiply"] = value11;
		}
	}
	{
		var value12 = [2,6];
		if(__map_reserved.screen != null) {
			_g1.setReserved("screen",value12);
		} else {
			_g1.h["screen"] = value12;
		}
	}
	{
		var value13 = [9,5];
		if(__map_reserved.erase != null) {
			_g1.setReserved("erase",value13);
		} else {
			_g1.h["erase"] = value13;
		}
	}
	{
		var value14 = [9,7];
		if(__map_reserved.mask != null) {
			_g1.setReserved("mask",value14);
		} else {
			_g1.h["mask"] = value14;
		}
	}
	{
		var value15 = [3,0];
		if(__map_reserved.below != null) {
			_g1.setReserved("below",value15);
		} else {
			_g1.h["below"] = value15;
		}
	}
	$r = [_g,_g1];
	return $r;
}(this));
starling_display_BlendMode.AUTO = "auto";
starling_display_BlendMode.NONE = "none";
starling_display_BlendMode.NORMAL = "normal";
starling_display_BlendMode.ADD = "add";
starling_display_BlendMode.MULTIPLY = "multiply";
starling_display_BlendMode.SCREEN = "screen";
starling_display_BlendMode.ERASE = "erase";
starling_display_BlendMode.MASK = "mask";
starling_display_BlendMode.BELOW = "below";
starling_display_QuadBatch.MAX_NUM_QUADS = 16383;
starling_display_QuadBatch.QUAD_PROGRAM_NAME = "QB_q";
starling_display_QuadBatch.sHelperMatrix = new openfl_geom_Matrix();
starling_display_QuadBatch.sRenderAlpha = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_display_QuadBatch.sProgramNameCache = new haxe_ds_IntMap();
starling_display_Sprite3D.E = 0.00001;
starling_display_Sprite3D.sHelperPoint = new openfl_geom_Vector3D();
starling_display_Sprite3D.sHelperPointAlt = new openfl_geom_Vector3D();
starling_display_Sprite3D.sHelperMatrix = new openfl_geom_Matrix3D();
starling_display_Stage.sHelperMatrix = new openfl_geom_Matrix3D();
starling_events_Event.ADDED = "added";
starling_events_Event.ADDED_TO_STAGE = "addedToStage";
starling_events_Event.ENTER_FRAME = "enterFrame";
starling_events_Event.REMOVED = "removed";
starling_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
starling_events_Event.TRIGGERED = "triggered";
starling_events_Event.FLATTEN = "flatten";
starling_events_Event.RESIZE = "resize";
starling_events_Event.COMPLETE = "complete";
starling_events_Event.CONTEXT3D_CREATE = "context3DCreate";
starling_events_Event.RENDER = "render";
starling_events_Event.ROOT_CREATED = "rootCreated";
starling_events_Event.REMOVE_FROM_JUGGLER = "removeFromJuggler";
starling_events_Event.TEXTURES_RESTORED = "texturesRestored";
starling_events_Event.IO_ERROR = "ioError";
starling_events_Event.SECURITY_ERROR = "securityError";
starling_events_Event.PARSE_ERROR = "parseError";
starling_events_Event.FATAL_ERROR = "fatalError";
starling_events_Event.CHANGE = "change";
starling_events_Event.CANCEL = "cancel";
starling_events_Event.SCROLL = "scroll";
starling_events_Event.OPEN = "open";
starling_events_Event.CLOSE = "close";
starling_events_Event.SELECT = "select";
starling_events_Event.READY = "ready";
starling_events_Event.sEventPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_EnterFrameEvent.ENTER_FRAME = "enterFrame";
starling_events_KeyboardEvent.KEY_UP = "keyUp";
starling_events_KeyboardEvent.KEY_DOWN = "keyDown";
starling_events_ResizeEvent.RESIZE = "resize";
starling_events_Touch.sHelperPoint = new openfl_geom_Point();
starling_events_TouchEvent.TOUCH = "touch";
starling_events_TouchEvent.sTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchPhase.HOVER = "hover";
starling_events_TouchPhase.BEGAN = "began";
starling_events_TouchPhase.MOVED = "moved";
starling_events_TouchPhase.STATIONARY = "stationary";
starling_events_TouchPhase.ENDED = "ended";
starling_events_TouchProcessor.sUpdatedTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchProcessor.sHoveringTouchData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchProcessor.sHelperPoint = new openfl_geom_Point();
starling_filters_FragmentFilter.MIN_TEXTURE_SIZE = 64;
starling_filters_FragmentFilter.PMA = true;
starling_filters_FragmentFilter.STD_VERTEX_SHADER = "m44 op, va0, vc0 \n" + "mov v0, va1      \n";
starling_filters_FragmentFilter.STD_FRAGMENT_SHADER = "tex oc, v0, fs0 <2d, clamp, linear, mipnone>";
starling_filters_FragmentFilter.sStageBounds = new openfl_geom_Rectangle();
starling_filters_FragmentFilter.sTransformationMatrix = new openfl_geom_Matrix();
starling_filters_FragmentFilterMode.BELOW = "below";
starling_filters_FragmentFilterMode.REPLACE = "replace";
starling_filters_FragmentFilterMode.ABOVE = "above";
starling_text_BitmapFont.NATIVE_SIZE = -1;
starling_text_BitmapFont.MINI = "mini";
starling_text_BitmapFont.CHAR_SPACE = 32;
starling_text_BitmapFont.CHAR_TAB = 9;
starling_text_BitmapFont.CHAR_NEWLINE = 10;
starling_text_BitmapFont.CHAR_CARRIAGE_RETURN = 13;
starling_text_BitmapFont.sLines = [];
starling_text_CharLocation.sInstancePool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_text_CharLocation.sVectorPool = [];
starling_text_CharLocation.sInstanceLoan = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_text_CharLocation.sVectorLoan = [];
starling_text_MiniBitmapFont.BITMAP_WIDTH = 128;
starling_text_MiniBitmapFont.BITMAP_HEIGHT = 64;
starling_text_MiniBitmapFont.BITMAP_DATA = [2027613533,-881927360,202148514,-2028041698,-88080844,-8114179,2034947,-1092263897,352977282,-1337209332,-1181314416,-2136898414,1468709156,-2026903579,-1515657153,2101025806,-878458241,-79172757,-692798458,1038056207,1932393374,-1112681669,-1208165062,1741291262,2017257123,-899686453,984074419,-1245274149,-308890273,1055013549,1806563255,1754714962,1577746187,1124058786,-406208038,-1812738253,-1378383630,-551901968,866060213,1695195001,-1893385228,-1181619395,-1678445700,1053798161,2093370968,-65941613,560451479,854767518,-1684725974,-15925948,-113394816,-263722323,587139110,1081376765,962217926,783603325,-689440871,-192965380,289204733,-1659827041,-840985601,-807112923,2132197241,-1130192222,-37326968,770238970,144664537,707141570,-1360534225,871272893,512964596,808491899,481894297,-1198984815,-696603140,1710636358,-1390950977,1751040139,596966466,1363963692,465815609,315567311,-4301137,-208944745,179721458,-2073232326,-352742308,1519355876,-1002643514,-361540066,-980767403,-558739948,-448928871,603088884,-1617618069,-1087897969,-739691329,-1231913013,-1230390083,-882923117,693642210,-14453347,762928717,1802215333,-520117622,-73811966,970959395,557220237,2107226136,-785144314,-891682508,-29147277,898597576,991077243,2091615904,-960250408,633599866,-76187187,-2078966920,834870947,2118009742,1362731961,236280636,1274945142,1458729366,797960805,-1005597576,2103717340,-348561293,-1618444407,1624104606,1156993903,-1108796892,-2040468225,1204911924,1314218830,-987880904,-1470691337,-455101617,2073394964,1873329433,1754205930,1528429545,1631106062,-2031694831,-74470249,-772073531,-653590993,707451487,-842470509,1390653868,-1674411503,1027328684,-875283820,-632773593,765701986,-486688164,786403271,-470531459,713234896,-33110897,-823036565,-301474417,1447960461,1398434593,1914230187,-1896324011,-138592832,-435628089,-1074267235,-921718534,-1108936862,1315917060,-1485114815,-286413393,-189355343,1599499652,-781109705,877854499,-96707841,-646407219,-1456931877,-1039373106,-1829388839,-31462095,534904657,-1405705698,1358214576,1069250354,-424956739,-1666070713,-846356418,442343309,1024736866,-279848163,-1044100017,1513359261,-1852877700,1944476762,735490552,426990058,-60861185,1204305707,-963972031,-1896317928,-73919173,1724669255,-493851587,-805638506,-398564363,-598030357,-1457984001,-638216903,-945242784,-484551009,-639969688,-10512193,-2000027733,-87269364,642748805,-1817985657,-1975547398,572956615,-461728356,964924880,2081600351,-722508880,2056247513,1951368808,2133449703,-1511238668,512866577,913279200,1678129016,-806388305,-921014367,-1731970345,-628908371,1664169178,1943591935,750675303,154399903,-1723376406,852654952,-177659530,1971649621,-114771476,1222535348,-11014081,-1414305060,-1577556316,1175907705,1157322027,505963121,-1663426680,-633739640,-703163943,-1670840475,1948662907,-698902193,1147387734,256773959,1173572460,-1933009825,-84091220,-1214786676,-830166086,-473313037,1465302035,-1443781839,-1151701152,-501786882,-926134193,-20296584,-821148188,-807397964,773123355,1618635668,-1724791106,2075248691,1740805534,288646743,1837597401,603556968,-1112430424,673184603,-1206210243,-1397912892,-1102315980,-1409631494,1057233368,1118437241,-112840833,-1184502521,-981775682,-1933980022,735505357,-1302335871,-1934038485,-107132769,279183208,1586420003,1174008423,-231979707,1162167621,1162167621,1162167621,1162167621,1174119799,787274608];
starling_text_MiniBitmapFont.XML_DATA = Xml.createElement("\n      <font>\n      <info face=\"mini\" size=\"8\" bold=\"0\" italic=\"0\" smooth=\"0\"/>\n      <common lineHeight=\"8\" base=\"7\" scaleW=\"128\" scaleH=\"64\" pages=\"1\" packed=\"0\"/>\n      <chars count=\"191\">\n        <char id=\"195\" x=\"1\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"209\" x=\"7\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"213\" x=\"13\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"253\" x=\"19\" y=\"1\" width=\"4\" height=\"9\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"255\" x=\"24\" y=\"1\" width=\"4\" height=\"9\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"192\" x=\"29\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"193\" x=\"35\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"194\" x=\"41\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"197\" x=\"47\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"200\" x=\"53\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"201\" x=\"59\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"202\" x=\"65\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"210\" x=\"71\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"211\" x=\"77\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"212\" x=\"83\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"217\" x=\"89\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"218\" x=\"95\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"219\" x=\"101\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"221\" x=\"107\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"206\" x=\"113\" y=\"1\" width=\"3\" height=\"8\" xoffset=\"-1\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"204\" x=\"117\" y=\"1\" width=\"2\" height=\"8\" xoffset=\"-1\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"205\" x=\"120\" y=\"1\" width=\"2\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"36\"  x=\"1\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"6\"/>\n        <char id=\"196\" x=\"7\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"199\" x=\"13\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"203\" x=\"19\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"214\" x=\"25\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"220\" x=\"31\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"224\" x=\"37\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"225\" x=\"42\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"226\" x=\"47\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"227\" x=\"52\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"232\" x=\"57\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"233\" x=\"62\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"234\" x=\"67\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"235\" x=\"72\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"241\" x=\"77\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"242\" x=\"82\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"243\" x=\"87\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"244\" x=\"92\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"245\" x=\"97\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"249\" x=\"102\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"250\" x=\"107\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"251\" x=\"112\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"254\" x=\"117\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"123\" x=\"122\" y=\"11\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"125\" x=\"1\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"167\" x=\"5\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"207\" x=\"9\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"-1\" yoffset=\"0\" xadvance=\"2\"/>\n        <char id=\"106\" x=\"13\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"40\" x=\"16\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"41\" x=\"19\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"91\" x=\"22\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"93\" x=\"25\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"124\" x=\"28\" y=\"19\" width=\"1\" height=\"7\" xoffset=\"1\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"81\" x=\"30\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"163\" x=\"36\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"6\"/>\n        <char id=\"177\" x=\"42\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"181\" x=\"48\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"103\" x=\"54\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"112\" x=\"59\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"113\" x=\"64\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"121\" x=\"69\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"162\" x=\"74\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"228\" x=\"79\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"229\" x=\"84\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"231\" x=\"89\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"240\" x=\"94\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"246\" x=\"99\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"252\" x=\"104\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"238\" x=\"109\" y=\"19\" width=\"3\" height=\"6\" xoffset=\"-1\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"59\" x=\"113\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"236\" x=\"116\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"-1\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"237\" x=\"119\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"198\" x=\"1\" y=\"27\" width=\"9\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"10\"/>\n        <char id=\"190\" x=\"11\" y=\"27\" width=\"8\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"9\"/>\n        <char id=\"87\" x=\"20\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"188\" x=\"28\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"189\" x=\"36\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"38\" x=\"44\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"164\" x=\"51\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"208\" x=\"58\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"8364\" x=\"65\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"65\" x=\"72\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"66\" x=\"78\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"67\" x=\"84\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"68\" x=\"90\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"69\" x=\"96\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"70\" x=\"102\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"71\" x=\"108\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"72\" x=\"114\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"75\" x=\"120\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"77\" x=\"1\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"78\" x=\"7\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"79\" x=\"13\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"80\" x=\"19\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"82\" x=\"25\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"83\" x=\"31\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"84\" x=\"37\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"85\" x=\"43\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"86\" x=\"49\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"88\" x=\"55\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"89\" x=\"61\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"90\" x=\"67\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"50\" x=\"73\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"51\" x=\"79\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"52\" x=\"85\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"53\" x=\"91\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"54\" x=\"97\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"56\" x=\"103\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"57\" x=\"109\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"48\" x=\"115\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"47\" x=\"121\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"64\" x=\"1\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"92\" x=\"7\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"37\" x=\"13\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"43\" x=\"19\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"35\" x=\"25\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"42\" x=\"31\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"165\" x=\"37\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"169\" x=\"43\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"174\" x=\"49\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"182\" x=\"55\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"216\" x=\"61\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"247\" x=\"67\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"74\" x=\"73\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"76\" x=\"78\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"98\" x=\"83\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"100\" x=\"88\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"104\" x=\"93\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"107\" x=\"98\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"55\" x=\"103\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"63\" x=\"108\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"191\" x=\"113\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"222\" x=\"118\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"223\" x=\"123\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"116\" x=\"1\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"60\" x=\"5\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"62\" x=\"9\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"170\" x=\"13\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"186\" x=\"17\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"239\" x=\"21\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"-1\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"102\" x=\"25\" y=\"45\" width=\"2\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"49\" x=\"28\" y=\"45\" width=\"2\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"73\" x=\"31\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"105\" x=\"33\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"108\" x=\"35\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"33\" x=\"37\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"1\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"161\" x=\"39\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"166\" x=\"41\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"109\" x=\"43\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"119\" x=\"51\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"230\" x=\"59\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"97\" x=\"67\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"99\" x=\"72\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"101\" x=\"77\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"110\" x=\"82\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"111\" x=\"87\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"115\" x=\"92\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"117\" x=\"97\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"118\" x=\"102\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"120\" x=\"107\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"122\" x=\"112\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"215\" x=\"117\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"248\" x=\"122\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"114\" x=\"1\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"178\" x=\"5\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"179\" x=\"9\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"185\" x=\"13\" y=\"51\" width=\"1\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"61\" x=\"15\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"171\" x=\"21\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"172\" x=\"27\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"4\" xadvance=\"6\"/>\n        <char id=\"187\" x=\"33\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"176\" x=\"39\" y=\"51\" width=\"3\" height=\"3\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"44\" x=\"43\" y=\"51\" width=\"2\" height=\"3\" xoffset=\"0\" yoffset=\"6\" xadvance=\"3\"/>\n        <char id=\"58\" x=\"46\" y=\"51\" width=\"1\" height=\"3\" xoffset=\"1\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"94\" x=\"48\" y=\"51\" width=\"4\" height=\"2\" xoffset=\"-1\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"126\" x=\"53\" y=\"51\" width=\"4\" height=\"2\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"34\" x=\"58\" y=\"51\" width=\"3\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"96\" x=\"62\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"180\" x=\"65\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"184\" x=\"68\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"7\" xadvance=\"3\"/>\n        <char id=\"39\" x=\"71\" y=\"51\" width=\"1\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"95\" x=\"73\" y=\"51\" width=\"5\" height=\"1\" xoffset=\"0\" yoffset=\"7\" xadvance=\"6\"/>\n        <char id=\"45\" x=\"79\" y=\"51\" width=\"4\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"5\"/>\n        <char id=\"173\" x=\"84\" y=\"51\" width=\"4\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"5\"/>\n        <char id=\"168\" x=\"89\" y=\"51\" width=\"3\" height=\"1\" xoffset=\"1\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"175\" x=\"93\" y=\"51\" width=\"3\" height=\"1\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"46\" x=\"97\" y=\"51\" width=\"1\" height=\"1\" xoffset=\"0\" yoffset=\"6\" xadvance=\"2\"/>\n        <char id=\"183\" x=\"99\" y=\"51\" width=\"1\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"2\"/>\n        <char id=\"32\" x=\"6\" y=\"56\" width=\"0\" height=\"0\" xoffset=\"0\" yoffset=\"127\" xadvance=\"3\"/>\n      </chars>\n    </font>\n    ");
starling_text_TextField.BITMAP_FONT_DATA_NAME = "starling.display.TextField.BitmapFonts";
starling_text_TextField.sDefaultTextureFormat = 1;
starling_text_TextField.sHelperMatrix = new openfl_geom_Matrix();
starling_text_TextField.sNativeTextField = new openfl_text_TextField();
starling_text_TextField.sStringCache = new haxe_ds_StringMap();
starling_text_TextFieldAutoSize.NONE = "none";
starling_text_TextFieldAutoSize.HORIZONTAL = "horizontal";
starling_text_TextFieldAutoSize.VERTICAL = "vertical";
starling_text_TextFieldAutoSize.BOTH_DIRECTIONS = "bothDirections";
starling_textures_ConcreteTexture.TEXTURE_READY = "textureReady";
starling_textures_ConcreteTexture.sOrigin = new openfl_geom_Point();
starling_textures_SubTexture.sTexCoords = new openfl_geom_Point();
starling_textures_SubTexture.sMatrix = new openfl_geom_Matrix();
starling_textures_RenderTexture.CONTEXT_POT_SUPPORT_KEY = "RenderTexture.supportsNonPotDimensions";
starling_textures_RenderTexture.PMA = true;
starling_textures_RenderTexture.sClipRect = new openfl_geom_Rectangle();
starling_textures_RenderTexture.optimizePersistentBuffers = false;
starling_textures_TextureAtlas.sNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_textures_TextureSmoothing.NONE = "none";
starling_textures_TextureSmoothing.BILINEAR = "bilinear";
starling_textures_TextureSmoothing.TRILINEAR = "trilinear";
starling_utils_AssetManager.HTTP_RESPONSE_STATUS = "httpResponseStatus";
starling_utils_AssetManager.sNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_utils_AssetManager.NAME_REGEX = new EReg("([^\\?/\\\\]+?)(?:\\.([\\w\\-]+))?(?:\\?.*)?$","");
starling_utils_Color.WHITE = 16777215;
starling_utils_Color.SILVER = 12632256;
starling_utils_Color.GRAY = 8421504;
starling_utils_Color.BLACK = 0;
starling_utils_Color.RED = 16711680;
starling_utils_Color.MAROON = 8388608;
starling_utils_Color.YELLOW = 16776960;
starling_utils_Color.OLIVE = 8421376;
starling_utils_Color.LIME = 65280;
starling_utils_Color.GREEN = 32768;
starling_utils_Color.AQUA = 65535;
starling_utils_Color.TEAL = 32896;
starling_utils_Color.BLUE = 255;
starling_utils_Color.NAVY = 128;
starling_utils_Color.FUCHSIA = 16711935;
starling_utils_Color.PURPLE = 8388736;
starling_utils_HAlign.LEFT = "left";
starling_utils_HAlign.CENTER = "center";
starling_utils_HAlign.RIGHT = "right";
starling_utils_MathUtil.TWO_PI = Math.PI * 2.0;
starling_utils_MatrixUtil.sRawData = (function($this) {
	var $r;
	var a = [1.0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_utils_MatrixUtil.sRawData2 = (function($this) {
	var $r;
	var a = [0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_utils_Max.MAX_VALUE = 1.79e+308;
starling_utils_Max.MIN_VALUE = 5e-324;
starling_utils_Max.INT_MAX_VALUE = 2147483647;
starling_utils_Max.INT_MIN_VALUE = -2147483647;
starling_utils_Max.UINT_MAX_VALUE = -1;
starling_utils_RectangleUtil.sHelperPoint = new openfl_geom_Point();
starling_utils_RectangleUtil.sPositions = [new openfl_geom_Point(0,0),new openfl_geom_Point(1,0),new openfl_geom_Point(0,1),new openfl_geom_Point(1,1)];
starling_utils_RectangleUtil.MAX_VALUE = 1.79e+308;
starling_utils_RectangleUtil.MIN_VALUE = 5e-324;
starling_utils_ScaleMode.NONE = "none";
starling_utils_ScaleMode.NO_BORDER = "noBorder";
starling_utils_ScaleMode.SHOW_ALL = "showAll";
starling_utils_SystemUtil.sInitialized = false;
starling_utils_SystemUtil.sApplicationActive = true;
starling_utils_SystemUtil.sWaitingCalls = [];
starling_utils_SystemUtil.sSupportsDepthAndStencil = true;
starling_utils_VAlign.TOP = "top";
starling_utils_VAlign.CENTER = "center";
starling_utils_VAlign.BOTTOM = "bottom";
terrylib_Astar.openlist = [];
terrylib_Astar.parentsquare = [];
terrylib_Astar.fcost = [];
terrylib_Astar.gcost = [];
terrylib_Astar.closedlist = [];
terrylib_Astar.pathx = [];
terrylib_Astar.pathy = [];
terrylib_Astar.contents = [];
terrylib_Astar.vmult = [];
terrylib_Flag.flags = [];
terrylib_Flag.flagindex = new haxe_ds_StringMap();
terrylib_Flag.numflag = 0;
terrylib_Help.NODIRECTION = -1;
terrylib_Help.UP = 0;
terrylib_Help.DOWN = 1;
terrylib_Help.LEFT = 2;
terrylib_Help.RIGHT = 3;
terrylib_Help.letters = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
terrylib_Help.sine = [];
terrylib_Help.cosine = [];
terrylib_Help.bresx = [];
terrylib_Help.bresy = [];
terrylib_Help.bresswap = [];
terrylib_Lerp.lerptimer = [];
terrylib_Lerp.lerptimermax = [];
terrylib_Lerp.timerindex = new haxe_ds_StringMap();
terrylib_Lerp.completelist = [];
terrylib_Obj.BLOCK = 0;
terrylib_Obj.TRIGGER = 1;
terrylib_Obj.DAMAGE = 2;
terrylib_Obj.DOOR = 3;
terrylib_Obj.entities = [];
terrylib_Obj.blocks = [];
terrylib_Obj.templates = [];
terrylib_Obj.entindex = new haxe_ds_StringMap();
terrylib_Obj.particles = [];
terrylib_Obj.initentities = [];
terrylib_Rand.seed = 0;
terrylib_Rand.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
terrylib_Textbox.tb = [];
terrylib_Textbox.reddotx = 0;
terrylib_Textbox.reddoty = 0;
terrylib_Textbox.talktimer = 0;
terrylib_Textbox.col = 0;
terrylib_Textbox.STATE_READY = 0;
terrylib_Textbox.STATE_BOXAPPEARING = 1;
terrylib_Textbox.STATE_TEXTAPPEARING = 2;
terrylib_Textbox.STATE_VISABLE = 3;
terrylib_Textbox.STATE_DISAPPEARING = 4;
terrylib_Textbox.STATE_DELETING = 5;
terrylib_Textbox.TEXTBORDER = 0;
terrylib_Textbox.TEXTBACKING = 1;
terrylib_Textbox.TEXTHIGHLIGHT = 2;
terrylib_World.collisionarray = [];
terrylib_World.contents = [];
terrylib_World.heatmap = [];
terrylib_World.highlight = [];
terrylib_World.lighting = [];
terrylib_World.laser = [];
terrylib_World.fog = [];
terrylib_World.fire = [];
terrylib_World.vmult = [];
terrylib_World.worldmap = [];
terrylib_World.worldmapfog = [];
terrylib_World.worldmapseed = [];
terrylib_World.mapchanged = true;
terrylib_World.filename = "";
terrylib_World.stage = "";
terrylib_World.level = "";
terrylib_util_Easing.PI_M2 = Math.PI * 2;
terrylib_util_Easing.PI_D2 = Math.PI / 2;
terrylib_util_Fileaccess.rawdirectorylist = [];
terrylib_util_Fileaccess.directorylisting = [];
terrylib_util_Fileaccess.rawsubdirectorylist = [];
terrylib_util_Fileaccess.subdirectorylisting = [];
terrylib_util_Fileaccess.folderoffset = "../../../../";
terrylib_util_Tmap.contents = [];
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
